<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Hexo</title>
  
  
  <link href="http://example.com/atom.xml" rel="self"/>
  
  <link href="http://example.com/"/>
  <updated>2023-07-13T05:43:40.607Z</updated>
  <id>http://example.com/</id>
  
  <author>
    <name>John Doe</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>静态站点生成器</title>
    <link href="http://example.com/2023/07/12/%E9%9D%99%E6%80%81%E7%AB%99%E7%82%B9%E7%94%9F%E6%88%90%E5%99%A8/"/>
    <id>http://example.com/2023/07/12/%E9%9D%99%E6%80%81%E7%AB%99%E7%82%B9%E7%94%9F%E6%88%90%E5%99%A8/</id>
    <published>2023-07-12T13:09:38.000Z</published>
    <updated>2023-07-13T05:43:40.607Z</updated>
    
    <content type="html"><![CDATA[<p>静态站点生成器（Static Site Generators，简称SSG）是一种软件工具，可以快速轻松地生成静态站点，它采用模板、组件和内容源，然后生成网站所需的HTML、CSS 和 JavaScript文件，它已经改变或正在改变我们构建网站的方式。</p><p>静态站点生成器使网站加载速度更快，因为它会在用户请求之前预先构建网站所需的必要文件。它非常适合创建营销、文档和博客等网站。但不适用于想要显示经常变化的实时、动态数据的情况。</p><p>目前，有超过 350多个静态站点生成器可供选择(https://jamstack.org/generators/)，但在选择静态站点生成器时要考虑一些因素：</p><ul><li><strong>项目性质</strong></li></ul><p>我们要根据构建的项目类型选择合适的站点生成工具。例如Hugo是博客和文档的绝佳选择，而 Gatsby、Nuxt.js 和 Next.js是营销网站的绝佳选择。</p><ul><li><strong>使用方便</strong></li></ul><p>很多情况下，几乎没有时间进行深入学习，所以在选择静态站点生成器时，更多会考虑以下问题：</p><ul><li><p>SSG是用熟悉的技术构建的，还是需要学习一种新的编程语言才能正确使用它？</p></li><li><p>文档是否详细？</p></li><li><p>是否提供初学者教程和其他学习材料来帮助学习过程？</p></li><li><p>是否可以使用模板和主题来加快构建过程？</p></li><li><p><strong>开发者社区</strong></p></li></ul><p>确定 SSG是否是一个好的选择的一个好方法就是去研究它的开发者社区。开发者往往会聚集在好的工具和软件周围，因此如果它经过充分审查，可能值得考虑。开发者社区对于获得支持和帮助也很重要，遇到问题时，可以更快的得到解决。</p><ul><li><strong>成熟度和采用率</strong></li></ul><p>决定使用哪种 SSG的一个好方法是查看业内其他人使用的工具以及这些工具的成熟程度。Next.js被广泛采用的一个原因是它是一个成熟的框架，具有很多强大的功能并且有Vercel 的支持。这些因素促成了它在开发中被广泛采用。</p><p>下面是一些常用的静态站点生成器：</p><p>Next.js、Jekyll、Hugo、Hexo、GitBook、Gatsby、MkDocs、VuePress、Astro等。</p><p>参考链接：</p><p>https://www.51cto.com/article/748558.html</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;静态站点生成器（Static Site Generators，简称
SSG）是一种软件工具，可以快速轻松地生成静态站点，它采用模板、组件和内容源，然后生成网站所需的
HTML、CSS 和 JavaScript
文件，它已经改变或正在改变我们构建网站的方式。&lt;/p&gt;
</summary>
      
    
    
    
    <category term="其它" scheme="http://example.com/categories/%E5%85%B6%E5%AE%83/"/>
    
    
  </entry>
  
  <entry>
    <title>QPainter基本图形绘制用法</title>
    <link href="http://example.com/2023/07/07/QPainter%E5%9F%BA%E6%9C%AC%E5%9B%BE%E5%BD%A2%E7%BB%98%E5%88%B6%E7%94%A8%E6%B3%95/"/>
    <id>http://example.com/2023/07/07/QPainter%E5%9F%BA%E6%9C%AC%E5%9B%BE%E5%BD%A2%E7%BB%98%E5%88%B6%E7%94%A8%E6%B3%95/</id>
    <published>2023-07-07T10:22:02.000Z</published>
    <updated>2023-07-07T08:50:25.696Z</updated>
    
    <content type="html"><![CDATA[<h2 id="qpainter概念">QPainter概念</h2><p>QPainter是用于执行绘图操作的类，它可以绘制简单的点、线，也可以绘制饼图、文本、图像等复杂的形状。</p><p>QPainter 一般在绘图事件 <strong>paintEvent()</strong>中进行绘制，当窗口需要改变或者重新绘制时，当使用<strong>repaint()</strong>和 <strong>update()</strong>后，就会自动调用成员函数 <strong>paintEvent()</strong>。</p><p>QPainter 的用法，简单的几个步骤:</p><ul><li><p>1.构造一个 <strong>QPainter</strong> 对象</p></li><li><p>2.设置画笔，画刷等</p></li><li><p>3.绘制图形</p></li><li><p>4.销毁绘图工具</p></li></ul><h2 id="qpainter主要属性">Qpainter主要属性</h2><ul><li><strong>font()</strong>用于绘制文本的字体。</li><li><strong>brush()</strong>定义用于填充形状的颜色或图案。</li><li><strong>pen()</strong>定义用于绘制的线条或边框，也可定义线条颜色。</li><li><strong>viewport()、window()、worldTransform()</strong>构成了painter的坐标转换系统。</li></ul><h2 id="qpainter绘图">Qpainter绘图</h2><p>QPainter提供了绘制大多数基本图形的函数，如drawPoint()、drawLine()、drawRect()等，所有这些函数都有多个整数和浮点版本（推荐使用浮点数版本）。下面对常用的绘图功能进行说明：</p><ul><li><strong>绘制点</strong></li></ul><div class="code-wrapper"><pre><code class="hljs c"><span class="hljs-type">void</span> <span class="hljs-title function_">Widget::paintEvent</span><span class="hljs-params">(QPaintEvent *event)</span>&#123;    Q_UNUSED(event); <span class="hljs-comment">//不使用event事件</span>    QPainter <span class="hljs-title function_">painter</span><span class="hljs-params">(this)</span>;    painter.drawPoint(<span class="hljs-number">10</span>, <span class="hljs-number">10</span>);    painter.drawPoint(QPoint(<span class="hljs-number">20</span>, <span class="hljs-number">20</span>));    painter.drawPoint(QPointF(<span class="hljs-number">30</span>, <span class="hljs-number">30</span>));    QPoint points[<span class="hljs-number">3</span>] = &#123;QPoint(<span class="hljs-number">50</span>,<span class="hljs-number">50</span>),QPoint(<span class="hljs-number">60</span>,<span class="hljs-number">60</span>),QPoint(<span class="hljs-number">70</span>,<span class="hljs-number">70</span>)&#125;;    painter.drawPoints(points, <span class="hljs-number">3</span>);&#125;</code></pre></div><figure><imgsrc="https://gitee.com/kayoungzhang/picgo_res/raw/master/img/image-20230707150523540.png"alt="image-20230707150523540" /><figcaption aria-hidden="true">image-20230707150523540</figcaption></figure><ul><li><strong>绘制线</strong></li></ul><div class="code-wrapper"><pre><code class="hljs c"><span class="hljs-type">void</span> <span class="hljs-title function_">Widget::paintEvent</span><span class="hljs-params">(QPaintEvent *event)</span>&#123;    Q_UNUSED(event); <span class="hljs-comment">//不使用event事件</span>        QPainter <span class="hljs-title function_">painter</span><span class="hljs-params">(this)</span>;    painter.setPen(QColor(Qt::red));<span class="hljs-comment">//设置画笔颜色</span>        QLine <span class="hljs-title function_">line</span><span class="hljs-params">(<span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">100</span>, <span class="hljs-number">100</span>)</span>;    painter.drawLine(line);    painter.drawLine(<span class="hljs-number">0</span>,<span class="hljs-number">100</span>, <span class="hljs-number">100</span>, <span class="hljs-number">0</span>);    painter.drawLine(QPoint(<span class="hljs-number">50</span>, <span class="hljs-number">0</span>), QPoint(<span class="hljs-number">50</span>, <span class="hljs-number">100</span>));    QVector&lt;QLine&gt; vectorLine;    vectorLine &lt;&lt; QLine(<span class="hljs-number">10</span>, <span class="hljs-number">0</span>, <span class="hljs-number">10</span>, <span class="hljs-number">100</span>);    vectorLine &lt;&lt; QLine(<span class="hljs-number">30</span>, <span class="hljs-number">0</span>, <span class="hljs-number">30</span>, <span class="hljs-number">100</span>);    vectorLine &lt;&lt; QLine(<span class="hljs-number">50</span>, <span class="hljs-number">0</span>, <span class="hljs-number">50</span>, <span class="hljs-number">100</span>);    vectorLine &lt;&lt; QLine(<span class="hljs-number">70</span>, <span class="hljs-number">0</span>, <span class="hljs-number">70</span>, <span class="hljs-number">100</span>);    vectorLine &lt;&lt; QLine(<span class="hljs-number">90</span>, <span class="hljs-number">0</span>, <span class="hljs-number">90</span>, <span class="hljs-number">100</span>);    painter.drawLines(vectorLine);&#125;</code></pre></div><figure><imgsrc="https://gitee.com/kayoungzhang/picgo_res/raw/master/img/image-20230707151808304.png"alt="image-20230707151808304" /><figcaption aria-hidden="true">image-20230707151808304</figcaption></figure><ul><li><strong>绘制矩形</strong></li></ul><div class="code-wrapper"><pre><code class="hljs c"><span class="hljs-type">void</span> <span class="hljs-title function_">Widget::paintEvent</span><span class="hljs-params">(QPaintEvent *event)</span>&#123;    Q_UNUSED(event); <span class="hljs-comment">//不使用event事件</span>    QPainter <span class="hljs-title function_">painter</span><span class="hljs-params">(this)</span>;    painter.setPen(QColor(<span class="hljs-number">10</span>,<span class="hljs-number">60</span>,<span class="hljs-number">200</span>));<span class="hljs-comment">//设置画笔颜色</span>    painter.setBrush(QColor(<span class="hljs-number">200</span>, <span class="hljs-number">100</span>, <span class="hljs-number">100</span>));<span class="hljs-comment">//设置画刷颜色</span>    painter.drawRect(<span class="hljs-number">50</span>, <span class="hljs-number">50</span>, <span class="hljs-number">150</span>, <span class="hljs-number">150</span>);    QRect <span class="hljs-title function_">rect</span><span class="hljs-params">(QPoint(<span class="hljs-number">160</span>, <span class="hljs-number">160</span>),QPoint(<span class="hljs-number">220</span>,<span class="hljs-number">220</span>))</span>;    painter.drawRect(rect);&#125;</code></pre></div><p><img src="https://gitee.com/kayoungzhang/picgo_res/raw/master/img/image-20230707153153942.png" alt="image-20230707153153942" style="zoom:67%;" /></p><ul><li><strong>绘制圆弧</strong></li></ul><p>0°在时钟三点的位置，圆弧是逆时针转动，起始角度和跨度角度都必须是度数的1/16，如：整个圆的角度就是**16*360**.</p><p><img src="https://gitee.com/kayoungzhang/picgo_res/raw/master/img/20230707155314.png" alt="20230707155314" style="zoom: 67%;" /></p><div class="code-wrapper"><pre><code class="hljs c"><span class="hljs-type">void</span> <span class="hljs-title function_">Widget::paintEvent</span><span class="hljs-params">(QPaintEvent *event)</span>&#123;    Q_UNUSED(event); <span class="hljs-comment">//不使用event事件</span>    QPainter <span class="hljs-title function_">painter</span><span class="hljs-params">(this)</span>;    QRectF <span class="hljs-title function_">rectangle</span><span class="hljs-params">(<span class="hljs-number">50.0</span>, <span class="hljs-number">50.0</span>, <span class="hljs-number">60.0</span>, <span class="hljs-number">60.0</span>)</span>;    <span class="hljs-type">int</span> startAngle = <span class="hljs-number">30</span> * <span class="hljs-number">16</span>;    <span class="hljs-type">int</span> spanAngle = <span class="hljs-number">130</span> * <span class="hljs-number">16</span>;    painter.drawArc(rectangle, startAngle, spanAngle);    painter.setPen(QPen(Qt::blue,<span class="hljs-number">3</span>,Qt::DotLine));    painter.drawRect(rectangle);&#125;</code></pre></div><p><img src="https://gitee.com/kayoungzhang/picgo_res/raw/master/img/image-20230707155800251.png" alt="image-20230707155800251" style="zoom:80%;" /></p><ul><li><strong>绘制椭圆</strong></li></ul><div class="code-wrapper"><pre><code class="hljs c"><span class="hljs-type">void</span> <span class="hljs-title function_">Widget::paintEvent</span><span class="hljs-params">(QPaintEvent *event)</span>&#123;    Q_UNUSED(event);    QPainter <span class="hljs-title function_">painter</span><span class="hljs-params">(this)</span>;    painter.setRenderHint(QPainter::Antialiasing, <span class="hljs-literal">true</span>);<span class="hljs-comment">//抗锯齿</span>    painter.drawEllipse(QPointF(<span class="hljs-number">120</span>, <span class="hljs-number">60</span>), <span class="hljs-number">50</span>, <span class="hljs-number">20</span>);    painter.setBrush(QColor(<span class="hljs-number">255</span>, <span class="hljs-number">160</span>, <span class="hljs-number">90</span>)); <span class="hljs-comment">//设置画刷颜色</span>    painter.drawEllipse(QPointF(<span class="hljs-number">120</span>, <span class="hljs-number">140</span>), <span class="hljs-number">40</span>, <span class="hljs-number">40</span>); <span class="hljs-comment">//绘制圆</span>&#125;</code></pre></div><p><img src="https://gitee.com/kayoungzhang/picgo_res/raw/master/img/image-20230707161014066.png" alt="image-20230707161014066" style="zoom:67%;" /></p><ul><li><strong>绘制多边形</strong></li></ul><div class="code-wrapper"><pre><code class="hljs c"><span class="hljs-type">void</span> <span class="hljs-title function_">Widget::paintEvent</span><span class="hljs-params">(QPaintEvent *event)</span>&#123;    Q_UNUSED(event);    QPainter <span class="hljs-title function_">painter</span><span class="hljs-params">(this)</span>;    painter.setRenderHint(QPainter::Antialiasing, <span class="hljs-literal">true</span>);<span class="hljs-comment">//抗锯齿</span>    QPointF points[<span class="hljs-number">4</span>] = &#123;QPointF(<span class="hljs-number">30</span>, <span class="hljs-number">40</span>), QPointF(<span class="hljs-number">60</span>, <span class="hljs-number">150</span>), QPointF(<span class="hljs-number">150</span>, <span class="hljs-number">160</span>), QPointF(<span class="hljs-number">220</span>, <span class="hljs-number">100</span>)&#125;;    painter.drawPolygon(points, <span class="hljs-number">4</span>);&#125;</code></pre></div><p><img src="https://gitee.com/kayoungzhang/picgo_res/raw/master/img/image-20230707161401036.png" alt="image-20230707161401036" style="zoom:67%;" /></p><ul><li><strong>绘制文本</strong></li></ul><div class="code-wrapper"><pre><code class="hljs c"><span class="hljs-type">void</span> <span class="hljs-title function_">Widget::paintEvent</span><span class="hljs-params">(QPaintEvent *event)</span>&#123;    Q_UNUSED(event);    QPainter <span class="hljs-title function_">painter</span><span class="hljs-params">(this)</span>;    painter.setPen(QColor(<span class="hljs-number">0</span>, <span class="hljs-number">160</span>, <span class="hljs-number">230</span>));<span class="hljs-comment">//设置画笔颜色</span>    QFont font;<span class="hljs-comment">//设置字体属性</span>    font.setFamily(<span class="hljs-string">&quot;Microsoft YaHei&quot;</span>);<span class="hljs-comment">//字体样式</span>    font.setPointSize(<span class="hljs-number">50</span>);<span class="hljs-comment">//字体点大小</span>    font.setItalic(<span class="hljs-literal">true</span>);<span class="hljs-comment">//字体斜体</span>    painter.setFont(font);    painter.drawText(rect(), Qt::AlignCenter, <span class="hljs-string">&quot;QPainter&quot;</span>);<span class="hljs-comment">//绘制文本</span>&#125;</code></pre></div><p><img src="https://gitee.com/kayoungzhang/picgo_res/raw/master/img/image-20230707162043411.png" alt="image-20230707162043411" style="zoom:67%;" /></p><ul><li><strong>绘制图像</strong></li></ul><p>绘制图像函数有<strong>drawPixmap()、drawImage()</strong>，drawPixmap在屏幕设备上更快，drawImage()在QPrinter或其他设备上可能更快。</p><div class="code-wrapper"><pre><code class="hljs c"><span class="hljs-type">void</span> <span class="hljs-title function_">Widget::paintEvent</span><span class="hljs-params">(QPaintEvent *event)</span>&#123;    Q_UNUSED(event);    QPainter <span class="hljs-title function_">painter</span><span class="hljs-params">(this)</span>;    QPixmap pixmap;    pixmap.load(<span class="hljs-string">&quot;:/pic/a.png&quot;</span>);    painter.drawPixmap(<span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">150</span>, <span class="hljs-number">150</span>, pixmap);    QImage image;    image.load(<span class="hljs-string">&quot;:/pic/b.png&quot;</span>);    painter.drawImage(<span class="hljs-number">160</span>, <span class="hljs-number">0</span>, image);&#125;</code></pre></div><p><img src="https://gitee.com/kayoungzhang/picgo_res/raw/master/img/image-20230707163819634.png" alt="image-20230707163819634" style="zoom:67%;" /></p><p>工程文件：<ahref="https://gitee.com/kayoungzhang/my_codehub/raw/master/Qt/painter.zip">painter</a></p><p>参考链接：</p><p>http://t.csdn.cn/Q72tA</p><p>http://t.csdn.cn/acIsw</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;qpainter概念&quot;&gt;QPainter概念&lt;/h2&gt;
&lt;p&gt;QPainter
是用于执行绘图操作的类，它可以绘制简单的点、线，也可以绘制饼图、文本、图像等复杂的形状。&lt;/p&gt;
&lt;p&gt;QPainter 一般在绘图事件 &lt;strong&gt;paintEvent()</summary>
      
    
    
    
    <category term="Qt" scheme="http://example.com/categories/Qt/"/>
    
    
    <category term="Qt" scheme="http://example.com/tags/Qt/"/>
    
  </entry>
  
  <entry>
    <title>算法中的时间和空间复杂度</title>
    <link href="http://example.com/2023/07/07/%E7%AE%97%E6%B3%95%E4%B8%AD%E7%9A%84%E6%97%B6%E9%97%B4%E5%92%8C%E7%A9%BA%E9%97%B4%E5%A4%8D%E6%9D%82%E5%BA%A6/"/>
    <id>http://example.com/2023/07/07/%E7%AE%97%E6%B3%95%E4%B8%AD%E7%9A%84%E6%97%B6%E9%97%B4%E5%92%8C%E7%A9%BA%E9%97%B4%E5%A4%8D%E6%9D%82%E5%BA%A6/</id>
    <published>2023-07-07T01:26:35.000Z</published>
    <updated>2023-07-07T05:17:39.675Z</updated>
    
    <content type="html"><![CDATA[<h2 id="算法简介">算法简介</h2><p>所谓算法（Algorithm），即解决问题的方法。同一个问题，使用不同的算法，虽然得到的结果相同，但耗费的时间和资源肯定有所差异。</p><p><strong>注意</strong>，程序和算法是完全不同的概念。算法是解决某个问题的想法、思路；而程序是在根据算法编写出来的真正可以运行的代码。例如，要依次输出一维数组中的数据元素的值，首先想到的是使用循环结构，在这个算法的基础上，我们才开始编写程序。</p><p>程序的运行效率具体可以从 2 个方面衡量，分别为：</p><ul><li>程序的运行时间。（时间维度）</li><li>程序运行所需内存空间的大小。（空间维度）</li></ul><p>程序运行时间越短，运行期间占用的内存越少，该程序运行效率就越高，这样算法也就更好。衡量一个算法所编写出程序的运行效率在数据结构中，用<strong>时间复杂度</strong>来衡量程序运行时间的多少；用<strong>空间复杂度</strong>来衡量程序运行所需内存空间的大小。</p><h2 id="算法中复杂度的表示方法">算法中复杂度的表示方法</h2><p>在数据结构中，每条语句的执行次数，被称为该语句的频度，整段代码的总执行次数，为整段代码的频度。所以算法复杂度的一般通用表示方法是：「<strong>大O符号表示法</strong> 」，即<strong>O(频度)</strong>。大O符号表示法是一种算法复杂度的相对表示方式。</p><h2 id="时间复杂度">时间复杂度</h2><h3 id="时间复杂度概念">时间复杂度概念</h3><p>一个算法所编程序运行时间的多少，并不是在计算机上运行所消耗的时间来度量的，而是根据合理方法得到的预估值。那么，如何预估一个算法所编程序的运行时间呢？就是计算程序中每行代码的执行次数，然后用总的执行次数间接表示程序的运行时间，即：</p><p><strong>T(n) = O(f(n))</strong></p><p>其中：<strong>T(n)</strong>表示程序执行的时间；<strong>f(n)</strong>表示每行代码执行次数之和；而 <strong>O</strong> 表示 T(n) 与 f(n)成正比关系，这个公式的全称是：<strong>算法的渐进时间复杂度</strong>。</p><p>我们先来看个例子：</p><div class="code-wrapper"><pre><code class="hljs c"><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = <span class="hljs-number">0</span> ; i &lt; n ; i++)     <span class="hljs-comment">//&lt;- 从 0 到 n，执行 n+1 次</span>&#123;    a++;                         <span class="hljs-comment">//&lt;- 从 0 到 n-1，执行 n 次</span>&#125;</code></pre></div><p>因此，整段代码中所有语句共执行了 (n+1)+n 次，即 <strong>2n+1</strong>次。</p><p>再看一个例子：</p><div class="code-wrapper"><pre><code class="hljs c"><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = <span class="hljs-number">0</span> ; i &lt; n ; i++)           <span class="hljs-comment">// n+1次</span>&#123;     <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> j = <span class="hljs-number">0</span> ; j &lt; m ; j++)       <span class="hljs-comment">// n*(m+1)次</span>    &#123;        num++;                         <span class="hljs-comment">// n*m次</span>    &#125;&#125;</code></pre></div><p>这段代码一共执行的次数是：(2*n*m+2*n+1)。当 n、m 都无限大时，可认为n==m，则可以简化为<strong>2n²+2n+1</strong>，这就是此段程序在最坏情况下的运行频度。</p><p>在数据结构中，一般会使用 <strong>无限大的思想</strong>来简化频度表达式。可以这样简化：</p><ul><li>首先去掉常数分子。例如 <strong>2n²+2n+1</strong> 简化为<strong>2n²+2n</strong> ；</li><li>然后有多项无限大的变量的，只保留一个最高项变量,且最高项系数为1。例如<strong>2n²+2n</strong> 简化为 <strong>n²</strong>；</li></ul><p>这样，就可以得到以上两个例子的时间复杂度分别为 <strong>O(n)</strong>和 <strong>O(n²)</strong> 。</p><h3 id="常见的时间复杂度量级">常见的时间复杂度量级</h3><p>常见的时间复杂度量级有：</p><ul><li><strong>常数阶O(1)</strong></li><li><strong>对数阶O(logn)</strong></li><li><strong>线性阶O(n)</strong></li><li><strong>线性对数阶O(nlogn)</strong></li><li><strong>平方阶O(n²)</strong></li><li><strong>立方阶O(n³)</strong></li><li><strong>指数阶(2^n)</strong></li></ul><p>上面从上至下依次的时间复杂度越来越大，执行的效率越来越低。<strong>注意</strong>，这里仅以最坏情况下的频度作为时间复杂度，而在某些实际场景中，还可以用最好情况下的频度和最坏情况下的频度的平均值来作为算法的平均时间复杂度。</p><p>下面分别举例说明：</p><ol type="1"><li><strong>常数阶O(1)</strong></li></ol><p>无论代码执行了多少行，哪怕执行上万行，只要是没有循环等复杂结构，那这个代码的时间复杂度就都是O(1),如：</p><div class="code-wrapper"><pre><code class="hljs c"><span class="hljs-type">int</span> i = <span class="hljs-number">1</span>;<span class="hljs-type">int</span> j = <span class="hljs-number">2</span>;++i;j++;<span class="hljs-type">int</span> m = i + j;</code></pre></div><ol start="2" type="1"><li><strong>对数阶O(logn)</strong></li></ol><div class="code-wrapper"><pre><code class="hljs c"><span class="hljs-type">int</span> i = <span class="hljs-number">1</span>;     <span class="hljs-comment">//执行1次</span><span class="hljs-keyword">while</span>(i&lt;n)     <span class="hljs-comment">//执行log2^n次</span>&#123;    i = i * <span class="hljs-number">2</span>; <span class="hljs-comment">//执行log2^n次</span>&#125;</code></pre></div><p>这段代码总的执行次数是 <strong>2log2^n + 1</strong>;简化：<strong>log2^n</strong>,对数的底是不确定的，这里恰好是2，一般会去掉对数的底，所以可以进一步简化：<strong>logn</strong>，即时间复杂度：<strong>O(logn)</strong>。</p><ol start="3" type="1"><li><strong>线性阶O(n)</strong></li></ol><p>如：</p><div class="code-wrapper"><pre><code class="hljs c"><span class="hljs-keyword">for</span>(i=<span class="hljs-number">1</span>; i&lt;=n; ++i) <span class="hljs-comment">//执行了n次</span>&#123;   j++ = i;   <span class="hljs-comment">//执行了 n-1 次</span>&#125;</code></pre></div><p>这段代码执行了 <strong>2n-1</strong> 次，简化后，即时间复杂度<strong>O(n)</strong> 。</p><ol start="4" type="1"><li><strong>线性对数阶O(nlogn)</strong></li></ol><p>将时间复杂度为O(logn)的代码循环n遍的话，那么它的时间复杂度就是 n *O(logn)，也就是了O(nlogn)。</p><div class="code-wrapper"><pre><code class="hljs c"><span class="hljs-keyword">for</span>(m=<span class="hljs-number">1</span>; m&lt;n; m++) <span class="hljs-comment">//执行n次</span>&#123;    i = <span class="hljs-number">1</span>;       <span class="hljs-comment">//执行n次</span>    <span class="hljs-keyword">while</span>(i&lt;n)   <span class="hljs-comment">//执行 n*log2^n次</span>    &#123;        i = i * <span class="hljs-number">2</span>;  <span class="hljs-comment">//执行n*log2^n次</span>    &#125;&#125;</code></pre></div><p>这段代码执行了 <strong>2n+2nlog2^n</strong> 次，简化后，即时间复杂度<strong>O(nlogn)</strong> 。</p><ol start="5" type="1"><li><strong>平方阶O(n²)</strong></li></ol><p>如果把 O(n) 的代码再嵌套循环一遍，它的时间复杂度就是 O(n²) 了。</p><div class="code-wrapper"><pre><code class="hljs c"><span class="hljs-keyword">for</span>(x=<span class="hljs-number">1</span>; i&lt;=n; x++) <span class="hljs-comment">//执行n次</span>&#123;   <span class="hljs-keyword">for</span>(i=<span class="hljs-number">1</span>; i&lt;=n; i++) <span class="hljs-comment">//执行n*n次</span>    &#123;       j++ = i;  <span class="hljs-comment">//执行n*n次</span>    &#125;&#125;</code></pre></div><p>这段代码执行了 <strong>n+2n²</strong> 次，简化后，即时间复杂度<strong>O(n²)</strong> 。</p><ol start="6" type="1"><li><strong>立方阶O(n³)</strong></li></ol><p>O(n³)相当于三层n循环，其它的类似。</p><ol start="7" type="1"><li><strong>指数阶(2^n)</strong></li></ol><p>在递归调用程序中，会有指数阶，如：</p><div class="code-wrapper"><pre><code class="hljs c"><span class="hljs-type">int</span> <span class="hljs-title function_">f</span><span class="hljs-params">(<span class="hljs-type">int</span> n)</span>&#123;   <span class="hljs-keyword">if</span> (n == <span class="hljs-number">0</span>) <span class="hljs-keyword">return</span> <span class="hljs-number">1</span>;   <span class="hljs-keyword">return</span> f(n<span class="hljs-number">-1</span>) + f(n - <span class="hljs-number">1</span>);&#125;</code></pre></div><p>这里执行的次数计算: 2^0 + 2^1 + 2^2 + …… +2^n，即2^(n+1)-1,进一步简化则时间复杂度:<strong>O(2^n)</strong> 。</p><p>除此之外，其实还有<strong>平均时间复杂度、均摊时间复杂度、最坏时间复杂度、最好时间复杂度</strong>，有点复杂，这里这里就不展开了。</p><h2 id="空间复杂度">空间复杂度</h2><p>空间复杂度是对一个算法在运行过程中临时占用存储空间大小的一个量度，同样反映的是一个趋势，我们用S(n) 来定义。和时间复杂度类似，也用 「 <strong>大O符号表示法</strong> 」来表示。</p><p>事实上，<strong>对算法的空间复杂度影响最大的，往往是程序运行过程中所申请的临时存储空间</strong>。如：</p><div class="code-wrapper"><pre><code class="hljs c"><span class="hljs-type">int</span> n;<span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>, &amp;n);<span class="hljs-type">int</span> a[<span class="hljs-number">10</span>];</code></pre></div><p>这段程序在运行时所申请的临时空间，并不随 n 的值而变化。而如果将第 3行代码改为<code>int a[n]</code>, 此时程序运行所申请的临时空间，和 n值有直接的关联。</p><p>所以，如果程序所占用的存储空间和输入值无关，则该程序的空间复杂度就为<strong>O(1)</strong>；反之则需要进一步判断它们之间的关系：</p><ul><li>输入值 n不断增大，程序申请的临时空间成线性增长，则程序的空间复杂度用<strong>O(n)</strong> 表示;</li><li>输入值 n 不断增大，程序申请的临时空间成 n²关系增长，则程序的空间复杂度用 <strong>O(n²)</strong> 表示；</li><li>输入值 n 不断增大，程序申请的临时空间成 n³关系增长，则程序的空间复杂度用 <strong>O(n³)</strong> 表示；</li></ul><blockquote><p><strong>在多数场景中，一个好的算法往往更注重的是时间复杂度的比较，而空间复杂度只要在一个合理的范围内就可以。空间复杂度比较常用的有：O(1)、O(n)、O(n²)</strong></p></blockquote><p>参考链接：</p><p>http://c.biancheng.net/view/8081.html</p><p>https://zhuanlan.zhihu.com/p/50479555</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;算法简介&quot;&gt;算法简介&lt;/h2&gt;
&lt;p&gt;所谓算法（Algorithm），即解决问题的方法。同一个问题，使用不同的算法，虽然得到的结果相同，但耗费的时间和资源肯定有所差异。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;注意&lt;/strong&gt;，程序和算法是完全不同的概念。算法是解</summary>
      
    
    
    
    <category term="数据结构与算法" scheme="http://example.com/categories/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/"/>
    
    
    <category term="算法" scheme="http://example.com/tags/%E7%AE%97%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>Typora中常用HTML格式设置</title>
    <link href="http://example.com/2023/07/05/Typora%E4%B8%AD%E5%B8%B8%E7%94%A8HTML%E6%A0%BC%E5%BC%8F%E8%AE%BE%E7%BD%AE/"/>
    <id>http://example.com/2023/07/05/Typora%E4%B8%AD%E5%B8%B8%E7%94%A8HTML%E6%A0%BC%E5%BC%8F%E8%AE%BE%E7%BD%AE/</id>
    <published>2023-07-05T10:48:04.000Z</published>
    <updated>2023-07-13T05:42:41.803Z</updated>
    
    <content type="html"><![CDATA[<h3 id="颜色">1.颜色</h3><p>颜色的种类有很多，HTML和CSS中的颜色规格有140多个（17种标准颜色，再加130多个其它颜色）。17种标准颜色：</p><table><tr><td style="background-color:aqua">浅绿色<br>aqua</td><td style="background-color:black">黑色<br>black</td><td style="background-color:blue">蓝色<br>blue</td><td style="background-color:fuchsia">紫红色<br>fuchsia</td><td style="background-color:gray">灰色<br>gray</td><td style="background-color:green">绿色<br>green</td><td style="background-color:lime">浅绿色<br>lime</td><td style="background-color:maroon">褐红色<br>maroon</td><td style="background-color:navy">藏青色<br>navy</td></tr><tr><td style="background-color:olive">橄榄色<br>olive</td><td style="background-color:orange">橙色<br>orange</td><td style="background-color:purple">紫色<br>purple</td><td style="background-color:red">红色<br>red</td><td style="background-color:silver">银色<br>silver</td><td style="background-color:teal">青色<br>teal</td><td style="background-color:white">白色<br>white</td><td style="background-color:yellow">黄色<br>yellow</td></tr></table><ul><li><p>Hex颜色代码： &lt;p style="color:#FF0000"&gt;Red text</p></p></li><li><p>HTML颜色名称: &lt;p style="color:red"&gt;Red text</p></p></li><li><p>RGB颜色代码: &lt;p style="color:rgb(255,0,0)"&gt;Red text</p></p></li><li><p>HSL颜色代码： &lt;p style="color:hsl(0,100%,50%)"&gt;Red text</p></p><p>色相值：0-360，饱和度：0~100%，亮度：0~100% 。</p></li><li><p>Font颜色代码：&lt;font color="red"&gt;Red text</font></p><p>HTML5不再支持。 HTML 4.01 已废弃。</p><p>以上五中方式都能实现以下字体样式：</p><p><img src="https://gitee.com/kayoungzhang/picgo_res/raw/master/img/image-20230706223845497.png" alt="image-20230706223845497"  /></p></li><li><p>RGBA颜色代码：&lt;p style="color:rgba(255,0,0,0.5)"&gt;Redtext</p></p><p>a：0~1。0表示完全透明，1表示完全不透明</p><figure><imgsrc="https://gitee.com/kayoungzhang/picgo_res/raw/master/img/image-20230706223917100.png"alt="image-20230706223917100" /><figcaption aria-hidden="true">image-20230706223917100</figcaption></figure></li></ul><h3 id="字体">2.字体</h3><ul><li><p>字体大小：&lt;p style="font-size:20px"&gt;20号字体</p></p><p style="font-size:20px"><p>20号字体</p></p></li><li><p>字体：&lt;p style="font-family:楷体"&gt;楷体字体</p></p><p style="font-family:楷体"><p>楷体字体</p></p></li><li><p>背景：&lt;table&gt;&lt;tdstyle="background-color:green"&gt;背景色:绿色&lt;/td&gt;&lt;/table&gt;</p><table><td style="background-color:green"><p>背景色:绿色</p></td></table></li></ul><h3 id="链接设置">3.链接设置</h3><ul><li><p>普通：&lt;a href="www.baidu.com"&gt;百度</a></p><p><a href="www.baidu.com">百度</a></p></li><li><p>颜色：&lt;a href="www.baidu.com"style="color:OrangeRed"&gt;百度</a></p><p><a href="www.baidu.com" style="color:OrangeRed">百度</a></p></li><li><p>清除下划线：&lt;a href="www.baidu.com"style="text-decoration:none"&gt;百度</a></p><p><a href="www.baidu.com" style="text-decoration:none">百度</a></p></li></ul><h3 id="其它">4.其它</h3><ul><li>换行：&lt;br&gt;</li></ul><h2 id="附录1html颜色名">附录1：HTML颜色名</h2><p>红色HTML颜色名：</p><table><tr><td style="background-color:IndianRed">IndianRed</td><td style="background-color:LightCoral">LightCoral</td><td style="background-color:Salmon">Salmon</td><td style="background-color:DarkSalmon">DarkSalmon</td><td style="background-color:LightSalmon">LightSalmon</td></tr><tr><td style="background-color:Crimson">Crimson</td><td style="background-color:Red">Red</td><td style="background-color:FireBrick">FireBrick</td><td style="background-color:DarkRed">DarkRed</td></tr></table><p>粉色HTML颜色名：</p><table><tr><td style="background-color:Pink">Pink</td><td style="background-color:LightPink">LightPink</td><td style="background-color:HotPink">HotPink</td><td style="background-color:DeepPink">DeepPink</td><td style="background-color:MediumVioletRed">MediumVioletRed</td><td style="background-color:PaleVioletRed">PaleVioletRed</td></tr></table><p>橙色HTML颜色名：</p><table><tr><td style="background-color:LightSalmon">LightSalmon</td><td style="background-color:Coral">Coral</td><td style="background-color:Tomato">Tomato</td><td style="background-color:OrangeRed">OrangeRed</td><td style="background-color:DarkOrange">DarkOrange</td><td style="background-color:Orange">Orange</td></tr></table><p>黄色HTML颜色名：</p><table><tr><td style="background-color:Gold">Gold</td><td style="background-color:Yellow">Yellow</td><td style="background-color:LightYellow">LightYellow</td><td style="background-color:LemonChiffon">LemonChiffon</td><td style="background-color:LightGoldenrodYellow">LightGoldenrodYellow</td><td style="background-color:PapayaWhip">PapayaWhip</td></tr><tr><td style="background-color:Moccasin">Moccasin</td><td style="background-color:PeachPuff">PeachPuff</td><td style="background-color:PaleGoldenrod">PaleGoldenrod</td><td style="background-color:Khaki">Khaki</td><td style="background-color:DarkKhaki">DarkKhaki</td></tr></table><p>紫色HTML颜色名：</p><table><tr><td style="background-color:Lavender">Lavender</td><td style="background-color:Thistle">Thistle</td><td style="background-color:Plum">Plum</td><td style="background-color:Violet">Violet</td><td style="background-color:Orchid">Orchid</td><td style="background-color:Fuchsia">Fuchsia</td></tr><tr><td style="background-color:MediumOrchid">MediumOrchid</td><td style="background-color:MediumPurple">MediumPurple</td><td style="background-color:RebeccaPurple">RebeccaPurple</td><td style="background-color:BlueViolet">BlueViolet</td><td style="background-color:DarkViolet">DarkViolet</td><td style="background-color:DarkOrchid">DarkOrchid</td></tr><tr><td style="background-color:DarkMagenta">DarkMagenta</td><td style="background-color:Purple">Purple</td><td style="background-color:Indigo">Indigo</td><td style="background-color:SlateBlue">SlateBlue</td><td style="background-color:DarkSlateBlue">DarkSlateBlue</td><td style="background-color:MediumSlateBlue">MediumSlateBlue</td></tr></table><p>绿色HTML颜色名：</p><table><tr><td style="background-color:GreenYellow">GreenYellow</td><td style="background-color:Chartreuse">Chartreuse</td><td style="background-color:LawnGreen">LawnGreen</td><td style="background-color:Lime">Lime</td><td style="background-color:LimeGreen">LimeGreen</td></tr><tr><td style="background-color:PaleGreen">PaleGreen</td><td style="background-color:LightGreen">LightGreen</td><td style="background-color:MediumSpringGreen">MediumSpringGreen</td><td style="background-color:SpringGreen">SpringGreen</td><td style="background-color:MediumSeaGreen">MediumSeaGreen</td></tr><tr><td style="background-color:SeaGreen">SeaGreen</td><td style="background-color:ForestGreen">ForestGreen</td><td style="background-color:Green">Green</td><td style="background-color:DarkGreen">DarkGreen</td><td style="background-color:YellowGreen">YellowGreen</td></tr><tr><td style="background-color:OliveDrab">OliveDrab</td><td style="background-color:Olive">Olive</td><td style="background-color:DarkOliveGreen">DarkOliveGreen</td><td style="background-color:MediumAquamarine">MediumAquamarine</td><td style="background-color:DarkSeaGreen">DarkSeaGreen</td></tr><tr><td style="background-color:LightSeaGreen">LightSeaGreen</td><td style="background-color:DarkCyan">DarkCyan</td><td style="background-color:Teal">Teal</td></tr></table><p>蓝色HTML颜色名：</p><table><tr><td style="background-color:Aqua">Aqua</td><td style="background-color:Cyan">Cyan</td><td style="background-color:LightCyan">LightCyan</td><td style="background-color:PaleTurquoise">PaleTurquoise</td><td style="background-color:Aquamarine">Aquamarine</td></tr><tr><td style="background-color:Turquoise">Turquoise</td><td style="background-color:MediumTurquoise">MediumTurquoise</td><td style="background-color:DarkTurquoise">DarkTurquoise</td><td style="background-color:CadetBlue">CadetBlue</td><td style="background-color:SteelBlue">SteelBlue</td></tr><tr><td style="background-color:LightSteelBlue">LightSteelBlue</td><td style="background-color:PowderBlue">PowderBlue</td><td style="background-color:LightBlue">LightBlue</td><td style="background-color:SkyBlue">SkyBlue</td><td style="background-color:LightSkyBlue">LightSkyBlue</td></tr><tr><td style="background-color:DeepSkyBlue">DeepSkyBlue</td><td style="background-color:DodgerBlue">DodgerBlue</td><td style="background-color:CornflowerBlue">CornflowerBlue</td><td style="background-color:MediumSlateBlue">MediumSlateBlue</td><td style="background-color:RoyalBlue">RoyalBlue</td></tr><tr><td style="background-color:Blue">Blue</td><td style="background-color:MediumBlue">MediumBlue</td><td style="background-color:DarkBlue">DarkBlue</td><td style="background-color:Navy">Navy</td><td style="background-color:MidnightBlue">MidnightBlue</td></tr></table><p>褐色HTML颜色名：</p><table><tr><td style="background-color:Cornsilk">Cornsilk</td><td style="background-color:BlanchedAlmond">BlanchedAlmond</td><td style="background-color:Bisque">Bisque</td><td style="background-color:NavajoWhite">NavajoWhite</td><td style="background-color:Wheat">Wheat</td><td style="background-color:BurlyWood">BurlyWood</td></tr><tr><td style="background-color:Tan">Tan</td><td style="background-color:RosyBrown">RosyBrown</td><td style="background-color:SandyBrown">SandyBrown</td><td style="background-color:Goldenrod">Goldenrod</td><td style="background-color:DarkGoldenrod">DarkGoldenrod</td><td style="background-color:Peru">Peru</td></tr><tr><td style="background-color:Chocolate">Chocolate</td><td style="background-color:SaddleBrown">SaddleBrown</td><td style="background-color:Sienna">Sienna</td><td style="background-color:Brown">Brown</td><td style="background-color:Maroon">Maroon</td></tr></table><p>白色HTML颜色名：</p><table><tr><td style="background-color:White">White</td><td style="background-color:Snow">Snow</td><td style="background-color:HoneyDew">HoneyDew</td><td style="background-color:MintCream">MintCream</td><td style="background-color:Azure">Azure</td><td style="background-color:AliceBlue">AliceBlue</td></tr><tr><td style="background-color:GhostWhite">GhostWhite</td><td style="background-color:WhiteSmoke">WhiteSmoke</td><td style="background-color:SeaShell">SeaShell</td><td style="background-color:Beige">Beige</td><td style="background-color:OldLace">OldLace</td><td style="background-color:FloralWhite">FloralWhite</td></tr><tr><td style="background-color:Ivory">Ivory</td><td style="background-color:AntiqueWhite">AntiqueWhite</td><td style="background-color:Linen">Linen</td><td style="background-color:LavenderBlush">LavenderBlush</td><td style="background-color:MistyRose">MistyRose</td></tr></table><p>灰色HTML颜色名：</p><table><tr><td style="background-color:Gainsboro">Gainsboro</td><td style="background-color:LightGray">LightGray</td><td style="background-color:Silver">Silver</td><td style="background-color:DarkGray">DarkGray</td><td style="background-color:Gray">Gray</td></tr><tr><td style="background-color:DimGray">DimGray</td><td style="background-color:LightSlateGray">LightSlateGray</td><td style="background-color:SlateGray">SlateGray</td><td style="background-color:DarkSlateGray">DarkSlateGray</td><td style="background-color:Black">Black</td></tr></table><h2 id="附录2html颜色hex值与rgb值">附录2：HTML颜色HEX值与RGB值</h2><figure><imgsrc="https://gitee.com/kayoungzhang/picgo_res/raw/master/img/material-design-color-chart.png"alt="material-design-color-chart" /><figcaption aria-hidden="true">material-design-color-chart</figcaption></figure><p><strong>链接：</strong></p><p>https://www.runoob.com/tags/html-colorname.html</p><p>https://htmlcolorcodes.com/zh/yanse-ming/</p><h2 id="附录3typora中添加自定义格式">附录3：Typora中添加自定义格式</h2><p>在Typora中为了快速设置格式，可通过快捷键软件（如<ahref="https://www.autohotkey.com/">AutoHotkey</a>）将设置的格式添加到快捷键中，也可以通过输入法的自定义短语添加格式，如下所示：</p><figure><imgsrc="https://gitee.com/kayoungzhang/picgo_res/raw/master/img/image-20230706200028503.png"alt="image-20230706200028503" /><figcaption aria-hidden="true">image-20230706200028503</figcaption></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;颜色&quot;&gt;1.颜色&lt;/h3&gt;
&lt;p&gt;颜色的种类有很多，HTML和CSS中的颜色规格有140多个（17种标准颜色，再加130多个其它颜色）。17种标准颜色：&lt;/p&gt;
&lt;table&gt;
&lt;tr&gt;
&lt;td style=&quot;background-color:aqua&quot;&gt;</summary>
      
    
    
    
    <category term="教程" scheme="http://example.com/categories/%E6%95%99%E7%A8%8B/"/>
    
    
    <category term="Typora" scheme="http://example.com/tags/Typora/"/>
    
  </entry>
  
  <entry>
    <title>Qt中标准对话框</title>
    <link href="http://example.com/2023/07/02/Qt%E4%B8%AD%E6%A0%87%E5%87%86%E5%AF%B9%E8%AF%9D%E6%A1%86/"/>
    <id>http://example.com/2023/07/02/Qt%E4%B8%AD%E6%A0%87%E5%87%86%E5%AF%B9%E8%AF%9D%E6%A1%86/</id>
    <published>2023-07-02T13:30:17.000Z</published>
    <updated>2023-07-03T05:10:09.039Z</updated>
    
    <content type="html"><![CDATA[<h5 id="标准对话框">标准对话框</h5><ul><li><p>1颜色对话框</p><ul><li>```c++ #include <QColorDialog> QColor color =QColorDialog::getColor(...); <div class="code-wrapper"><pre><code class="hljs dts">- <span class="hljs-number">2</span>文件对话框  - ```c++    <span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;QFileDialog&gt;</span></span>    QString fileN<span class="hljs-attr">ame</span> <span class="hljs-operator">=</span> QFileDialog::getOpenFileName(...)<span class="hljs-punctuation">;</span>    QString fileSaveN<span class="hljs-attr">ame</span> <span class="hljs-operator">=</span> QFileDialog::getSaveFileName(...)<span class="hljs-punctuation">;</span>    QStringList <span class="hljs-attr">list</span> <span class="hljs-operator">=</span> QFileDialog::getOpenFileNames(...)<span class="hljs-punctuation">;</span></code></pre></div></li></ul></li><li><p>3字体对话框</p><ul><li>```c++ #include <QFontDialog> QFont font = QFontDialog::getFont(bool<em>ok, QWidget </em>parent = nullptr); <div class="code-wrapper"><pre><code class="hljs dts">- <span class="hljs-number">4</span>输入对话框  - ```c++    <span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;QInputDialog&gt;</span></span>    QString inputT<span class="hljs-attr">ext</span> <span class="hljs-operator">=</span> QInputDialot::getText(...)<span class="hljs-punctuation">;</span>    int inputN<span class="hljs-attr">um</span> <span class="hljs-operator">=</span> QInputDialot::getInt(...)<span class="hljs-punctuation">;</span>    double inputD<span class="hljs-attr">ouble</span> <span class="hljs-operator">=</span> QInputDialot::getDouble(...)<span class="hljs-punctuation">;</span>    QString inputI<span class="hljs-attr">tem</span> <span class="hljs-operator">=</span> QInputDialot::getItem(...)<span class="hljs-punctuation">;</span></code></pre></div></li></ul></li><li><p>5消息对话框</p><ul><li>```c++ #include <QMessageBox> QMessageBox::information(...);QMessageBox::question(...); QMessageBox::warning(...);QMessageBox::critical(...); QMessageBox::about(this, "title", "<h2>Spreadsheet1.1</h2>" "<p>Copyright&amp;copy:2022 SoftwareInc." "<p>Spreadsheet is a small aplication that " "demonstrates QActionQMainWindow, QmenuBar"); <div class="code-wrapper"><pre><code class="hljs arduino">- <span class="hljs-number">6</span>进度条对话框  - ```c++    <span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;QProgressDialog&gt;</span></span>    QProgressDialog *progress = <span class="hljs-keyword">new</span> <span class="hljs-built_in">QProgressDialog</span>(...));    progress-&gt;<span class="hljs-built_in">setWindowModality</span>(Qt::WindowModal);</code></pre></div></li></ul></li><li><p>7向导对话框</p><ul><li>```c++ #include <QWizard> QWizard <em>wizard = new QWizard(this);QWizardPage </em>page1 = new QWizardPage(this);wizard-&gt;addPage(page1); <div class="code-wrapper"><pre><code class="hljs cpp">- <span class="hljs-number">8</span>打印对话框  - ```c++    QT += printsupport    <span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;QPrintDialog&gt;</span></span>    <span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;QPrinter&gt;</span></span>    QPrintDialog <span class="hljs-built_in">printDialog</span>(printer, <span class="hljs-keyword">this</span>);</code></pre></div></li></ul></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h5 id=&quot;标准对话框&quot;&gt;标准对话框&lt;/h5&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;1颜色对话框&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;```c++ #include &lt;QColorDialog&gt; QColor color =
QColorDialog::getColor(...); &lt;d</summary>
      
    
    
    
    <category term="Qt" scheme="http://example.com/categories/Qt/"/>
    
    
    <category term="Qt" scheme="http://example.com/tags/Qt/"/>
    
  </entry>
  
  <entry>
    <title>Qt常用控件之表格控件QTableWidget</title>
    <link href="http://example.com/2023/06/25/Qt%E5%B8%B8%E7%94%A8%E6%8E%A7%E4%BB%B6%E4%B9%8B%E8%A1%A8%E6%A0%BC%E6%8E%A7%E4%BB%B6QTableWidget/"/>
    <id>http://example.com/2023/06/25/Qt%E5%B8%B8%E7%94%A8%E6%8E%A7%E4%BB%B6%E4%B9%8B%E8%A1%A8%E6%A0%BC%E6%8E%A7%E4%BB%B6QTableWidget/</id>
    <published>2023-06-25T13:48:04.000Z</published>
    <updated>2023-07-03T14:22:20.509Z</updated>
    
    <content type="html"><![CDATA[<p>QTableWidget是QT中的表格组件类,一般用来展示多行多列的数据。QTableWidget中的每一个单元格都是一个QTableWidgetItem对象。</p><h3 id="qtablewidgetitem的常用方法">QTableWidgetItem的常用方法</h3><div class="code-wrapper"><pre><code class="hljs c">QString <span class="hljs-title function_">text</span><span class="hljs-params">()</span> <span class="hljs-type">const</span><span class="hljs-title function_">setText</span><span class="hljs-params">(<span class="hljs-type">const</span> QString &amp;text)</span>设置单元格中的文本。QIcon <span class="hljs-title function_">icon</span><span class="hljs-params">()</span> <span class="hljs-type">const</span><span class="hljs-title function_">setIcon</span><span class="hljs-params">(<span class="hljs-type">const</span> QIcon &amp;icon)</span>给单元格添加图标。QBrush <span class="hljs-title function_">background</span><span class="hljs-params">()</span> <span class="hljs-type">const</span><span class="hljs-title function_">setBackground</span><span class="hljs-params">(<span class="hljs-type">const</span> QBrush &amp;brush)</span>设置单元格的背景。QFont <span class="hljs-title function_">font</span><span class="hljs-params">()</span> <span class="hljs-type">const</span>   <span class="hljs-title function_">setFont</span><span class="hljs-params">(<span class="hljs-type">const</span> QFont &amp;font)</span>设置单元格中文本的字体。QBrush <span class="hljs-title function_">foreground</span><span class="hljs-params">()</span> <span class="hljs-type">const</span><span class="hljs-title function_">setForeground</span><span class="hljs-params">(<span class="hljs-type">const</span> QBrush &amp;brush)</span>设置单元格中字体的颜色。<span class="hljs-type">int</span> <span class="hljs-title function_">textAlignment</span><span class="hljs-params">()</span> <span class="hljs-type">const</span><span class="hljs-title function_">setTextAlignment</span><span class="hljs-params">(<span class="hljs-type">int</span> alignment)</span>设置单元格中文本的对齐方式。QString <span class="hljs-title function_">toolTip</span><span class="hljs-params">()</span> <span class="hljs-type">const</span>    <span class="hljs-title function_">setToolTip</span><span class="hljs-params">(<span class="hljs-type">const</span> QString &amp;toolTip)</span>给单元格设置提示信息。</code></pre></div><h3 id="qtablewidget控件属性和方法">QTableWidget控件属性和方法</h3><ul><li>构造 QTableWidgetItem</li></ul><div class="code-wrapper"><pre><code class="hljs c">QTableWidgetItem(<span class="hljs-type">const</span> QIcon &amp;icon, <span class="hljs-type">const</span> QString &amp;text, <span class="hljs-type">int</span> type = Type)QTableWidgetItem(<span class="hljs-type">const</span> QString &amp;text, <span class="hljs-type">int</span> type = Type)</code></pre></div><ul><li>获取和设置单元格是否可编辑</li></ul><div class="code-wrapper"><pre><code class="hljs c">QAbstractItemView::EditTriggers <span class="hljs-title function_">editTriggers</span><span class="hljs-params">()</span> <span class="hljs-type">const</span><span class="hljs-type">void</span> <span class="hljs-title function_">setEditTriggers</span><span class="hljs-params">(QAbstractItemView::EditTriggers triggers)</span>QAbstractItemView::NoEditTriggers不允许编辑QAbstractItemView::CurrentChanged当前项发生更改才能编辑QAbstractItemView::DoubleClicked被双击时能编辑QAbstractItemView::SelectedClicked当单击已选中的单元格才能编辑QAbstractItemView::EditKeyPressed当在项目上按下编辑键时才能编辑。QAbstractItemView::AnyKeyPressed当在项目上按下任何键时才能编辑QAbstractItemView::AllEditTriggers包含以上所有编辑操作</code></pre></div><ul><li>获取和设置表格选择方式</li></ul><div class="code-wrapper"><pre><code class="hljs c">QAbstractItemView::SelectionBehavior <span class="hljs-title function_">selectionBehavior</span><span class="hljs-params">()</span> <span class="hljs-type">const</span><span class="hljs-type">void</span> <span class="hljs-title function_">setSelectionBehavior</span><span class="hljs-params">(QAbstractItemView::SelectionBehavior behavior)</span>QAbstractItemView::SelectItems    选中单个单元格QAbstractItemView::SelectRows     选中一行QAbstractItemView::SelectColumns  选中一列</code></pre></div><ul><li>获取和设置表格选择模式</li></ul><div class="code-wrapper"><pre><code class="hljs c">QAbstractItemView::SelectionMode <span class="hljs-title function_">selectionMode</span><span class="hljs-params">()</span> <span class="hljs-type">const</span><span class="hljs-type">void</span> <span class="hljs-title function_">setSelectionMode</span><span class="hljs-params">(QAbstractItemView::SelectionMode mode)</span>QAbstractItemView::NoSelection  不可选择QAbstractItemView::SingleSelection  单行选择QAbstractItemView::MultiSelection 多行选择QAbstractItemView::ExtendedSelection 扩展选择，按shift键或ctrl键可以选中多行QAbstractItemView::ContiguousSelection  相邻选择，按shift键选中一个范围内的行</code></pre></div><ul><li>获取和设置指定行列位置的单元格</li></ul><div class="code-wrapper"><pre><code class="hljs c">QTableWidgetItem *<span class="hljs-title function_">item</span><span class="hljs-params">(<span class="hljs-type">int</span> row, <span class="hljs-type">int</span> column)</span> <span class="hljs-type">const</span>;<span class="hljs-type">void</span> <span class="hljs-title function_">setItem</span><span class="hljs-params">(<span class="hljs-type">int</span> row, <span class="hljs-type">int</span> column, QTableWidgetItem *item)</span></code></pre></div><ul><li>获取和设置行列数</li></ul><div class="code-wrapper"><pre><code class="hljs c"><span class="hljs-type">int</span> <span class="hljs-title function_">rowCount</span><span class="hljs-params">()</span> <span class="hljs-type">const</span><span class="hljs-type">void</span> <span class="hljs-title function_">setRowCount</span><span class="hljs-params">(<span class="hljs-type">int</span> rows)</span><span class="hljs-type">int</span> <span class="hljs-title function_">columnCount</span><span class="hljs-params">()</span> <span class="hljs-type">const</span><span class="hljs-type">void</span> <span class="hljs-title function_">setColumnCount</span><span class="hljs-params">(<span class="hljs-type">int</span> columns)</span><span class="hljs-type">int</span> <span class="hljs-title function_">currentRow</span><span class="hljs-params">()</span> <span class="hljs-type">const</span>;<span class="hljs-type">int</span> <span class="hljs-title function_">currentColumn</span><span class="hljs-params">()</span> <span class="hljs-type">const</span>;<span class="hljs-type">void</span> <span class="hljs-title function_">insertRow</span><span class="hljs-params">(<span class="hljs-type">int</span> row)</span>;<span class="hljs-type">void</span> <span class="hljs-title function_">insertColumn</span><span class="hljs-params">(<span class="hljs-type">int</span> column)</span>;<span class="hljs-type">void</span> <span class="hljs-title function_">removeRow</span><span class="hljs-params">(<span class="hljs-type">int</span> row)</span>;<span class="hljs-type">void</span> <span class="hljs-title function_">removeColumn</span><span class="hljs-params">(<span class="hljs-type">int</span> column)</span>;</code></pre></div><ul><li>设置行、列头标签</li></ul><div class="code-wrapper"><pre><code class="hljs c"><span class="hljs-type">void</span> <span class="hljs-title function_">setHorizontalHeaderLabels</span><span class="hljs-params">(<span class="hljs-type">const</span> QStringList &amp;labels)</span><span class="hljs-type">void</span> <span class="hljs-title function_">setVerticalHeaderLabels</span><span class="hljs-params">(<span class="hljs-type">const</span> QStringList &amp;labels)</span></code></pre></div><ul><li>设置列宽度</li></ul><div class="code-wrapper"><pre><code class="hljs c"><span class="hljs-type">void</span> <span class="hljs-title function_">QHeaderView::setSectionResizeMode</span><span class="hljs-params">(QHeaderView::ResizeMode mode)</span>    HeaderView::Interactive  用户可拖动改变列宽QHeaderView::Fixed  固定列宽QHeaderView::Stretch 自适应列宽大小QHeaderView::ResizeToContents  根据内容设置列宽</code></pre></div><h3 id="信号与槽">信号与槽</h3><div class="code-wrapper"><pre><code class="hljs c"><span class="hljs-type">void</span> <span class="hljs-title function_">cellClicked</span><span class="hljs-params">(<span class="hljs-type">int</span> row, <span class="hljs-type">int</span> column)</span><span class="hljs-type">void</span> <span class="hljs-title function_">cellDoubleClicked</span><span class="hljs-params">(<span class="hljs-type">int</span> row, <span class="hljs-type">int</span> column)</span><span class="hljs-type">void</span> <span class="hljs-title function_">itemClicked</span><span class="hljs-params">(QTableWidgetItem *item)</span><span class="hljs-type">void</span> <span class="hljs-title function_">itemDoubleClicked</span><span class="hljs-params">(QTableWidgetItem *item)</span><span class="hljs-type">void</span> <span class="hljs-title function_">clearContents</span><span class="hljs-params">()</span><span class="hljs-type">void</span> <span class="hljs-title function_">insertColumn</span><span class="hljs-params">(<span class="hljs-type">int</span> column)</span><span class="hljs-type">void</span> <span class="hljs-title function_">insertRow</span><span class="hljs-params">(<span class="hljs-type">int</span> row)</span><span class="hljs-type">void</span> <span class="hljs-title function_">removeColumn</span><span class="hljs-params">(<span class="hljs-type">int</span> column)</span><span class="hljs-type">void</span> <span class="hljs-title function_">removeRow</span><span class="hljs-params">(<span class="hljs-type">int</span> row)</span><span class="hljs-type">void</span> <span class="hljs-title function_">scrollToItem</span><span class="hljs-params">(<span class="hljs-type">const</span> QTableWidgetItem *item, QAbstractItemView::ScrollHint hint = EnsureVisible)</span></code></pre></div><h3 id="实例">实例</h3><p>新建工程，进入UI设计界面，进行如下设计：</p><figure><imgsrc="https://gitee.com/kayoungzhang/picgo_res/raw/master/img/image-20230703221825023.png"alt="image-20230703221825023" /><figcaption aria-hidden="true">image-20230703221825023</figcaption></figure><p>功能实现：</p><div class="code-wrapper"><pre><code class="hljs c">Widget::Widget(QWidget *parent)    : QWidget(parent)    , ui(new Ui::Widget)&#123;    ui-&gt;setupUi(this);    <span class="hljs-comment">/* 首先需要设置行列数 */</span>    ui-&gt;tableWidget-&gt;setColumnCount(<span class="hljs-number">4</span>);    ui-&gt;tableWidget-&gt;setRowCount(<span class="hljs-number">1</span>);    <span class="hljs-comment">/* 添加行标签 */</span>    QStringList horizontalHeaderLabel;    horizontalHeaderLabel &lt;&lt; <span class="hljs-string">&quot;姓名&quot;</span> &lt;&lt; <span class="hljs-string">&quot;性别&quot;</span> &lt;&lt; <span class="hljs-string">&quot;年龄&quot;</span> &lt;&lt; <span class="hljs-string">&quot;籍贯&quot;</span>;    ui-&gt;tableWidget-&gt;setHorizontalHeaderLabels(horizontalHeaderLabel);    <span class="hljs-comment">/* 添加初始化数据 */</span>    QTableWidgetItem *nameItem = new QTableWidgetItem(<span class="hljs-string">&quot;李彤&quot;</span>);    QTableWidgetItem *genderItem = new QTableWidgetItem(<span class="hljs-string">&quot;女&quot;</span>);    QTableWidgetItem *ageItem = new QTableWidgetItem(QString::number(<span class="hljs-number">20</span>));    QTableWidgetItem *provinceItem = new QTableWidgetItem(<span class="hljs-string">&quot;上海&quot;</span>);    ui-&gt;tableWidget-&gt;setItem(<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,nameItem);    ui-&gt;tableWidget-&gt;setItem(<span class="hljs-number">0</span>,<span class="hljs-number">1</span>,genderItem);    ui-&gt;tableWidget-&gt;setItem(<span class="hljs-number">0</span>,<span class="hljs-number">2</span>,ageItem);    ui-&gt;tableWidget-&gt;setItem(<span class="hljs-number">0</span>,<span class="hljs-number">3</span>,provinceItem);    <span class="hljs-comment">/* 调节行高和列宽 */</span><span class="hljs-comment">//    ui-&gt;tableWidget-&gt;resizeRowsToContents();</span><span class="hljs-comment">//    ui-&gt;tableWidget-&gt;resizeColumnsToContents();</span>    ui-&gt;tableWidget-&gt;verticalHeader()-&gt;setSectionResizeMode(QHeaderView::ResizeToContents);    ui-&gt;tableWidget-&gt;horizontalHeader()-&gt;setSectionResizeMode(QHeaderView::Interactive);    <span class="hljs-comment">/* 行列表头标签设置 */</span>    connect(ui-&gt;chekBox_row, &amp;QCheckBox::stateChanged, this, [=](<span class="hljs-type">int</span> state)&#123;        state = ui-&gt;chekBox_row-&gt;checkState(); <span class="hljs-comment">//获得当前checkBox状态</span>        <span class="hljs-keyword">if</span>(state == Qt::Unchecked)        &#123;            ui-&gt;tableWidget-&gt;horizontalHeader()-&gt;hide();        &#125;        <span class="hljs-keyword">if</span>(state == Qt::Checked)        &#123;            ui-&gt;tableWidget-&gt;horizontalHeader()-&gt;show();        &#125;    &#125;);    connect(ui-&gt;chekBox_column, &amp;QCheckBox::stateChanged, this, [=](<span class="hljs-type">int</span> state)&#123;        state = ui-&gt;chekBox_column-&gt;checkState();        <span class="hljs-keyword">if</span>(state == Qt::Unchecked)        &#123;            ui-&gt;tableWidget-&gt;verticalHeader()-&gt;hide();        &#125;        <span class="hljs-keyword">if</span>(state == Qt::Checked)        &#123;            ui-&gt;tableWidget-&gt;verticalHeader()-&gt;show();        &#125;    &#125;);    <span class="hljs-comment">/* 设置表格可编辑 */</span>    connect(ui-&gt;chekBox_editable, &amp;QCheckBox::stateChanged, this, [=](<span class="hljs-type">int</span> state)&#123;        state = ui-&gt;chekBox_editable-&gt;checkState();        <span class="hljs-keyword">if</span>(state == Qt::Unchecked)        &#123;            ui-&gt;tableWidget-&gt;setEditTriggers(QAbstractItemView::NoEditTriggers);        &#125;        <span class="hljs-keyword">if</span>(state == Qt::Checked)        &#123;            ui-&gt;tableWidget-&gt;setEditTriggers(QAbstractItemView::DoubleClicked | QAbstractItemView::EditKeyPressed);        &#125;    &#125;);    <span class="hljs-comment">/* 交替显示背景 */</span>    connect(ui-&gt;chekBox_color, &amp;QCheckBox::stateChanged, this, [=](<span class="hljs-type">int</span> state)&#123;        state = ui-&gt;chekBox_color-&gt;checkState();        <span class="hljs-keyword">if</span>(state == Qt::Unchecked)        &#123;            ui-&gt;tableWidget-&gt;setAlternatingRowColors(<span class="hljs-literal">false</span>);        &#125;        <span class="hljs-keyword">if</span>(state == Qt::Checked)        &#123;            ui-&gt;tableWidget-&gt;setAlternatingRowColors(<span class="hljs-literal">true</span>);        &#125;    &#125;);    <span class="hljs-comment">/* 选择方式 */</span>    connect(ui-&gt;radioBtn_cell, &amp;QRadioButton::clicked, this, [=]()&#123;        <span class="hljs-keyword">if</span>(ui-&gt;radioBtn_cell-&gt;isChecked())        &#123;            ui-&gt;tableWidget-&gt;setSelectionBehavior(QAbstractItemView::SelectItems);        &#125;    &#125;);    connect(ui-&gt;radioBtn_row, &amp;QRadioButton::clicked, this, [=]()&#123;        <span class="hljs-keyword">if</span>(ui-&gt;radioBtn_row-&gt;isChecked())        &#123;            ui-&gt;tableWidget-&gt;setSelectionBehavior(QAbstractItemView::SelectRows);        &#125;    &#125;);    connect(ui-&gt;radioBtn_column, &amp;QRadioButton::clicked, this, [=]()&#123;        <span class="hljs-keyword">if</span>(ui-&gt;radioBtn_column-&gt;isChecked())        &#123;            ui-&gt;tableWidget-&gt;setSelectionBehavior(QAbstractItemView::SelectColumns);        &#125;    &#125;);    <span class="hljs-comment">/* 添加一行 */</span>    connect(ui-&gt;btn_addRow, &amp;QPushButton::clicked, this, [=]()&#123;        <span class="hljs-type">int</span> rows = ui-&gt;tableWidget-&gt;rowCount();        ui-&gt;tableWidget-&gt;setRowCount(rows + <span class="hljs-number">1</span>);    &#125;);    <span class="hljs-comment">/* 添加一列 */</span>    connect(ui-&gt;btn_addColumn, &amp;QPushButton::clicked, this, [=]()&#123;        <span class="hljs-type">int</span> columns = ui-&gt;tableWidget-&gt;columnCount();        ui-&gt;tableWidget-&gt;setColumnCount(columns + <span class="hljs-number">1</span>);    &#125;);    <span class="hljs-comment">/* 插入一行 */</span>    connect(ui-&gt;btn_insertRow, &amp;QPushButton::clicked, this, [=]()&#123;        <span class="hljs-type">int</span> currentRow = ui-&gt;tableWidget-&gt;currentRow();        ui-&gt;tableWidget-&gt;insertRow(currentRow);    &#125;);    <span class="hljs-comment">/* 插入一列 */</span>    connect(ui-&gt;btn_insertColumn, &amp;QPushButton::clicked, this, [=]()&#123;        <span class="hljs-type">int</span> currentColumn = ui-&gt;tableWidget-&gt;currentColumn();        ui-&gt;tableWidget-&gt;insertColumn(currentColumn);    &#125;);    <span class="hljs-comment">/* 删除一行 */</span>    connect(ui-&gt;btn_deleteRow, &amp;QPushButton::clicked, this, [=]()&#123;        <span class="hljs-type">int</span> currentRow = ui-&gt;tableWidget-&gt;currentRow();        ui-&gt;tableWidget-&gt;removeRow(currentRow);    &#125;);    <span class="hljs-comment">/* 删除一列 */</span>    connect(ui-&gt;btn_deleteColumn, &amp;QPushButton::clicked, this, [=]()&#123;        <span class="hljs-type">int</span> currentColumn = ui-&gt;tableWidget-&gt;currentColumn();        ui-&gt;tableWidget-&gt;removeColumn(currentColumn);    &#125;);    <span class="hljs-comment">/* 清空表格内容 */</span>    connect(ui-&gt;btn_clearContens, &amp;QPushButton::clicked, this, [=]()&#123;        ui-&gt;tableWidget-&gt;clearContents();    &#125;);    <span class="hljs-comment">/* 清空表格 */</span>    connect(ui-&gt;btn_deleteAll, &amp;QPushButton::clicked, this, [=]()&#123;        ui-&gt;tableWidget-&gt;clear();    &#125;);&#125;</code></pre></div><p>效果:</p><p><img src="https://gitee.com/kayoungzhang/picgo_res/raw/master/img/image-20230703221332574.png" alt="image-20230703221332574" style="zoom: 80%;" /></p><p>工程文件：<ahref="https://gitee.com/kayoungzhang/my_codehub/raw/master/Qt/tableWidget.zip">tableWidget</a></p><p>参考链接：</p><p>http://t.csdn.cn/pwGUJ</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;QTableWidget是QT中的表格组件类,一般用来展示多行多列的数据。QTableWidget中的每一个单元格都是一个QTableWidgetItem对象。&lt;/p&gt;
&lt;h3 id=&quot;qtablewidgetitem的常用方法&quot;&gt;QTableWidgetItem的常用方</summary>
      
    
    
    
    <category term="Qt" scheme="http://example.com/categories/Qt/"/>
    
    
    <category term="Qt" scheme="http://example.com/tags/Qt/"/>
    
  </entry>
  
  <entry>
    <title>Qt常用控件之列表框QListWidget</title>
    <link href="http://example.com/2023/06/25/Qt%E5%B8%B8%E7%94%A8%E6%8E%A7%E4%BB%B6%E4%B9%8B%E5%88%97%E8%A1%A8%E6%A1%86QListWidget/"/>
    <id>http://example.com/2023/06/25/Qt%E5%B8%B8%E7%94%A8%E6%8E%A7%E4%BB%B6%E4%B9%8B%E5%88%97%E8%A1%A8%E6%A1%86QListWidget/</id>
    <published>2023-06-25T13:47:35.000Z</published>
    <updated>2023-07-03T05:10:09.041Z</updated>
    
    <content type="html"><![CDATA[<p>QListWidget用于显示结构简单的列表，相对于父类<strong>QListView</strong>，它是“简易版”的QListView，创建和使用列表的方式更简单、门槛更低。</p><p><img src="https://gitee.com/kayoungzhang/picgo_res/raw/master/img/image-20230702185955407.png" alt="image-20230702185955407" style="zoom:67%;" /></p><p>QListWidget 类的继承关系如下：</p><p><code>QListWidget -&gt; QListView -&gt; QAbstractItemView -&gt; QAbstractScrollArea -&gt; QFrame -&gt; QWidget</code></p><h3 id="属性和方法">属性和方法</h3><ul><li>获取和设置显示模式（可以在属性窗口设置，也可以用以下代码实现）</li></ul><div class="code-wrapper"><pre><code class="hljs c">QListView::ViewMode <span class="hljs-title function_">viewMode</span><span class="hljs-params">()</span> <span class="hljs-type">const</span><span class="hljs-type">void</span> <span class="hljs-title function_">setViewMode</span><span class="hljs-params">(QListView::ViewMode mode)</span>QListView::ListMode  <span class="hljs-comment">//列表模式</span>QListView::IconMode  <span class="hljs-comment">//图标模式</span></code></pre></div><ul><li>添加条目</li></ul><div class="code-wrapper"><pre><code class="hljs c"><span class="hljs-type">void</span> <span class="hljs-title function_">addItem</span><span class="hljs-params">(<span class="hljs-type">const</span> QString &amp;label)</span><span class="hljs-type">void</span> <span class="hljs-title function_">addItem</span><span class="hljs-params">(QListWidgetItem *item)</span><span class="hljs-type">void</span> <span class="hljs-title function_">addItems</span><span class="hljs-params">(<span class="hljs-type">const</span> QStringList &amp;labels)</span>    <span class="hljs-type">void</span> <span class="hljs-title function_">insertItem</span><span class="hljs-params">(<span class="hljs-type">int</span> row, QListWidgetItem *item)</span><span class="hljs-type">void</span> <span class="hljs-title function_">insertItem</span><span class="hljs-params">(<span class="hljs-type">int</span> row, <span class="hljs-type">const</span> QString &amp;label)</span><span class="hljs-type">void</span> <span class="hljs-title function_">insertItems</span><span class="hljs-params">(<span class="hljs-type">int</span> row, <span class="hljs-type">const</span> QStringList &amp;labels)</span></code></pre></div><ul><li>删除条目</li></ul><div class="code-wrapper"><pre><code class="hljs c"><span class="hljs-comment">/* 方法一 */</span>QListWidgetItem* item = ui-&gt;lwProvince-&gt;currentItem();ui-&gt;lwProvince-&gt;removeItemWidget(item);delete item;<span class="hljs-comment">/* 方法二 */</span><span class="hljs-type">int</span> row = ui-&gt;lwProvince-&gt;currentRow();QListWidgetItem* item = ui-&gt;lwProvince-&gt;takeItem(row);delete item;<span class="hljs-type">void</span> <span class="hljs-title function_">QListWidget::clear</span><span class="hljs-params">()</span><span class="hljs-comment">// 清空整个列表</span></code></pre></div><ul><li>信号</li></ul><div class="code-wrapper"><pre><code class="hljs c"><span class="hljs-type">void</span> <span class="hljs-title function_">currentItemChanged</span><span class="hljs-params">(QListWidgetItem *current, QListWidgetItem *previous)</span><span class="hljs-type">void</span> <span class="hljs-title function_">currentRowChanged</span><span class="hljs-params">(<span class="hljs-type">int</span> currentRow)</span><span class="hljs-type">void</span> <span class="hljs-title function_">currentTextChanged</span><span class="hljs-params">(<span class="hljs-type">const</span> QString &amp;currentText)</span><span class="hljs-type">void</span> <span class="hljs-title function_">itemActivated</span><span class="hljs-params">(QListWidgetItem *item)</span><span class="hljs-type">void</span> <span class="hljs-title function_">itemChanged</span><span class="hljs-params">(QListWidgetItem *item)</span><span class="hljs-type">void</span> <span class="hljs-title function_">itemClicked</span><span class="hljs-params">(QListWidgetItem *item)</span><span class="hljs-type">void</span> <span class="hljs-title function_">itemDoubleClicked</span><span class="hljs-params">(QListWidgetItem *item)</span><span class="hljs-type">void</span> <span class="hljs-title function_">itemEntered</span><span class="hljs-params">(QListWidgetItem *item)</span><span class="hljs-type">void</span> <span class="hljs-title function_">itemPressed</span><span class="hljs-params">(QListWidgetItem *item)</span><span class="hljs-type">void</span> <span class="hljs-title function_">itemSelectionChanged</span><span class="hljs-params">()</span></code></pre></div><h3 id="实例">实例</h3><p>新建工程，进入UI设计界面，设计如下：</p><figure><imgsrc="https://gitee.com/kayoungzhang/picgo_res/raw/master/img/image-20230702195728641.png"alt="image-20230702195728641" /><figcaption aria-hidden="true">image-20230702195728641</figcaption></figure><p>功能实现：</p><div class="code-wrapper"><pre><code class="hljs c">Widget::Widget(QWidget *parent)    : QWidget(parent)    , ui(new Ui::Widget)&#123;    ui-&gt;setupUi(this);    <span class="hljs-comment">/* 默认选中列表 */</span>    ui-&gt;radioButton_list-&gt;setChecked(<span class="hljs-literal">true</span>);    ui-&gt;listWidget-&gt;setViewMode(QListView::ListMode);    <span class="hljs-comment">/* radioBtn与listWidget对应 */</span>    connect(ui-&gt;radioButton_list, &amp;QRadioButton::clicked, this, [=]()&#123;       ui-&gt;listWidget-&gt;setViewMode(QListView::ListMode);<span class="hljs-comment">//列表模式</span>    &#125;);    connect(ui-&gt;radioButton_icon, &amp;QRadioButton::clicked, this, [=]()&#123;        ui-&gt;listWidget-&gt;setViewMode(QListView::IconMode);<span class="hljs-comment">//图标模式</span>    &#125;);&#125;<span class="hljs-type">void</span> <span class="hljs-title function_">Widget::on_btn_add_clicked</span><span class="hljs-params">()</span>&#123;    <span class="hljs-type">int</span> iconIndex = QRandomGenerator::global()-&gt;bounded(<span class="hljs-number">1</span>, <span class="hljs-number">6</span>);<span class="hljs-comment">//产生随机数1~5</span>    QString fileName = <span class="hljs-string">&quot;:/pic/city&quot;</span> + QString::number(iconIndex) + <span class="hljs-string">&quot;.png&quot;</span>;    QIcon <span class="hljs-title function_">icon</span><span class="hljs-params">(fileName)</span>;    QString str = ui-&gt;lineEdit-&gt;text();    QListWidgetItem *item = new QListWidgetItem(icon, str);    ui-&gt;listWidget-&gt;addItem(item);&#125;<span class="hljs-type">void</span> <span class="hljs-title function_">Widget::on_btn_insert_clicked</span><span class="hljs-params">()</span>&#123;    <span class="hljs-type">int</span> iconIndex = QRandomGenerator::global()-&gt;bounded(<span class="hljs-number">1</span>, <span class="hljs-number">6</span>);<span class="hljs-comment">//产生随机数1~5</span>    QString fileName = <span class="hljs-string">&quot;:/pic/city&quot;</span> + QString::number(iconIndex) + <span class="hljs-string">&quot;.png&quot;</span>;    QIcon <span class="hljs-title function_">icon</span><span class="hljs-params">(fileName)</span>;    QString str = ui-&gt;lineEdit-&gt;text();    <span class="hljs-type">int</span> row = ui-&gt;listWidget-&gt;currentRow();    QListWidgetItem *item = new QListWidgetItem(icon, str);    ui-&gt;listWidget-&gt;insertItem(row, item);&#125;<span class="hljs-type">void</span> <span class="hljs-title function_">Widget::on_btn_del_clicked</span><span class="hljs-params">()</span>&#123;    <span class="hljs-comment">/* 方法一 */</span>    QListWidgetItem *item = ui-&gt;listWidget-&gt;currentItem();    ui-&gt;listWidget-&gt;removeItemWidget(item);    delete item;    <span class="hljs-comment">/* 方法二 */</span><span class="hljs-comment">//    int row = ui-&gt;listWidget-&gt;currentRow();</span><span class="hljs-comment">//    QListWidgetItem *item = ui-&gt;listWidget-&gt;takeItem(row);</span><span class="hljs-comment">//    delete item;</span>&#125;</code></pre></div><p>效果：</p><p><img src="https://gitee.com/kayoungzhang/picgo_res/raw/master/img/image-20230702212610974.png" alt="image-20230702212610974" style="zoom:67%;" /></p><p>工程代码：<ahref="https://gitee.com/kayoungzhang/my_codehub/raw/master/Qt/listWidget.zip">listWidget</a></p><p>参考链接：</p><p>http://t.csdn.cn/QPdEH</p><p>http://t.csdn.cn/O8I4u</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;QListWidget用于显示结构简单的列表，相对于父类&lt;strong&gt;QListView&lt;/strong&gt;，它是“简易版”的
QListView，创建和使用列表的方式更简单、门槛更低。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://gitee.com/kayoun</summary>
      
    
    
    
    <category term="Qt" scheme="http://example.com/categories/Qt/"/>
    
    
    <category term="Qt" scheme="http://example.com/tags/Qt/"/>
    
  </entry>
  
  <entry>
    <title>Qt常用控件之进度条QProgressBar</title>
    <link href="http://example.com/2023/06/25/Qt%E5%B8%B8%E7%94%A8%E6%8E%A7%E4%BB%B6%E4%B9%8B%E8%BF%9B%E5%BA%A6%E6%9D%A1QProgressBar/"/>
    <id>http://example.com/2023/06/25/Qt%E5%B8%B8%E7%94%A8%E6%8E%A7%E4%BB%B6%E4%B9%8B%E8%BF%9B%E5%BA%A6%E6%9D%A1QProgressBar/</id>
    <published>2023-06-25T13:47:11.000Z</published>
    <updated>2023-07-03T05:10:09.049Z</updated>
    
    <content type="html"><![CDATA[<p><strong>QProgressBar</strong>是一种横向或者纵向显示进度的控件，用来描述任务的完成情况。QProgressBar继承于QWidget。</p><p><img src="https://gitee.com/kayoungzhang/picgo_res/raw/master/img/image-20230702155213581.png" alt="image-20230702155213581" style="zoom:67%;" /></p><h3 id="主要属性和方法">主要属性和方法</h3><ul><li>获取和设置当前值</li></ul><div class="code-wrapper"><pre><code class="hljs c"><span class="hljs-type">int</span> <span class="hljs-title function_">value</span><span class="hljs-params">()</span> <span class="hljs-type">const</span>;<span class="hljs-type">void</span> <span class="hljs-title function_">setValue</span><span class="hljs-params">(<span class="hljs-type">int</span>)</span>;ui-&gt;progressBar-&gt;setValue(<span class="hljs-number">30</span>);  <span class="hljs-comment">//设置当前显示值</span></code></pre></div><ul><li>获取和设置最大、最小值。如果最小值和最大值都设置为0，进度条会显示了一个繁忙指示，而不会显示当前的值。</li></ul><div class="code-wrapper"><pre><code class="hljs c"><span class="hljs-type">int</span> <span class="hljs-title function_">maximum</span><span class="hljs-params">()</span> <span class="hljs-type">const</span>;<span class="hljs-type">void</span> <span class="hljs-title function_">setMaximum</span><span class="hljs-params">(<span class="hljs-type">int</span>)</span>;<span class="hljs-type">int</span> <span class="hljs-title function_">minimum</span><span class="hljs-params">()</span> <span class="hljs-type">const</span>;<span class="hljs-type">void</span> <span class="hljs-title function_">setMinimum</span><span class="hljs-params">(<span class="hljs-type">int</span>)</span>;ui-&gt;progressBar-&gt;setMinimum(<span class="hljs-number">0</span>);  <span class="hljs-comment">//设置最小值</span>ui-&gt;progressBar-&gt;setMaximum(<span class="hljs-number">100</span>);  <span class="hljs-comment">//设置最大值</span></code></pre></div><p><img src="https://gitee.com/kayoungzhang/picgo_res/raw/master/img/image-20230702155419973.png" alt="image-20230702155419973" style="zoom:67%;" /></p><ul><li>获取和设置滑动条的方向</li></ul><div class="code-wrapper"><pre><code class="hljs c">Qt::Orientation <span class="hljs-title function_">orientation</span><span class="hljs-params">()</span> <span class="hljs-type">const</span><span class="hljs-type">void</span> <span class="hljs-title function_">setOrientation</span><span class="hljs-params">(Qt::Orientation)</span>ui-&gt;progressBar-&gt;<span class="hljs-title function_">setOrientation</span><span class="hljs-params">(Qt::Horizontal)</span>;  <span class="hljs-comment">//设置显示方向</span></code></pre></div><ul><li>获取和设置进度条的文本是否显示</li></ul><div class="code-wrapper"><pre><code class="hljs c"><span class="hljs-type">bool</span> <span class="hljs-title function_">isTextVisible</span><span class="hljs-params">()</span> <span class="hljs-type">const</span><span class="hljs-type">void</span> <span class="hljs-title function_">setTextVisible</span><span class="hljs-params">(<span class="hljs-type">bool</span> visible)</span>ui-&gt;progressBar-&gt;<span class="hljs-title function_">setTextVisible</span><span class="hljs-params">(<span class="hljs-literal">true</span>)</span>;  <span class="hljs-comment">//设置文字可见</span></code></pre></div><ul><li>获取和设置显示文字的格式，“%p%”显示百分比，“%v”显示当前值，“%m”显示总步数。缺省为“%p%”</li></ul><div class="code-wrapper"><pre><code class="hljs c">QString <span class="hljs-title function_">format</span><span class="hljs-params">()</span> <span class="hljs-type">const</span><span class="hljs-type">void</span> <span class="hljs-title function_">setFormat</span><span class="hljs-params">(<span class="hljs-type">const</span> QString &amp;format)</span>ui-&gt;progressBar-&gt;<span class="hljs-title function_">setFormat</span><span class="hljs-params">(<span class="hljs-string">&quot;%p%&quot;</span>)</span>;  <span class="hljs-comment">//设置文字显示格式</span></code></pre></div><h3 id="信号">信号</h3><div class="code-wrapper"><pre><code class="hljs c"><span class="hljs-type">void</span> <span class="hljs-title function_">valueChanged</span><span class="hljs-params">(<span class="hljs-type">int</span> value)</span></code></pre></div><h3 id="实例">实例</h3><p>创建新工程，在UI设计界面，拖拽相应控件，修改控件名字，完成布局。</p><figure><imgsrc="https://gitee.com/kayoungzhang/picgo_res/raw/master/img/image-20230702154508118.png"alt="image-20230702154508118" /><figcaption aria-hidden="true">image-20230702154508118</figcaption></figure><p>功能实现：</p><div class="code-wrapper"><pre><code class="hljs c">Widget::Widget(QWidget *parent)    : QWidget(parent)    , ui(new Ui::Widget)&#123;    ui-&gt;setupUi(this);    <span class="hljs-comment">/* 通过代码设置属性 */</span>    ui-&gt;progBar_download-&gt;setRange(<span class="hljs-number">0</span>, <span class="hljs-number">100</span>);    ui-&gt;progBar_download-&gt;setValue(<span class="hljs-number">0</span>); <span class="hljs-comment">//初始值为0</span>    ui-&gt;label_download-&gt;setText(<span class="hljs-string">&quot;&quot;</span>);    ui-&gt;label_copy-&gt;setText(<span class="hljs-string">&quot;&quot;</span>);    <span class="hljs-comment">/* 创建download定时器，并设置时间间隔50ms */</span>    m_timer_download = new QTimer();    m_timer_download-&gt;setInterval(<span class="hljs-number">50</span>);    <span class="hljs-comment">/* 创建copy定时器，并设置时间间隔5ms */</span>    m_timer_copy = new QTimer();    m_timer_copy-&gt;setInterval(<span class="hljs-number">5</span>);    <span class="hljs-comment">/* 点击下载按钮开启计时 */</span>    connect(ui-&gt;btn_download, &amp;QPushButton::clicked, this, [=]()&#123;        ui-&gt;progBar_download-&gt;reset(); <span class="hljs-comment">//便于重新开起下载</span>        m_timer_download-&gt;start();        ui-&gt;label_download-&gt;setText(<span class="hljs-string">&quot;下载中...&quot;</span>);    &#125;);    <span class="hljs-comment">/* 定时时间间隔到，执行槽函数 */</span>    connect(m_timer_download, &amp;QTimer::timeout, this, &amp;Widget::timer1_timeout_slot);    <span class="hljs-comment">/* 点击拷贝按钮开启计时 */</span>    connect(ui-&gt;btn_copy, &amp;QPushButton::clicked, this, [=]()&#123;        ui-&gt;progBar_copy-&gt;reset(); <span class="hljs-comment">//便于重新开起拷贝</span>        m_timer_copy-&gt;start();        ui-&gt;label_copy-&gt;setText(<span class="hljs-string">&quot;拷贝中...&quot;</span>);    &#125;);    <span class="hljs-comment">/* 定时时间间隔到，执行槽函数 */</span>    connect(m_timer_copy, &amp;QTimer::timeout, this, &amp;Widget::timer2_timeout_slot);&#125;Widget::~Widget()&#123;    delete ui;&#125;<span class="hljs-type">void</span> <span class="hljs-title function_">Widget::timer1_timeout_slot</span><span class="hljs-params">()</span>&#123;    <span class="hljs-keyword">if</span>(ui-&gt;progBar_download-&gt;value() == ui-&gt;progBar_download-&gt;maximum())    &#123;        this-&gt;m_timer_download-&gt;stop();<span class="hljs-comment">//下载完成，停止计时</span>        ui-&gt;label_download-&gt;setText(<span class="hljs-string">&quot;下载完成!&quot;</span>);    &#125;    <span class="hljs-keyword">else</span>    &#123;        ui-&gt;progBar_download-&gt;setValue(ui-&gt;progBar_download-&gt;value() + <span class="hljs-number">1</span>);<span class="hljs-comment">//每隔50ms值加1</span>    &#125;&#125;<span class="hljs-type">void</span> <span class="hljs-title function_">Widget::timer2_timeout_slot</span><span class="hljs-params">()</span>&#123;    <span class="hljs-keyword">if</span>(ui-&gt;progBar_copy-&gt;value() == ui-&gt;progBar_copy-&gt;maximum())    &#123;        this-&gt;m_timer_copy-&gt;stop();        ui-&gt;label_copy-&gt;setText(<span class="hljs-string">&quot;拷贝完成!&quot;</span>);    &#125;    <span class="hljs-keyword">else</span>    &#123;        ui-&gt;progBar_copy-&gt;setValue(ui-&gt;progBar_copy-&gt;value() + <span class="hljs-number">1</span>);    &#125;&#125;</code></pre></div><p>效果如下：</p><p><img src="https://gitee.com/kayoungzhang/picgo_res/raw/master/img/image-20230702154802368.png" alt="image-20230702154802368" style="zoom:67%;" /></p><p>工程文件：<ahref="https://gitee.com/kayoungzhang/my_codehub/raw/master/Qt/progressBar.zip">progressBar</a></p><p>参考链接：</p><p>http://t.csdn.cn/sxHV9</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;&lt;strong&gt;QProgressBar&lt;/strong&gt;
是一种横向或者纵向显示进度的控件，用来描述任务的完成情况。QProgressBar
继承于QWidget。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://gitee.com/kayoungzhang/pi</summary>
      
    
    
    
    <category term="Qt" scheme="http://example.com/categories/Qt/"/>
    
    
    <category term="Qt" scheme="http://example.com/tags/Qt/"/>
    
  </entry>
  
  <entry>
    <title>Qt常用控件之微调框QSpinBox</title>
    <link href="http://example.com/2023/06/25/Qt%E5%B8%B8%E7%94%A8%E6%8E%A7%E4%BB%B6%E4%B9%8B%E5%BE%AE%E8%B0%83%E6%A1%86QSpinBox/"/>
    <id>http://example.com/2023/06/25/Qt%E5%B8%B8%E7%94%A8%E6%8E%A7%E4%BB%B6%E4%B9%8B%E5%BE%AE%E8%B0%83%E6%A1%86QSpinBox/</id>
    <published>2023-06-25T13:46:44.000Z</published>
    <updated>2023-07-03T05:10:09.044Z</updated>
    
    <content type="html"><![CDATA[<p>QSpinBox用于整数的显示和输入，QDoubleSpinBox则用于显示和输入浮点值。它们均派生自QAbstractSPinBox类，具有大多数相同的属性，只是参数类型不同（一个<code>int</code>，一个<code>double</code>）。</p><p><img src="https://gitee.com/kayoungzhang/picgo_res/raw/master/img/image-20230702162506764.png" alt="image-20230702162506764" style="zoom:67%;" /></p><p>修改微调框数值的方式包括：</p><ul><li>单击右侧的向上/向下按钮</li><li>按键盘的向上/向下键</li><li>在微调框获取焦点时，通过鼠标滚轮的上下滚动</li></ul><h3 id="属性和方法">属性和方法</h3><ul><li>获取和设置当前值</li></ul><div class="code-wrapper"><pre><code class="hljs c"><span class="hljs-type">int</span> <span class="hljs-title function_">value</span><span class="hljs-params">()</span> <span class="hljs-type">const</span><span class="hljs-type">void</span> <span class="hljs-title function_">setValue</span><span class="hljs-params">(<span class="hljs-type">int</span> val)</span></code></pre></div><ul><li>获取和设置最大、最小值</li></ul><div class="code-wrapper"><pre><code class="hljs c"><span class="hljs-type">int</span> <span class="hljs-title function_">maximum</span><span class="hljs-params">()</span> <span class="hljs-type">const</span><span class="hljs-type">void</span> <span class="hljs-title function_">setMaximum</span><span class="hljs-params">(<span class="hljs-type">int</span> max)</span><span class="hljs-type">int</span> <span class="hljs-title function_">minimum</span><span class="hljs-params">()</span> <span class="hljs-type">const</span><span class="hljs-type">void</span> <span class="hljs-title function_">setMinimum</span><span class="hljs-params">(<span class="hljs-type">int</span> min)</span>    <span class="hljs-type">void</span> <span class="hljs-title function_">setRange</span><span class="hljs-params">(<span class="hljs-type">int</span> minimum, <span class="hljs-type">int</span> maximum)</span></code></pre></div><ul><li>获取和设置步长</li></ul><div class="code-wrapper"><pre><code class="hljs c"><span class="hljs-type">int</span> <span class="hljs-title function_">singleStep</span><span class="hljs-params">()</span> <span class="hljs-type">const</span><span class="hljs-type">void</span> <span class="hljs-title function_">setSingleStep</span><span class="hljs-params">(<span class="hljs-type">int</span> val)</span></code></pre></div><ul><li>获取和设置变化值是否循环改变</li></ul><div class="code-wrapper"><pre><code class="hljs c"><span class="hljs-type">bool</span> <span class="hljs-title function_">wrapping</span><span class="hljs-params">()</span> <span class="hljs-type">const</span><span class="hljs-type">void</span> <span class="hljs-title function_">setWrapping</span><span class="hljs-params">(<span class="hljs-type">bool</span> w)</span></code></pre></div><ul><li>获取和设置是否加速数值变化速度</li></ul><div class="code-wrapper"><pre><code class="hljs c"><span class="hljs-type">bool</span> <span class="hljs-title function_">isAccelerated</span><span class="hljs-params">()</span> <span class="hljs-type">const</span><span class="hljs-type">void</span> <span class="hljs-title function_">setAccelerated</span><span class="hljs-params">(<span class="hljs-type">bool</span> on)</span></code></pre></div><ul><li>获取和设置前缀和后缀</li></ul><div class="code-wrapper"><pre><code class="hljs c">QString <span class="hljs-title function_">prefix</span><span class="hljs-params">()</span> <span class="hljs-type">const</span><span class="hljs-type">void</span> <span class="hljs-title function_">setPrefix</span><span class="hljs-params">(<span class="hljs-type">const</span> QString &amp;prefix)</span>QString <span class="hljs-title function_">suffix</span><span class="hljs-params">()</span> <span class="hljs-type">const</span><span class="hljs-type">void</span> <span class="hljs-title function_">setSuffix</span><span class="hljs-params">(<span class="hljs-type">const</span> QString &amp;suffix)</span></code></pre></div><ul><li>信号</li></ul><div class="code-wrapper"><pre><code class="hljs c"><span class="hljs-type">void</span> <span class="hljs-title function_">textChanged</span><span class="hljs-params">(<span class="hljs-type">const</span> QString &amp;text)</span><span class="hljs-type">void</span> <span class="hljs-title function_">valueChanged</span><span class="hljs-params">(<span class="hljs-type">int</span> i)</span><span class="hljs-type">void</span> <span class="hljs-title function_">valueChanged</span><span class="hljs-params">(<span class="hljs-type">double</span> d)</span></code></pre></div><h3 id="实例">实例</h3><p>创建工程，进入UI设计界面，设计如下：</p><figure><imgsrc="https://gitee.com/kayoungzhang/picgo_res/raw/master/img/image-20230702170608521.png"alt="image-20230702170608521" /><figcaption aria-hidden="true">image-20230702170608521</figcaption></figure><p>功能实现：</p><div class="code-wrapper"><pre><code class="hljs c">Widget::Widget(QWidget *parent)    : QWidget(parent)    , ui(new Ui::Widget)&#123;    ui-&gt;setupUi(this);    <span class="hljs-comment">/* 设置SpinBox初始属性 */</span>    ui-&gt;spinBox_weight-&gt;setSuffix(<span class="hljs-string">&quot;kg&quot;</span>); <span class="hljs-comment">//后缀</span>    ui-&gt;spinBox_weight-&gt;setRange(<span class="hljs-number">0</span>, <span class="hljs-number">100</span>); <span class="hljs-comment">//范围0~100</span>    ui-&gt;spinBox_weight-&gt;setSingleStep(<span class="hljs-number">1</span>); <span class="hljs-comment">//步长为1</span>    ui-&gt;spinBox_weight-&gt;setAccelerated(<span class="hljs-literal">true</span>); <span class="hljs-comment">//允许加速</span>    ui-&gt;spinBox_weight-&gt;setWrapping(<span class="hljs-literal">true</span>); <span class="hljs-comment">//允许循环</span>    connect(ui-&gt;doubleSpinBox_price, SIGNAL(valueChanged(<span class="hljs-type">double</span>)), this, SLOT(price_value_slot(<span class="hljs-type">double</span>)));    connect(ui-&gt;spinBox_weight, SIGNAL(valueChanged(<span class="hljs-type">int</span>)), this, SLOT(weight_value_slot(<span class="hljs-type">int</span>)));&#125;Widget::~Widget()&#123;    delete ui;&#125;<span class="hljs-type">void</span> <span class="hljs-title function_">Widget::price_value_slot</span><span class="hljs-params">(<span class="hljs-type">double</span> price)</span>&#123;    <span class="hljs-type">double</span> total = ui-&gt;spinBox_weight-&gt;value() * price;    ui-&gt;lineEdit_total-&gt;setText(QString::number(total) + <span class="hljs-string">&quot;元&quot;</span>);&#125;<span class="hljs-type">void</span> <span class="hljs-title function_">Widget::weight_value_slot</span><span class="hljs-params">(<span class="hljs-type">int</span> weight)</span>&#123;    <span class="hljs-type">double</span> total = ui-&gt;doubleSpinBox_price-&gt;value() * weight;    ui-&gt;lineEdit_total-&gt;setText(QString::number(total) + <span class="hljs-string">&quot;元&quot;</span>);&#125;</code></pre></div><p>效果：</p><p><img src="https://gitee.com/kayoungzhang/picgo_res/raw/master/img/image-20230702173148063.png" alt="image-20230702173148063" style="zoom:67%;" /></p><p>工程代码：<ahref="https://gitee.com/kayoungzhang/my_codehub/raw/master/Qt/spinBox.zip">spinBox</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;QSpinBox
用于整数的显示和输入，QDoubleSpinBox则用于显示和输入浮点值。它们均派生自QAbstractSPinBox类，具有大多数相同的属性，只是参数类型不同（一个
&lt;code&gt;int&lt;/code&gt;，一个&lt;code&gt;double&lt;/code&gt;）。&lt;/</summary>
      
    
    
    
    <category term="Qt" scheme="http://example.com/categories/Qt/"/>
    
    
    <category term="Qt" scheme="http://example.com/tags/Qt/"/>
    
  </entry>
  
  <entry>
    <title>Qt常用控件之滑动条QSlider</title>
    <link href="http://example.com/2023/06/25/Qt%E5%B8%B8%E7%94%A8%E6%8E%A7%E4%BB%B6%E4%B9%8B%E6%BB%91%E5%8A%A8%E6%9D%A1QSlider/"/>
    <id>http://example.com/2023/06/25/Qt%E5%B8%B8%E7%94%A8%E6%8E%A7%E4%BB%B6%E4%B9%8B%E6%BB%91%E5%8A%A8%E6%9D%A1QSlider/</id>
    <published>2023-06-25T13:46:11.000Z</published>
    <updated>2023-07-03T05:10:09.046Z</updated>
    
    <content type="html"><![CDATA[<p>QSlider是滑动条控件，滑动条可以在一个范围内拖动，并将其位置转换为整数。</p><p><img src="https://gitee.com/kayoungzhang/picgo_res/raw/master/img/image-20230702175627021.png" alt="image-20230702175627021" style="zoom:67%;" /></p><h3 id="属性和方法">属性和方法</h3><p>QSlider 绝大多数属性和方法都是从 <strong>QAbstractSlider</strong>继承而来。</p><ul><li>获取和设置当前值</li></ul><div class="code-wrapper"><pre><code class="hljs c"><span class="hljs-type">int</span> <span class="hljs-title function_">value</span><span class="hljs-params">()</span> <span class="hljs-type">const</span>;<span class="hljs-type">void</span> <span class="hljs-title function_">setValue</span><span class="hljs-params">(<span class="hljs-type">int</span>)</span>;</code></pre></div><ul><li>获取和设置最大、最小值</li></ul><div class="code-wrapper"><pre><code class="hljs c"><span class="hljs-type">int</span> <span class="hljs-title function_">maximum</span><span class="hljs-params">()</span> <span class="hljs-type">const</span>;<span class="hljs-type">void</span> <span class="hljs-title function_">setMaximum</span><span class="hljs-params">(<span class="hljs-type">int</span>)</span>;<span class="hljs-type">int</span> <span class="hljs-title function_">minimum</span><span class="hljs-params">()</span> <span class="hljs-type">const</span>;<span class="hljs-type">void</span> <span class="hljs-title function_">setMinimum</span><span class="hljs-params">(<span class="hljs-type">int</span>)</span>;<span class="hljs-type">void</span> <span class="hljs-title function_">setRange</span><span class="hljs-params">(<span class="hljs-type">int</span> min, <span class="hljs-type">int</span> max)</span></code></pre></div><ul><li>获取和设置滑动条的方向</li></ul><div class="code-wrapper"><pre><code class="hljs c">Qt::Orientation <span class="hljs-title function_">orientation</span><span class="hljs-params">()</span> <span class="hljs-type">const</span>;<span class="hljs-type">void</span> <span class="hljs-title function_">setOrientation</span><span class="hljs-params">(Qt::Orientation)</span>;</code></pre></div><ul><li>获取和设置步长</li></ul><div class="code-wrapper"><pre><code class="hljs c"><span class="hljs-comment">/* 键盘的左右箭头 */</span><span class="hljs-type">int</span> <span class="hljs-title function_">singleStep</span><span class="hljs-params">()</span> <span class="hljs-type">const</span>;<span class="hljs-type">void</span> <span class="hljs-title function_">setSingleStep</span><span class="hljs-params">(<span class="hljs-type">int</span>)</span>;<span class="hljs-comment">/* 键盘的PageUp PageDown */</span><span class="hljs-type">int</span> <span class="hljs-title function_">pageStep</span><span class="hljs-params">()</span> <span class="hljs-type">const</span>;<span class="hljs-type">void</span> <span class="hljs-title function_">setPageStep</span><span class="hljs-params">(<span class="hljs-type">int</span>)</span>;</code></pre></div><ul><li>获取和设置刻度位置</li></ul><div class="code-wrapper"><pre><code class="hljs c">QSlider::TickPosition <span class="hljs-title function_">tickPosition</span><span class="hljs-params">()</span> <span class="hljs-type">const</span><span class="hljs-type">void</span> <span class="hljs-title function_">setTickPosition</span><span class="hljs-params">(QSlider::TickPosition position)</span>    QSlider::NoTicks            <span class="hljs-comment">//不显示刻度</span>QSlider::TicksBothSides     <span class="hljs-comment">//标尺两侧都显示刻度</span>QSlider::TicksAbove         <span class="hljs-comment">//标尺上方显示刻度</span>QSlider::TicksBelow         <span class="hljs-comment">//标尺下方显示刻度</span>QSlider::TicksLeft          <span class="hljs-comment">//标尺左侧显示刻度</span>QSlider::TicksRight         <span class="hljs-comment">//标尺右侧显示刻度    </span></code></pre></div><ul><li>信号</li></ul><div class="code-wrapper"><pre><code class="hljs c"><span class="hljs-type">void</span> <span class="hljs-title function_">valueChanged</span><span class="hljs-params">()</span><span class="hljs-type">void</span> <span class="hljs-title function_">sliderPressed</span><span class="hljs-params">()</span><span class="hljs-type">void</span> <span class="hljs-title function_">sliderMoved</span><span class="hljs-params">()</span><span class="hljs-type">void</span> <span class="hljs-title function_">sliderReleased</span><span class="hljs-params">()</span></code></pre></div><h3 id="实例">实例</h3><p>新建工程，进入UI设计界面，设计如下：</p><figure><imgsrc="https://gitee.com/kayoungzhang/picgo_res/raw/master/img/image-20230702182410401.png"alt="image-20230702182410401" /><figcaption aria-hidden="true">image-20230702182410401</figcaption></figure><p>功能实现：</p><div class="code-wrapper"><pre><code class="hljs c"><span class="hljs-comment">/* 横向滑动条属性在UI界面已经设置，下面进行竖向滑动条属性设置 */</span>ui-&gt;slider_v-&gt;setRange(<span class="hljs-number">0</span>, <span class="hljs-number">100</span>);ui-&gt;slider_v-&gt;setSingleStep(<span class="hljs-number">1</span>);ui-&gt;slider_v-&gt;setPageStep(<span class="hljs-number">10</span>);ui-&gt;slider_v-&gt;setTickPosition(QSlider::TicksRight);ui-&gt;slider_v-&gt;setTickInterval(<span class="hljs-number">5</span>);<span class="hljs-comment">/* 数值改变将值显示在文本框中 */</span>connect(ui-&gt;slider_h, &amp;QSlider::valueChanged, this, [=]()&#123;    <span class="hljs-type">int</span> value = ui-&gt;slider_h-&gt;value();    ui-&gt;lineEdit_value-&gt;setText(QString::number(value));&#125;);connect(ui-&gt;slider_v, &amp;QSlider::valueChanged, this, [=]()&#123;    <span class="hljs-type">int</span> value = ui-&gt;slider_v-&gt;value();    ui-&gt;lineEdit_value-&gt;setText(QString::number(value));&#125;);</code></pre></div><p>效果：</p><p><img src="https://gitee.com/kayoungzhang/picgo_res/raw/master/img/image-20230702183709747.png" alt="image-20230702183709747" style="zoom:67%;" /></p><p>工程代码：<ahref="https://gitee.com/kayoungzhang/my_codehub/raw/master/Qt/slider.zip">slider</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;QSlider
是滑动条控件，滑动条可以在一个范围内拖动，并将其位置转换为整数。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://gitee.com/kayoungzhang/picgo_res/raw/master/img/image-202307021756270</summary>
      
    
    
    
    <category term="Qt" scheme="http://example.com/categories/Qt/"/>
    
    
    <category term="Qt" scheme="http://example.com/tags/Qt/"/>
    
  </entry>
  
  <entry>
    <title>Qt常用控件之组合框QComboBox</title>
    <link href="http://example.com/2023/06/25/Qt%E5%B8%B8%E7%94%A8%E6%8E%A7%E4%BB%B6%E4%B9%8B%E7%BB%84%E5%90%88%E6%A1%86QComboBox/"/>
    <id>http://example.com/2023/06/25/Qt%E5%B8%B8%E7%94%A8%E6%8E%A7%E4%BB%B6%E4%B9%8B%E7%BB%84%E5%90%88%E6%A1%86QComboBox/</id>
    <published>2023-06-25T13:45:42.000Z</published>
    <updated>2023-07-03T05:10:09.046Z</updated>
    
    <content type="html"><![CDATA[<p>Qt中组合框（QComboBox）提供了一种占用空间最小的方式，其表现形式如下：</p><p><img src="https://gitee.com/kayoungzhang/picgo_res/raw/master/img/image-20230701112012020.png" alt="image-20230701112012020" style="zoom:67%;" /></p><h3 id="属性">属性</h3><ul><li><code>count: const int</code> --&gt;组合框中的项目数</li><li><code>currentData : const QVariant</code> --&gt;当前项目的数据</li><li><code>currentIndex : int</code> --&gt;组合框中当前项目的索引</li><li><code>currentText : QString</code> --&gt;当前文本</li><li><code>insertPolicy : InsertPolicy</code>--&gt;插入的项目在组合框中的位置策略</li><li><code>maxCount : int</code> --&gt;组合框中允许的最大项目数</li><li><code>minimumContentsLength : int</code>--&gt;组合框的最小字符数</li><li><code>modelColumn : int</code> --&gt;模型中可见的列</li><li><code>sizeAdjustPolicy : SizeAdjustPolicy</code>--&gt;组合框大小的更改策略</li></ul><h3 id="信号">信号</h3><div class="code-wrapper"><pre><code class="hljs c"><span class="hljs-type">void</span> <span class="hljs-title function_">activated</span><span class="hljs-params">(<span class="hljs-type">int</span> index)</span>  <span class="hljs-comment">//当选择组合框中的项目时发送此信号。</span><span class="hljs-type">void</span> <span class="hljs-title function_">currentIndexChanged</span><span class="hljs-params">(<span class="hljs-type">int</span> index)</span>  <span class="hljs-comment">//当组合框中的 currentIndex更改时，就会发送此信号。如果组合框变空则index为 -1。 </span><span class="hljs-type">void</span> <span class="hljs-title function_">currentTextChanged</span><span class="hljs-params">(<span class="hljs-type">const</span> QString &amp;text)</span>  <span class="hljs-comment">//当组合框中的项目更改时，就会发送此信号。</span><span class="hljs-type">void</span> <span class="hljs-title function_">editTextChanged</span><span class="hljs-params">(<span class="hljs-type">const</span> QString &amp;text)</span> <span class="hljs-comment">//当组合框的行编辑小部件中的文本发生更改时，会发出此信号。</span></code></pre></div><h3 id="槽函数与成员函数">槽函数与成员函数</h3><div class="code-wrapper"><pre><code class="hljs c"><span class="hljs-type">void</span> <span class="hljs-title function_">clear</span><span class="hljs-params">()</span>  <span class="hljs-comment">//清除组合框，删除所有项目。</span><span class="hljs-type">void</span> <span class="hljs-title function_">clearEditText</span><span class="hljs-params">()</span>  <span class="hljs-comment">//清除组合框中用于编辑的行编辑的内容。</span><span class="hljs-type">void</span> <span class="hljs-title function_">setCurrentIndex</span><span class="hljs-params">(<span class="hljs-type">int</span> index)</span>  <span class="hljs-comment">//设置当前项目索引</span><span class="hljs-type">void</span> <span class="hljs-title function_">setCurrentText</span><span class="hljs-params">(<span class="hljs-type">const</span> QString &amp;text)</span> <span class="hljs-comment">//设置当前项目文字</span><span class="hljs-type">void</span> <span class="hljs-title function_">setEditText</span><span class="hljs-params">(<span class="hljs-type">const</span> QString &amp;text)</span>  <span class="hljs-comment">//设置项目编辑的文字</span><span class="hljs-comment">/* 添加项目和删除项目及获取或设置项目 */</span><span class="hljs-type">void</span> <span class="hljs-title function_">addItem</span><span class="hljs-params">(<span class="hljs-type">const</span> QString &amp;text, <span class="hljs-type">const</span> QVariant &amp;userData = QVariant())</span><span class="hljs-type">void</span> <span class="hljs-title function_">addItem</span><span class="hljs-params">(<span class="hljs-type">const</span> QIcon &amp;icon, <span class="hljs-type">const</span> QString &amp;text, <span class="hljs-type">const</span> QVariant &amp;userData = QVariant())</span><span class="hljs-type">void</span> <span class="hljs-title function_">addItems</span><span class="hljs-params">(<span class="hljs-type">const</span> QStringList &amp;texts)</span>    <span class="hljs-type">void</span> <span class="hljs-title function_">insertItem</span><span class="hljs-params">(<span class="hljs-type">int</span> index, <span class="hljs-type">const</span> QString &amp;text, <span class="hljs-type">const</span> QVariant &amp;userData = QVariant())</span><span class="hljs-type">void</span> <span class="hljs-title function_">insertItem</span><span class="hljs-params">(<span class="hljs-type">int</span> index, <span class="hljs-type">const</span> QIcon &amp;icon, <span class="hljs-type">const</span> QString &amp;text, <span class="hljs-type">const</span> QVariant &amp;userData = QVariant())</span><span class="hljs-type">void</span> <span class="hljs-title function_">insertItems</span><span class="hljs-params">(<span class="hljs-type">int</span> index, <span class="hljs-type">const</span> QStringList &amp;<span class="hljs-built_in">list</span>)</span><span class="hljs-type">void</span> <span class="hljs-title function_">removeItem</span><span class="hljs-params">(<span class="hljs-type">int</span> index)</span><span class="hljs-type">void</span> <span class="hljs-title function_">setInsertPolicy</span><span class="hljs-params">(QComboBox::InsertPolicy policy)</span> <span class="hljs-comment">//设置插入策略</span><span class="hljs-type">int</span> <span class="hljs-title function_">currentIndex</span><span class="hljs-params">()</span> <span class="hljs-type">const</span>QString <span class="hljs-title function_">currentText</span><span class="hljs-params">()</span> <span class="hljs-type">const</span>    <span class="hljs-type">void</span> <span class="hljs-title function_">setItemText</span><span class="hljs-params">(<span class="hljs-type">int</span> index, <span class="hljs-type">const</span> QString &amp;text)</span></code></pre></div><p>这里主要说一下增加项目的方法，既可以通过以上函数增加，也可以在UI设计界面进行增加</p><ul><li>通过函数</li></ul><div class="code-wrapper"><pre><code class="hljs c">QStringList cityList = &#123;<span class="hljs-string">&quot;广州市&quot;</span>, <span class="hljs-string">&quot;深圳市&quot;</span>, <span class="hljs-string">&quot;珠海市&quot;</span>, <span class="hljs-string">&quot;东莞市&quot;</span>&#125;;<span class="hljs-comment">// 添加城市</span>ui-&gt;comboBox_province-&gt;addItem(<span class="hljs-string">&quot;广东省&quot;</span>);ui-&gt;comboBox_city-&gt;addItems(cityList);</code></pre></div><ul><li>在组合框上右键-&gt;【编辑项目…】，在打开的编辑窗口中可以增加删除条目</li></ul><p><img src="https://gitee.com/kayoungzhang/picgo_res/raw/master/img/image-20230701132003241.png" alt="image-20230701132003241" style="zoom:67%;" /></p><h3 id="案例">案例</h3><p>创建一个基类为QWidget的工程，如下：</p><figure><imgsrc="https://gitee.com/kayoungzhang/picgo_res/raw/master/img/image-20230701182531243.png"alt="image-20230701182531243" /><figcaption aria-hidden="true">image-20230701182531243</figcaption></figure><p>下面进行工程实现：</p><div class="code-wrapper"><pre><code class="hljs c">Widget::Widget(QWidget *parent)    : QWidget(parent)    , ui(new Ui::Widget)&#123;    ui-&gt;setupUi(this);    <span class="hljs-comment">/* 创建城市列表 */</span>    gdCityList = QStringList&#123;<span class="hljs-string">&quot;广州市&quot;</span>, <span class="hljs-string">&quot;深圳市&quot;</span>, <span class="hljs-string">&quot;珠海市&quot;</span>&#125;;    hnCityList = QStringList&#123;<span class="hljs-string">&quot;郑州市&quot;</span>, <span class="hljs-string">&quot;洛阳市&quot;</span>, <span class="hljs-string">&quot;信阳市&quot;</span>&#125;;    hbCityList = QStringList&#123;<span class="hljs-string">&quot;武汉市&quot;</span>, <span class="hljs-string">&quot;黄石市&quot;</span>, <span class="hljs-string">&quot;宜昌市&quot;</span>&#125;;    sdCityList = QStringList&#123;<span class="hljs-string">&quot;济南市&quot;</span>, <span class="hljs-string">&quot;青岛市&quot;</span>, <span class="hljs-string">&quot;烟台市&quot;</span>&#125;;    zjCityList = QStringList&#123;<span class="hljs-string">&quot;杭州市&quot;</span>, <span class="hljs-string">&quot;宁波市&quot;</span>, <span class="hljs-string">&quot;温州市&quot;</span>&#125;;    <span class="hljs-comment">/* 创建大学列表 */</span>    gdUniversityList = QStringList&#123;<span class="hljs-string">&quot;中山大学&quot;</span>, <span class="hljs-string">&quot;广州大学&quot;</span>, <span class="hljs-string">&quot;深圳大学&quot;</span>, <span class="hljs-string">&quot;南方科技大学&quot;</span>&#125;;    hnUniversityList = QStringList&#123;<span class="hljs-string">&quot;郑州大学&quot;</span>, <span class="hljs-string">&quot;河南大学&quot;</span>, <span class="hljs-string">&quot;信阳师范大学&quot;</span>, <span class="hljs-string">&quot;河南科技大学&quot;</span>&#125;;    hbUniversityList = QStringList&#123;<span class="hljs-string">&quot;武汉大学&quot;</span>, <span class="hljs-string">&quot;华中科技大学&quot;</span>, <span class="hljs-string">&quot;湖北师范大学&quot;</span>, <span class="hljs-string">&quot;三峡大学&quot;</span>&#125;;    sdUniversityList = QStringList&#123;<span class="hljs-string">&quot;济南大学&quot;</span>, <span class="hljs-string">&quot;青岛大学&quot;</span>, <span class="hljs-string">&quot;青岛理工大学&quot;</span>, <span class="hljs-string">&quot;烟台大学&quot;</span>&#125;;    zjUniversityList = QStringList&#123;<span class="hljs-string">&quot;浙江大学&quot;</span>, <span class="hljs-string">&quot;杭州师范大学&quot;</span>, <span class="hljs-string">&quot;宁波大学&quot;</span>, <span class="hljs-string">&quot;温州大学&quot;</span>&#125;;    <span class="hljs-comment">/* 为comboBox_province添加省份 */</span>    ui-&gt;comboBox_province-&gt;addItem(QIcon(<span class="hljs-string">&quot;:/pic/guangdong.png&quot;</span>), <span class="hljs-string">&quot;广东省&quot;</span>);    ui-&gt;comboBox_province-&gt;addItem(QIcon(<span class="hljs-string">&quot;:/pic/henan.png&quot;</span>), <span class="hljs-string">&quot;河南省&quot;</span>);    ui-&gt;comboBox_province-&gt;addItem(QIcon(<span class="hljs-string">&quot;:/pic/hubei.png&quot;</span>), <span class="hljs-string">&quot;湖北省&quot;</span>);    ui-&gt;comboBox_province-&gt;addItem(QIcon(<span class="hljs-string">&quot;:/pic/shandong.png&quot;</span>), <span class="hljs-string">&quot;山东省&quot;</span>);    ui-&gt;comboBox_province-&gt;addItem(QIcon(<span class="hljs-string">&quot;:/pic/zhejiang.png&quot;</span>), <span class="hljs-string">&quot;浙江省&quot;</span>);    <span class="hljs-comment">/* 为comboBox_city和comboBox_school添加默认城市和学校 */</span>    ui-&gt;comboBox_province-&gt;setCurrentIndex(<span class="hljs-number">0</span>);    ui-&gt;comboBox_city-&gt;addItems(gdCityList);    ui-&gt;comboBox_school-&gt;addItems(gdUniversityList);    <span class="hljs-comment">/* 自定义槽函数，当省份改变，触发槽机制，连接信号与槽 */</span>    connect(ui-&gt;comboBox_province, SIGNAL(currentIndexChanged(<span class="hljs-type">int</span>)), this, SLOT(province_changed_slot(<span class="hljs-type">int</span>)));&#125;<span class="hljs-comment">/* 当省份改变时，城市和学校相应发生变化 */</span><span class="hljs-type">void</span> <span class="hljs-title function_">Widget::province_changed_slot</span><span class="hljs-params">(<span class="hljs-type">int</span> index)</span>&#123;    ui-&gt;comboBox_city-&gt;clear();<span class="hljs-comment">//清空之前的项目内容</span>    ui-&gt;comboBox_school-&gt;clear();    <span class="hljs-keyword">switch</span> (index)    &#123;        <span class="hljs-keyword">case</span> <span class="hljs-number">0</span>:            ui-&gt;comboBox_city-&gt;addItems(gdCityList);            ui-&gt;comboBox_school-&gt;addItems(gdUniversityList);            <span class="hljs-keyword">break</span>;        <span class="hljs-keyword">case</span> <span class="hljs-number">1</span>:            ui-&gt;comboBox_city-&gt;addItems(hnCityList);            ui-&gt;comboBox_school-&gt;addItems(hnUniversityList);            <span class="hljs-keyword">break</span>;        <span class="hljs-keyword">case</span> <span class="hljs-number">2</span>:            ui-&gt;comboBox_city-&gt;addItems(hbCityList);            ui-&gt;comboBox_school-&gt;addItems(hbUniversityList);            <span class="hljs-keyword">break</span>;        <span class="hljs-keyword">case</span> <span class="hljs-number">3</span>:            ui-&gt;comboBox_city-&gt;addItems(sdCityList);            ui-&gt;comboBox_school-&gt;addItems(sdUniversityList);            <span class="hljs-keyword">break</span>;        <span class="hljs-keyword">case</span> <span class="hljs-number">4</span>:            ui-&gt;comboBox_city-&gt;addItems(zjCityList);            ui-&gt;comboBox_school-&gt;addItems(zjUniversityList);            <span class="hljs-keyword">break</span>;        <span class="hljs-keyword">default</span>:            <span class="hljs-keyword">break</span>;    &#125;&#125;<span class="hljs-type">void</span> <span class="hljs-title function_">Widget::on_btn_clicked</span><span class="hljs-params">()</span>&#123;    <span class="hljs-comment">/* 获取姓名、大学、省份、城市 */</span>    QString name = ui-&gt;comboBox_name-&gt;currentText();    QString province = ui-&gt;comboBox_province-&gt;currentText();    QString city = ui-&gt;comboBox_city-&gt;currentText();    QString university = ui-&gt;comboBox_school-&gt;currentText();    QString info = name + <span class="hljs-string">&quot; 来自于&quot;</span> + province + city + <span class="hljs-string">&quot;的&quot;</span> + university;    QMessageBox::information(this, <span class="hljs-string">&quot;学生信息&quot;</span>, info);&#125;</code></pre></div><p>效果如下：</p><p><img src="https://gitee.com/kayoungzhang/picgo_res/raw/master/img/image-20230701185527403.png" alt="image-20230701185527403" style="zoom:67%;" /></p><p>工程代码：<ahref="https://gitee.com/kayoungzhang/my_codehub/raw/master/Qt/comboBox.zip">comboBox</a></p><p>参考链接：</p><p>http://t.csdn.cn/8Aesg</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;Qt中组合框（QComboBox）提供了一种占用空间最小的方式，其表现形式如下：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://gitee.com/kayoungzhang/picgo_res/raw/master/img/image-2023070111201202</summary>
      
    
    
    
    <category term="Qt" scheme="http://example.com/categories/Qt/"/>
    
    
    <category term="Qt" scheme="http://example.com/tags/Qt/"/>
    
  </entry>
  
  <entry>
    <title>Qt常用控件之单选按钮QradioButton与复选按钮QCheckBox</title>
    <link href="http://example.com/2023/06/25/Qt%E5%B8%B8%E7%94%A8%E6%8E%A7%E4%BB%B6%E4%B9%8B%E5%8D%95%E9%80%89%E6%8C%89%E9%92%AEQradioButton%E4%B8%8E%E5%A4%8D%E9%80%89%E6%8C%89%E9%92%AEQCheckBox/"/>
    <id>http://example.com/2023/06/25/Qt%E5%B8%B8%E7%94%A8%E6%8E%A7%E4%BB%B6%E4%B9%8B%E5%8D%95%E9%80%89%E6%8C%89%E9%92%AEQradioButton%E4%B8%8E%E5%A4%8D%E9%80%89%E6%8C%89%E9%92%AEQCheckBox/</id>
    <published>2023-06-25T13:44:57.000Z</published>
    <updated>2023-07-03T05:10:09.041Z</updated>
    
    <content type="html"><![CDATA[<p>QRadioButton是单选按钮，常用作表单互斥选择选项，在“多选一”的场景中使用，也就是说在一组单选按钮中，一次只能选中一个单选按钮。如下所示：</p><p><img src="https://gitee.com/kayoungzhang/picgo_res/raw/master/img/image-20230701191912177.png" alt="image-20230701191912177" style="zoom:67%;" /></p><p>QCheckBox是复选按钮，常用在”多选多“的场景中。如下所示：</p><p><img src="https://gitee.com/kayoungzhang/picgo_res/raw/master/img/image-20230701194047634.png" alt="image-20230701194047634" style="zoom:80%;" /></p><h3 id="属性和方法">属性和方法</h3><p>QRadioButton和QCheckBox的属性和方法主要继承于父类<strong>QAbstractButton</strong> 。</p><ul><li>获取和设置显示的文本</li></ul><div class="code-wrapper"><pre><code class="hljs c">QString <span class="hljs-title function_">text</span><span class="hljs-params">()</span> <span class="hljs-type">const</span><span class="hljs-type">void</span> <span class="hljs-title function_">setText</span><span class="hljs-params">(<span class="hljs-type">const</span> QString &amp;text)</span></code></pre></div><ul><li>获取和设置单选按钮的选中状态</li></ul><div class="code-wrapper"><pre><code class="hljs c"><span class="hljs-type">bool</span> <span class="hljs-title function_">isChecked</span><span class="hljs-params">()</span> <span class="hljs-type">const</span><span class="hljs-type">void</span> <span class="hljs-title function_">setChecked</span><span class="hljs-params">(<span class="hljs-type">bool</span>)</span></code></pre></div><ul><li>获取和设置自动互斥，单选按钮默认是互斥的，复选按钮默认不是互斥的。</li></ul><div class="code-wrapper"><pre><code class="hljs c"><span class="hljs-type">bool</span> <span class="hljs-title function_">autoExclusive</span><span class="hljs-params">()</span> <span class="hljs-type">const</span><span class="hljs-type">void</span> <span class="hljs-title function_">setAutoExclusive</span><span class="hljs-params">(<span class="hljs-type">bool</span>)</span></code></pre></div><p>单选按钮“多选一” 要满足以下两个条件：</p><ol type="1"><li>同一组的单选按钮，在同一个布局中。</li><li>单选按钮的 <code>autoExclusive</code> 属性设置为<code>true</code>，默认是使能的。</li></ol><p><img src="https://gitee.com/kayoungzhang/picgo_res/raw/master/img/image-20230701192850832.png" alt="image-20230701192850832" style="zoom:67%;" /></p><ul><li>设置和获取复选按钮的状态</li></ul><div class="code-wrapper"><pre><code class="hljs c">Qt::CheckState <span class="hljs-title function_">checkState</span><span class="hljs-params">()</span> <span class="hljs-type">const</span><span class="hljs-type">void</span> <span class="hljs-title function_">setCheckState</span><span class="hljs-params">(Qt::CheckState state)</span></code></pre></div><h3 id="信号">信号</h3><p>QRadioButton的信号与槽同样主要继承父类<strong>QAbstractButton</strong> 。</p><div class="code-wrapper"><pre><code class="hljs c"><span class="hljs-type">void</span> <span class="hljs-title function_">clicked</span><span class="hljs-params">(<span class="hljs-type">bool</span> checked = <span class="hljs-literal">false</span>)</span><span class="hljs-type">void</span> <span class="hljs-title function_">pressed</span><span class="hljs-params">()</span><span class="hljs-type">void</span> <span class="hljs-title function_">released</span><span class="hljs-params">()</span><span class="hljs-type">void</span> <span class="hljs-title function_">toggled</span><span class="hljs-params">(<span class="hljs-type">bool</span> checked)</span> <span class="hljs-comment">//选中与未选中的状态变化</span></code></pre></div><p>QCheckBox的信号：</p><div class="code-wrapper"><pre><code class="hljs c"><span class="hljs-type">void</span> <span class="hljs-title function_">stateChanged</span><span class="hljs-params">(<span class="hljs-type">int</span> state)</span> <span class="hljs-comment">//选中，未选中，部分选中</span></code></pre></div><p>state的值主要有三种：</p><p><img src="https://gitee.com/kayoungzhang/picgo_res/raw/master/img/image-20230701194849109.png" alt="image-20230701194849109" style="zoom:67%;" /></p><h3 id="案例">案例</h3><p>创建一个新工程，在UI设计界面设计如下：</p><figure><imgsrc="https://gitee.com/kayoungzhang/picgo_res/raw/master/img/image-20230701211442724.png"alt="image-20230701211442724" /><figcaption aria-hidden="true">image-20230701211442724</figcaption></figure><p>功能实现：</p><div class="code-wrapper"><pre><code class="hljs c">Widget::Widget(QWidget *parent)    : QWidget(parent)    , ui(new Ui::Widget)&#123;    ui-&gt;setupUi(this);    <span class="hljs-comment">/* 设置国籍默认选项 */</span>    ui-&gt;radioButton_China-&gt;setChecked(<span class="hljs-literal">true</span>);    <span class="hljs-comment">/* 连接信号与槽 */</span>    connect(ui-&gt;checkBox_clibling, &amp;QCheckBox::clicked, this, &amp;Widget::checkBox_hobby_slot);    connect(ui-&gt;checkBox_playball, &amp;QCheckBox::clicked, this, &amp;Widget::checkBox_hobby_slot);    connect(ui-&gt;checkBox_reading, &amp;QCheckBox::clicked, this, &amp;Widget::checkBox_hobby_slot);    connect(ui-&gt;checkBox_swimming, &amp;QCheckBox::clicked, this, &amp;Widget::checkBox_hobby_slot);    connect(ui-&gt;btn, &amp;QPushButton::clicked,[=]()&#123;        btn_info_slot();    &#125;);&#125;<span class="hljs-type">void</span> <span class="hljs-title function_">Widget::on_checkBox_all_clicked</span><span class="hljs-params">()</span>&#123;    <span class="hljs-keyword">if</span>(ui-&gt;checkBox_all-&gt;isChecked())    &#123;        ui-&gt;checkBox_clibling-&gt;setChecked(<span class="hljs-literal">true</span>);        ui-&gt;checkBox_playball-&gt;setChecked(<span class="hljs-literal">true</span>);        ui-&gt;checkBox_reading-&gt;setChecked(<span class="hljs-literal">true</span>);        ui-&gt;checkBox_swimming-&gt;setChecked(<span class="hljs-literal">true</span>);    &#125;    <span class="hljs-keyword">else</span>    &#123;        ui-&gt;checkBox_clibling-&gt;setChecked(<span class="hljs-literal">false</span>);        ui-&gt;checkBox_playball-&gt;setChecked(<span class="hljs-literal">false</span>);        ui-&gt;checkBox_reading-&gt;setChecked(<span class="hljs-literal">false</span>);        ui-&gt;checkBox_swimming-&gt;setChecked(<span class="hljs-literal">false</span>);    &#125;&#125;<span class="hljs-type">void</span> <span class="hljs-title function_">Widget::checkBox_hobby_slot</span><span class="hljs-params">()</span>&#123;    <span class="hljs-comment">/* 获取爱好是否选中的状态 */</span>    <span class="hljs-type">bool</span> ischeck_clibling = ui-&gt;checkBox_clibling-&gt;isChecked();    <span class="hljs-type">bool</span> ischeck_playball = ui-&gt;checkBox_playball-&gt;isChecked();    <span class="hljs-type">bool</span> ischeck_reading = ui-&gt;checkBox_reading-&gt;isChecked();    <span class="hljs-type">bool</span> ischeck_swimming = ui-&gt;checkBox_swimming-&gt;isChecked();    <span class="hljs-comment">/* 全部选中 */</span>    <span class="hljs-keyword">if</span>(ischeck_clibling &amp;&amp; ischeck_playball &amp;&amp; ischeck_reading &amp;&amp; ischeck_swimming)    &#123;        ui-&gt;checkBox_all-&gt;setCheckState(Qt::Checked);    &#125;    <span class="hljs-comment">/* 全部未选中 */</span>    <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(!ischeck_clibling &amp;&amp; !ischeck_playball &amp;&amp; !ischeck_reading &amp;&amp; !ischeck_swimming)    &#123;        ui-&gt;checkBox_all-&gt;setCheckState(Qt::Unchecked);    &#125;    <span class="hljs-comment">/* 部分选中 */</span>    <span class="hljs-keyword">else</span>    &#123;        ui-&gt;checkBox_all-&gt;setCheckState(Qt::PartiallyChecked);    &#125;&#125;<span class="hljs-type">void</span> <span class="hljs-title function_">Widget::btn_info_slot</span><span class="hljs-params">()</span>&#123;    QString str;    <span class="hljs-comment">/* 性别 */</span>    str = <span class="hljs-string">&quot;性别：&quot;</span>;    <span class="hljs-keyword">if</span>(ui-&gt;radioButton_male-&gt;isChecked())        str += ui-&gt;radioButton_male-&gt;text();    <span class="hljs-keyword">else</span>        str += ui-&gt;radioButton_female-&gt;text();    <span class="hljs-comment">/* 婚姻 */</span>    str += <span class="hljs-string">&quot;; 婚姻状况：&quot;</span>;    <span class="hljs-keyword">if</span>(ui-&gt;radioButton_lady-&gt;isChecked())        str += ui-&gt;radioButton_lady-&gt;text();    <span class="hljs-keyword">else</span>        str += ui-&gt;radioButton_woman-&gt;text();    <span class="hljs-comment">/* 学历 */</span>    str += <span class="hljs-string">&quot;; 学历：&quot;</span>;    <span class="hljs-keyword">if</span>(ui-&gt;radioButton_junior-&gt;isChecked())        str += ui-&gt;radioButton_junior-&gt;text();    <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(ui-&gt;radioButton_bachelor-&gt;isChecked())        str += ui-&gt;radioButton_bachelor-&gt;text();    <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(ui-&gt;radioButton_doctor-&gt;isChecked())        str += ui-&gt;radioButton_doctor-&gt;text();    <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(ui-&gt;radioButton_master-&gt;isChecked())        str += ui-&gt;radioButton_master-&gt;text();    <span class="hljs-comment">/* 国籍 */</span>    str += <span class="hljs-string">&quot;; 国籍：&quot;</span>;    <span class="hljs-keyword">if</span>(ui-&gt;radioButton_America-&gt;isChecked())        str += ui-&gt;radioButton_America-&gt;text();    <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(ui-&gt;radioButton_China-&gt;isChecked())        str += ui-&gt;radioButton_China-&gt;text();    <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(ui-&gt;radioButton_France-&gt;isChecked())        str += ui-&gt;radioButton_France-&gt;text();    <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(ui-&gt;radioButton_German-&gt;isChecked())        str += ui-&gt;radioButton_German-&gt;text();    <span class="hljs-comment">/* 爱好 */</span>    str += <span class="hljs-string">&quot;; 爱好：&quot;</span>;    <span class="hljs-keyword">if</span>(ui-&gt;checkBox_clibling-&gt;isChecked())        str += ui-&gt;checkBox_clibling-&gt;text() + <span class="hljs-string">&quot; &quot;</span>;    <span class="hljs-keyword">if</span>(ui-&gt;checkBox_playball-&gt;isChecked())        str += ui-&gt;checkBox_playball-&gt;text() + <span class="hljs-string">&quot; &quot;</span>;    <span class="hljs-keyword">if</span>(ui-&gt;checkBox_reading-&gt;isChecked())        str += ui-&gt;checkBox_reading-&gt;text() + <span class="hljs-string">&quot; &quot;</span>;    <span class="hljs-keyword">if</span>(ui-&gt;checkBox_swimming-&gt;isChecked())        str += ui-&gt;checkBox_swimming-&gt;text() + <span class="hljs-string">&quot; &quot;</span>;    <span class="hljs-comment">/* 信息输出 */</span>    QMessageBox::information(this, <span class="hljs-string">&quot;您的个人信息：&quot;</span>, str);&#125;</code></pre></div><p>效果：</p><p><img src="https://gitee.com/kayoungzhang/picgo_res/raw/master/img/image-20230701225352502.png" alt="image-20230701225352502" style="zoom:70%;" /></p><p>工程代码：<ahref="https://gitee.com/kayoungzhang/my_codehub/raw/master/Qt/radioBtnAndCheckBox.zip">radioBtnAndCheckBox</a></p><p>s</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;QRadioButton是单选按钮，常用作表单互斥选择选项，在“多选一”的场景中使用，也就是说在一组单选按钮中，一次只能选中一个单选按钮。如下所示：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://gitee.com/kayoungzhang/picgo_res/raw</summary>
      
    
    
    
    <category term="Qt" scheme="http://example.com/categories/Qt/"/>
    
    
    <category term="Qt" scheme="http://example.com/tags/Qt/"/>
    
  </entry>
  
  <entry>
    <title>Qt常用控件之文本框QLineEdit</title>
    <link href="http://example.com/2023/06/25/Qt%E5%B8%B8%E7%94%A8%E6%8E%A7%E4%BB%B6%E4%B9%8B%E6%96%87%E6%9C%AC%E6%A1%86QLineEdit/"/>
    <id>http://example.com/2023/06/25/Qt%E5%B8%B8%E7%94%A8%E6%8E%A7%E4%BB%B6%E4%B9%8B%E6%96%87%E6%9C%AC%E6%A1%86QLineEdit/</id>
    <published>2023-06-25T13:44:20.000Z</published>
    <updated>2023-06-29T15:17:11.217Z</updated>
    
    <content type="html"><![CDATA[<p>QLineEdit是一个单行文本输入框,允许用户输入和编辑单行纯文本，它自带一些如撤销、重做、剪切、粘贴、拖拽等文本编辑功能。</p><h2 id="类型成员">类型成员</h2><p><strong>enum ActionPosition { LeadingPoisition, TrailingPosition}</strong></p><p>此枚举类型描述QLineEdit应该如何显示要添加的Action小部件。</p><ul><li><code>QLineEdit::LeadingPosition</code>：当使用 Qt::LeftToRight布局方向时，小部件显示在文本的左侧，当使用 Qt::RightToLeft时，小部件则显示在文本的右侧。</li><li><code>QLineEdit::TrailingPosition</code>：当使用 Qt::LeftToRight布局方向时，小部件显示在文本的右侧，当使用 Qt::RightToLeft时，小部件则显示在文本的左侧。</li></ul><p><strong>enum EchoMode { Normal, NoEcho, Password, PasswordEchoOnEdit}</strong></p><p>此枚举类型描述QLineEdit应如何显示其内容。</p><ul><li><code>QLineEdit::Normal</code> :输入时显示字符, 默认设置。</li><li><code>QLineEdit::NoEcho</code> :不显示任何输入内容。</li><li><code>QLineEdit::Password</code>：输入字符一般以<code>●</code>号表示。</li><li><code>QLineEdit::PasswordEchoOnEdit</code>：在输入时显示输入的字符，输入完成后一般以<code>●</code>号显示。</li></ul><h2 id="属性和方法">属性和方法</h2><p>QLineEdit有很多属性和方法，这里列举一些常用的：</p><ul><li>获取和设置占位字符串</li></ul><div class="code-wrapper"><pre><code class="hljs c">QString <span class="hljs-title function_">placeholderText</span><span class="hljs-params">()</span> <span class="hljs-type">const</span><span class="hljs-type">void</span> <span class="hljs-title function_">setPlaceholderText</span><span class="hljs-params">(<span class="hljs-type">const</span> QString &amp;)</span>    <span class="hljs-comment">//设置QLineEdit 编辑行显示灰色占位符文本</span></code></pre></div><ul><li>获取和设置文本的对齐方式</li></ul><div class="code-wrapper"><pre><code class="hljs c">Qt::Alignment <span class="hljs-title function_">alignment</span><span class="hljs-params">()</span> <span class="hljs-type">const</span><span class="hljs-type">void</span> <span class="hljs-title function_">setAlignment</span><span class="hljs-params">(Qt::Alignment flag)</span></code></pre></div><ul><li>获取和设置回显模式</li></ul><div class="code-wrapper"><pre><code class="hljs c">QLineEdit::EchoMode <span class="hljs-title function_">echoMode</span><span class="hljs-params">()</span> <span class="hljs-type">const</span><span class="hljs-type">void</span> <span class="hljs-title function_">setEchoMode</span><span class="hljs-params">(QLineEdit::EchoMode)</span></code></pre></div><ul><li>设置文本框是否可编辑</li></ul><div class="code-wrapper"><pre><code class="hljs c"><span class="hljs-type">bool</span> <span class="hljs-title function_">isReadOnly</span><span class="hljs-params">()</span> <span class="hljs-type">const</span><span class="hljs-type">void</span> <span class="hljs-title function_">setReadOnly</span><span class="hljs-params">(<span class="hljs-type">bool</span>)</span></code></pre></div><ul><li>设置文本框是否使能</li></ul><div class="code-wrapper"><pre><code class="hljs c"><span class="hljs-type">bool</span> <span class="hljs-title function_">isEnabled</span><span class="hljs-params">()</span> <span class="hljs-type">const</span><span class="hljs-type">void</span> <span class="hljs-title function_">setEnabled</span><span class="hljs-params">(<span class="hljs-type">bool</span>)</span></code></pre></div><ul><li>设置和获取文本框内容格式</li></ul><div class="code-wrapper"><pre><code class="hljs c">QString <span class="hljs-title function_">inputMask</span><span class="hljs-params">()</span> <span class="hljs-type">const</span> <span class="hljs-type">void</span> <span class="hljs-title function_">setInputMask</span><span class="hljs-params">(<span class="hljs-type">const</span> QString &amp;inputMask)</span></code></pre></div><ul><li>信号与槽函数</li></ul><div class="code-wrapper"><pre><code class="hljs c"><span class="hljs-comment">/* 信号 */</span><span class="hljs-type">void</span> <span class="hljs-title function_">cursorPositionChanged</span><span class="hljs-params">(<span class="hljs-type">int</span> oldPos, <span class="hljs-type">int</span> newPos)</span><span class="hljs-type">void</span> <span class="hljs-title function_">editingFinished</span><span class="hljs-params">()</span><span class="hljs-type">void</span> <span class="hljs-title function_">inputRejected</span><span class="hljs-params">()</span><span class="hljs-type">void</span> <span class="hljs-title function_">returnPressed</span><span class="hljs-params">()</span><span class="hljs-type">void</span> <span class="hljs-title function_">selectionChanged</span><span class="hljs-params">()</span><span class="hljs-type">void</span> <span class="hljs-title function_">textChanged</span><span class="hljs-params">(<span class="hljs-type">const</span> QString &amp;text)</span><span class="hljs-type">void</span> <span class="hljs-title function_">textEdited</span><span class="hljs-params">(<span class="hljs-type">const</span> QString &amp;text)</span><span class="hljs-comment">/* 槽函数 */</span>    <span class="hljs-type">void</span> <span class="hljs-title function_">clear</span><span class="hljs-params">()</span><span class="hljs-type">void</span> <span class="hljs-title function_">copy</span><span class="hljs-params">()</span> <span class="hljs-type">const</span><span class="hljs-type">void</span> <span class="hljs-title function_">cut</span><span class="hljs-params">()</span><span class="hljs-type">void</span> <span class="hljs-title function_">paste</span><span class="hljs-params">()</span><span class="hljs-type">void</span> <span class="hljs-title function_">redo</span><span class="hljs-params">()</span> <span class="hljs-comment">//恢复上一次操作</span><span class="hljs-type">void</span> <span class="hljs-title function_">selectAll</span><span class="hljs-params">()</span><span class="hljs-type">void</span> <span class="hljs-title function_">setText</span><span class="hljs-params">(<span class="hljs-type">const</span> QString &amp;)</span><span class="hljs-type">void</span> <span class="hljs-title function_">undo</span><span class="hljs-params">()</span> <span class="hljs-comment">//撤销上一次操作</span></code></pre></div><p>其它详细内容，参考帮助文档。</p><h2 id="应用实例">应用实例</h2><p>新建一个 lineEdit 的工程，进入UI设计界面，设计如下：</p><figure><imgsrc="https://gitee.com/kayoungzhang/picgo_res/raw/master/img/image-20230629230058729.png"alt="image-20230629230058729" /><figcaption aria-hidden="true">image-20230629230058729</figcaption></figure><p>下面进行功能实现：</p><div class="code-wrapper"><pre><code class="hljs c"><span class="hljs-type">void</span> <span class="hljs-title function_">Widget::on_btn_print_clicked</span><span class="hljs-params">()</span>&#123;    QMessageBox::information(this, <span class="hljs-string">&quot;信息输出&quot;</span>, ui-&gt;lineEdit_content-&gt;text());&#125;<span class="hljs-type">void</span> <span class="hljs-title function_">Widget::on_btn_normal_clicked</span><span class="hljs-params">()</span>&#123;    ui-&gt;lineEdit_content-&gt;clear();    ui-&gt;lineEdit_content-&gt;setEchoMode(QLineEdit::Normal);    ui-&gt;lineEdit_content-&gt;setPlaceholderText(<span class="hljs-string">&quot;Normal&quot;</span>);&#125;<span class="hljs-type">void</span> <span class="hljs-title function_">Widget::on_btn_noecho_clicked</span><span class="hljs-params">()</span>&#123;    ui-&gt;lineEdit_content-&gt;clear();    ui-&gt;lineEdit_content-&gt;setEchoMode(QLineEdit::NoEcho);    ui-&gt;lineEdit_content-&gt;setPlaceholderText(<span class="hljs-string">&quot;NoEcho&quot;</span>);&#125;<span class="hljs-type">void</span> <span class="hljs-title function_">Widget::on_btn_password_clicked</span><span class="hljs-params">()</span>&#123;    ui-&gt;lineEdit_content-&gt;clear();    ui-&gt;lineEdit_content-&gt;setEchoMode(QLineEdit::Password);    ui-&gt;lineEdit_content-&gt;setPlaceholderText(<span class="hljs-string">&quot;Password&quot;</span>);&#125;<span class="hljs-type">void</span> <span class="hljs-title function_">Widget::on_btn_pwdAndEcho_clicked</span><span class="hljs-params">()</span>&#123;    ui-&gt;lineEdit_content-&gt;clear();    ui-&gt;lineEdit_content-&gt;setEchoMode(QLineEdit::PasswordEchoOnEdit);    ui-&gt;lineEdit_content-&gt;setPlaceholderText(<span class="hljs-string">&quot;PasswordEchoOnEdit&quot;</span>);&#125;<span class="hljs-type">void</span> <span class="hljs-title function_">Widget::on_btn_placeholder_clicked</span><span class="hljs-params">()</span>&#123;    ui-&gt;lineEdit_content-&gt;clear();    ui-&gt;lineEdit_content-&gt;setPlaceholderText(<span class="hljs-string">&quot;请输入名字：&quot;</span>);&#125;<span class="hljs-type">void</span> <span class="hljs-title function_">Widget::on_btn_clearbtn_clicked</span><span class="hljs-params">()</span>&#123;    ui-&gt;lineEdit_content-&gt;clear();    ui-&gt;lineEdit_content-&gt;setClearButtonEnabled(<span class="hljs-literal">true</span>);&#125;<span class="hljs-type">void</span> <span class="hljs-title function_">Widget::on_btn_rw_clicked</span><span class="hljs-params">()</span>&#123;    ui-&gt;lineEdit_content-&gt;setReadOnly(<span class="hljs-literal">false</span>);    ui-&gt;lineEdit_content-&gt;setPlaceholderText(<span class="hljs-string">&quot;ReadAndWrite&quot;</span>);&#125;<span class="hljs-type">void</span> <span class="hljs-title function_">Widget::on_btn_ro_clicked</span><span class="hljs-params">()</span>&#123;    ui-&gt;lineEdit_content-&gt;setReadOnly(<span class="hljs-literal">true</span>);    ui-&gt;lineEdit_content-&gt;setPlaceholderText(<span class="hljs-string">&quot;ReadOnly&quot;</span>);&#125;<span class="hljs-type">void</span> <span class="hljs-title function_">Widget::on_btn_disable_clicked</span><span class="hljs-params">()</span>&#123;    ui-&gt;lineEdit_content-&gt;setEnabled(<span class="hljs-literal">false</span>);    ui-&gt;lineEdit_content-&gt;setPlaceholderText(<span class="hljs-string">&quot;Disabled&quot;</span>);&#125;<span class="hljs-type">void</span> <span class="hljs-title function_">Widget::on_btn_enable_clicked</span><span class="hljs-params">()</span>&#123;    ui-&gt;lineEdit_content-&gt;setEnabled(<span class="hljs-literal">true</span>);    ui-&gt;lineEdit_content-&gt;setPlaceholderText(<span class="hljs-string">&quot;Enabled&quot;</span>);&#125;<span class="hljs-type">void</span> <span class="hljs-title function_">Widget::on_btn_none_clicked</span><span class="hljs-params">()</span>&#123;    ui-&gt;lineEdit_content-&gt;clear();    ui-&gt;lineEdit_content-&gt;setInputMask(<span class="hljs-string">&quot;&quot;</span>);&#125;<span class="hljs-type">void</span> <span class="hljs-title function_">Widget::on_btn_phone_clicked</span><span class="hljs-params">()</span>&#123;    ui-&gt;lineEdit_content-&gt;clear();    ui-&gt;lineEdit_content-&gt;setInputMask(<span class="hljs-string">&quot;99999999999;#&quot;</span>); <span class="hljs-comment">//要求输入0-9的数字 ,未输入时显示#</span>&#125;<span class="hljs-type">void</span> <span class="hljs-title function_">Widget::on_btn_key_clicked</span><span class="hljs-params">()</span>&#123;    ui-&gt;lineEdit_content-&gt;clear();    ui-&gt;lineEdit_content-&gt;setInputMask(<span class="hljs-string">&quot;&gt;AAAAA-AAAAA-AAAAA-AAAAA-AAAAA;#&quot;</span>); <span class="hljs-comment">//要求输入大写字母 ,未输入时显示#</span>&#125;<span class="hljs-type">void</span> <span class="hljs-title function_">Widget::on_btn_data_clicked</span><span class="hljs-params">()</span>&#123;    ui-&gt;lineEdit_content-&gt;clear();    ui-&gt;lineEdit_content-&gt;setInputMask(<span class="hljs-string">&quot;0000-00-00&quot;</span>); <span class="hljs-comment">//要求输入0-9的数字</span>&#125;<span class="hljs-type">void</span> <span class="hljs-title function_">Widget::on_btn_ip_clicked</span><span class="hljs-params">()</span>&#123;    ui-&gt;lineEdit_content-&gt;clear();    ui-&gt;lineEdit_content-&gt;setInputMask(<span class="hljs-string">&quot;000.000.000.000;_&quot;</span>); <span class="hljs-comment">//要求输入0-9的数字,未输入时显示_</span>&#125;<span class="hljs-type">void</span> <span class="hljs-title function_">Widget::on_lineEdit_num2_editingFinished</span><span class="hljs-params">()</span>&#123;    <span class="hljs-type">int</span> sum = ui-&gt;lineEdit_num1-&gt;text().toInt() + ui-&gt;lineEdit_num2-&gt;text().toInt();    ui-&gt;lineEdit_sum-&gt;setText(QString::number(sum));&#125;<span class="hljs-type">void</span> <span class="hljs-title function_">Widget::on_lineEdit_num4_textChanged</span><span class="hljs-params">(<span class="hljs-type">const</span> QString &amp;arg1)</span>&#123;    <span class="hljs-type">int</span> minus = ui-&gt;lineEdit_num3-&gt;text().toInt()- arg1.toInt();    ui-&gt;lineEdit_minus-&gt;setText(QString::number(minus));&#125;<span class="hljs-type">void</span> <span class="hljs-title function_">Widget::on_lineEdit_num6_returnPressed</span><span class="hljs-params">()</span>&#123;    <span class="hljs-type">int</span> multi = ui-&gt;lineEdit_num5-&gt;text().toInt() * ui-&gt;lineEdit_num6-&gt;text().toInt();    ui-&gt;lineEdit_muliti-&gt;setText(QString::number(multi));&#125;</code></pre></div><p>工程代码：<ahref="https://gitee.com/kayoungzhang/my_codehub/raw/master/Qt/lineEdit.zip">lineEdit</a></p><p>参考链接：</p><p>http://t.csdn.cn/eRQsV</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;QLineEdit是一个单行文本输入框,允许用户输入和编辑单行纯文本，它自带一些如撤销、重做、剪切、粘贴、拖拽等文本编辑功能。&lt;/p&gt;
&lt;h2 id=&quot;类型成员&quot;&gt;类型成员&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;enum ActionPosition { LeadingPoi</summary>
      
    
    
    
    <category term="Qt" scheme="http://example.com/categories/Qt/"/>
    
    
    <category term="Qt" scheme="http://example.com/tags/Qt/"/>
    
  </entry>
  
  <entry>
    <title>Qt常用控件之标签QLabel</title>
    <link href="http://example.com/2023/06/25/Qt%E5%B8%B8%E7%94%A8%E6%8E%A7%E4%BB%B6%E4%B9%8B%E6%A0%87%E7%AD%BEQLabel/"/>
    <id>http://example.com/2023/06/25/Qt%E5%B8%B8%E7%94%A8%E6%8E%A7%E4%BB%B6%E4%B9%8B%E6%A0%87%E7%AD%BEQLabel/</id>
    <published>2023-06-25T13:43:50.000Z</published>
    <updated>2023-06-29T10:32:08.923Z</updated>
    
    <content type="html"><![CDATA[<h3 id="qlabel属性和方法">QLabel属性和方法</h3><p>QLabel用于显示文本或图像，它有很多属性和方法，常用的主要有：</p><ul><li>获取和设置文本</li></ul><div class="code-wrapper"><pre><code class="hljs c">String <span class="hljs-title function_">text</span><span class="hljs-params">()</span> <span class="hljs-type">const</span>;<span class="hljs-type">void</span> <span class="hljs-title function_">setText</span><span class="hljs-params">(<span class="hljs-type">const</span> QString &amp;text)</span>;</code></pre></div><ul><li>设置标签中内容的对齐方式</li></ul><div class="code-wrapper"><pre><code class="hljs c">Qt::Alignment <span class="hljs-title function_">alignment</span><span class="hljs-params">()</span> <span class="hljs-type">const</span>;<span class="hljs-type">void</span> <span class="hljs-title function_">setAlignment</span><span class="hljs-params">(Qt::Alignment)</span>;</code></pre></div><p><code>Qt::Alignment</code> 是一个宏，常用取值如下：</p><p><img src="https://gitee.com/kayoungzhang/picgo_res/raw/master/img/image-20230628190853765.png" alt="image-20230628190853765" style="zoom:67%;" /></p><ul><li>标签内容换行</li></ul><div class="code-wrapper"><pre><code class="hljs c"><span class="hljs-type">bool</span> <span class="hljs-title function_">wordWrap</span><span class="hljs-params">()</span> <span class="hljs-type">const</span>;<span class="hljs-type">void</span> <span class="hljs-title function_">setWordWrap</span><span class="hljs-params">(<span class="hljs-type">bool</span> on)</span>;</code></pre></div><ul><li>获取和设置标签上显示的图像</li></ul><div class="code-wrapper"><pre><code class="hljs c"><span class="hljs-type">const</span> QPixmap *<span class="hljs-title function_">pixmap</span><span class="hljs-params">()</span> <span class="hljs-type">const</span>;<span class="hljs-type">void</span> <span class="hljs-title function_">setPixmap</span><span class="hljs-params">(<span class="hljs-type">const</span> QPixmap &amp;)</span>;</code></pre></div><ul><li>设置动图</li></ul><div class="code-wrapper"><pre><code class="hljs c"><span class="hljs-type">void</span> <span class="hljs-title function_">setMovie</span><span class="hljs-params">(QMovie *movie)</span>;</code></pre></div><h3 id="qlabel的使用">QLabel的使用</h3><p>创建基类为QWidget的工程，进入UI设计界面，进行如下设计：</p><figure><imgsrc="https://gitee.com/kayoungzhang/picgo_res/raw/master/img/image-20230628202616484.png"alt="image-20230628202616484" /><figcaption aria-hidden="true">image-20230628202616484</figcaption></figure><p>下面进行功能实现：</p><div class="code-wrapper"><pre><code class="hljs c"><span class="hljs-comment">/* 缩放widget，标签文本允许换行 */</span><span class="hljs-type">void</span> <span class="hljs-title function_">Widget::on_btn_enableWrap_clicked</span><span class="hljs-params">()</span>&#123;    ui-&gt;label_text-&gt;setWordWrap(<span class="hljs-literal">true</span>);&#125;<span class="hljs-comment">/* 缩放widget，标签文本不允许换行 */</span><span class="hljs-type">void</span> <span class="hljs-title function_">Widget::on_btn_disableWrap_clicked</span><span class="hljs-params">()</span>&#123;    ui-&gt;label_text-&gt;setWordWrap(<span class="hljs-literal">false</span>);&#125;<span class="hljs-comment">/* 设置标签文本对齐方式 */</span><span class="hljs-type">void</span> <span class="hljs-title function_">Widget::on_btn_left_clicked</span><span class="hljs-params">()</span>&#123;    ui-&gt;label_text-&gt;setAlignment(Qt::AlignLeft | Qt::AlignVCenter);&#125;<span class="hljs-type">void</span> <span class="hljs-title function_">Widget::on_btn_center_clicked</span><span class="hljs-params">()</span>&#123;    ui-&gt;label_text-&gt;setAlignment(Qt::AlignCenter);&#125;<span class="hljs-type">void</span> <span class="hljs-title function_">Widget::on_btn_right_clicked</span><span class="hljs-params">()</span>&#123;    ui-&gt;label_text-&gt;setAlignment(Qt::AlignRight | Qt::AlignVCenter);&#125;<span class="hljs-comment">/* 弹出消息对话框信息 */</span><span class="hljs-type">void</span> <span class="hljs-title function_">Widget::on_btn_getText_clicked</span><span class="hljs-params">()</span>&#123;    QMessageBox::information(this, <span class="hljs-string">&quot;文本信息&quot;</span>, ui-&gt;label_text-&gt;text());<span class="hljs-comment">//需要添加头文件&lt;QMessageBox&gt;</span>&#125;<span class="hljs-type">void</span> <span class="hljs-title function_">Widget::on_btn_setText_clicked</span><span class="hljs-params">()</span>&#123;    <span class="hljs-comment">/* 获取当前时间并转换为字符串 */</span>    QString str = QTime::currentTime().toString(); <span class="hljs-comment">//需要添加头文件&lt;QTime&gt;</span>    ui-&gt;label_text-&gt;setText(str);    QFont font = QFont(<span class="hljs-string">&quot;宋体&quot;</span>, <span class="hljs-number">15</span>);    ui-&gt;label_text-&gt;setFont(font); <span class="hljs-comment">//设置字体</span>    ui-&gt;label_text-&gt;setAlignment(Qt::AlignCenter);&#125;<span class="hljs-type">void</span> <span class="hljs-title function_">Widget::on_btn_setlink_clicked</span><span class="hljs-params">()</span>&#123;    ui-&gt;label_text-&gt;setText(<span class="hljs-string">&quot;&lt;h1&gt;&lt;a href=\&quot;https://www.baidu.com\&quot;&gt;百度一下&lt;/a&gt;&lt;/h1&gt;&quot;</span>);    <span class="hljs-comment">/* 开启点击自动跳转到超链接地址 */</span>    ui-&gt;label_text-&gt;setOpenExternalLinks(<span class="hljs-literal">true</span>);    ui-&gt;label_text-&gt;setAlignment(Qt::AlignCenter);&#125;<span class="hljs-type">void</span> <span class="hljs-title function_">Widget::on_btn_change_clicked</span><span class="hljs-params">()</span>&#123;    QPixmap pixmap;    <span class="hljs-comment">/* 首先判断图片切换的位置 */</span>    <span class="hljs-keyword">if</span>(index &gt; <span class="hljs-number">12</span>)    &#123;        index = <span class="hljs-number">1</span>;    &#125;    QString str = <span class="hljs-string">&quot;:/png/&quot;</span> + QString::number(index) + <span class="hljs-string">&quot;.png&quot;</span>; <span class="hljs-comment">//拼接图片路径</span>    index++; <span class="hljs-comment">//切换到下一张图片</span>    pixmap.load(str);    ui-&gt;label_pic-&gt;setPixmap(pixmap);    ui-&gt;label_pic-&gt;setScaledContents(<span class="hljs-literal">false</span>); <span class="hljs-comment">//不要缩放，否则拉伸导致失真</span>&#125;<span class="hljs-type">void</span> <span class="hljs-title function_">Widget::on_btn_disp_clicked</span><span class="hljs-params">()</span>&#123;    QMovie *movie = new QMovie(<span class="hljs-string">&quot;:/png/movie.gif&quot;</span>);<span class="hljs-comment">//添加头文件&lt;QMovie&gt;</span>    movie-&gt;start(); <span class="hljs-comment">//播放动画</span>    ui-&gt;label_pic-&gt;setMovie(movie);&#125;</code></pre></div><p>工程文件：<ahref="https://gitee.com/kayoungzhang/my_codehub/raw/master/Qt/label.zip">label</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;qlabel属性和方法&quot;&gt;QLabel属性和方法&lt;/h3&gt;
&lt;p&gt;QLabel用于显示文本或图像，它有很多属性和方法，常用的主要有：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;获取和设置文本&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&quot;code-wrapper&quot;&gt;&lt;p</summary>
      
    
    
    
    <category term="Qt" scheme="http://example.com/categories/Qt/"/>
    
    
    <category term="Qt" scheme="http://example.com/tags/Qt/"/>
    
  </entry>
  
  <entry>
    <title>Qt常用控件之按钮QPushButton</title>
    <link href="http://example.com/2023/06/25/Qt%E5%B8%B8%E7%94%A8%E6%8E%A7%E4%BB%B6%E4%B9%8B%E6%8C%89%E9%92%AEQPushButton/"/>
    <id>http://example.com/2023/06/25/Qt%E5%B8%B8%E7%94%A8%E6%8E%A7%E4%BB%B6%E4%B9%8B%E6%8C%89%E9%92%AEQPushButton/</id>
    <published>2023-06-25T13:42:32.000Z</published>
    <updated>2023-06-29T10:32:08.921Z</updated>
    
    <content type="html"><![CDATA[<p><code>QPushButton</code> 是 <code>Qt</code>中的按钮类，属于最常用的控件，当点击按钮时，就可执行相应的操作。</p><p>可以在UI设计界面直接拖动pushbutton来创建按钮，也可以通过代码进行new创建，如 :</p><div class="code-wrapper"><pre><code class="hljs c">QPushButton *button = new QPushButton(<span class="hljs-string">&quot;&amp;Download&quot;</span>, this);</code></pre></div><p>以上创建了一个带有文字 <code>Download</code> 的按钮，快捷键为<code>Alt + D</code>, 这里的 <strong>&amp;</strong>符号为快捷键标识。</p><h2 id="qpushbutton的属性和方法">QpushButton的属性和方法</h2><ul><li>获取和设置按钮的文本</li></ul><div class="code-wrapper"><pre><code class="hljs c">QString <span class="hljs-title function_">text</span><span class="hljs-params">()</span> <span class="hljs-type">const</span><span class="hljs-type">void</span> <span class="hljs-title function_">setText</span><span class="hljs-params">(<span class="hljs-type">const</span> QString &amp;text)</span></code></pre></div><ul><li>获取和设置按钮的图标</li></ul><div class="code-wrapper"><pre><code class="hljs c">QIcon <span class="hljs-title function_">icon</span><span class="hljs-params">()</span> <span class="hljs-type">const</span><span class="hljs-type">void</span> <span class="hljs-title function_">setIcon</span><span class="hljs-params">(<span class="hljs-type">const</span> QIcon &amp;icon)</span></code></pre></div><ul><li>样式表可以设置包括文本颜色、背景色、边框、字体等很多样式</li></ul><div class="code-wrapper"><pre><code class="hljs c"><span class="hljs-comment">// 只要继承自QWidget类的控件，都有该属性</span>QString <span class="hljs-title function_">styleSheet</span><span class="hljs-params">()</span> <span class="hljs-type">const</span><span class="hljs-type">void</span> <span class="hljs-title function_">setStyleSheet</span><span class="hljs-params">(<span class="hljs-type">const</span> QString &amp;styleSheet)</span></code></pre></div><ul><li>Signals &amp; Slots</li></ul><div class="code-wrapper"><pre><code class="hljs c"><span class="hljs-type">void</span> <span class="hljs-title function_">clicked</span><span class="hljs-params">(<span class="hljs-type">bool</span> checked = <span class="hljs-literal">false</span>)</span> <span class="hljs-comment">//通常不需要传递这个默认参数</span><span class="hljs-type">void</span> <span class="hljs-title function_">pressed</span><span class="hljs-params">()</span><span class="hljs-type">void</span> <span class="hljs-title function_">released</span><span class="hljs-params">()</span><span class="hljs-type">void</span> <span class="hljs-title function_">toggled</span><span class="hljs-params">(<span class="hljs-type">bool</span> checked)</span>    <span class="hljs-type">void</span> <span class="hljs-title function_">showMenu</span><span class="hljs-params">()</span> <span class="hljs-comment">//弹出菜单</span></code></pre></div><p>其它函数具体参看帮助文档。</p><h2 id="实例">实例</h2><p>新建一个基类为QWidget的工程，勾选 'Generate form'。</p><p><img src="https://gitee.com/kayoungzhang/picgo_res/raw/master/img/image-20230626222427044.png" alt="image-20230626222427044" style="zoom:67%;" /></p><p>在UI设计界面，拖拽对应的控件，进行如下设置：</p><figure><imgsrc="https://gitee.com/kayoungzhang/picgo_res/raw/master/img/image-20230626230434261.png"alt="image-20230626230434261" /><figcaption aria-hidden="true">image-20230626230434261</figcaption></figure><p>下面进行功能实现：</p><div class="code-wrapper"><pre><code class="hljs c"><span class="hljs-type">void</span> <span class="hljs-title function_">Widget::on_btn_stop_clicked</span><span class="hljs-params">()</span>&#123;    <span class="hljs-comment">/* 获取按钮文本 */</span>    QString text = ui-&gt;btn_stop-&gt;text();    <span class="hljs-comment">/* 判断处理 */</span>    <span class="hljs-keyword">if</span>(text == <span class="hljs-string">&quot;启动&quot;</span>)    &#123;        ui-&gt;btn_stop-&gt;setText(<span class="hljs-string">&quot;停止&quot;</span>);<span class="hljs-comment">// 设置文本和字体</span>        ui-&gt;btn_stop-&gt;setIcon(QIcon(<span class="hljs-string">&quot;:/stop.ico&quot;</span>));<span class="hljs-comment">// 设置图标和图标大小</span>        ui-&gt;btn_stop-&gt;setIconSize(QSize(<span class="hljs-number">32</span>, <span class="hljs-number">32</span>));    &#125;    <span class="hljs-keyword">else</span>    &#123;        ui-&gt;btn_stop-&gt;setText(<span class="hljs-string">&quot;启动&quot;</span>);        ui-&gt;btn_stop-&gt;setIcon(QIcon(<span class="hljs-string">&quot;:/start.ico&quot;</span>));        ui-&gt;btn_stop-&gt;setIconSize(QSize(<span class="hljs-number">32</span>, <span class="hljs-number">32</span>));    &#125;&#125;<span class="hljs-type">void</span> <span class="hljs-title function_">Widget::on_btn_connect_clicked</span><span class="hljs-params">()</span>&#123;    QString s = ui-&gt;btn_connect-&gt;text();    <span class="hljs-keyword">if</span>(s == <span class="hljs-string">&quot;连接&quot;</span>)    &#123;        ui-&gt;btn_connect-&gt;setText(<span class="hljs-string">&quot;断开连接&quot;</span>);        ui-&gt;btn_send-&gt;setEnabled(<span class="hljs-literal">true</span>);    &#125;    <span class="hljs-keyword">else</span>    &#123;        ui-&gt;btn_connect-&gt;setText(<span class="hljs-string">&quot;连接&quot;</span>);        ui-&gt;btn_send-&gt;setEnabled(<span class="hljs-literal">false</span>);    &#125;&#125;<span class="hljs-comment">/* 按钮信号演示 */</span><span class="hljs-type">void</span> <span class="hljs-title function_">Widget::on_btn_signal_clicked</span><span class="hljs-params">()</span>&#123;    qDebug() &lt;&lt; <span class="hljs-string">&quot;clicked...&quot;</span>;&#125;<span class="hljs-type">void</span> <span class="hljs-title function_">Widget::on_btn_signal_pressed</span><span class="hljs-params">()</span>&#123;     qDebug() &lt;&lt; <span class="hljs-string">&quot;pressed...&quot;</span>;&#125;<span class="hljs-type">void</span> <span class="hljs-title function_">Widget::on_btn_signal_released</span><span class="hljs-params">()</span>&#123;     qDebug() &lt;&lt; <span class="hljs-string">&quot;released...&quot;</span>;&#125;</code></pre></div><p>对于样式表：</p><p>在右侧的属性窗口中，或者在按钮上右键-&gt;【改变样式表…】，打开编辑样式表的对话框，设置了按钮的字体颜色和背景渐变‘RainBow’。</p><p>工程代码：<ahref="https://gitee.com/kayoungzhang/my_codehub/raw/master/Qt/pushButton.zip">pushButton</a></p><p>参考链接：</p><p>http://t.csdn.cn/qxhG0</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;&lt;code&gt;QPushButton&lt;/code&gt; 是 &lt;code&gt;Qt&lt;/code&gt;
中的按钮类，属于最常用的控件，当点击按钮时，就可执行相应的操作。&lt;/p&gt;
&lt;p&gt;可以在UI设计界面直接拖动push
button来创建按钮，也可以通过代码进行new创建，如 :&lt;/p</summary>
      
    
    
    
    <category term="Qt" scheme="http://example.com/categories/Qt/"/>
    
    
    <category term="Qt" scheme="http://example.com/tags/Qt/"/>
    
  </entry>
  
  <entry>
    <title>Qt常用控件之窗口基类 QWidget</title>
    <link href="http://example.com/2023/06/25/Qt%E5%B8%B8%E7%94%A8%E6%8E%A7%E4%BB%B6%E4%B9%8B%E7%AA%97%E5%8F%A3%E5%9F%BA%E7%B1%BB%20QWidget/"/>
    <id>http://example.com/2023/06/25/Qt%E5%B8%B8%E7%94%A8%E6%8E%A7%E4%BB%B6%E4%B9%8B%E7%AA%97%E5%8F%A3%E5%9F%BA%E7%B1%BB%20QWidget/</id>
    <published>2023-06-25T13:33:51.000Z</published>
    <updated>2023-06-29T10:32:08.928Z</updated>
    
    <content type="html"><![CDATA[<p>QWidget 类是所有控件类的父类，Qt为此控件提供有很多属性和方法：</p><p><img src="https://gitee.com/kayoungzhang/picgo_res/raw/master/img/image-20230625220627151.png" alt="image-20230625220627151" style="zoom:80%;" /></p><p>详细内容可查看帮助文档。</p><p>下面使用一个案例来展示 <code>QWidget</code> 中常用的方法：</p><p>新建一个基类为QWidget的工程，勾选 'Generate form'。</p><p><img src="https://gitee.com/kayoungzhang/picgo_res/raw/master/img/image-20230625223310755.png" alt="image-20230625223310755" style="zoom: 67%;" /></p><p>打开ui设计文件，添加几个Push Button，并进行如下设置：</p><p><img src="https://gitee.com/kayoungzhang/picgo_res/raw/master/img/image-20230625224821724.png" alt="image-20230625224821724" style="zoom:67%;" /></p><p>运行，弹出如下窗口：</p><p><img src="https://gitee.com/kayoungzhang/picgo_res/raw/master/img/image-20230625224918704.png" alt="image-20230625224918704" style="zoom:67%;" /></p><p>下面进行功能实现，其中添加图标需要进行如下操作，首先添加资源文件，然后复制图标路径，粘贴到代码中：</p><p><img src="https://gitee.com/kayoungzhang/picgo_res/raw/master/img/image-20230625231034328.png" alt="image-20230625231034328" style="zoom:80%;" /></p><p><img src="https://gitee.com/kayoungzhang/picgo_res/raw/master/img/image-20230625231046114.png" alt="image-20230625231046114" style="zoom:80%;" /></p><p>主要代码：</p><div class="code-wrapper"><pre><code class="hljs c"><span class="hljs-type">void</span> <span class="hljs-title function_">Widget::on_btn_getPosAndSize_clicked</span><span class="hljs-params">()</span>&#123;    <span class="hljs-comment">/* 获取窗口位置信息 */</span>    QRect rect = this-&gt;geometry();    <span class="hljs-comment">/* 在输出打印当前窗口位置信息，注意添加头文件&lt;QDebug&gt; */</span>    qDebug() &lt;&lt; <span class="hljs-string">&quot;左上角: &quot;</span> &lt;&lt; rect.topLeft();    qDebug() &lt;&lt; <span class="hljs-string">&quot;右上角: &quot;</span> &lt;&lt; rect.topRight();    qDebug() &lt;&lt; <span class="hljs-string">&quot;左下角: &quot;</span> &lt;&lt; rect.bottomLeft();    qDebug() &lt;&lt; <span class="hljs-string">&quot;右下角: &quot;</span> &lt;&lt; rect.bottomRight();    qDebug() &lt;&lt; <span class="hljs-string">&quot;宽度: &quot;</span> &lt;&lt; rect.width();    qDebug() &lt;&lt; <span class="hljs-string">&quot;高度: &quot;</span> &lt;&lt; rect.height();&#125;<span class="hljs-comment">/* 设置窗口大小 */</span><span class="hljs-type">void</span> <span class="hljs-title function_">Widget::on_btn_setSize_clicked</span><span class="hljs-params">()</span>&#123;    this-&gt;resize(<span class="hljs-number">450</span>, <span class="hljs-number">450</span>);&#125;<span class="hljs-comment">/* 固定窗口大小 */</span><span class="hljs-type">void</span> <span class="hljs-title function_">Widget::on_btn_setFixSize_clicked</span><span class="hljs-params">()</span>&#123;    this-&gt;setFixedSize(<span class="hljs-number">500</span>, <span class="hljs-number">500</span>);&#125;<span class="hljs-comment">/* 最小缩放400*400 */</span><span class="hljs-type">void</span> <span class="hljs-title function_">Widget::on_btn_setMinSize_clicked</span><span class="hljs-params">()</span>&#123;    this-&gt;setMinimumSize(<span class="hljs-number">400</span>, <span class="hljs-number">400</span>);&#125;<span class="hljs-comment">/* 最大缩放600*600 */</span><span class="hljs-type">void</span> <span class="hljs-title function_">Widget::on_btn_setMaxSize_clicked</span><span class="hljs-params">()</span>&#123;    this-&gt;setMaximumSize(<span class="hljs-number">600</span>, <span class="hljs-number">600</span>);&#125;<span class="hljs-comment">/* 移动窗口到具体位置 */</span><span class="hljs-type">void</span> <span class="hljs-title function_">Widget::on_btn_move_clicked</span><span class="hljs-params">()</span>&#123;    this-&gt;move(<span class="hljs-number">100</span>, <span class="hljs-number">100</span>);&#125;<span class="hljs-comment">/* 设置窗口标题 */</span><span class="hljs-type">void</span> <span class="hljs-title function_">Widget::on_btn_setTitle_clicked</span><span class="hljs-params">()</span>&#123;    this-&gt;setWindowTitle(<span class="hljs-string">&quot;QWidget测试&quot;</span>);&#125;<span class="hljs-comment">/* 设置窗口logo */</span><span class="hljs-type">void</span> <span class="hljs-title function_">Widget::on_btn_setLogo_clicked</span><span class="hljs-params">()</span>&#123;    this-&gt;setWindowIcon(QIcon(<span class="hljs-string">&quot;:/logo.png&quot;</span>));&#125;</code></pre></div><p>工程代码Gitee: <ahref="https://gitee.com/kayoungzhang/my_codehub/raw/master/Qt/QWidget.zip">QWidget</a></p><p>参考链接：</p><p>http://t.csdn.cn/xT6vf</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;QWidget 类是所有控件类的父类，Qt为此控件提供有很多属性和方法：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://gitee.com/kayoungzhang/picgo_res/raw/master/img/image-20230625220627151.pn</summary>
      
    
    
    
    <category term="Qt" scheme="http://example.com/categories/Qt/"/>
    
    
    <category term="Qt" scheme="http://example.com/tags/Qt/"/>
    
  </entry>
  
  <entry>
    <title>AI绘画</title>
    <link href="http://example.com/2023/06/19/AI%E7%BB%98%E7%94%BB/"/>
    <id>http://example.com/2023/06/19/AI%E7%BB%98%E7%94%BB/</id>
    <published>2023-06-19T11:29:24.000Z</published>
    <updated>2023-06-29T10:32:08.916Z</updated>
    
    <content type="html"><![CDATA[<p>偶然看到网上一篇文章（https://stable-diffusion-art.com/qr-code/），觉得挺炫酷，因为看到文章内有具体的操作步骤，所以我也想尝试一下，然后利用周末的两天，认真地了解和操作了一番。</p><h3 id="stable-diffusion的简介">Stable Diffusion的简介</h3><p>目前AI绘画最火的当属 <strong>Midjorney</strong> 和 <strong>StableDiffusion</strong>，<strong>Midjourney</strong>没有开源，<strong>StableDiffusion</strong> 免费开源。<strong>Stable Diffusion</strong>是StabilityAI公司于2022年提出的，它是一个基于潜在<strong>扩散模型</strong>（Latent DiffusionModels），能够根据文本描述生成高质量、高分辨率、高逼真的图像。</p><p>至于其原理，不做过多介绍，如果想深入了解，可查看：</p><p>源码：https://github.com/CompVis/stable-diffusion</p><p>论文：https://arxiv.org/pdf/2112.10752.pdf</p><p>Stable Diffusion本身没有类似exe的可直接运行的软件，好在有一些基于<code>stable-diffusion</code> 封装的 <code>webui</code>开源项目，其中，<strong>AUTOMATIC1111大神</strong> 部署的框架 <ahref="https://github.com/AUTOMATIC1111/stable-diffusion-webui">stable-diffusion-webui</a>，得到了广泛的应用。它是一套无代码、可视化的StableDiffusion集成运行环境。让我们能通过web可视化界面而不是通过命令行参数使用StableDiffusion进行绘画创作。</p><p>因为每个人的电脑环境不一样，本地部署免不了会出现各种各样的问题，如果不想折腾，可直接下载使用别人的整合包，下载了这些整合包，直接解压就可以使用，现在国内热度比较高的有两个整合包：</p><p>秋叶aaakiv4整合包：https://pan.baidu.com/s/13_B9lotU7UDcET7wYcDF7g?pwd=bang#list/path=%2F</p><p>独立研究员-星空整合包：<ahref="https://link.zhihu.com/?target=https%3A//pan.baidu.com/s/1_FYbDpkX6Q6hDVHJpCMRxA%3Fpwd%3Do852">https://pan.baidu.com/s/1_FYbDpkX6Q6hDVHJpCMRxA?pwd=o852</a></p><p>在了解之前，我是直接进行本地部署的，下面将详细介绍部署stable-diffusion-webui的具体流程。</p><h3 id="系统配置需求">系统配置需求</h3><p>Stable Diffusion是比较耗资源的，因此对电脑硬件有一定要求。</p><p>NVIDIA GPU 至少 4GB 显存，至少8GB 内存，至少 20GB可用硬盘空间，如果想要生成速度快，显卡配置自然是越高越好，显存最好也上到8G。如果本地机器配置达不到，可使用云端部署，可参考：https://b23.tv/KLk8gPg</p><h3 id="环境准备">环境准备</h3><ul><li><strong>Python</strong></li></ul><p>请注意，为保证准确性，Python版本至少为 <strong>3.10.6</strong>，<ahref="https://www.python.org/ftp/python/3.10.6/python-3.10.6-amd64.exe">点击这里直接下载</a></p><ul><li><strong>git</strong></li></ul><p>为避免不必要的麻烦，git安装时一定要勾选<strong>将PATH添加到系统环境变量中</strong></p><ul><li><strong>stable-diffusion-webui库</strong></li></ul><p>打开 <code>git bash</code> ,输入命令<code>git clone https://github.com/AUTOMATIC1111/stable-diffusion-webui.git</code>,下载stable-diffusion-webui库。</p><ul><li><strong>CUDA</strong></li></ul><p><code>stable-diffusion-webui</code> 运行使用的是 GPU算力，这里我们需要安装 CUDA 驱动，打开cmd命令行，输入<code>nvidia-smi</code>, 查看电脑CUDA的版本号：</p><p><img src="https://gitee.com/kayoungzhang/picgo_res/raw/master/img/image-20230619212839698.png" alt="image-20230619212839698" style="zoom:80%;" /></p><p>然后进入Nvidia CUDA官网：https://developer.nvidia.com/cuda-toolkit-archive，找到对应的系统版本号，下载安装。</p><ul><li><strong>模型Stable Diffusion checkpoint</strong></li></ul><p>stable-diffusion-webui需要有已经训练过的模型才能进行使用，两个常用的下载模型网站：</p><p><strong>huggingface</strong>：https://huggingface.co/</p><p><strong>civitai</strong> ：https://civitai.com/</p><p>这里下载官方模型<ahref="https://huggingface.co/CompVis/stable-diffusion-v-1-4-original/resolve/main/sd-v1-4.ckpt">sd-v1-4</a></p><ul><li><strong>网络控制扩展包ControlNet extension</strong></li></ul><p>打开 <code>git bash</code> ,输入命令<code>git clone https://github.com/Mikubill/sd-webui-controlnet.git</code>,下载sd-webui-controlnet extension.</p><h3 id="安装部署">安装部署</h3><ol type="1"><li><p>依次安装以上python和git软件，CUDA软件。</p></li><li><p>将之前下载的模型（sd-v1-4.ckpt）放到stable-diffusion-webui-diffusion下。将ControlNet extension文件夹放到stable-diffusion-webui。</p></li><li><p>打开刚刚下载的stable-diffusion-webui文件夹，找到如下bash文件，针对不同的电脑，双击不同的bat文件。</p></li></ol><p><img src="https://gitee.com/kayoungzhang/picgo_res/raw/master/img/image-20230619210447451.png" alt="image-20230619210447451" style="zoom:80%;" /></p><ol start="4" type="1"><li>弹出命令窗口后，它会自动下载相关内容，<strong>注意：这一步可能会出现很多问题，根据提示，进行一一解决</strong></li></ol><p>如：提示你升级pip版本，重新打开一个命令窗口，cd进入到stable-diffusion-webui，运行命令<code>python.exe -m pip install --upgrade pip</code>升级一下pip就行。然后重新运行以上bat文件。</p><p>再如：<code>torch.cuda.OutOfMemoryError: CUDA out of memory.</code>这表示显卡内存不足，因为我电脑显存只有2GB，所以折腾很久，最后找到了解决方法，打开webui-user.bat文件，进行如下参数设置（主要是跳过cudatest和lowvram）：</p><figure><imgsrc="https://gitee.com/kayoungzhang/picgo_res/raw/master/img/image-20230619214107835.png"alt="image-20230619214107835" /><figcaption aria-hidden="true">image-20230619214107835</figcaption></figure><p>具体参考：https://github.com/AUTOMATIC1111/stable-diffusion-webui/wiki/Command-Line-Arguments-and-Settings</p><ol start="5" type="1"><li>问题都解决后，会出现界面。</li></ol><p><img src="https://gitee.com/kayoungzhang/picgo_res/raw/master/img/image-20230619220104534.png" alt="image-20230619220104534" style="zoom:80%;" /></p><p><img src="https://gitee.com/kayoungzhang/picgo_res/raw/master/img/image-20230619215525485.png" alt="image-20230619215525485" style="zoom:80%;" /></p><h3 id="运用">运用</h3><p>本地部署完成，接下来就是设置不同的参数，生成不同的图像了。具体学习可查看https://b23.tv/YKS6EWl</p><p>以下是我参照最开始的网址文章进行简单的设置生成的图像：</p><p><img src="https://gitee.com/kayoungzhang/picgo_res/raw/master/img/00000-1838255928.png" alt="00000-1838255928" style="zoom:80%;" /></p><p><img src="https://gitee.com/kayoungzhang/picgo_res/raw/master/img/00000-313235722.png" alt="00000-313235722" style="zoom:80%;" /></p><p>如果想生成更漂亮的图片，需要更好的电脑配置和更深层的学习，这里我只是做简单的了解，同时记录一下本地部署AI绘图的内容。</p><h3 id="参考链接">参考链接：</h3><p>https://www.bilibili.com/read/mobile?id=23488766</p><p>https://it.cha138.com/nginx/show-4623870.html</p><p>http://t.csdn.cn/T2uR1</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;偶然看到网上一篇文章（https://stable-diffusion-art.com/qr-code/），觉得挺炫酷，因为看到文章内有具体的操作步骤，所以我也想尝试一下，然后利用周末的两天，认真地了解和操作了一番。&lt;/p&gt;
&lt;h3 id=&quot;stable-diffusio</summary>
      
    
    
    
    <category term="其它" scheme="http://example.com/categories/%E5%85%B6%E5%AE%83/"/>
    
    
    <category term="AI" scheme="http://example.com/tags/AI/"/>
    
  </entry>
  
  <entry>
    <title>Qt的信号与槽机制</title>
    <link href="http://example.com/2023/06/15/Qt%E7%9A%84%E4%BF%A1%E5%8F%B7%E4%B8%8E%E6%A7%BD%E6%9C%BA%E5%88%B6/"/>
    <id>http://example.com/2023/06/15/Qt%E7%9A%84%E4%BF%A1%E5%8F%B7%E4%B8%8E%E6%A7%BD%E6%9C%BA%E5%88%B6/</id>
    <published>2023-06-15T09:14:41.000Z</published>
    <updated>2023-06-15T14:35:17.696Z</updated>
    
    <content type="html"><![CDATA[<h3 id="qt信号与槽简介">Qt信号与槽简介</h3><p>Qt对标准C++进行了扩展，引入了一些新的概念和功能，例如信号与槽机制，对象属性等。Qt中有一个预处理器，称为元对象编译器（Meta-ObjectCompiler，MOC），它会将Qt源程序在编译前先转换为标准C++兼容形式，再由C++标准编译器进行编译，所以，信号与槽机制中，必须添加宏：<strong>Q_OBJECT</strong>，这样MOC才能对信号与槽程序进行代码预处理。</p><p>信号与槽是Qt的一个核心特点，也是区别于其它框架的重要特性。Qt使用信号与槽的机制实现对象间通信，它隐藏了复杂的底层实现。与回调函数相比，应用起来会更灵活。</p><p><strong>信号（Signals）</strong>就是在指定情况下发生的事件，QtWidgets 提供了很多信号，例如 QPushButton最常见的信号就是鼠标单击时的clicked()信号，同时，我们也可以自己定义信号。</p><p><strong>槽（Slots）</strong>就是对信号响应的函数。槽就是一个函数，可以具有任何参数，也可以被直接调用。当槽函数与信号关联后，如果信号发生，那么关联的槽函数就会被执行。QtWidgets提供有很多槽函数，我们也可以自己定义槽函数。</p><p>信号与槽关联是用 QObject::connect() 函数实现的，connect() 是 QObject类的一个静态函数，而QObject 是所有 Qt类的基类，在实际调用时可以忽略前面的限定符。</p><p>一个信号可以连接多个槽，多个信号可以连接同一个槽，一个信号可以连接另外一个信号。如下：</p><figure><imgsrc="https://gitee.com/kayoungzhang/picgo_res/raw/master/img/image-20230615203504152.png"alt="image-20230615203504152" /><figcaption aria-hidden="true">image-20230615203504152</figcaption></figure><p>connect函数有多重参数形式，一般使用最广的是以下三种：</p><ul><li><strong>一般参数形式</strong></li></ul><p><code>QMetaObject::Connection QObject::connect(const QObject *sender, const char *signal, const QObject *receiver, const char *method, Qt::ConnectionType type = Qt::AutoConnection)</code></p><p>简化：<strong>connect(sender, SIGNAL(signal()), receiver,SLOT(slot()));</strong></p><p>这里使用宏SIGNAL()和SLOT()指定信号和槽函数，如果信号和槽带有参数，还需要注明参数类型，且参数类型要一致，如：</p><p><strong>connect(scrollBar, SIGNAL(valueChanged(int)), label,SLOT(setNum(int)));</strong></p><ul><li><strong>函数指针形式</strong></li></ul><p><code>QMetaObject::Connection QObject::connect(const QObject *sender, const QMetaMethod &amp;signal, const QObject *receiver, const QMetaMethod &amp;method, Qt::ConnectionType type = Qt::AutoConnection)</code></p><p>简化：<strong>connect(sender, &amp;Sender::signal, receiver,&amp;Receiver::slot);</strong></p><p>如： <strong>connect(ui-&gt;lineEdit, &amp;QLineEdit::textChanged,ui-&gt;label, &amp;QLabel::setText);</strong></p><ul><li><strong>lambda 表达式形式</strong></li></ul><div class="code-wrapper"><pre><code class="hljs c++"><span class="hljs-comment">//Qt不传递参数lambda</span><span class="hljs-built_in">connect</span>(ui-&gt;button, &amp;QButton::clicked,[=]&#123;    <span class="hljs-built_in">qDebug</span>()&lt;&lt;<span class="hljs-built_in">QString</span>(<span class="hljs-string">&quot;test&quot;</span>);&#125;);<span class="hljs-comment">//Qt带传递参数lambda</span><span class="hljs-built_in">connect</span>(UI-&gt;button, &amp;QButton::clicked,[=](QString path)&#123;    <span class="hljs-built_in">qDebug</span>()&lt;&lt;path;&#125;);</code></pre></div><p>lamdba表达式介绍:</p><p>[] 不捕获任何变量。</p><p>[&amp;]捕获外部作用域中所有变量，并作为引用在函数体中使用（按引用捕获）。</p><p>[&amp;, a]a以传值方式捕获，其余变量以传引用的方式在函数体中使用（a按值，其余按引用捕获）。</p><p>[a，&amp;b]a以传值方式捕获，b以传引用方式捕获（a按值捕获，b按引用捕获）。</p><p>[=]捕获外部作用域中所有变量，并作为副本在函数体中使用（按值捕获）。</p><p>[=，&amp;b] 按值捕获外部作用域中所有变量，并按引用捕获 b 变量。</p><p>[a] 仅按值捕获 a 变量，但不捕获其他变量。</p><h3 id="信号与槽的创建">信号与槽的创建</h3><p>Qt中信号与槽的创建一般有以下几种方式：</p><ul><li>在UI设计界面的控件上右键-&gt;转到槽，在ui.widget.h文件中将会通过connectSlotsByName，为每个信号/槽创建connect。如希望点击关闭按钮，窗口会关闭，操作如下：</li></ul><p><img src="https://gitee.com/kayoungzhang/picgo_res/raw/master/img/image-20230615214658423.png" alt="image-20230615214658423" style="zoom:80%;" /></p><p>这样，就会自动创建一个槽函数的声明和一个空的槽函数，需要自己添加相应执行的内容，这里调用的是widget的close()槽函数。<imgsrc="https://gitee.com/kayoungzhang/picgo_res/raw/master/img/image-20230615215256504.png"alt="image-20230615215256504" /></p><ul><li>通过UI设计界面中Signals &amp; SlotsEditor添加信号/槽，它们就会在系统内建立关联。如下，同样可以实现上面的功能：</li></ul><p><img src="https://gitee.com/kayoungzhang/picgo_res/raw/master/img/image-20230615220602008.png" alt="image-20230615220602008" style="zoom:80%;" /></p><ul><li>手动创建信号/槽。</li></ul><p>在widget.h文件中手动创建信号（signals:）或槽函数（slots:）声明，在widget.cpp文件中定义槽函数并手动创建connect函数，将信号与槽函数进行连接。</p><p><img src="https://gitee.com/kayoungzhang/picgo_res/raw/master/img/image-20230615222721918.png" alt="image-20230615222721918" style="zoom:80%;" /></p><p>以上是Qt中信号与槽机制的基本使用方式，需要熟练掌握，另外，通过Qt的帮助文档，可以详细查看Qt已为各个类定义好的信号与槽函数。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;qt信号与槽简介&quot;&gt;Qt信号与槽简介&lt;/h3&gt;
&lt;p&gt;Qt对标准C++进行了扩展，引入了一些新的概念和功能，例如信号与槽机制，对象属性等。Qt中有一个预处理器，称为元对象编译器（Meta-Object
Compiler，MOC），它会将Qt源程序在编译前先转换</summary>
      
    
    
    
    <category term="Qt" scheme="http://example.com/categories/Qt/"/>
    
    
    <category term="Qt" scheme="http://example.com/tags/Qt/"/>
    
  </entry>
  
  <entry>
    <title>Qt Creator的使用</title>
    <link href="http://example.com/2023/06/14/Qt-Creator%E7%9A%84%E4%BD%BF%E7%94%A8/"/>
    <id>http://example.com/2023/06/14/Qt-Creator%E7%9A%84%E4%BD%BF%E7%94%A8/</id>
    <published>2023-06-14T10:41:05.000Z</published>
    <updated>2023-06-14T13:09:51.222Z</updated>
    
    <content type="html"><![CDATA[<h3 id="qt-creator的设置">Qt Creator的设置</h3><p>打开Qt Creator, 选择Tools -&gt; Options 进入设置界面：</p><p><img src="https://gitee.com/kayoungzhang/picgo_res/raw/master/img/image-20230614190132386.png" alt="image-20230614190132386" style="zoom:80%;" /></p><ul><li>Environment：可以设置相应的主题和语言环境及UI颜色。</li></ul><p><img src="https://gitee.com/kayoungzhang/picgo_res/raw/master/img/image-20230614190238354.png" alt="image-20230614190238354" style="zoom:80%;" /></p><ul><li>Text Editor：可以进行相应的文本编辑设置。</li></ul><p><img src="https://gitee.com/kayoungzhang/picgo_res/raw/master/img/image-20230614190418754.png" alt="image-20230614190418754" style="zoom:80%;" /></p><ul><li>Build &amp; Run：进行编译和运行的设置</li></ul><p><img src="https://gitee.com/kayoungzhang/picgo_res/raw/master/img/image-20230614190635317.png" alt="image-20230614190635317" style="zoom:80%;" /></p><h3 id="新建qt-widget项目">新建Qt Widget项目</h3><ul><li>依次点击 File -&gt; New File or Project,选择Qt WidgetApplication</li></ul><p><img src="https://gitee.com/kayoungzhang/picgo_res/raw/master/img/image-20230614191012944.png" alt="image-20230614191012944" style="zoom:80%;" /></p><ul><li>填写工程名和选择存储路径，选择 qmake 编译，用 qmake 生成 Makefile用于项目的编译。</li></ul><p><img src="https://gitee.com/kayoungzhang/picgo_res/raw/master/img/image-20230614191554835.png" alt="image-20230614191554835" style="zoom:80%;" /></p><ul><li>选择基类：</li></ul><p><img src="https://gitee.com/kayoungzhang/picgo_res/raw/master/img/image-20230614192700423.png" alt="image-20230614192700423" style="zoom:80%;" /></p><ul><li>选择目标平台的编译器：</li></ul><p><img src="https://gitee.com/kayoungzhang/picgo_res/raw/master/img/image-20230614192942055.png" alt="image-20230614192942055" style="zoom:80%;" /></p><ul><li>可选择版本控制：</li></ul><p><img src="https://gitee.com/kayoungzhang/picgo_res/raw/master/img/image-20230614193215345.png" alt="image-20230614193215345" style="zoom:80%;" /></p><ul><li>完成项目创建，可点击左下角绿色图标编译运行，此时会弹出一个空白框。</li></ul><p><img src="https://gitee.com/kayoungzhang/picgo_res/raw/master/img/image-20230614193358548.png" alt="image-20230614193358548" style="zoom:80%;" /></p><h3 id="项目文件介绍">项目文件介绍</h3><ul><li>demo.pro: 项目管理文件。</li></ul><figure><imgsrc="https://gitee.com/kayoungzhang/picgo_res/raw/master/img/image-20230614194650370.png"alt="image-20230614194650370" /><figcaption aria-hidden="true">image-20230614194650370</figcaption></figure><p>还可以在其中设置应用程序其他信息：</p><div class="code-wrapper"><pre><code class="hljs bash"><span class="hljs-comment">#程序版本</span>VERSION = 1.0.0.0<span class="hljs-comment">#程序图标</span>RC_ICONS = client.ico<span class="hljs-comment">#公司名称</span>QMAKE_TARGET_COMPANY =<span class="hljs-string">&quot;KayoungZhang&quot;</span><span class="hljs-comment">#程序说明</span>QMAKE_TARGET_DESCRIPTION = <span class="hljs-string">&quot;TCP Client&quot;</span><span class="hljs-comment">#版权信息</span>QMAKE_TARGET_COPYRIGHT = <span class="hljs-string">&quot;Copyright(C) 2022&quot;</span><span class="hljs-comment">#程序名称</span>QMAKE_TARGET_PRODUCT = <span class="hljs-string">&quot;app&quot;</span><span class="hljs-comment">#程序语言</span><span class="hljs-comment">#0x0800代表和系统当前语言一致</span>RC_LANG = 0x0800</code></pre></div><ul><li><p>Header 分组，存放的是项目内所有的头文件*.h。</p></li><li><p>Source 分组，存放的是项目内的所有C++源码文件*.cpp。</p></li><li><p>Forms分组，存放项目内所有界面文件*.ui。双击ui文件就可以进入图形设计界面，返回时则点击左边Edit图标。</p></li></ul><figure><imgsrc="https://gitee.com/kayoungzhang/picgo_res/raw/master/img/image-20230614195710035.png"alt="image-20230614195710035" /><figcaption aria-hidden="true">image-20230614195710035</figcaption></figure><p>在控件区，拖拽一个<strong>Label</strong>组件到中间的设计区，编辑文字内容为：“<strong>Hello，Qt！</strong>”，选择此<strong>Lable</strong> 然后在其属性区，找到 <strong>geometry</strong>,将 <strong>Width</strong> 改为 <strong>80</strong>，<strong>Height</strong> 改为 <strong>30</strong>，然后找到<strong>font</strong>，将 <strong>Point Size</strong>设置为<strong>12</strong>，勾选 <strong>Bold</strong>。</p><figure><imgsrc="https://gitee.com/kayoungzhang/picgo_res/raw/master/img/image-20230614201322669.png"alt="image-20230614201322669" /><figcaption aria-hidden="true">image-20230614201322669</figcaption></figure><h3 id="项目的编译和运行">项目的编译和运行</h3><p>单击左窗口的 <strong>Projects</strong> 图标，查看编译工具。</p><figure><imgsrc="https://gitee.com/kayoungzhang/picgo_res/raw/master/img/image-20230614201800354.png"alt="image-20230614201800354" /><figcaption aria-hidden="true">image-20230614201800354</figcaption></figure><p>然后点击左下角编译运行：</p><p><img src="https://gitee.com/kayoungzhang/picgo_res/raw/master/img/image-20230614201932984.png" alt="image-20230614201932984" style="zoom:80%;" /></p><p>至此完成一个简单的项目创建。</p><h3 id="项目的发布">项目的发布</h3><p>当项目全部完成后，就可以进行打包发行了。</p><p><img src="https://gitee.com/kayoungzhang/picgo_res/raw/master/img/image-20230614202600194.png" alt="image-20230614202600194" style="zoom:80%;" /></p><p>选择<strong>Release</strong>后，编译运行完，打开项目工程目录，找到编译后的exe文件，双击运行，会发现运行不了，是因为缺少dll动态链接库。可以将Qt的bin目录添加到电脑系统的Path环境变量中，为了保证在其他电脑上也可以正常运行，需要找到相应的dll文件，Qt提供了一个<strong>windeployqt</strong>工具，可以自动创建可部署的文件夹，具体操作如下：</p><ol type="1"><li>将生成的exe文件复制到一个空的文件夹中。</li></ol><p><img src="https://gitee.com/kayoungzhang/picgo_res/raw/master/img/image-20230614203121788.png" alt="image-20230614203121788" style="zoom:80%;" /></p><ol start="2" type="1"><li>打开Qt的MinGW命令行，进入刚才的文件夹，然后输入命令：<strong>windeployqt</strong>后面跟程序名。</li></ol><p><img src="https://gitee.com/kayoungzhang/picgo_res/raw/master/img/image-20230614204728719.png" alt="image-20230614204728719" style="zoom:80%;" /></p><ol start="3" type="1"><li>可以将部分不需要的内容删除，如下所示：</li></ol><figure><imgsrc="https://gitee.com/kayoungzhang/picgo_res/raw/master/img/image-20230614205216379.png"alt="image-20230614205216379" /><figcaption aria-hidden="true">image-20230614205216379</figcaption></figure><ol start="4" type="1"><li><p>将精简后的程序压缩即可在其他同平台电脑运行了,也可以使用工具“单文件制作封装工具(Enigma VirtualBox)”将其打包成独立版程序。如果需要整理成一个安装程序，就需要专用工具进行打包处理，一般用到的工具有：</p><ul><li>HM NIS Edit（https://hmne.sourceforge.net/）</li><li>NSIS</li><li>Inno setup（https://jrsoftware.org/）</li></ul><p>后面再做详细介绍。</p></li></ol><p>工程文件：<ahref="https://gitee.com/kayoungzhang/my_codehub/raw/master/Qt/demo.zip">Qtdemo</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;qt-creator的设置&quot;&gt;Qt Creator的设置&lt;/h3&gt;
&lt;p&gt;打开Qt Creator, 选择Tools -&amp;gt; Options 进入设置界面：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://gitee.com/kayoungzhang/p</summary>
      
    
    
    
    <category term="Qt" scheme="http://example.com/categories/Qt/"/>
    
    
    <category term="Qt" scheme="http://example.com/tags/Qt/"/>
    
  </entry>
  
  <entry>
    <title>Qt开发环境的搭建</title>
    <link href="http://example.com/2023/06/14/Qt%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83%E7%9A%84%E6%90%AD%E5%BB%BA/"/>
    <id>http://example.com/2023/06/14/Qt%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83%E7%9A%84%E6%90%AD%E5%BB%BA/</id>
    <published>2023-06-14T09:15:03.000Z</published>
    <updated>2023-06-14T10:52:15.539Z</updated>
    
    <content type="html"><![CDATA[<h3 id="qt简介">Qt简介</h3><p>Qt 是一个跨平台的 C++开发库，主要用来开发图形用户界面（Graphical UserInterface，简称 GUI）程序。Qt 是跨平台的，支持Windows、Linux、macOS、Android、iOS、WinRT 等平台，将已编写好的 Qt程序移植到这些平台，只需重新编译一次源代码即可。</p><h3 id="qt-creator的下载安装">Qt Creator的下载安装</h3><p>QtCreator是Qt集成开发环境（IDE），包括C++代码编辑器，集成的GUI外观和版式设计器（QtDesigner），项目生成和管理工具，集成的上下文相关帮助系统，图形化调试器，代码管理和浏览工具等。</p><h4 id="下载qt-creator">1.下载Qt Creator</h4><p>官网地址：https://download.qt.io/</p><p>5.14及之前版本可以下载完整安装包，进行离线安装，5.15版本之后不再提供离线安装包，只能通过下载器进行在线安装。</p><p>离线版：</p><figure><imgsrc="https://gitee.com/kayoungzhang/picgo_res/raw/master/img/image-20230614174035183.png"alt="image-20230614174035183" /><figcaption aria-hidden="true">image-20230614174035183</figcaption></figure><p>在线版：</p><figure><imgsrc="https://gitee.com/kayoungzhang/picgo_res/raw/master/img/image-20230614174826980.png"alt="image-20230614174826980" /><figcaption aria-hidden="true">image-20230614174826980</figcaption></figure><p>一般从官网下载比较慢，可以通过国内镜像网站进行下载安装，国内著名的 Qt镜像网站，主要是各个高校的：</p><ul><li>中国科学技术大学：http://mirrors.ustc.edu.cn/qtproject/</li><li>清华大学：https://mirrors.tuna.tsinghua.edu.cn/qt/</li><li>中国互联网络信息中心：https://mirrors.cnnic.cn/qt/</li></ul><h4 id="安装qt-creator">2.安装Qt Creator</h4><p>这里我下载的是离线版本：qt-opensource-windows-x86-5.14.2.exe。</p><p><strong>注意：</strong>若已经安装了其他版本的Qt，请先卸载，再安装，否则会发生一些奇奇怪怪的错误。</p><ul><li>双击安装包进行安装，登录Qt账户，如果没有账号，进行注册。（断网后重新安装可跳过此步骤）</li></ul><p><img src="https://gitee.com/kayoungzhang/picgo_res/raw/master/img/image-20230614181334729.png" alt="image-20230614181334729" style="zoom:80%;" /></p><ul><li>选择安装路径</li></ul><p><img src="https://gitee.com/kayoungzhang/picgo_res/raw/master/img/image-20230614180858111.png" alt="image-20230614180858111" style="zoom:80%;" /></p><ul><li>按需选择组件，一般只需选择对应的编译环境即可，其他组件后续可以再进行补充安装。</li></ul><p><img src="https://gitee.com/kayoungzhang/picgo_res/raw/master/img/image-20230614182944200.png" alt="image-20230614182944200" style="zoom:80%;" /></p><ul><li>完成安装</li></ul><p><img src="https://gitee.com/kayoungzhang/picgo_res/raw/master/img/image-20230614185126853.png" alt="image-20230614185126853" style="zoom:80%;" /></p><p><img src="https://gitee.com/kayoungzhang/picgo_res/raw/master/img/image-20230614183307230.png" alt="image-20230614183307230" style="zoom:80%;" /></p><h3 id="参考链接">参考链接</h3><p>http://t.csdn.cn/VNaHm</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;qt简介&quot;&gt;Qt简介&lt;/h3&gt;
&lt;p&gt;Qt 是一个跨平台的 C++开发库，主要用来开发图形用户界面（Graphical User
Interface，简称 GUI）程序。Qt 是跨平台的，支持
Windows、Linux、macOS、Android、iOS、</summary>
      
    
    
    
    <category term="Qt" scheme="http://example.com/categories/Qt/"/>
    
    
    <category term="Qt" scheme="http://example.com/tags/Qt/"/>
    
  </entry>
  
</feed>
