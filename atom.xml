<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Hexo</title>
  
  
  <link href="http://example.com/atom.xml" rel="self"/>
  
  <link href="http://example.com/"/>
  <updated>2024-04-10T02:31:12.489Z</updated>
  <id>http://example.com/</id>
  
  <author>
    <name>John Doe</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Excel中提取数字的常用函数</title>
    <link href="http://example.com/2024/04/10/Excel%E4%B8%AD%E6%8F%90%E5%8F%96%E6%95%B0%E5%AD%97%E7%9A%84%E5%B8%B8%E7%94%A8%E5%87%BD%E6%95%B0/"/>
    <id>http://example.com/2024/04/10/Excel%E4%B8%AD%E6%8F%90%E5%8F%96%E6%95%B0%E5%AD%97%E7%9A%84%E5%B8%B8%E7%94%A8%E5%87%BD%E6%95%B0/</id>
    <published>2024-04-10T00:08:01.000Z</published>
    <updated>2024-04-10T02:31:12.489Z</updated>
    
    <content type="html"><![CDATA[<p>在Excel中，有时需要从单元格中提取数字，利用Excel中内置函数，可以快速实现这个目的。下面针对几种不同的情况分别进行说明：</p><h2 id="数字与汉字">数字与汉字</h2><ol type="1"><li><strong>数字与汉字之间有分隔符</strong></li></ol><p>利用 <code>FIND 函数</code> 找到分隔符的位置，再使用 <code>LEFT 函数</code> 或 <code>RIGHT 函数</code> 从左边或右边提取数字。</p><p><code>FIND 函数</code> 有三个参数，第一个参数是查找的内容，第二个参数是查找的位置，第三个参数是查找的开始位置（从左边算起），省略时则从左边第一位开始查找。</p><figure><img src="https://gitee.com/kayoungzhang/picgo_res/raw/master/img/fa229857-5b2a-4562-a3b9-291d5a100374.png" alt="" /><figcaption>img</figcaption></figure><ol start="2" type="1"><li><strong>数字与汉字之间没有分隔符</strong></li></ol><ul><li><strong>数字在汉字左侧</strong></li></ul><figure><img src="https://gitee.com/kayoungzhang/picgo_res/raw/master/img/9f85ccd4-f8e3-4ae0-957c-ea561c1d8fa8.png" alt="" /><figcaption>img</figcaption></figure><p>利用 <code>LEN 函数</code>、<code>LENB 函数</code>、<code>LEFT 函数</code> 进行组合提取，其中，<code>LEN 函数</code> 将一个汉字作为 1 个字节，而 <code>LENB 函数</code> 将一个汉字（全角）作为 2 个字节。<code>LEN(E2)*2 - LENB(E2)</code> 就能获取左边数字的个数。</p><ul><li><strong>数字在汉字右侧</strong></li></ul><figure><img src="https://gitee.com/kayoungzhang/picgo_res/raw/master/img/4c5285de-da8b-48a0-a3e6-901906f90840.png" alt="" /><figcaption>img</figcaption></figure><p>利用 <code>LENB(H2) - LEN(H2)</code> 获得左边文本个数，加上 <code>1</code> 后就是首个数字出现的位置。从首个位置开始截取到 99 位（具体提取的位数只要大于等于数字的最大位数即可）。</p><ul><li><strong>数字在汉字中间</strong></li></ul><figure><img src="https://gitee.com/kayoungzhang/picgo_res/raw/master/img/image-20240410095555571.png" alt="" /><figcaption>image-20240410095555571</figcaption></figure><p>这里的公式复杂点，利用了 <code>LOOKUP 函数</code> 查找功能和 <code>MIDB 函数</code> 提取指定的字符串及 <code>SEARCHB 函数</code> 的通配符查找功能，查找字符串中的数字，<code>ROW 函数</code> 在这里表示要提取数字的位数。</p><h2 id="数字与字母汉字混合"><strong>数字与字母汉字混合</strong></h2><ol type="1"><li><strong>提取字符串在左右侧的连续数字</strong></li></ol><ul><li><strong>数字在最右侧</strong></li></ul><p><code>=-LOOKUP(1,-RIGHT(O2,ROW($1:$15)))</code></p><figure><img src="https://gitee.com/kayoungzhang/picgo_res/raw/master/img/cf9aada5-aaab-4ed0-baca-e62b014c4590.png" alt="" /><figcaption>img</figcaption></figure><ul><li><strong>数字在最左侧</strong></li></ul><p><code>=-LOOKUP(1,-LEFT(R2,ROW($1:$15)))</code></p><figure><img src="https://gitee.com/kayoungzhang/picgo_res/raw/master/img/bcd041b0-7904-4cf8-ae6f-51944f8a4624.png" alt="" /><figcaption>img</figcaption></figure><p>这里 <code>LEFT 函数</code>前的负号是为了将文本转换为错误值，将数值转换为负数。</p><ol start="2" type="1"><li><strong>数字在任意位置</strong></li></ol><p><code>=-LOOKUP(0,-MID(K2,MIN(FIND(ROW($1:$10)-1,K2&amp;1/17)),ROW($1:$15)))</code></p><figure><img src="https://gitee.com/kayoungzhang/picgo_res/raw/master/img/fb327c5e-31d7-4176-9437-fb80efe3d60d.png" alt="" /><figcaption>img</figcaption></figure><p>这个函数较复杂，分析如下：</p><p>❶ 首先构造 0-9 的数字数组：<code>ROW($1:$10)-1</code></p><p>❷ 「1/17」等于 0.0588235294117647，它是一个包含 0-9 所有数字的值，连接在文本的尾部是避免 FIND 函数在查找数字时，因文本缺少相应数字而返回错误值。</p><p>❸ 用 FIND 函数查找 10 个数字在文本中的位置，利用 MIN 函数返回文本中出现数字的最小位置，即可以得到首个数字的位置。</p><p>❹ 利用 MID 函数从首个数字位置开始，依次向右截取长度为 1~15 的 15 个子字符串，加上负号，将数字转化为负数，文本转化为错误值。</p><p>最后利用 LOOKUP 函数返回最大的数字，再使用负号将负数转化为正数。</p><h2 id="参考链接">参考链接</h2><p><a href="https://www.ithome.com/0/646/177.htm">Excel 中 8 个必会的高效提取数字法，你知道几个？ - IT之家 (ithome.com)</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;在Excel中，有时需要从单元格中提取数字，利用Excel中内置函数，可以快速实现这个目的。下面针对几种不同的情况分别进行说明：&lt;/p&gt;
&lt;h2 id=&quot;数字与汉字&quot;&gt;数字与汉字&lt;/h2&gt;
&lt;ol type=&quot;1&quot;&gt;
&lt;li&gt;&lt;strong&gt;数字与汉字之间有分隔符&lt;/</summary>
      
    
    
    
    <category term="其它" scheme="http://example.com/categories/%E5%85%B6%E5%AE%83/"/>
    
    
    <category term="Excel" scheme="http://example.com/tags/Excel/"/>
    
  </entry>
  
  <entry>
    <title>风扇转速的测量</title>
    <link href="http://example.com/2024/03/11/%E9%A3%8E%E6%89%87%E8%BD%AC%E9%80%9F%E7%9A%84%E6%B5%8B%E9%87%8F/"/>
    <id>http://example.com/2024/03/11/%E9%A3%8E%E6%89%87%E8%BD%AC%E9%80%9F%E7%9A%84%E6%B5%8B%E9%87%8F/</id>
    <published>2024-03-11T03:31:12.000Z</published>
    <updated>2024-03-11T10:55:48.254Z</updated>
    
    <content type="html"><![CDATA[<p>最近一个项目上的采样管需要使用风扇进行调速控制通风量，风扇采用的是四线PWM调速测速接口，使用过程中，通过示波器无法正确抓到转速信号（方波脉冲信号），经过一番查找，发现没有加上拉电阻，终于得以解决，现记录如下：</p><h2 id="风扇的测速方式">风扇的测速方式</h2><p>我们使用的是一般的散热风扇，其内部使用的是无刷直流电机，其测速主要有两种方式：霍尔传感器测速和光电传感器测速。</p><ul><li><strong>霍尔传感器测速</strong></li></ul><p>图 1-51 所示是两种不同结构的霍尔转速传感器。用图示的方法设置磁体，使磁性转盘的输入轴与被测转轴相连，霍尔传感器固定在磁性转盘附近。当被测转轴转动时，磁性盘随之转动，磁体每经过霍尔传感器一次，霍尔传感器便输出一个相应的电压脉冲。检出单位时间的脉冲数，便可求出被测转速。例如，在车轮转轴上装上磁体，在靠近磁体位置上装上霍尔传感器，即可制成车速表和里程表等。</p><figure><img src="https://gitee.com/kayoungzhang/picgo_res/raw/master/img/2749555-1G102152249554-17101517983095.png" alt="" /><figcaption>霍尔速度传感器原理</figcaption></figure><ul><li><strong>光电传感器测速</strong></li></ul><p>图1-53（a）在待测转轴上固定一个带孔的调制圆盘，在调制圆盘的一边由发光元件产生恒定光，光透过盘上的小孔到达由光敏二极管组成的光敏<a href="https://www.hqchip.com/app/1718">转换器</a>上，转换成相应的电脉冲信号。若圆盘上开 10 个小孔，则旋转一周，光线透过小孔10次，输出10个脉冲信号，孔越多，测量的分辨率孔，则旋转一周，光线透过小孔10次，输出10个脉冲信号，孔越多，测量的分辨率越高。测速也可以采用反射式，只要用白纸画上黑道的圆纸贴在旋转体上即可，如图1-53（b）所示，图中的1是待测转盘，2是发光元件，3是光敏转换器。</p><figure><img src="https://gitee.com/kayoungzhang/picgo_res/raw/master/img/2749555-1G102152303X0-17101518237007.png" alt="" /><figcaption>霍尔速度传感器原理</figcaption></figure><h2 id="四线风扇原理图">四线风扇原理图</h2><figure><img src="https://gitee.com/kayoungzhang/picgo_res/raw/master/img/image-20240311175510914.png" alt="" /><figcaption>image-20240311175510914</figcaption></figure><p>注意接口都是开集电极输出，需要上拉电阻，PWM控制脚最好在中间加个隔离。</p><p>另外，在笔记本电脑中，风扇的控制还可以通过DAC输出不同的电压来控制其转速，如下：</p><p><img src="https://gitee.com/kayoungzhang/picgo_res/raw/master/img/image-20240311170555155.png" /></p><h2 id="风扇转速计算公式">风扇转速计算公式</h2><p>风扇转速通常使用转/分钟（RPM）或转/秒（RPS）表示。风扇转速主要有几个影响因素：风扇的尺寸、叶片数量、转子直径、转速和输出功率等。</p><p>电机转速与频率的公式：<strong>n=60f/p</strong></p><p>其中，</p><p><strong>n</strong> —— 电机的转速（r/m）；</p><p><strong>60</strong> —— 每分钟（s）；</p><p><strong>f</strong> —— 频率（Hz）；</p><p><strong>p</strong> —— 电机旋转磁场的极对数（有2、4、8等等）。</p><p>此公式只是一个粗略的计算，实际应用中还需要根据具体情况进行调整和修正。</p><h2 id="编码器测速">编码器测速</h2><p>一种更高级测速方法：编码器计数，在STM32中，有专门的定时器用法。具体可参考：</p><p><a href="https://zhuanlan.zhihu.com/p/350368518">编码器计数原理与电机测速原理——多图解析 - 知乎 (zhihu.com)</a></p><h2 id="风扇速度控制芯片">风扇速度控制芯片</h2><p>以上是通过MCU进行风扇的控制和测速，有时为了实现简单、低成本的风扇速度控制， <strong>美信芯片MAX31740</strong> 即可派上用场，它只需通过简单的硬件电路搭建就能实现此功能，而不需要软件的开发。</p><figure><img src="https://gitee.com/kayoungzhang/picgo_res/raw/master/img/image-20240311185412916.png" alt="" /><figcaption>image-20240311185412916</figcaption></figure><h2 id="参考链接">参考链接</h2><p><a href="https://www.elecfans.com/yuanqijian/sensor/20171102574227.html">霍尔速度传感器原理 - 电子发烧友网 (elecfans.com)</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;最近一个项目上的采样管需要使用风扇进行调速控制通风量，风扇采用的是四线PWM调速测速接口，使用过程中，通过示波器无法正确抓到转速信号（方波脉冲信号），经过一番查找，发现没有加上拉电阻，终于得以解决，现记录如下：&lt;/p&gt;
&lt;h2 id=&quot;风扇的测速方式&quot;&gt;风扇的测速方式&lt;/</summary>
      
    
    
    
    <category term="硬件" scheme="http://example.com/categories/%E7%A1%AC%E4%BB%B6/"/>
    
    
    <category term="FAN" scheme="http://example.com/tags/FAN/"/>
    
    <category term="转速" scheme="http://example.com/tags/%E8%BD%AC%E9%80%9F/"/>
    
  </entry>
  
  <entry>
    <title>modbus通信过程中差错校验</title>
    <link href="http://example.com/2024/03/10/modbus%E9%80%9A%E4%BF%A1%E8%BF%87%E7%A8%8B%E4%B8%AD%E5%B7%AE%E9%94%99%E6%A0%A1%E9%AA%8C/"/>
    <id>http://example.com/2024/03/10/modbus%E9%80%9A%E4%BF%A1%E8%BF%87%E7%A8%8B%E4%B8%AD%E5%B7%AE%E9%94%99%E6%A0%A1%E9%AA%8C/</id>
    <published>2024-03-10T06:37:04.000Z</published>
    <updated>2024-03-11T03:28:01.911Z</updated>
    
    <content type="html"><![CDATA[<p>Modbus 通信需要进行差错校验，根据传输模式（ASCII 或 RTU）的不同，会采用不同的校验方法。</p><ul><li><strong>ASCII 模式</strong> —— 校验字段由两个字符组成，其值是基于对全部报文内容执行 <strong>LRC</strong> 校验（Longitudinal Redundancy Check，纵向冗余校验）的计算结果。计算对象不包括起始的冒号（<code>:</code>）和回车换行符号（<code>CRLF</code>）。</li><li><strong>RTU 模式</strong> —— 校验字段由 16 个比特位（两个字节）组成，其值是基于对全部报文内容执行 <strong>CRC</strong> 校验（Cyclical Redundancy Check，循环冗余校验）的计算结果。计算对象包括校验域之前的所有字节。</li></ul><h2 id="lrc-校验">LRC 校验</h2><p>LRC 校验在 ASCII 协议中使用，检测消息域中除开始的冒号及结束的回车换行号外的内容。它仅仅是把每一个需要传输的数据按字节叠加（丢弃所有进位），然后对结果进行二进制补码操作。</p><p>下面是 LRC 校验的具体代码：</p><div class="code-wrapper"><pre><code class="hljs c"><span class="hljs-type">uint8_t</span> <span class="hljs-title function_">LRC</span><span class="hljs-params">(<span class="hljs-type">uint8_t</span> *msg, <span class="hljs-type">uint16_t</span> buffer_length)</span>&#123;    <span class="hljs-type">uint8_t</span> lrc = <span class="hljs-number">0</span>;    <span class="hljs-keyword">while</span> (buffer_length--)        lrc += *msg++;    <span class="hljs-keyword">return</span> ((<span class="hljs-type">uint8_t</span>)(-((<span class="hljs-type">char</span>)lrc)));&#125;</code></pre></div><p>从算法本质来说，LRC 域本身仅占 1 个字节，但在 ASCII 模式传递消息帧时，LRC 值被编码为 2 个字节的 ASCII 字符。例如，计算得到的 LRC 值为 0xF3，那么在 ASCII 消息帧中表示为 'F' 和 '3' 两个字符。</p><h2 id="crc-校验">CRC 校验</h2><p>CRC 校验域有两个字节，它由传输设备计算后加入到消息中。接收设备重新计算收到消息的 CRC，并与接收到的 CRC 域中的值比较，如果两值不同，则有误。</p><p>CRC 是先调入一值是全“1”的 16 位寄存器，然后调用一过程将消息中连续的 8 位字节各当前寄存器中的值进行处理。仅每个字符中的 8 位数据对 CRC 有效，起始位和停止位以及奇偶校验位均无效。 CRC 产生过程中，每个 8 位字符都单独和寄存器内容相或（OR），结果向最低有效位方向移动，最高有效位以 0 填充。LSB 被提取出来检测，如果 LSB 为 1，寄存器单独和预置的值或一下，如果 LSB 为 0，则不进行。整个过程要重复 8 次。在最后一位（第 8 位）完成后，下一个 8 位字节又单独和寄存器的当前值相或。最终寄存器中的值，是消息中所有的字节都执行之后的 CRC 值。</p><p>下面是 CRC 校验的具体代码：</p><div class="code-wrapper"><pre><code class="hljs c"><span class="hljs-type">uint16_t</span> <span class="hljs-title function_">crc16_modbus</span><span class="hljs-params">(<span class="hljs-type">uint8_t</span> *msg, <span class="hljs-type">uint16_t</span> buffer_length)</span>&#123;    <span class="hljs-type">uint16_t</span> i, j;    <span class="hljs-type">uint16_t</span> regcrc = <span class="hljs-number">0xFFFF</span>;        <span class="hljs-keyword">for</span> (i=<span class="hljs-number">0</span>; i&lt;buffer_length; i++)    &#123;        regcrc ^= *msg++;        <span class="hljs-keyword">for</span> (j=<span class="hljs-number">0</span>; j&lt;<span class="hljs-number">8</span>; j++)        &#123;            <span class="hljs-keyword">if</span> (regcrc &amp; <span class="hljs-number">0x0001</span>)                regcrc = regcrc &gt;&gt; <span class="hljs-number">1</span> ^ <span class="hljs-number">0xA001</span>;            <span class="hljs-keyword">else</span>                regcrc &gt;&gt;= <span class="hljs-number">1</span>;        &#125;    &#125;        <span class="hljs-keyword">return</span> regcrc;&#125;</code></pre></div><p>在 Modbus RTU 模式中，规定了在消息帧传递时 CRC 校验值必须按 <strong>低字节在前，高字节在后</strong> 的顺序。例如，计算得到的 CRC 值为 0xCA31，那么发送顺序为 0x31、0xCA。</p><p>上面的 CRC16 计算方法并不是最优的，因为它需要大量的运算，只适用于对速度不敏感的场合。对运算速度有要求的，可以采用查表法得到校验值，是一种以空间换时间的策略。</p><p>具体代码如下：</p><div class="code-wrapper"><pre><code class="hljs c"><span class="hljs-comment">/* Table of CRC values for high-order byte */</span><span class="hljs-type">static</span> <span class="hljs-type">const</span> <span class="hljs-type">uint8_t</span> table_crc_hi[] = &#123;    <span class="hljs-number">0x00</span>, <span class="hljs-number">0xC1</span>, <span class="hljs-number">0x81</span>, <span class="hljs-number">0x40</span>, <span class="hljs-number">0x01</span>, <span class="hljs-number">0xC0</span>, <span class="hljs-number">0x80</span>, <span class="hljs-number">0x41</span>, <span class="hljs-number">0x01</span>, <span class="hljs-number">0xC0</span>,    <span class="hljs-number">0x80</span>, <span class="hljs-number">0x41</span>, <span class="hljs-number">0x00</span>, <span class="hljs-number">0xC1</span>, <span class="hljs-number">0x81</span>, <span class="hljs-number">0x40</span>, <span class="hljs-number">0x01</span>, <span class="hljs-number">0xC0</span>, <span class="hljs-number">0x80</span>, <span class="hljs-number">0x41</span>,    <span class="hljs-number">0x00</span>, <span class="hljs-number">0xC1</span>, <span class="hljs-number">0x81</span>, <span class="hljs-number">0x40</span>, <span class="hljs-number">0x00</span>, <span class="hljs-number">0xC1</span>, <span class="hljs-number">0x81</span>, <span class="hljs-number">0x40</span>, <span class="hljs-number">0x01</span>, <span class="hljs-number">0xC0</span>,    <span class="hljs-number">0x80</span>, <span class="hljs-number">0x41</span>, <span class="hljs-number">0x01</span>, <span class="hljs-number">0xC0</span>, <span class="hljs-number">0x80</span>, <span class="hljs-number">0x41</span>, <span class="hljs-number">0x00</span>, <span class="hljs-number">0xC1</span>, <span class="hljs-number">0x81</span>, <span class="hljs-number">0x40</span>,    <span class="hljs-number">0x00</span>, <span class="hljs-number">0xC1</span>, <span class="hljs-number">0x81</span>, <span class="hljs-number">0x40</span>, <span class="hljs-number">0x01</span>, <span class="hljs-number">0xC0</span>, <span class="hljs-number">0x80</span>, <span class="hljs-number">0x41</span>, <span class="hljs-number">0x00</span>, <span class="hljs-number">0xC1</span>,    <span class="hljs-number">0x81</span>, <span class="hljs-number">0x40</span>, <span class="hljs-number">0x01</span>, <span class="hljs-number">0xC0</span>, <span class="hljs-number">0x80</span>, <span class="hljs-number">0x41</span>, <span class="hljs-number">0x01</span>, <span class="hljs-number">0xC0</span>, <span class="hljs-number">0x80</span>, <span class="hljs-number">0x41</span>,    <span class="hljs-number">0x00</span>, <span class="hljs-number">0xC1</span>, <span class="hljs-number">0x81</span>, <span class="hljs-number">0x40</span>, <span class="hljs-number">0x01</span>, <span class="hljs-number">0xC0</span>, <span class="hljs-number">0x80</span>, <span class="hljs-number">0x41</span>, <span class="hljs-number">0x00</span>, <span class="hljs-number">0xC1</span>,    <span class="hljs-number">0x81</span>, <span class="hljs-number">0x40</span>, <span class="hljs-number">0x00</span>, <span class="hljs-number">0xC1</span>, <span class="hljs-number">0x81</span>, <span class="hljs-number">0x40</span>, <span class="hljs-number">0x01</span>, <span class="hljs-number">0xC0</span>, <span class="hljs-number">0x80</span>, <span class="hljs-number">0x41</span>,    <span class="hljs-number">0x00</span>, <span class="hljs-number">0xC1</span>, <span class="hljs-number">0x81</span>, <span class="hljs-number">0x40</span>, <span class="hljs-number">0x01</span>, <span class="hljs-number">0xC0</span>, <span class="hljs-number">0x80</span>, <span class="hljs-number">0x41</span>, <span class="hljs-number">0x01</span>, <span class="hljs-number">0xC0</span>,    <span class="hljs-number">0x80</span>, <span class="hljs-number">0x41</span>, <span class="hljs-number">0x00</span>, <span class="hljs-number">0xC1</span>, <span class="hljs-number">0x81</span>, <span class="hljs-number">0x40</span>, <span class="hljs-number">0x00</span>, <span class="hljs-number">0xC1</span>, <span class="hljs-number">0x81</span>, <span class="hljs-number">0x40</span>,    <span class="hljs-number">0x01</span>, <span class="hljs-number">0xC0</span>, <span class="hljs-number">0x80</span>, <span class="hljs-number">0x41</span>, <span class="hljs-number">0x01</span>, <span class="hljs-number">0xC0</span>, <span class="hljs-number">0x80</span>, <span class="hljs-number">0x41</span>, <span class="hljs-number">0x00</span>, <span class="hljs-number">0xC1</span>,    <span class="hljs-number">0x81</span>, <span class="hljs-number">0x40</span>, <span class="hljs-number">0x01</span>, <span class="hljs-number">0xC0</span>, <span class="hljs-number">0x80</span>, <span class="hljs-number">0x41</span>, <span class="hljs-number">0x00</span>, <span class="hljs-number">0xC1</span>, <span class="hljs-number">0x81</span>, <span class="hljs-number">0x40</span>,    <span class="hljs-number">0x00</span>, <span class="hljs-number">0xC1</span>, <span class="hljs-number">0x81</span>, <span class="hljs-number">0x40</span>, <span class="hljs-number">0x01</span>, <span class="hljs-number">0xC0</span>, <span class="hljs-number">0x80</span>, <span class="hljs-number">0x41</span>, <span class="hljs-number">0x01</span>, <span class="hljs-number">0xC0</span>,    <span class="hljs-number">0x80</span>, <span class="hljs-number">0x41</span>, <span class="hljs-number">0x00</span>, <span class="hljs-number">0xC1</span>, <span class="hljs-number">0x81</span>, <span class="hljs-number">0x40</span>, <span class="hljs-number">0x00</span>, <span class="hljs-number">0xC1</span>, <span class="hljs-number">0x81</span>, <span class="hljs-number">0x40</span>,    <span class="hljs-number">0x01</span>, <span class="hljs-number">0xC0</span>, <span class="hljs-number">0x80</span>, <span class="hljs-number">0x41</span>, <span class="hljs-number">0x00</span>, <span class="hljs-number">0xC1</span>, <span class="hljs-number">0x81</span>, <span class="hljs-number">0x40</span>, <span class="hljs-number">0x01</span>, <span class="hljs-number">0xC0</span>,    <span class="hljs-number">0x80</span>, <span class="hljs-number">0x41</span>, <span class="hljs-number">0x01</span>, <span class="hljs-number">0xC0</span>, <span class="hljs-number">0x80</span>, <span class="hljs-number">0x41</span>, <span class="hljs-number">0x00</span>, <span class="hljs-number">0xC1</span>, <span class="hljs-number">0x81</span>, <span class="hljs-number">0x40</span>,    <span class="hljs-number">0x00</span>, <span class="hljs-number">0xC1</span>, <span class="hljs-number">0x81</span>, <span class="hljs-number">0x40</span>, <span class="hljs-number">0x01</span>, <span class="hljs-number">0xC0</span>, <span class="hljs-number">0x80</span>, <span class="hljs-number">0x41</span>, <span class="hljs-number">0x01</span>, <span class="hljs-number">0xC0</span>,    <span class="hljs-number">0x80</span>, <span class="hljs-number">0x41</span>, <span class="hljs-number">0x00</span>, <span class="hljs-number">0xC1</span>, <span class="hljs-number">0x81</span>, <span class="hljs-number">0x40</span>, <span class="hljs-number">0x01</span>, <span class="hljs-number">0xC0</span>, <span class="hljs-number">0x80</span>, <span class="hljs-number">0x41</span>,    <span class="hljs-number">0x00</span>, <span class="hljs-number">0xC1</span>, <span class="hljs-number">0x81</span>, <span class="hljs-number">0x40</span>, <span class="hljs-number">0x00</span>, <span class="hljs-number">0xC1</span>, <span class="hljs-number">0x81</span>, <span class="hljs-number">0x40</span>, <span class="hljs-number">0x01</span>, <span class="hljs-number">0xC0</span>,    <span class="hljs-number">0x80</span>, <span class="hljs-number">0x41</span>, <span class="hljs-number">0x00</span>, <span class="hljs-number">0xC1</span>, <span class="hljs-number">0x81</span>, <span class="hljs-number">0x40</span>, <span class="hljs-number">0x01</span>, <span class="hljs-number">0xC0</span>, <span class="hljs-number">0x80</span>, <span class="hljs-number">0x41</span>,    <span class="hljs-number">0x01</span>, <span class="hljs-number">0xC0</span>, <span class="hljs-number">0x80</span>, <span class="hljs-number">0x41</span>, <span class="hljs-number">0x00</span>, <span class="hljs-number">0xC1</span>, <span class="hljs-number">0x81</span>, <span class="hljs-number">0x40</span>, <span class="hljs-number">0x01</span>, <span class="hljs-number">0xC0</span>,    <span class="hljs-number">0x80</span>, <span class="hljs-number">0x41</span>, <span class="hljs-number">0x00</span>, <span class="hljs-number">0xC1</span>, <span class="hljs-number">0x81</span>, <span class="hljs-number">0x40</span>, <span class="hljs-number">0x00</span>, <span class="hljs-number">0xC1</span>, <span class="hljs-number">0x81</span>, <span class="hljs-number">0x40</span>,    <span class="hljs-number">0x01</span>, <span class="hljs-number">0xC0</span>, <span class="hljs-number">0x80</span>, <span class="hljs-number">0x41</span>, <span class="hljs-number">0x01</span>, <span class="hljs-number">0xC0</span>, <span class="hljs-number">0x80</span>, <span class="hljs-number">0x41</span>, <span class="hljs-number">0x00</span>, <span class="hljs-number">0xC1</span>,    <span class="hljs-number">0x81</span>, <span class="hljs-number">0x40</span>, <span class="hljs-number">0x00</span>, <span class="hljs-number">0xC1</span>, <span class="hljs-number">0x81</span>, <span class="hljs-number">0x40</span>, <span class="hljs-number">0x01</span>, <span class="hljs-number">0xC0</span>, <span class="hljs-number">0x80</span>, <span class="hljs-number">0x41</span>,    <span class="hljs-number">0x00</span>, <span class="hljs-number">0xC1</span>, <span class="hljs-number">0x81</span>, <span class="hljs-number">0x40</span>, <span class="hljs-number">0x01</span>, <span class="hljs-number">0xC0</span>, <span class="hljs-number">0x80</span>, <span class="hljs-number">0x41</span>, <span class="hljs-number">0x01</span>, <span class="hljs-number">0xC0</span>,    <span class="hljs-number">0x80</span>, <span class="hljs-number">0x41</span>, <span class="hljs-number">0x00</span>, <span class="hljs-number">0xC1</span>, <span class="hljs-number">0x81</span>, <span class="hljs-number">0x40</span>&#125;;<span class="hljs-comment">/* Table of CRC values for low-order byte */</span><span class="hljs-type">static</span> <span class="hljs-type">const</span> <span class="hljs-type">uint8_t</span> table_crc_lo[] = &#123;    <span class="hljs-number">0x00</span>, <span class="hljs-number">0xC0</span>, <span class="hljs-number">0xC1</span>, <span class="hljs-number">0x01</span>, <span class="hljs-number">0xC3</span>, <span class="hljs-number">0x03</span>, <span class="hljs-number">0x02</span>, <span class="hljs-number">0xC2</span>, <span class="hljs-number">0xC6</span>, <span class="hljs-number">0x06</span>,    <span class="hljs-number">0x07</span>, <span class="hljs-number">0xC7</span>, <span class="hljs-number">0x05</span>, <span class="hljs-number">0xC5</span>, <span class="hljs-number">0xC4</span>, <span class="hljs-number">0x04</span>, <span class="hljs-number">0xCC</span>, <span class="hljs-number">0x0C</span>, <span class="hljs-number">0x0D</span>, <span class="hljs-number">0xCD</span>,    <span class="hljs-number">0x0F</span>, <span class="hljs-number">0xCF</span>, <span class="hljs-number">0xCE</span>, <span class="hljs-number">0x0E</span>, <span class="hljs-number">0x0A</span>, <span class="hljs-number">0xCA</span>, <span class="hljs-number">0xCB</span>, <span class="hljs-number">0x0B</span>, <span class="hljs-number">0xC9</span>, <span class="hljs-number">0x09</span>,    <span class="hljs-number">0x08</span>, <span class="hljs-number">0xC8</span>, <span class="hljs-number">0xD8</span>, <span class="hljs-number">0x18</span>, <span class="hljs-number">0x19</span>, <span class="hljs-number">0xD9</span>, <span class="hljs-number">0x1B</span>, <span class="hljs-number">0xDB</span>, <span class="hljs-number">0xDA</span>, <span class="hljs-number">0x1A</span>,    <span class="hljs-number">0x1E</span>, <span class="hljs-number">0xDE</span>, <span class="hljs-number">0xDF</span>, <span class="hljs-number">0x1F</span>, <span class="hljs-number">0xDD</span>, <span class="hljs-number">0x1D</span>, <span class="hljs-number">0x1C</span>, <span class="hljs-number">0xDC</span>, <span class="hljs-number">0x14</span>, <span class="hljs-number">0xD4</span>,    <span class="hljs-number">0xD5</span>, <span class="hljs-number">0x15</span>, <span class="hljs-number">0xD7</span>, <span class="hljs-number">0x17</span>, <span class="hljs-number">0x16</span>, <span class="hljs-number">0xD6</span>, <span class="hljs-number">0xD2</span>, <span class="hljs-number">0x12</span>, <span class="hljs-number">0x13</span>, <span class="hljs-number">0xD3</span>,    <span class="hljs-number">0x11</span>, <span class="hljs-number">0xD1</span>, <span class="hljs-number">0xD0</span>, <span class="hljs-number">0x10</span>, <span class="hljs-number">0xF0</span>, <span class="hljs-number">0x30</span>, <span class="hljs-number">0x31</span>, <span class="hljs-number">0xF1</span>, <span class="hljs-number">0x33</span>, <span class="hljs-number">0xF3</span>,    <span class="hljs-number">0xF2</span>, <span class="hljs-number">0x32</span>, <span class="hljs-number">0x36</span>, <span class="hljs-number">0xF6</span>, <span class="hljs-number">0xF7</span>, <span class="hljs-number">0x37</span>, <span class="hljs-number">0xF5</span>, <span class="hljs-number">0x35</span>, <span class="hljs-number">0x34</span>, <span class="hljs-number">0xF4</span>,    <span class="hljs-number">0x3C</span>, <span class="hljs-number">0xFC</span>, <span class="hljs-number">0xFD</span>, <span class="hljs-number">0x3D</span>, <span class="hljs-number">0xFF</span>, <span class="hljs-number">0x3F</span>, <span class="hljs-number">0x3E</span>, <span class="hljs-number">0xFE</span>, <span class="hljs-number">0xFA</span>, <span class="hljs-number">0x3A</span>,    <span class="hljs-number">0x3B</span>, <span class="hljs-number">0xFB</span>, <span class="hljs-number">0x39</span>, <span class="hljs-number">0xF9</span>, <span class="hljs-number">0xF8</span>, <span class="hljs-number">0x38</span>, <span class="hljs-number">0x28</span>, <span class="hljs-number">0xE8</span>, <span class="hljs-number">0xE9</span>, <span class="hljs-number">0x29</span>,    <span class="hljs-number">0xEB</span>, <span class="hljs-number">0x2B</span>, <span class="hljs-number">0x2A</span>, <span class="hljs-number">0xEA</span>, <span class="hljs-number">0xEE</span>, <span class="hljs-number">0x2E</span>, <span class="hljs-number">0x2F</span>, <span class="hljs-number">0xEF</span>, <span class="hljs-number">0x2D</span>, <span class="hljs-number">0xED</span>,    <span class="hljs-number">0xEC</span>, <span class="hljs-number">0x2C</span>, <span class="hljs-number">0xE4</span>, <span class="hljs-number">0x24</span>, <span class="hljs-number">0x25</span>, <span class="hljs-number">0xE5</span>, <span class="hljs-number">0x27</span>, <span class="hljs-number">0xE7</span>, <span class="hljs-number">0xE6</span>, <span class="hljs-number">0x26</span>,    <span class="hljs-number">0x22</span>, <span class="hljs-number">0xE2</span>, <span class="hljs-number">0xE3</span>, <span class="hljs-number">0x23</span>, <span class="hljs-number">0xE1</span>, <span class="hljs-number">0x21</span>, <span class="hljs-number">0x20</span>, <span class="hljs-number">0xE0</span>, <span class="hljs-number">0xA0</span>, <span class="hljs-number">0x60</span>,    <span class="hljs-number">0x61</span>, <span class="hljs-number">0xA1</span>, <span class="hljs-number">0x63</span>, <span class="hljs-number">0xA3</span>, <span class="hljs-number">0xA2</span>, <span class="hljs-number">0x62</span>, <span class="hljs-number">0x66</span>, <span class="hljs-number">0xA6</span>, <span class="hljs-number">0xA7</span>, <span class="hljs-number">0x67</span>,    <span class="hljs-number">0xA5</span>, <span class="hljs-number">0x65</span>, <span class="hljs-number">0x64</span>, <span class="hljs-number">0xA4</span>, <span class="hljs-number">0x6C</span>, <span class="hljs-number">0xAC</span>, <span class="hljs-number">0xAD</span>, <span class="hljs-number">0x6D</span>, <span class="hljs-number">0xAF</span>, <span class="hljs-number">0x6F</span>,    <span class="hljs-number">0x6E</span>, <span class="hljs-number">0xAE</span>, <span class="hljs-number">0xAA</span>, <span class="hljs-number">0x6A</span>, <span class="hljs-number">0x6B</span>, <span class="hljs-number">0xAB</span>, <span class="hljs-number">0x69</span>, <span class="hljs-number">0xA9</span>, <span class="hljs-number">0xA8</span>, <span class="hljs-number">0x68</span>,    <span class="hljs-number">0x78</span>, <span class="hljs-number">0xB8</span>, <span class="hljs-number">0xB9</span>, <span class="hljs-number">0x79</span>, <span class="hljs-number">0xBB</span>, <span class="hljs-number">0x7B</span>, <span class="hljs-number">0x7A</span>, <span class="hljs-number">0xBA</span>, <span class="hljs-number">0xBE</span>, <span class="hljs-number">0x7E</span>,    <span class="hljs-number">0x7F</span>, <span class="hljs-number">0xBF</span>, <span class="hljs-number">0x7D</span>, <span class="hljs-number">0xBD</span>, <span class="hljs-number">0xBC</span>, <span class="hljs-number">0x7C</span>, <span class="hljs-number">0xB4</span>, <span class="hljs-number">0x74</span>, <span class="hljs-number">0x75</span>, <span class="hljs-number">0xB5</span>,    <span class="hljs-number">0x77</span>, <span class="hljs-number">0xB7</span>, <span class="hljs-number">0xB6</span>, <span class="hljs-number">0x76</span>, <span class="hljs-number">0x72</span>, <span class="hljs-number">0xB2</span>, <span class="hljs-number">0xB3</span>, <span class="hljs-number">0x73</span>, <span class="hljs-number">0xB1</span>, <span class="hljs-number">0x71</span>,    <span class="hljs-number">0x70</span>, <span class="hljs-number">0xB0</span>, <span class="hljs-number">0x50</span>, <span class="hljs-number">0x90</span>, <span class="hljs-number">0x91</span>, <span class="hljs-number">0x51</span>, <span class="hljs-number">0x93</span>, <span class="hljs-number">0x53</span>, <span class="hljs-number">0x52</span>, <span class="hljs-number">0x92</span>,    <span class="hljs-number">0x96</span>, <span class="hljs-number">0x56</span>, <span class="hljs-number">0x57</span>, <span class="hljs-number">0x97</span>, <span class="hljs-number">0x55</span>, <span class="hljs-number">0x95</span>, <span class="hljs-number">0x94</span>, <span class="hljs-number">0x54</span>, <span class="hljs-number">0x9C</span>, <span class="hljs-number">0x5C</span>,    <span class="hljs-number">0x5D</span>, <span class="hljs-number">0x9D</span>, <span class="hljs-number">0x5F</span>, <span class="hljs-number">0x9F</span>, <span class="hljs-number">0x9E</span>, <span class="hljs-number">0x5E</span>, <span class="hljs-number">0x5A</span>, <span class="hljs-number">0x9A</span>, <span class="hljs-number">0x9B</span>, <span class="hljs-number">0x5B</span>,    <span class="hljs-number">0x99</span>, <span class="hljs-number">0x59</span>, <span class="hljs-number">0x58</span>, <span class="hljs-number">0x98</span>, <span class="hljs-number">0x88</span>, <span class="hljs-number">0x48</span>, <span class="hljs-number">0x49</span>, <span class="hljs-number">0x89</span>, <span class="hljs-number">0x4B</span>, <span class="hljs-number">0x8B</span>,    <span class="hljs-number">0x8A</span>, <span class="hljs-number">0x4A</span>, <span class="hljs-number">0x4E</span>, <span class="hljs-number">0x8E</span>, <span class="hljs-number">0x8F</span>, <span class="hljs-number">0x4F</span>, <span class="hljs-number">0x8D</span>, <span class="hljs-number">0x4D</span>, <span class="hljs-number">0x4C</span>, <span class="hljs-number">0x8C</span>,    <span class="hljs-number">0x44</span>, <span class="hljs-number">0x84</span>, <span class="hljs-number">0x85</span>, <span class="hljs-number">0x45</span>, <span class="hljs-number">0x87</span>, <span class="hljs-number">0x47</span>, <span class="hljs-number">0x46</span>, <span class="hljs-number">0x86</span>, <span class="hljs-number">0x82</span>, <span class="hljs-number">0x42</span>,    <span class="hljs-number">0x43</span>, <span class="hljs-number">0x83</span>, <span class="hljs-number">0x41</span>, <span class="hljs-number">0x81</span>, <span class="hljs-number">0x80</span>, <span class="hljs-number">0x40</span>&#125;;<span class="hljs-type">uint16_t</span> <span class="hljs-title function_">crc16</span><span class="hljs-params">(<span class="hljs-type">uint8_t</span> *buffer, <span class="hljs-type">uint16_t</span> buffer_length)</span>&#123;    <span class="hljs-type">uint8_t</span> crc_hi = <span class="hljs-number">0xFF</span>; <span class="hljs-comment">/* high CRC byte initialized */</span>    <span class="hljs-type">uint8_t</span> crc_lo = <span class="hljs-number">0xFF</span>; <span class="hljs-comment">/* low CRC byte initialized */</span>    <span class="hljs-type">unsigned</span> <span class="hljs-type">int</span> i; <span class="hljs-comment">/* will index into CRC lookup */</span>    <span class="hljs-comment">/* pass through message buffer */</span>    <span class="hljs-keyword">while</span> (buffer_length--) &#123;        i = crc_hi ^ *buffer++; <span class="hljs-comment">/* calculate the CRC  */</span>        crc_hi = crc_lo ^ table_crc_hi[i];        crc_lo = table_crc_lo[i];    &#125;    <span class="hljs-keyword">return</span> (crc_hi &lt;&lt; <span class="hljs-number">8</span> | crc_lo);&#125;</code></pre></div><p>另外，在modbus通信传输调试过程中，可以选择带有crc校验的串口调试助手（如：Commix助手），调试起来比较方便，或者选择CRC在线计算工具（如：<a href="https://www.toolhelper.cn/DigestAlgorithm/CRC">CRC 校验 - 在线工具 (toolhelper.cn)</a>），<font color="#FF0000">不过需要注意的是，在添加CRC校验值时，要将计算的CRC值低字节在前，高字节在后的顺序发送。</font></p><h2 id="参考链接">参考链接</h2><p><a href="https://getiot.tech/modbus/modbus-checksum">Modbus 差错校验 | 人人都懂物联网 (getiot.tech)</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;Modbus 通信需要进行差错校验，根据传输模式（ASCII 或 RTU）的不同，会采用不同的校验方法。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;ASCII 模式&lt;/strong&gt; —— 校验字段由两个字符组成，其值是基于对全部报文内容执行 &lt;strong&gt;LRC&lt;/</summary>
      
    
    
    
    <category term="编程基础" scheme="http://example.com/categories/%E7%BC%96%E7%A8%8B%E5%9F%BA%E7%A1%80/"/>
    
    
    <category term="modbus" scheme="http://example.com/tags/modbus/"/>
    
  </entry>
  
  <entry>
    <title>可变参数宏定义</title>
    <link href="http://example.com/2024/01/25/%E5%8F%AF%E5%8F%98%E5%8F%82%E6%95%B0%E5%AE%8F%E5%AE%9A%E4%B9%89/"/>
    <id>http://example.com/2024/01/25/%E5%8F%AF%E5%8F%98%E5%8F%82%E6%95%B0%E5%AE%8F%E5%AE%9A%E4%B9%89/</id>
    <published>2024-01-25T10:39:24.000Z</published>
    <updated>2024-01-25T11:30:18.607Z</updated>
    
    <content type="html"><![CDATA[<p>宏定义在C编程过程中使用比较多，下面来看看它的常用方法。</p><h1 id="日志系统预定义宏">日志系统预定义宏</h1><table><thead><tr class="header"><th>预定义宏</th><th>含义</th></tr></thead><tbody><tr class="odd"><td><code>__LINE__</code></td><td>当前的函数行 (int)</td></tr><tr class="even"><td><code>__FILE__</code></td><td>当前程序源文件 (char*)</td></tr><tr class="odd"><td><code>__DATE__</code></td><td>当前的编译日期</td></tr><tr class="even"><td><code>__TIME__</code></td><td>当前编译时间</td></tr><tr class="odd"><td><code>__STDC__</code></td><td>遵循ANSI C标准时该标识被赋值为1</td></tr><tr class="even"><td><code>__FUNCTION__</code></td><td>当前运行的函数 (char*)</td></tr><tr class="odd"><td><font color="#FF0000"><code>__VA_ARGS__</code></font></td><td>C99标准中可变参数<strong>宏</strong>，<strong>目前似乎只有 <code>gcc</code> 支持</strong></td></tr><tr class="even"><td><font color="#FF0000"><code>##__VA_ARGS__</code></font></td><td>当可变参数的个数为0时，去掉多余 <code>,</code> ,防止编译出错</td></tr></tbody></table><p>如：</p><div class="code-wrapper"><pre><code class="hljs c"><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;file: %s\n&quot;</span>, __FILE__);<span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;function: %s\n&quot;</span>, __FUNCTION__);<span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;line: %d\n&quot;</span>, __LINE__);</code></pre></div><h1 id="符号-与">符号： <code>#</code> 与 <code>##</code></h1><ul><li><h4 id="字符串化操作符"><strong>字符串化操作符 <code>#</code></strong></h4></li></ul><p>可以使用 <strong>#</strong> 将当前的内容转换成字符串。例如：</p><div class="code-wrapper"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">define</span> STR(x) #x</span><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;string of 123: %s \n&quot;</span>, STR(<span class="hljs-number">123</span>)); <span class="hljs-comment">//传入数字123，输出字符串“123”</span></code></pre></div><ul><li><h4 id="连接操作符"><strong>连接操作符 <code>##</code></strong></h4></li></ul><p>把宏中的参数进行拼接，从而实现字符串连接。例如：</p><div class="code-wrapper"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">define</span> LINK(AA, BB) AA##BB</span><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">(<span class="hljs-type">void</span>)</span>&#123;    <span class="hljs-type">int</span> n = LINK(<span class="hljs-number">56</span>, <span class="hljs-number">12</span>);     <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;n = %d&quot;</span>, n); <span class="hljs-comment">//n = 5612</span>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;&#125;</code></pre></div><h1 id="可变参数的处理">可变参数的处理</h1><p>在宏定义时，可使用三个点(...)来表示可变参数，也可以在三个点的前面加上可变参数的名称。</p><ul><li><strong>接收可变参数</strong> <div class="code-wrapper"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">define</span> DEBUG1(...)      printf(__VA_ARGS__)</span></code></pre></div></li><li><strong>可变参数前添加一个参数名</strong></li></ul><div class="code-wrapper"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">define</span> DEBUG2(args...)   printf(args)</span></code></pre></div><ul><li><strong>可变参数个数为0</strong> <div class="code-wrapper"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">define</span> DEBUG3(format, ...)     printf(format, ##__VA_ARGS__)</span></code></pre></div></li><li><strong>自定义可变参数名</strong> <div class="code-wrapper"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">define</span> DEBUG4(format, args...)  printf(format, ##args)</span></code></pre></div></li></ul><h1 id="日志系统中宏定义">日志系统中宏定义</h1><p>Armcc编译器宏调试开关实例：</p><div class="code-wrapper"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><span class="hljs-meta">#<span class="hljs-keyword">define</span> USE_DEBUG  <span class="hljs-comment">//开启DEBUG宏 #undef DEBUG （不开启宏）</span></span><span class="hljs-meta">#<span class="hljs-keyword">if</span> USE_DEBUG</span><span class="hljs-meta">#<span class="hljs-keyword">define</span> DEBUG(fmt, args...) do&#123;\</span><span class="hljs-meta">                              printf(<span class="hljs-string">&quot;file:%s function: %s line: %d &quot;</span> \</span><span class="hljs-meta">    fmt, __FILE__, __FUNCTION__, __LINE__, ##args)\</span><span class="hljs-meta">    &#125;while(0)</span><span class="hljs-meta">#<span class="hljs-keyword">else</span></span><span class="hljs-meta">#<span class="hljs-keyword">define</span> DEBUG(fmt, args...)</span><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">(<span class="hljs-type">int</span> argc, <span class="hljs-type">char</span> **argv)</span> &#123;  <span class="hljs-type">char</span> str[]=<span class="hljs-string">&quot;Hello World&quot;</span>;  DEBUG(<span class="hljs-string">&quot;%s&quot;</span>,str);  <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;&#125;</code></pre></div><p>Gcc编译器宏调试开关可使用<code>__VA_ARGS__</code>可变参数宏：</p><div class="code-wrapper"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><span class="hljs-meta">#<span class="hljs-keyword">define</span> USE_DEBUG  <span class="hljs-comment">//开启DEBUG宏 #undef DEBUG （不开启宏）</span></span><span class="hljs-meta">#<span class="hljs-keyword">if</span> USE_DEBUG</span><span class="hljs-meta">#<span class="hljs-keyword">define</span> DEBUG(fmt, ...) do&#123;\</span><span class="hljs-meta">                              printf(<span class="hljs-string">&quot;file:%s function: %s line: %d &quot;</span> \</span><span class="hljs-meta">    fmt, __FILE__, __FUNCTION__, __LINE__, ##__VA_ARGS__)\</span><span class="hljs-meta">    &#125;while(0)</span><span class="hljs-meta">#<span class="hljs-keyword">else</span></span><span class="hljs-meta">#<span class="hljs-keyword">define</span> DEBUG(fmt, ...)</span><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">(<span class="hljs-type">int</span> argc, <span class="hljs-type">char</span> **argv)</span> &#123;  <span class="hljs-type">char</span> str[]=<span class="hljs-string">&quot;Hello World&quot;</span>;  DEBUG(<span class="hljs-string">&quot;%s&quot;</span>,str);  <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;&#125;</code></pre></div>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;宏定义在C编程过程中使用比较多，下面来看看它的常用方法。&lt;/p&gt;
&lt;h1 id=&quot;日志系统预定义宏&quot;&gt;日志系统预定义宏&lt;/h1&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr class=&quot;header&quot;&gt;
&lt;th&gt;预定义宏&lt;/th&gt;
&lt;th&gt;含义&lt;/th&gt;
&lt;/t</summary>
      
    
    
    
    <category term="编程基础" scheme="http://example.com/categories/%E7%BC%96%E7%A8%8B%E5%9F%BA%E7%A1%80/"/>
    
    
    <category term="宏" scheme="http://example.com/tags/%E5%AE%8F/"/>
    
  </entry>
  
  <entry>
    <title>串口传输float数据的方法</title>
    <link href="http://example.com/2024/01/21/%E4%B8%B2%E5%8F%A3%E4%BC%A0%E8%BE%93float%E6%95%B0%E6%8D%AE%E7%9A%84%E6%96%B9%E6%B3%95/"/>
    <id>http://example.com/2024/01/21/%E4%B8%B2%E5%8F%A3%E4%BC%A0%E8%BE%93float%E6%95%B0%E6%8D%AE%E7%9A%84%E6%96%B9%E6%B3%95/</id>
    <published>2024-01-21T07:40:09.000Z</published>
    <updated>2024-01-25T10:36:12.032Z</updated>
    
    <content type="html"><![CDATA[<p>在单片机编程过程中，会出现使用串口传输 float数据的情况，串口是通过字节来完成数据传输的，对于整型数，可以将其转换成字节进行传输，同理对于float型数据，也可使用同样的方法。</p><h2 id="指针方式传输float数据">指针方式传输float数据</h2><p>float数据在内存中是以是4个字节来存储的，所以，可用指针方式分离出这四个字节，然后分别进行串口传输。</p><ul><li><strong>发送</strong></li></ul><div class="code-wrapper"><pre><code class="hljs c"><span class="hljs-type">float</span> val = <span class="hljs-number">3.14</span>;uart_send_byte(((<span class="hljs-type">unsigned</span> <span class="hljs-type">char</span> *)&amp;val)[<span class="hljs-number">0</span>]);uart_send_byte(((<span class="hljs-type">unsigned</span> <span class="hljs-type">char</span> *)&amp;val)[<span class="hljs-number">1</span>]);uart_send_byte(((<span class="hljs-type">unsigned</span> <span class="hljs-type">char</span> *)&amp;val)[<span class="hljs-number">2</span>]);uart_send_byte(((<span class="hljs-type">unsigned</span> <span class="hljs-type">char</span> *)&amp;val)[<span class="hljs-number">3</span>]);</code></pre></div><ul><li><strong>接收</strong></li></ul><div class="code-wrapper"><pre><code class="hljs c"><span class="hljs-type">unsigned</span> <span class="hljs-type">char</span> buf[<span class="hljs-number">4</span>];<span class="hljs-type">float</span> val;uart_recv_byte(buf+<span class="hljs-number">0</span>);uart_recv_byte(buf+<span class="hljs-number">1</span>);uart_recv_byte(buf+<span class="hljs-number">2</span>);uart_recv_byte(buf+<span class="hljs-number">3</span>);val = *((<span class="hljs-type">float</span> *)buf);</code></pre></div><h2 id="联合体方式传输float数据">联合体方式传输float数据</h2><p>相对于指针方式的传递，采用联合体的方式会更简洁些，举例如下：</p><div class="code-wrapper"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span> <span class="hljs-class"><span class="hljs-keyword">union</span> <span class="hljs-title">U1</span></span><span class="hljs-class">&#123;</span>    <span class="hljs-type">unsigned</span> <span class="hljs-type">char</span> byte[<span class="hljs-number">4</span>];    <span class="hljs-type">float</span> val;&#125;; <span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span>&#123;    <span class="hljs-class"><span class="hljs-keyword">union</span> <span class="hljs-title">U1</span> <span class="hljs-title">u1</span>;</span>    <span class="hljs-class"><span class="hljs-keyword">union</span> <span class="hljs-title">U1</span> <span class="hljs-title">u2</span>;</span>        u1.val = <span class="hljs-number">3.168</span>;        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;u1.byte[0] = %#X \n&quot;</span>, u1.byte[<span class="hljs-number">0</span>]);    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;u1.byte[1] = %#X \n&quot;</span>, u1.byte[<span class="hljs-number">1</span>]);    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;u1.byte[2] = %#X \n&quot;</span>, u1.byte[<span class="hljs-number">2</span>]);    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;u1.byte[3] = %#X \n&quot;</span>, u1.byte[<span class="hljs-number">3</span>]);    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;u1.val = %f \n&quot;</span>, u1.val);        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>; i &lt; <span class="hljs-number">4</span>; i++)    &#123;        u2.byte[i] = u1.byte[i];    &#125;    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;u2.val = %f \n&quot;</span>, u2.val);    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;&#125;</code></pre></div><p><img src="https://gitee.com/kayoungzhang/picgo_res/raw/master/img/image-20240121165137093.png" /></p><p>进入网站：<a href="https://www.asciim.cn/hex/float.html">https://www.asciim.cn/hex/float.html</a></p><figure><img src="https://gitee.com/kayoungzhang/picgo_res/raw/master/img/image-20240121165019842.png" alt="" /><figcaption>image-20240121165019842</figcaption></figure><p>单片机采用的一般是小端传输，可以看出，与上面的结果一致。</p><p><strong>参考链接：</strong></p><p><a href="https://blog.csdn.net/huhuandk/article/details/92010427">利用串口收发浮点数_uart怎么传输浮点型-CSDN博客</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;在单片机编程过程中，会出现使用串口传输 float数据的情况，串口是通过字节来完成数据传输的，对于整型数，可以将其转换成字节进行传输，同理对于float型数据，也可使用同样的方法。&lt;/p&gt;
&lt;h2 id=&quot;指针方式传输float数据&quot;&gt;指针方式传输float数据&lt;/h2&gt;</summary>
      
    
    
    
    <category term="单片机" scheme="http://example.com/categories/%E5%8D%95%E7%89%87%E6%9C%BA/"/>
    
    
    <category term="float" scheme="http://example.com/tags/float/"/>
    
  </entry>
  
  <entry>
    <title>C语言进阶-模型</title>
    <link href="http://example.com/2024/01/15/C%E8%AF%AD%E8%A8%80%E8%BF%9B%E9%98%B6-%E6%A8%A1%E5%9E%8B/"/>
    <id>http://example.com/2024/01/15/C%E8%AF%AD%E8%A8%80%E8%BF%9B%E9%98%B6-%E6%A8%A1%E5%9E%8B/</id>
    <published>2024-01-15T03:16:14.000Z</published>
    <updated>2024-01-15T03:32:03.399Z</updated>
    
    <content type="html"><![CDATA[<h2 id="流畅的c语言---原则实践和模型克里斯多夫-普雷切恩">流畅的C语言 - 原则，实践和模型（克里斯多夫 普雷切恩）</h2><div class="code-wrapper"><pre><code class="hljs applescript">How <span class="hljs-keyword">to</span> implement readable, flexible, <span class="hljs-keyword">and</span> maintainable software？如何开发易读的、灵活的和可维护的软件。</code></pre></div><p>C语言开发中，要想编写出易懂，易读，易维护的软件，需要遵循一些开发模型，下面来了解一下：</p><h3 id="patterns-for-error-handling-错误处理模型">Patterns for error handling 错误处理模型</h3><figure><img src="https://gitee.com/kayoungzhang/picgo_res/raw/master/img/image-20240110171146641.png" alt="" /><figcaption>image-20240110171146641</figcaption></figure><ul><li><strong>Guard Clause</strong></li></ul><div class="code-wrapper"><pre><code class="hljs c"><span class="hljs-type">int</span> <span class="hljs-title function_">parseFile</span><span class="hljs-params">(<span class="hljs-type">char</span>* file_name)</span>&#123;  <span class="hljs-type">int</span> return_value = ERROR;  FILE* file_pointer = <span class="hljs-number">0</span>;  <span class="hljs-type">char</span>* buffer = <span class="hljs-number">0</span>;  <span class="hljs-keyword">if</span>(file_name==<span class="hljs-literal">NULL</span>)  &#123;  <span class="hljs-keyword">return</span> ERROR;  &#125;  <span class="hljs-keyword">if</span>(file_pointer=fopen(file_name, <span class="hljs-string">&quot;r&quot;</span>))  &#123;  <span class="hljs-keyword">if</span>(buffer=<span class="hljs-built_in">malloc</span>(BUFFER_SIZE))  &#123;  return_value = searchFileForKeywords(buffer, file_pointer);  <span class="hljs-built_in">free</span>(buffer);  &#125;  fclose(file_pointer);  &#125;  <span class="hljs-keyword">return</span> return_value;&#125;</code></pre></div><ul><li><strong>Samurai Principle</strong></li></ul><div class="code-wrapper"><pre><code class="hljs c"><span class="hljs-type">int</span> <span class="hljs-title function_">parseFile</span><span class="hljs-params">(<span class="hljs-type">char</span>* file_name)</span>&#123;  <span class="hljs-type">int</span> return_value = ERROR;  FILE* file_pointer = <span class="hljs-number">0</span>;  <span class="hljs-type">char</span>* buffer = <span class="hljs-number">0</span>;    assert(file_name!=<span class="hljs-literal">NULL</span> &amp;&amp; <span class="hljs-string">&quot;Invalid filename&quot;</span>);  <span class="hljs-keyword">if</span>(file_pointer=fopen(file_name, <span class="hljs-string">&quot;r&quot;</span>))  &#123;  <span class="hljs-keyword">if</span>(buffer=<span class="hljs-built_in">malloc</span>(BUFFER_SIZE))  &#123;  return_value = searchFileForKeywords(buffer, file_pointer);  <span class="hljs-built_in">free</span>(buffer);  &#125;  fclose(file_pointer);  &#125;  <span class="hljs-keyword">return</span> return_value;&#125;</code></pre></div><ul><li><strong>Cleanup Record</strong></li></ul><div class="code-wrapper"><pre><code class="hljs c"><span class="hljs-type">int</span> <span class="hljs-title function_">parseFile</span><span class="hljs-params">(<span class="hljs-type">char</span>* file_name)</span>&#123;  <span class="hljs-type">int</span> return_value = ERROR;  FILE* file_pointer = <span class="hljs-number">0</span>;  <span class="hljs-type">char</span>* buffer = <span class="hljs-number">0</span>;    assert(file_name!=<span class="hljs-literal">NULL</span> &amp;&amp; <span class="hljs-string">&quot;Invalid filename&quot;</span>);  <span class="hljs-keyword">if</span>((file_pointer=fopen(file_name, <span class="hljs-string">&quot;r&quot;</span>)) &amp;&amp; (buffer=<span class="hljs-built_in">malloc</span>(BUFFER_SIZE)))  &#123;  return_value = searchFileForKeywords(buffer, file_pointer);  &#125;  <span class="hljs-keyword">if</span>(file_pointer)  &#123;  fclose(file_pointer);  &#125;  <span class="hljs-keyword">if</span>(buffer)  &#123;  <span class="hljs-built_in">free</span>(buffer);  &#125;  <span class="hljs-keyword">return</span> return_value;&#125;</code></pre></div><ul><li><strong>Object-Based Error Handling</strong></li></ul><div class="code-wrapper"><pre><code class="hljs c"><span class="hljs-keyword">typedef</span> <span class="hljs-class"><span class="hljs-keyword">struct</span></span><span class="hljs-class">&#123;</span>FILE* file_pointer;  <span class="hljs-type">char</span>* buffer;&#125;FileParser;<span class="hljs-type">int</span> <span class="hljs-title function_">parseFile</span><span class="hljs-params">(<span class="hljs-type">char</span>* file_name)</span>&#123;  <span class="hljs-type">int</span> return_value;  FileParser* parser = createParser(file_name);  return_value = searchFileForKeywords(parser);  cleanupParser(parser);  <span class="hljs-keyword">return</span> return_value;&#125;<span class="hljs-type">int</span> <span class="hljs-title function_">searchFileForKeywords</span><span class="hljs-params">(FileParser* parser)</span>&#123;  <span class="hljs-keyword">if</span>(parser == <span class="hljs-literal">NULL</span>)&#123;<span class="hljs-keyword">return</span> ERROR;&#125;<span class="hljs-keyword">while</span>(fgets(parser-&gt;buffer, BUFFER_SIZE, parser-&gt;file_pointer)!=<span class="hljs-literal">NULL</span>)&#123;<span class="hljs-keyword">if</span>(<span class="hljs-built_in">strcmp</span>(<span class="hljs-string">&quot;KEYWORD_ONE\n&quot;</span>, parser-&gt;buffer)==<span class="hljs-number">0</span>)&#123;<span class="hljs-keyword">return</span> KEYWORD_ONE_FOUND_FIRST;&#125;<span class="hljs-keyword">if</span>(<span class="hljs-built_in">strcmp</span>(<span class="hljs-string">&quot;KEYWORD_TWO\n&quot;</span>, parser-&gt;buffer)==<span class="hljs-number">0</span>)&#123;<span class="hljs-keyword">return</span> KEYWORD_TWO_FOUND_FIRST;&#125;  &#125;<span class="hljs-keyword">return</span> NO_KEYWORD_FOUND;&#125;FileParser* <span class="hljs-title function_">createParser</span><span class="hljs-params">(<span class="hljs-type">char</span>* file_name)</span>&#123;  assert(file_name!=<span class="hljs-literal">NULL</span> &amp;&amp; <span class="hljs-string">&quot;Invalid filename&quot;</span>);FileParser* parser = <span class="hljs-built_in">malloc</span>(<span class="hljs-keyword">sizeof</span>(FileParser));<span class="hljs-keyword">if</span>(parser)&#123;parser-&gt;file_pointer=fopen(file_name, <span class="hljs-string">&quot;r&quot;</span>);parser-&gt;buffer = <span class="hljs-built_in">malloc</span>(BUFFER_SIZE);<span class="hljs-keyword">if</span>(!parser-&gt;file_pointer || !parser-&gt;buffer)&#123;cleanupParser(parser);<span class="hljs-keyword">return</span> <span class="hljs-literal">NULL</span>;&#125;&#125;<span class="hljs-keyword">return</span> parser;&#125;<span class="hljs-type">void</span> <span class="hljs-title function_">cleanupParser</span><span class="hljs-params">(FileParser* parser)</span>&#123;  <span class="hljs-keyword">if</span>(parser)  &#123;<span class="hljs-keyword">if</span>(parser-&gt;buffer)&#123;<span class="hljs-built_in">free</span>(parser-&gt;buffer);&#125;<span class="hljs-keyword">if</span>(parser-&gt;file_pointer)&#123;fclose(parser-&gt;file_pointer);&#125;<span class="hljs-built_in">free</span>(parser);&#125;&#125;</code></pre></div><h3 id="patterns-for-returning-error-information-返回错误信息模型">Patterns for returning error information 返回错误信息模型</h3><figure><img src="https://gitee.com/kayoungzhang/picgo_res/raw/master/img/image-20240110172835081.png" alt="" /><figcaption>image-20240110172835081</figcaption></figure><ul><li><strong>Return Status Codes</strong></li></ul><div class="code-wrapper"><pre><code class="hljs c"><span class="hljs-comment">/* Error codes returned by this registry */</span><span class="hljs-keyword">typedef</span> <span class="hljs-class"><span class="hljs-keyword">enum</span></span><span class="hljs-class">&#123;</span>  OK,  OUT_OF_MEMORY,  INVALID_KEY,  INVALID_STRING,  STRING_TOO_LONG,  CANNOT_ADD_KEY&#125;RegError;</code></pre></div><h3 id="patterns-for-memory-management-内存管理模型">Patterns for memory management 内存管理模型</h3><figure><img src="https://gitee.com/kayoungzhang/picgo_res/raw/master/img/image-20240111145735378.png" alt="" /><figcaption>image-20240111145735378</figcaption></figure><ul><li><strong>Dedicated Ownership</strong></li></ul><div class="code-wrapper"><pre><code class="hljs c"><span class="hljs-comment">/* For the provided &#x27;filename&#x27;, this function reads text from the file and</span><span class="hljs-comment">prints the Caesar-encrypted text. This function is responsible for</span><span class="hljs-comment">allocating and deallocating the required buffers for storing the</span><span class="hljs-comment">file content */</span><span class="hljs-type">void</span> <span class="hljs-title function_">encryptCaesarFile</span><span class="hljs-params">(<span class="hljs-type">char</span>* filename)</span>&#123;  <span class="hljs-type">char</span>* text;<span class="hljs-type">int</span> size = getFileLength(filename);<span class="hljs-keyword">if</span>(size&gt;<span class="hljs-number">0</span>)&#123;text = <span class="hljs-built_in">malloc</span>(size);readFileContent(filename, text, size);caesar(text, strnlen(text, size));    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;Encrypted text: %s\n&quot;</span>, text);<span class="hljs-built_in">free</span>(text);&#125;&#125;<span class="hljs-comment">/* For all files in the current directory, this function reads text</span><span class="hljs-comment">from the file and prints the Caesar-encrypted text. */</span><span class="hljs-type">void</span> <span class="hljs-title function_">encryptDirectoryContent</span><span class="hljs-params">()</span>&#123;  <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">dirent</span> *<span class="hljs-title">directory_entry</span>;</span>DIR *directory = opendir(<span class="hljs-string">&quot;.&quot;</span>);<span class="hljs-keyword">while</span> ((directory_entry = readdir(directory)) != <span class="hljs-literal">NULL</span>)&#123;encryptCaesarFile(directory_entry-&gt;d_name);&#125;closedir(directory);&#125;</code></pre></div><ul><li><strong>Memory Pool</strong></li></ul><div class="code-wrapper"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">define</span> MAX_ELEMENTS 20;</span><span class="hljs-meta">#<span class="hljs-keyword">define</span> ELEMENT_SIZE 255;</span><span class="hljs-keyword">typedef</span> <span class="hljs-class"><span class="hljs-keyword">struct</span></span><span class="hljs-class">&#123;</span>  <span class="hljs-type">bool</span> occupied;  <span class="hljs-type">char</span> memory[ELEMENT_SIZE];&#125;PoolElement;<span class="hljs-type">static</span> PoolElement memory_pool[MAX_ELEMENTS];<span class="hljs-comment">/* Returns memory of at least the provided &#x27;size&#x27; or NULL if no memory chunk from the pool is available */</span><span class="hljs-type">void</span>* <span class="hljs-title function_">poolTake</span><span class="hljs-params">(<span class="hljs-type">size_t</span> size)</span>&#123;  <span class="hljs-keyword">if</span>(size &lt;= ELEMENT_SIZE)&#123;<span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>; i&lt;MAX_ELEMENTS; i++)&#123;<span class="hljs-keyword">if</span>(memory_pool[i].occupied == <span class="hljs-literal">false</span>)&#123;memory_pool[i].occupied = <span class="hljs-literal">true</span>;<span class="hljs-keyword">return</span> &amp;(memory_pool[i].memory);&#125;&#125;&#125;<span class="hljs-keyword">return</span> <span class="hljs-literal">NULL</span>;&#125;<span class="hljs-comment">/* Gives the memory chunk (&#x27;pointer&#x27;) back to the pool */</span><span class="hljs-type">void</span> <span class="hljs-title function_">poolRelease</span><span class="hljs-params">(<span class="hljs-type">void</span>* pointer)</span>&#123;  <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>; i&lt;MAX_ELEMENTS; i++)  &#123;    <span class="hljs-keyword">if</span>(&amp;(memory_pool[i].memory) == pointer)    &#123;      memory_pool[i].occupied = <span class="hljs-literal">false</span>;      <span class="hljs-keyword">return</span>;    &#125;  &#125;&#125;<span class="hljs-meta">#<span class="hljs-keyword">define</span> MAX_FILENAME_SIZE ELEMENT_SIZE</span><span class="hljs-comment">/* Prints the Caesar-encrypted &#x27;filename&#x27;.This function is responsible for allocating and deallocating the required buffers for storing the file content.</span><span class="hljs-comment">Notes: The filename must be all capital letters and we accept that the &#x27;.&#x27; of the filename will also be shifted by the Caesar encryption. */</span><span class="hljs-type">void</span> <span class="hljs-title function_">encryptCaesarFilename</span><span class="hljs-params">(<span class="hljs-type">char</span>* filename)</span>&#123;  <span class="hljs-type">char</span>* buffer = poolTake(MAX_FILENAME_SIZE);  <span class="hljs-keyword">if</span>(buffer != <span class="hljs-literal">NULL</span>)  &#123;    strlcpy(buffer, filename, MAX_FILENAME_SIZE);    caesar(buffer, strnlen(buffer, MAX_FILENAME_SIZE));    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;\nEncrypted filename: %s &quot;</span>, buffer);    poolRelease(buffer);  &#125;&#125;<span class="hljs-comment">/* For all files in the current directory, this function reads text from the file and prints the Caesar-encrypted text. */</span><span class="hljs-type">void</span> <span class="hljs-title function_">encryptDirectoryContent</span><span class="hljs-params">()</span>&#123;  <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">dirent</span> *<span class="hljs-title">directory_entry</span>;</span>    DIR *directory = opendir(<span class="hljs-string">&quot;.&quot;</span>);  <span class="hljs-keyword">while</span>((directory_entry = readdir(directory)) != <span class="hljs-literal">NULL</span>)  &#123;    encryptCaesarFilename(directory_entry-&gt;d_name);    encryptCaesarFile(directory_entry-&gt;d_name);  &#125;  closedir(directory);&#125;</code></pre></div><h3 id="patterns-for-returning-data-from-functions-函数返回数据模型">Patterns for returning data from functions 函数返回数据模型</h3><figure><img src="https://gitee.com/kayoungzhang/picgo_res/raw/master/img/image-20240111162823846.png" alt="" /><figcaption>image-20240111162823846</figcaption></figure><ul><li><strong>Out-Parameters</strong></li></ul><div class="code-wrapper"><pre><code class="hljs c"><span class="hljs-comment">/* Returns driver status information via out-parameters.</span><span class="hljs-comment">total_sent_packets --&gt; number of packets tried to send (success and fail)</span><span class="hljs-comment">successfully_sent_packets --&gt; number of packets successfully sent</span><span class="hljs-comment">failed_sent_packets --&gt; number of packets failed to send */</span><span class="hljs-type">void</span> <span class="hljs-title function_">ethernetDriverGetStatistics</span><span class="hljs-params">(<span class="hljs-type">int</span>* total_sent_packets,</span><span class="hljs-params"><span class="hljs-type">int</span>* successfully_sent_packets, <span class="hljs-type">int</span>* failed_sent_packets)</span>;<span class="hljs-type">void</span> <span class="hljs-title function_">ethShow</span><span class="hljs-params">()</span>&#123;  <span class="hljs-type">int</span> total_sent_packets, successfully_sent_packets, failed_sent_packets;    ethernetDriverGetStatistics(&amp;total_sent_packets, &amp;successfully_sent_packets,                              &amp;failed_sent_packets);  <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%i packets sent\n&quot;</span>, total_sent_packets);  <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%i packets successfully sent\n&quot;</span>, successfully_sent_packets);  <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%i packets failed to send\n&quot;</span>, failed_sent_packets);    <span class="hljs-type">int</span> received_packets = ethernetDriverGetTotalReceivedPackets();  <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%i packets received\n&quot;</span>, received_packets);&#125;</code></pre></div><ul><li><strong>Aggregate Instance</strong></li></ul><div class="code-wrapper"><pre><code class="hljs c"><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">EthernetDriverStat</span></span><span class="hljs-class">&#123;</span>  <span class="hljs-type">int</span> received_packets; <span class="hljs-comment">/* Number of received packets */</span>  <span class="hljs-type">int</span> total_sent_packets; <span class="hljs-comment">/* Number of sent packets (success and fail)*/</span>  <span class="hljs-type">int</span> successfully_sent_packets;<span class="hljs-comment">/* Number of successfully sent packets */</span>  <span class="hljs-type">int</span> failed_sent_packets; <span class="hljs-comment">/* Number of packets failed to send */</span>&#125;;<span class="hljs-comment">/* Returns statistics information of the Ethernet driver */</span><span class="hljs-keyword">extern</span> <span class="hljs-keyword">struct</span> EthernetDriverStat <span class="hljs-title function_">ethernetDriverGetStatistics</span><span class="hljs-params">()</span>;<span class="hljs-comment">/**********************************************************************/</span><span class="hljs-type">void</span> <span class="hljs-title function_">ethShow</span><span class="hljs-params">()</span>&#123;  <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">EthernetDriverStat</span> <span class="hljs-title">eth_stat</span> =</span> ethernetDriverGetStatistics();  <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%i packets received\n&quot;</span>, eth_stat.received_packets);  <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%i packets sent\n&quot;</span>, eth_stat.total_sent_packets);  <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%i packets successfully sent\n&quot;</span>,eth_stat.successfully_sent_packets);  <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%i packets failed to send\n&quot;</span>, eth_stat.failed_sent_packets);&#125;</code></pre></div><ul><li><strong>Immutable Instance</strong></li></ul><div class="code-wrapper"><pre><code class="hljs c"><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">EthernetDriverInfo</span></span><span class="hljs-class">&#123;</span>  <span class="hljs-type">char</span> name[<span class="hljs-number">64</span>];  <span class="hljs-type">char</span> description[<span class="hljs-number">1024</span>];&#125;;<span class="hljs-comment">/* Returns the driver name and description */</span><span class="hljs-keyword">extern</span> <span class="hljs-type">const</span> <span class="hljs-keyword">struct</span> EthernetDriverInfo* <span class="hljs-title function_">ethernetDriverGetInfo</span><span class="hljs-params">()</span>;<span class="hljs-comment">/**********************************************************************/</span><span class="hljs-type">void</span> <span class="hljs-title function_">ethShow</span><span class="hljs-params">()</span>&#123;  <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">EthernetDriverStat</span> <span class="hljs-title">eth_stat</span> =</span> ethernetDriverGetStatistics();  <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%i packets received\n&quot;</span>, eth_stat.received_packets);  <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%i packets sent\n&quot;</span>, eth_stat.total_sent_packets);  <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%i packets successfully sent\n&quot;</span>,eth_stat.successfully_sent_packets);  <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%i packets failed to send\n&quot;</span>, eth_stat.failed_sent_packets);    <span class="hljs-type">const</span> <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">EthernetDriverInfo</span>* <span class="hljs-title">eth_info</span> =</span> ethernetDriverGetInfo();  <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;Driver name: %s\n&quot;</span>, eth_info-&gt;name);  <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;Driver description: %s\n&quot;</span>, eth_info-&gt;description);&#125;</code></pre></div><ul><li><strong>Caller-Owned Buffer</strong></li></ul><div class="code-wrapper"><pre><code class="hljs c"><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">IpAddress</span></span><span class="hljs-class">&#123;</span>  <span class="hljs-type">char</span> address[<span class="hljs-number">16</span>];  <span class="hljs-type">char</span> subnet[<span class="hljs-number">16</span>];&#125;;<span class="hljs-comment">/* Stores the IP information into &#x27;ip&#x27;, which has to be provided</span><span class="hljs-comment">by the caller*/</span><span class="hljs-keyword">extern</span> <span class="hljs-type">void</span> <span class="hljs-title function_">ethernetDriverGetIp</span><span class="hljs-params">(<span class="hljs-keyword">struct</span> IpAddress* ip)</span>;<span class="hljs-comment">/**********************************************************************/</span><span class="hljs-type">void</span> <span class="hljs-title function_">ethShow</span><span class="hljs-params">()</span>&#123;  <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">EthernetDriverStat</span> <span class="hljs-title">eth_stat</span> =</span> ethernetDriverGetStatistics();  <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%i packets received\n&quot;</span>, eth_stat.received_packets);  <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%i packets sent\n&quot;</span>, eth_stat.total_sent_packets);  <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%i packets successfully sent\n&quot;</span>,eth_stat.successfully_sent_packets);  <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%i packets failed to send\n&quot;</span>, eth_stat.failed_sent_packets);    <span class="hljs-type">const</span> <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">EthernetDriverInfo</span>* <span class="hljs-title">eth_info</span> =</span> ethernetDriverGetInfo();  <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;Driver name: %s\n&quot;</span>, eth_info-&gt;name);  <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;Driver description: %s\n&quot;</span>, eth_info-&gt;description);    <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">IpAddress</span> <span class="hljs-title">ip</span>;</span>  ethernetDriverGetIp(&amp;ip);  <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;IP address: %s\n&quot;</span>, ip.address);&#125;</code></pre></div><ul><li><strong>Callee Allocates</strong></li></ul><div class="code-wrapper"><pre><code class="hljs c"><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">Packet</span></span><span class="hljs-class">&#123;</span>  <span class="hljs-type">char</span> data[<span class="hljs-number">1500</span>]; <span class="hljs-comment">/* maximum 1500 byte per packet */</span>  <span class="hljs-type">int</span> size; <span class="hljs-comment">/* actual size of data in the packet */</span>&#125;;<span class="hljs-comment">/* Returns a pointer to a packet that has to be freed by the caller */</span><span class="hljs-keyword">struct</span> Packet* <span class="hljs-title function_">ethernetDriverGetPacket</span><span class="hljs-params">()</span>;<span class="hljs-comment">/**********************************************************************/</span><span class="hljs-type">void</span> <span class="hljs-title function_">ethShow</span><span class="hljs-params">()</span>&#123;  <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">EthernetDriverStat</span> <span class="hljs-title">eth_stat</span> =</span> ethernetDriverGetStatistics();  <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%i packets received\n&quot;</span>, eth_stat.received_packets);  <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%i packets sent\n&quot;</span>, eth_stat.total_sent_packets);  <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%i packets successfully sent\n&quot;</span>,eth_stat.successfully_sent_packets);  <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%i packets failed to send\n&quot;</span>, eth_stat.failed_sent_packets);    <span class="hljs-type">const</span> <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">EthernetDriverInfo</span>* <span class="hljs-title">eth_info</span> =</span> ethernetDriverGetInfo();  <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;Driver name: %s\n&quot;</span>, eth_info-&gt;name);  <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;Driver description: %s\n&quot;</span>, eth_info-&gt;description);    <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">IpAddress</span> <span class="hljs-title">ip</span>;</span>  ethernetDriverGetIp(&amp;ip);  <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;IP address: %s\n&quot;</span>, ip.address);    <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">Packet</span>* <span class="hljs-title">packet</span> =</span> ethernetDriverGetPacket();  <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;Packet Dump:&quot;</span>);  fwrite(packet-&gt;data, <span class="hljs-number">1</span>, packet-&gt;size, <span class="hljs-built_in">stdout</span>);    <span class="hljs-built_in">free</span>(packet);&#125;</code></pre></div><h3 id="patterns-for-data-lifetime-ownership-数据生存期和所有权模型">Patterns for data lifetime &amp; ownership 数据生存期和所有权模型</h3><figure><img src="https://gitee.com/kayoungzhang/picgo_res/raw/master/img/image-20240112102319062.png" alt="" /><figcaption>image-20240112102319062</figcaption></figure><ul><li><strong>Shared Instance</strong></li></ul><div class="code-wrapper"><pre><code class="hljs c"><span class="hljs-keyword">struct</span> Sender* <span class="hljs-title function_">openSender</span><span class="hljs-params">(<span class="hljs-type">char</span>* destination_ip)</span>;<span class="hljs-type">void</span> <span class="hljs-title function_">sendByte</span><span class="hljs-params">(<span class="hljs-keyword">struct</span> Sender* s, <span class="hljs-type">char</span> data)</span>;<span class="hljs-type">void</span> <span class="hljs-title function_">closeSender</span><span class="hljs-params">(<span class="hljs-keyword">struct</span> Sender* s)</span>;<span class="hljs-keyword">struct</span> Sender* <span class="hljs-title function_">openSender</span><span class="hljs-params">(<span class="hljs-type">char</span>* destination_ip)</span>&#123;  <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">Sender</span>* <span class="hljs-title">s</span>;</span>  <span class="hljs-keyword">if</span>(isInSenderList(destination_ip))  &#123;    s = getSenderFromList(destination_ip);  &#125;  <span class="hljs-keyword">else</span>  &#123;    s = createSender(destination_ip);  &#125;  increaseNumberOfCallers(s);  <span class="hljs-keyword">return</span> s;&#125;<span class="hljs-type">void</span> <span class="hljs-title function_">sendByte</span><span class="hljs-params">(<span class="hljs-keyword">struct</span> Sender* s, <span class="hljs-type">char</span> data)</span>&#123;  number_of_sent_bytes++;  <span class="hljs-comment">/* send data via socket stored in Sender s */</span>&#125;<span class="hljs-type">void</span> <span class="hljs-title function_">closeSender</span><span class="hljs-params">(<span class="hljs-keyword">struct</span> Sender* s)</span>&#123;  decreaseNumberOfCallers(s);  <span class="hljs-keyword">if</span>(numberOfCallers(s) == <span class="hljs-number">0</span>)  &#123;    <span class="hljs-comment">/* close socket stored in Sender s */</span>    <span class="hljs-built_in">free</span>(s);  &#125;&#125;</code></pre></div><h3 id="patterns-for-flexible-apis-灵活的api模型">Patterns for flexible APIs 灵活的API模型</h3><figure><img src="https://gitee.com/kayoungzhang/picgo_res/raw/master/img/image-20240112105836842.png" alt="" /><figcaption>image-20240112105836842</figcaption></figure><ul><li><strong>Handle</strong></li></ul><div class="code-wrapper"><pre><code class="hljs c"><span class="hljs-comment">/* the INTERNAL_DRIVER_STRUCT contains data shared by the functions (like how to select the interface card the driver is responsible for) */</span><span class="hljs-keyword">typedef</span> <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">INTERNAL_DRIVER_STRUCT</span>* <span class="hljs-title">DRIVER_HANDLE</span>;</span><span class="hljs-comment">/* &#x27;initArg&#x27; contains information for the implementation to identify the exact interface for the driver instance */</span>DRIVER_HANDLE <span class="hljs-title function_">driverCreate</span><span class="hljs-params">(<span class="hljs-type">void</span>* initArg)</span>;<span class="hljs-type">void</span> <span class="hljs-title function_">driverDestroy</span><span class="hljs-params">(DRIVER_HANDLE h)</span>;<span class="hljs-type">void</span> <span class="hljs-title function_">sendByte</span><span class="hljs-params">(DRIVER_HANDLE h, <span class="hljs-type">char</span> byte)</span>;<span class="hljs-type">char</span> <span class="hljs-title function_">receiveByte</span><span class="hljs-params">(DRIVER_HANDLE h)</span>;<span class="hljs-type">void</span> <span class="hljs-title function_">setIpAddress</span><span class="hljs-params">(DRIVER_HANDLE h, <span class="hljs-type">char</span>* ip)</span>;<span class="hljs-type">void</span> <span class="hljs-title function_">setMacAddress</span><span class="hljs-params">(DRIVER_HANDLE h, <span class="hljs-type">char</span>* mac)</span>;</code></pre></div><h3 id="patterns-for-flexible-iterator-interfaces-灵活迭代器接口模型">Patterns for flexible iterator interfaces 灵活迭代器接口模型</h3><figure><img src="https://gitee.com/kayoungzhang/picgo_res/raw/master/img/image-20240112113627849.png" alt="" /><figcaption>image-20240112113627849</figcaption></figure><ul><li><strong>Cursor Iterator</strong></li></ul><div class="code-wrapper"><pre><code class="hljs c"><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">ITERATOR</span></span><span class="hljs-class">&#123;</span>  <span class="hljs-type">char</span> buffer[MAX_NAME_LENGTH];  <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">ACCOUNT_NODE</span>* <span class="hljs-title">element</span>;</span>&#125;;<span class="hljs-keyword">struct</span> ITERATOR* <span class="hljs-title function_">createIterator</span><span class="hljs-params">()</span>&#123;  <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">ITERATOR</span>* <span class="hljs-title">iterator</span> =</span> <span class="hljs-built_in">malloc</span>(<span class="hljs-keyword">sizeof</span>(<span class="hljs-keyword">struct</span> ITERATOR));    iterator-&gt;element = getFirst();  <span class="hljs-keyword">return</span> iterator;&#125;<span class="hljs-type">char</span>* <span class="hljs-title function_">getNextLoginName</span><span class="hljs-params">(<span class="hljs-keyword">struct</span> ITERATOR* iterator)</span>&#123;  <span class="hljs-keyword">if</span>(iterator-&gt;element != <span class="hljs-literal">NULL</span>)  &#123;    <span class="hljs-built_in">strcpy</span>(iterator-&gt;buffer, iterator-&gt;element-&gt;loginname);    iterator-&gt;element = getNext(iterator-&gt;element);    <span class="hljs-keyword">return</span> iterator-&gt;buffer;  &#125;  <span class="hljs-keyword">else</span>  &#123;    <span class="hljs-keyword">return</span> <span class="hljs-literal">NULL</span>;  &#125;&#125;<span class="hljs-type">void</span> <span class="hljs-title function_">destroyIterator</span><span class="hljs-params">(<span class="hljs-keyword">struct</span> ITERATOR* iterator)</span>&#123;<span class="hljs-built_in">free</span>(iterator);&#125;<span class="hljs-type">bool</span> <span class="hljs-title function_">anyoneWithX</span><span class="hljs-params">()</span>&#123;  <span class="hljs-type">char</span>* loginName;  <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">ITERATOR</span>* <span class="hljs-title">iterator</span> =</span> createIterator();    <span class="hljs-keyword">while</span>(loginName = getNextLoginName(iterator))  &#123;    <span class="hljs-keyword">if</span>(loginName[<span class="hljs-number">0</span>] == <span class="hljs-string">&#x27;X&#x27;</span>)    &#123;      destroyIterator(iterator);      <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;    &#125;  &#125;  destroyIterator(iterator);  <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;&#125;</code></pre></div><ul><li><strong>Callback Iterator</strong></li></ul><div class="code-wrapper"><pre><code class="hljs c"><span class="hljs-keyword">typedef</span> <span class="hljs-title function_">void</span> <span class="hljs-params">(*FP_CALLBACK)</span><span class="hljs-params">(<span class="hljs-type">char</span>* loginName, <span class="hljs-type">void</span>* arg)</span>;<span class="hljs-type">void</span> <span class="hljs-title function_">iterateLoginNames</span><span class="hljs-params">(FP_CALLBACK callback, <span class="hljs-type">void</span>* arg)</span>&#123;  <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">ACCOUNT_NODE</span>* <span class="hljs-title">account</span> =</span> getFirst(accountList);  <span class="hljs-keyword">while</span>(account != <span class="hljs-literal">NULL</span>)  &#123;    callback(account-&gt;loginname, arg);    account = getNext(account);  &#125;&#125;<span class="hljs-type">void</span> <span class="hljs-title function_">findX</span><span class="hljs-params">(<span class="hljs-type">char</span>* loginName, <span class="hljs-type">void</span>* arg)</span>&#123;  <span class="hljs-type">bool</span>* found = (<span class="hljs-type">bool</span>*) arg;  <span class="hljs-keyword">if</span>(loginName[<span class="hljs-number">0</span>] == <span class="hljs-string">&#x27;X&#x27;</span>)  &#123;    *found = <span class="hljs-literal">true</span>;  &#125;&#125;<span class="hljs-type">void</span> <span class="hljs-title function_">countY</span><span class="hljs-params">(<span class="hljs-type">char</span>* loginName, <span class="hljs-type">void</span>* arg)</span>&#123;  <span class="hljs-type">int</span>* count = (<span class="hljs-type">int</span>*) arg;  <span class="hljs-keyword">if</span>(loginName[<span class="hljs-number">0</span>] == <span class="hljs-string">&#x27;Y&#x27;</span>)  &#123;    (*count)++;  &#125;&#125;<span class="hljs-type">bool</span> <span class="hljs-title function_">anyoneWithX</span><span class="hljs-params">()</span>&#123;  <span class="hljs-type">bool</span> found=<span class="hljs-literal">false</span>;  iterateLoginNames(findX, &amp;found);  <span class="hljs-keyword">return</span> found;&#125;<span class="hljs-type">int</span> <span class="hljs-title function_">numberOfUsersWithY</span><span class="hljs-params">()</span>&#123;  <span class="hljs-type">int</span> count=<span class="hljs-number">0</span>;  iterateLoginNames(countY, &amp;count);  <span class="hljs-keyword">return</span> count;&#125;</code></pre></div><h3 id="patterns-for-organizing-files-in-modular-programs-模块化编程模型">Patterns for organizing files in modular programs 模块化编程模型</h3><p><img src="https://gitee.com/kayoungzhang/picgo_res/raw/master/img/image-20240112130259811.png" /></p><h3 id="patterns-for-escaping-ifdef-hell-逃离-ifdef-繁杂模型">Patterns for escaping #ifdef hell 逃离 #ifdef 繁杂模型</h3><figure><img src="https://gitee.com/kayoungzhang/picgo_res/raw/master/img/image-20240112142812976.png" alt="" /><figcaption>image-20240112142812976</figcaption></figure><ul><li><strong>Avoid Variants</strong></li></ul><div class="code-wrapper"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;string.h&gt;</span></span><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdlib.h&gt;</span></span><span class="hljs-meta">#<span class="hljs-keyword">ifdef</span> __unix__</span><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;sys/stat.h&gt;</span></span><span class="hljs-meta">#<span class="hljs-keyword">elif</span> defined _WIN32</span><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;windows.h&gt;</span></span><span class="hljs-meta">#<span class="hljs-keyword">endif</span></span><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span>&#123;  <span class="hljs-type">char</span> dirname[<span class="hljs-number">50</span>];  <span class="hljs-type">char</span> filename[<span class="hljs-number">60</span>];  <span class="hljs-type">char</span>* my_data = <span class="hljs-string">&quot;Write this data to the file&quot;</span>;    <span class="hljs-meta">#<span class="hljs-keyword">ifdef</span> __unix__</span>  <span class="hljs-meta">#<span class="hljs-keyword">ifdef</span> STORE_IN_HOME_DIR</span>  <span class="hljs-built_in">sprintf</span>(dirname, <span class="hljs-string">&quot;%s%s&quot;</span>, getenv(<span class="hljs-string">&quot;HOME&quot;</span>), <span class="hljs-string">&quot;/newdir/&quot;</span>);  <span class="hljs-built_in">sprintf</span>(filename, <span class="hljs-string">&quot;%s%s&quot;</span>, dirname, <span class="hljs-string">&quot;newfile&quot;</span>);  <span class="hljs-meta">#<span class="hljs-keyword">elif</span> defined STORE_IN_CWD</span>  <span class="hljs-built_in">strcpy</span>(dirname, <span class="hljs-string">&quot;newdir&quot;</span>);  <span class="hljs-built_in">strcpy</span>(filename, <span class="hljs-string">&quot;newdir/newfile&quot;</span>);  <span class="hljs-meta">#<span class="hljs-keyword">endif</span></span>  mkdir(dirname,S_IRWXU);  <span class="hljs-meta">#<span class="hljs-keyword">elif</span> defined _WIN32</span>  <span class="hljs-meta">#<span class="hljs-keyword">ifdef</span> STORE_IN_HOME_DIR</span>  <span class="hljs-built_in">sprintf</span>(dirname, <span class="hljs-string">&quot;%s%s%s&quot;</span>, getenv(<span class="hljs-string">&quot;HOMEDRIVE&quot;</span>), getenv(<span class="hljs-string">&quot;HOMEPATH&quot;</span>),          <span class="hljs-string">&quot;\\newdir\\&quot;</span>);  <span class="hljs-built_in">sprintf</span>(filename, <span class="hljs-string">&quot;%s%s&quot;</span>, dirname, <span class="hljs-string">&quot;newfile&quot;</span>);  <span class="hljs-meta">#<span class="hljs-keyword">elif</span> defined STORE_IN_CWD</span>  <span class="hljs-built_in">strcpy</span>(dirname, <span class="hljs-string">&quot;newdir&quot;</span>);  <span class="hljs-built_in">strcpy</span>(filename, <span class="hljs-string">&quot;newdir\\newfile&quot;</span>);  <span class="hljs-meta">#<span class="hljs-keyword">endif</span></span>  CreateDirectory(dirname, <span class="hljs-literal">NULL</span>);  <span class="hljs-meta">#<span class="hljs-keyword">endif</span></span>    FILE* f = fopen(filename, <span class="hljs-string">&quot;w+&quot;</span>);  fwrite(my_data, <span class="hljs-number">1</span>, <span class="hljs-built_in">strlen</span>(my_data), f);  fclose(f);  <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;&#125;</code></pre></div><ul><li><strong>Isolated Primitives</strong></li></ul><div class="code-wrapper"><pre><code class="hljs c"><span class="hljs-type">void</span> <span class="hljs-title function_">getDirectoryName</span><span class="hljs-params">(<span class="hljs-type">char</span>* dirname)</span>&#123;  <span class="hljs-meta">#<span class="hljs-keyword">ifdef</span> __unix__</span>  <span class="hljs-meta">#<span class="hljs-keyword">ifdef</span> STORE_IN_HOME_DIR</span>  <span class="hljs-built_in">sprintf</span>(dirname, <span class="hljs-string">&quot;%s%s&quot;</span>, getenv(<span class="hljs-string">&quot;HOME&quot;</span>), <span class="hljs-string">&quot;/newdir/&quot;</span>);  <span class="hljs-meta">#<span class="hljs-keyword">elif</span> defined STORE_IN_CWD</span>  <span class="hljs-built_in">strcpy</span>(dirname, <span class="hljs-string">&quot;newdir/&quot;</span>);  <span class="hljs-meta">#<span class="hljs-keyword">endif</span></span>  <span class="hljs-meta">#<span class="hljs-keyword">elif</span> defined _WIN32</span>  <span class="hljs-meta">#<span class="hljs-keyword">ifdef</span> STORE_IN_HOME_DIR</span>  <span class="hljs-built_in">sprintf</span>(dirname, <span class="hljs-string">&quot;%s%s%s&quot;</span>, getenv(<span class="hljs-string">&quot;HOMEDRIVE&quot;</span>), getenv(<span class="hljs-string">&quot;HOMEPATH&quot;</span>),          <span class="hljs-string">&quot;\\newdir\\&quot;</span>);  <span class="hljs-meta">#<span class="hljs-keyword">elif</span> defined STORE_IN_CWD</span>  <span class="hljs-built_in">strcpy</span>(dirname, <span class="hljs-string">&quot;newdir\\&quot;</span>);  <span class="hljs-meta">#<span class="hljs-keyword">endif</span></span>  <span class="hljs-meta">#<span class="hljs-keyword">endif</span></span>&#125;<span class="hljs-type">void</span> <span class="hljs-title function_">createNewDirectory</span><span class="hljs-params">(<span class="hljs-type">char</span>* dirname)</span>&#123;  <span class="hljs-meta">#<span class="hljs-keyword">ifdef</span> __unix__</span>  mkdir(dirname,S_IRWXU);  <span class="hljs-meta">#<span class="hljs-keyword">elif</span> defined _WIN32</span>  CreateDirectory (dirname, <span class="hljs-literal">NULL</span>);  <span class="hljs-meta">#<span class="hljs-keyword">endif</span></span>&#125;<span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span>&#123;  <span class="hljs-type">char</span> dirname[<span class="hljs-number">50</span>];  <span class="hljs-type">char</span> filename[<span class="hljs-number">60</span>];  <span class="hljs-type">char</span>* my_data = <span class="hljs-string">&quot;Write this data to the file&quot;</span>;    getDirectoryName(dirname);  createNewDirectory(dirname);  <span class="hljs-built_in">sprintf</span>(filename, <span class="hljs-string">&quot;%s%s&quot;</span>, dirname, <span class="hljs-string">&quot;newfile&quot;</span>);    FILE* f = fopen(filename, <span class="hljs-string">&quot;w+&quot;</span>);  fwrite(my_data, <span class="hljs-number">1</span>, <span class="hljs-built_in">strlen</span>(my_data), f);  fclose(f);  <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;&#125;</code></pre></div><ul><li><strong>Atomic Primitives</strong></li></ul><div class="code-wrapper"><pre><code class="hljs c"><span class="hljs-type">void</span> <span class="hljs-title function_">getHomeDirectory</span><span class="hljs-params">(<span class="hljs-type">char</span>* dirname)</span>&#123;  <span class="hljs-meta">#<span class="hljs-keyword">ifdef</span> __unix__</span>  <span class="hljs-built_in">sprintf</span>(dirname, <span class="hljs-string">&quot;%s%s&quot;</span>, getenv(<span class="hljs-string">&quot;HOME&quot;</span>), <span class="hljs-string">&quot;/newdir/&quot;</span>);  <span class="hljs-meta">#<span class="hljs-keyword">elif</span> defined _WIN32</span>  <span class="hljs-built_in">sprintf</span>(dirname, <span class="hljs-string">&quot;%s%s%s&quot;</span>, getenv(<span class="hljs-string">&quot;HOMEDRIVE&quot;</span>), getenv(<span class="hljs-string">&quot;HOMEPATH&quot;</span>),          <span class="hljs-string">&quot;\\newdir\\&quot;</span>);  <span class="hljs-meta">#<span class="hljs-keyword">endif</span></span>&#125;<span class="hljs-type">void</span> <span class="hljs-title function_">getWorkingDirectory</span><span class="hljs-params">(<span class="hljs-type">char</span>* dirname)</span>&#123;  <span class="hljs-meta">#<span class="hljs-keyword">ifdef</span> __unix__</span>  <span class="hljs-built_in">strcpy</span>(dirname, <span class="hljs-string">&quot;newdir/&quot;</span>);  <span class="hljs-meta">#<span class="hljs-keyword">elif</span> defined _WIN32</span>  <span class="hljs-built_in">strcpy</span>(dirname, <span class="hljs-string">&quot;newdir\\&quot;</span>);  <span class="hljs-meta">#<span class="hljs-keyword">endif</span></span>&#125;<span class="hljs-type">void</span> <span class="hljs-title function_">getDirectoryName</span><span class="hljs-params">(<span class="hljs-type">char</span>* dirname)</span>&#123;  <span class="hljs-meta">#<span class="hljs-keyword">ifdef</span> STORE_IN_HOME_DIR</span>  getHomeDirectory(dirname);  <span class="hljs-meta">#<span class="hljs-keyword">elif</span> defined STORE_IN_CWD</span>  getWorkingDirectory(dirname);  <span class="hljs-meta">#<span class="hljs-keyword">endif</span></span>&#125;</code></pre></div><ul><li><strong>Abstraction Layer</strong></li></ul><div class="code-wrapper"><pre><code class="hljs c">someFeature.h  <span class="hljs-comment">/* Provides generic access to someFeature. Supported on platform A and platform B. */</span><span class="hljs-type">void</span> <span class="hljs-title function_">someFeature</span><span class="hljs-params">()</span>;<span class="hljs-comment">/***************************************************************************/</span>someFeature.c<span class="hljs-type">void</span> <span class="hljs-title function_">someFeature</span><span class="hljs-params">()</span>&#123;  <span class="hljs-meta">#<span class="hljs-keyword">ifdef</span> PLATFORM_A</span>  performFeaturePlatformA();  <span class="hljs-meta">#<span class="hljs-keyword">elif</span> defined PLATFORM_B</span>  performFeaturePlatformB();  <span class="hljs-meta">#<span class="hljs-keyword">endif</span></span>&#125;<span class="hljs-comment">/***************************************************************************/</span>caller.c  <span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;someFeature.h&quot;</span></span><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span>&#123;  someFeature();<span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;&#125;</code></pre></div><ul><li><strong>Split Variant Implementations</strong></li></ul><div class="code-wrapper"><pre><code class="hljs c">someFeature.h<span class="hljs-comment">/* Provides generic access to someFeature. Supported on platform A and platform B. */</span>someFeature();<span class="hljs-comment">/***************************************************************************/</span>someFeatureWindows.c  <span class="hljs-meta">#<span class="hljs-keyword">ifdef</span> _WIN32</span>  someFeature()  &#123;    performWindowsFeature();  &#125;<span class="hljs-meta">#<span class="hljs-keyword">endif</span></span><span class="hljs-comment">/***************************************************************************/</span>someFeatureLinux.c  <span class="hljs-meta">#<span class="hljs-keyword">ifdef</span> __unix__</span>  someFeature()  &#123;    performLinuxFeature();  &#125;<span class="hljs-meta">#<span class="hljs-keyword">endif</span></span><span class="hljs-comment">/***************************************************************************/</span>caller.c<span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;someFeature.h&quot;</span></span><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span>&#123;  someFeature();<span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;&#125;</code></pre></div><p><strong>参考书籍：</strong></p><p>《Fluent C - Principles, Practices, and Patterns (Christopher Preschern)》</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;流畅的c语言---原则实践和模型克里斯多夫-普雷切恩&quot;&gt;流畅的C语言 - 原则，实践和模型（克里斯多夫 普雷切恩）&lt;/h2&gt;
&lt;div class=&quot;code-wrapper&quot;&gt;&lt;pre&gt;&lt;code class=&quot;hljs applescript&quot;&gt;How &lt;s</summary>
      
    
    
    
    <category term="编程基础" scheme="http://example.com/categories/%E7%BC%96%E7%A8%8B%E5%9F%BA%E7%A1%80/"/>
    
    
    <category term="C语言" scheme="http://example.com/tags/C%E8%AF%AD%E8%A8%80/"/>
    
  </entry>
  
  <entry>
    <title>C语言 - 字符串</title>
    <link href="http://example.com/2024/01/14/C%E8%AF%AD%E8%A8%80-%E5%AD%97%E7%AC%A6%E4%B8%B2/"/>
    <id>http://example.com/2024/01/14/C%E8%AF%AD%E8%A8%80-%E5%AD%97%E7%AC%A6%E4%B8%B2/</id>
    <published>2024-01-14T08:58:52.000Z</published>
    <updated>2024-01-15T03:15:06.674Z</updated>
    
    <content type="html"><![CDATA[<h1 id="c语言---字符串">C语言 - 字符串</h1><p>C语言中字符串的相关内容很重要，在编程中也很容易出错，尤其涉及到字符串、数组和指针的组合内容，更容易出现错误，下面具体来看看。</p><h2 id="字面串">字面串</h2><p><strong>字面串（string literal）是用一对双引号括起来的字符序列。</strong> 字面串经程序编译后生成字符串，而字符串是指位于系统存储器里的，以空字符终止的字符序列。</p><p>通常情况下可以在任何 C 语言允许使用 <strong>char </strong>*指针的地方使用字面串。例如，字面串可以出现在赋值运算符的右边：</p><div class="code-wrapper"><pre><code class="hljs c"><span class="hljs-type">char</span> *p;p = <span class="hljs-string">&quot;abc&quot;</span>;</code></pre></div><p>这个赋值操作不是复制"abc"中的字符，而是使 p 指向字符串的第一个字符。C 语言允许对指针取下标，因此可以对字面串取下标：</p><div class="code-wrapper"><pre><code class="hljs c"><span class="hljs-type">char</span> ch;ch = <span class="hljs-string">&quot;abc&quot;</span>[<span class="hljs-number">1</span>];</code></pre></div><p>字面串的这种特性并不常用，但有时也比较方便。思考下面的函数，这个函数把 0~15 的数转换成等价的十六进制的字符形式：</p><div class="code-wrapper"><pre><code class="hljs c"><span class="hljs-type">char</span> <span class="hljs-title function_">digit_to_hex_char</span><span class="hljs-params">(<span class="hljs-type">int</span> digit)</span>&#123;<span class="hljs-keyword">return</span> <span class="hljs-string">&quot;0123456789ABCDEF&quot;</span>[digit];&#125;</code></pre></div><p>注意：试图改变字面串会导致未定义的行为：</p><div class="code-wrapper"><pre><code class="hljs c"><span class="hljs-type">char</span> *p = <span class="hljs-string">&quot;abc&quot;</span>;*p = <span class="hljs-string">&#x27;d&#x27;</span>; <span class="hljs-comment">/*** WRONG ***/</span></code></pre></div><p>另外，单个字符的字面串跟单个字符常量是不同的，如：字面串"a"是用指针来表示的，这个指针指向存放字符"a"（后面紧跟空字符）的内存单元。字符常量'a'是用整数（字符集的数值码）来表示的。</p><h2 id="字符串变量">字符串变量</h2><p>在C语言中，只要保证字符串是以空字符结尾的，任何一维的字符数组都可以用来存储字符串。当声明用于存放字符串的字符数组时，要始终保证数组的长度比字符串的长度多一个字符。</p><p>字符串变量的声明中可以省略它的长度，编译器会自动计算长度，如：<code>char date4[] = "June 14";</code></p><p>看下面这两个声明：</p><div class="code-wrapper"><pre><code class="hljs c"><span class="hljs-type">char</span> date[] = <span class="hljs-string">&quot;June 14&quot;</span>; <span class="hljs-comment">//字符数组</span><span class="hljs-type">char</span> *date = <span class="hljs-string">&quot;June 14&quot;</span>; <span class="hljs-comment">//字符指针</span></code></pre></div><p>注意它们之间的区别：</p><ul><li>声明为数组时，可以修改存储在data中的字符，声明为指针时，data指向字面串，不可修改其中字符。</li><li>声明为数组时，data是数组名，声明为指针时，data是变量，这个变量可以在执行时指向其它字符串。</li></ul><p>字符串是以数组的方式存储的，因此可以使用下标来访问字符串中的字符。假定需要一个函数来统计字符串中空格的数量。利用数组取下标操作可以写出如下函数：</p><div class="code-wrapper"><pre><code class="hljs c"><span class="hljs-type">int</span> <span class="hljs-title function_">count_spaces</span><span class="hljs-params">(<span class="hljs-type">const</span> <span class="hljs-type">char</span> s[])</span>&#123;    <span class="hljs-type">int</span> count = <span class="hljs-number">0</span>, i;    <span class="hljs-keyword">for</span> (i = <span class="hljs-number">0</span>; s[i] != <span class="hljs-string">&#x27;\0&#x27;</span>; i++)        <span class="hljs-keyword">if</span> (s[i] == <span class="hljs-string">&#x27; &#x27;</span>)            count++;    <span class="hljs-keyword">return</span> count;&#125;</code></pre></div><p>实际应用中，更多的是采用指针算术运算，利用 s 自身来跟踪字符串中的位置，实际上，编译器会把数组型的形式参数视为指针。</p><div class="code-wrapper"><pre><code class="hljs c"><span class="hljs-type">int</span> <span class="hljs-title function_">count_spaces</span><span class="hljs-params">(<span class="hljs-type">const</span> <span class="hljs-type">char</span> *s)</span>&#123;    <span class="hljs-type">int</span> count = <span class="hljs-number">0</span>;    <span class="hljs-keyword">for</span> (; *s != <span class="hljs-string">&#x27;\0&#x27;</span>; s++)        <span class="hljs-keyword">if</span> (*s == <span class="hljs-string">&#x27; &#x27;</span>)            count++;    <span class="hljs-keyword">return</span> count;&#125;</code></pre></div><h2 id="c-语言字符串库string.h">C 语言字符串库&lt;string.h&gt;</h2><p>在&lt;string.h&gt;中声明的每个函数至少需要一个字符串作为实际参数。实际参数可以是字符数组、char *类型的变量或者字面串，要注意没有声明为 const 的字符串形式参数可能会在调用时发生改变，所以对应的实际参数不应该是字面串。以下是几个比较常用的字符串函数：</p><ul><li><strong>字符串复制函数</strong></li></ul><div class="code-wrapper"><pre><code class="hljs c"><span class="hljs-type">char</span> *<span class="hljs-title function_">strcpy</span><span class="hljs-params">(<span class="hljs-type">char</span> *s1, <span class="hljs-type">const</span> <span class="hljs-type">char</span> *s2)</span>;</code></pre></div><p>strcpy函数将s2 中的字符复制到 s1 中，直到遇到 s2 中的第一个空字符为止（该空字符也需要复制）并返回 s1（即指向目标字符串的指针）。</p><ul><li><strong>求字符串长度函数</strong></li></ul><div class="code-wrapper"><pre><code class="hljs c"><span class="hljs-type">size_t</span> <span class="hljs-title function_">strlen</span> <span class="hljs-params">(<span class="hljs-type">const</span> <span class="hljs-type">char</span> *s)</span>;</code></pre></div><p>strlen 函数返回字符串 s 的长度：s 中第一个空字符之前的字符个数（不包括空字符）。需要注意的是，当用数组作为实际参数时，strlen 不会测量数组本身的长度，而是返回存储在数组中的字符串的长度</p><ul><li><strong>字符串拼接函数</strong></li></ul><div class="code-wrapper"><pre><code class="hljs c"><span class="hljs-type">char</span> *<span class="hljs-title function_">strcat</span><span class="hljs-params">(<span class="hljs-type">char</span> *s1, <span class="hljs-type">const</span> <span class="hljs-type">char</span> *s2)</span>;</code></pre></div><p>strcat 函数把字符串 s2 的内容追加到字符串 s1 的末尾，并且返回字符串 s1（指向结果字符串的指针）。</p><ul><li><strong>字符串比较函数</strong></li></ul><div class="code-wrapper"><pre><code class="hljs c"><span class="hljs-type">int</span> <span class="hljs-title function_">strcmp</span><span class="hljs-params">(<span class="hljs-type">const</span> <span class="hljs-type">char</span> *s1, <span class="hljs-type">const</span> <span class="hljs-type">char</span> *s2)</span>;</code></pre></div><p>strcmp 函数比较字符串 s1 和字符串 s2，然后根据 s1 是小于、等于或大于 s2，函数返回一个小于、等于或大于 0 的值。</p><h2 id="字符串惯用法">字符串惯用法</h2><ul><li><strong>“搜索字符串结尾的空字符”的惯用法</strong></li></ul><div class="code-wrapper"><pre><code class="hljs c"><span class="hljs-comment">/* 最终使 s 指向了空字符. */</span><span class="hljs-keyword">while</span> (*s)&#123;    s++;&#125;</code></pre></div><p>或</p><div class="code-wrapper"><pre><code class="hljs c"><span class="hljs-comment">/* 最后使 s 正好指向空字符后面的位置. */</span><span class="hljs-keyword">while</span> (*s++);</code></pre></div><ul><li><strong>“字符串复制”的惯用法</strong></li></ul><div class="code-wrapper"><pre><code class="hljs c"><span class="hljs-comment">/* 把 s2 指向的字符复制到 p 所指向的地方。*/</span><span class="hljs-keyword">while</span> (*p++ = *s2++);</code></pre></div><h2 id="字符串数组">字符串数组</h2><p>存储字符串数组的最佳方式是什么？最明显的解决方案是创建二维的字符数组，然后按照每行一个字符串的方式把字符串存储到数组中。如：</p><div class="code-wrapper"><pre><code class="hljs c"><span class="hljs-type">char</span> planets[][<span class="hljs-number">8</span>] = &#123;<span class="hljs-string">&quot;Mercury&quot;</span>, <span class="hljs-string">&quot;Venus&quot;</span>, <span class="hljs-string">&quot;Earth&quot;</span>,                    <span class="hljs-string">&quot;Mars&quot;</span>, <span class="hljs-string">&quot;Jupiter&quot;</span>, <span class="hljs-string">&quot;Saturn&quot;</span>,                    <span class="hljs-string">&quot;Uranus&quot;</span>, <span class="hljs-string">&quot;Neptune&quot;</span>, <span class="hljs-string">&quot;Pluto&quot;</span>&#125;;</code></pre></div><p>planets 数组的可能形式如下，并非所有的字符串都足以填满数组的一整行，所以C 语言用空字符来填补，浪费了空间。</p><figure><img src="https://gitee.com/kayoungzhang/picgo_res/raw/master/img/image-20240114164102159.png" alt="" /><figcaption>image-20240114164102159</figcaption></figure><p>下面是 planets 数组的另外一种写法，这次把它看作元素是指向字符串的指针的数组：</p><div class="code-wrapper"><pre><code class="hljs c"><span class="hljs-type">char</span> *planets[] = &#123;<span class="hljs-string">&quot;Mercury&quot;</span>, <span class="hljs-string">&quot;Venus&quot;</span>, <span class="hljs-string">&quot;Earth&quot;</span>,                    <span class="hljs-string">&quot;Mars&quot;</span>, <span class="hljs-string">&quot;Jupiter&quot;</span>, <span class="hljs-string">&quot;Saturn&quot;</span>,                    <span class="hljs-string">&quot;Uranus&quot;</span>, <span class="hljs-string">&quot;Neptune&quot;</span>, <span class="hljs-string">&quot;Pluto&quot;</span>&#125;;</code></pre></div><p><img src="https://gitee.com/kayoungzhang/picgo_res/raw/master/img/image-20240114164522272.png" alt="image-20240114164522272" style="zoom:90%;" /></p><p>可以看出，字符串中不再有任何浪费的字符。为了访问其中一个行星的名字，只需要对 planets 数组取下标。如为了在 planets 数组中搜寻以字母 M 开头的字符串，可以使用下面的循环：</p><div class="code-wrapper"><pre><code class="hljs c"><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">9</span>; i++)&#123;    <span class="hljs-keyword">if</span> (planets[i][<span class="hljs-number">0</span>] == <span class="hljs-string">&#x27;M&#x27;</span>)    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%s begins with M\n&quot;</span>, planets[i]);    &#125;</code></pre></div><p><strong>参考书籍：</strong></p><p>《C语言程序设计：现代方法 (K.N.King)》</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;c语言---字符串&quot;&gt;C语言 - 字符串&lt;/h1&gt;
&lt;p&gt;C语言中字符串的相关内容很重要，在编程中也很容易出错，尤其涉及到字符串、数组和指针的组合内容，更容易出现错误，下面具体来看看。&lt;/p&gt;
&lt;h2 id=&quot;字面串&quot;&gt;字面串&lt;/h2&gt;
&lt;p&gt;&lt;strong</summary>
      
    
    
    
    <category term="编程基础" scheme="http://example.com/categories/%E7%BC%96%E7%A8%8B%E5%9F%BA%E7%A1%80/"/>
    
    
    <category term="字符串" scheme="http://example.com/tags/%E5%AD%97%E7%AC%A6%E4%B8%B2/"/>
    
  </entry>
  
  <entry>
    <title>tkinter 事件</title>
    <link href="http://example.com/2024/01/07/tkinter-%E4%BA%8B%E4%BB%B6/"/>
    <id>http://example.com/2024/01/07/tkinter-%E4%BA%8B%E4%BB%B6/</id>
    <published>2024-01-07T10:05:40.000Z</published>
    <updated>2024-01-15T03:15:06.691Z</updated>
    
    <content type="html"><![CDATA[<p>GUI程序是一种事件导向的应用程序设计，事件的来源可能是有鼠标操作、键盘操作。tkinter提供有一些处理方式。</p><h1 id="事件的绑定方式">事件的绑定方式</h1><ul><li>单个控件绑定方法</li></ul><div class="code-wrapper"><pre><code class="hljs python">w.bind(sequence=<span class="hljs-literal">None</span>, func=<span class="hljs-literal">None</span>, add=<span class="hljs-literal">None</span>)</code></pre></div><ul><li>所有控件绑定方法</li></ul><div class="code-wrapper"><pre><code class="hljs python">w.bind_all(sequence=<span class="hljs-literal">None</span>, func=<span class="hljs-literal">None</span>, add=<span class="hljs-literal">None</span>)</code></pre></div><ul><li>某类控件绑定方法</li></ul><div class="code-wrapper"><pre><code class="hljs python">w.bind_class(className, sequence=<span class="hljs-literal">None</span>, func=<span class="hljs-literal">None</span>, add=<span class="hljs-literal">None</span>)</code></pre></div><h1 id="事件组合顺序event-sequence">事件组合顺序（Event sequence）</h1><p>tkinter中，事件表示方式如下：</p><div class="code-wrapper"><pre><code class="hljs python">&lt;[事件描述符-]事件类型[-具体信息]&gt;</code></pre></div><p>其中：事件描述符（Event modifier）有如下：</p><table><thead><tr class="header"><th>描述符名称</th><th>描述</th></tr></thead><tbody><tr class="odd"><td>Alt</td><td>Alt按键</td></tr><tr class="even"><td>Any</td><td>任意按键</td></tr><tr class="odd"><td>Control</td><td>Ctrl按键</td></tr><tr class="even"><td>Double</td><td>双击按键</td></tr><tr class="odd"><td>Lock</td><td>CapsLock按键</td></tr><tr class="even"><td>Shift</td><td>Shift按键</td></tr><tr class="odd"><td>Triple</td><td>三击按键</td></tr></tbody></table><p>事件类型（Event type）有如下：</p><table><thead><tr class="header"><th>事件类型名</th><th>描述</th></tr></thead><tbody><tr class="odd"><td>Activate</td><td>激活控件</td></tr><tr class="even"><td>Button</td><td>按键</td></tr><tr class="odd"><td>ButtonRelease</td><td>释放按键</td></tr><tr class="even"><td>Configure</td><td>改变控件大小和位置</td></tr><tr class="odd"><td>Deactivate</td><td>禁止控件</td></tr><tr class="even"><td>Destroy</td><td>销毁控件</td></tr><tr class="odd"><td>Enter</td><td>将鼠标移入光标可显示控件</td></tr><tr class="even"><td>Expose</td><td>控件被遮盖后显示</td></tr><tr class="odd"><td>FocusIn</td><td>输入焦点移入控件</td></tr><tr class="even"><td>FocusOut</td><td>输入焦点移出控件</td></tr><tr class="odd"><td>KeyPress</td><td>按键按下</td></tr><tr class="even"><td>KeyRelease</td><td>按键释放</td></tr><tr class="odd"><td>Leave</td><td>鼠标光标移出控件</td></tr><tr class="even"><td>Map</td><td>控件映射，可在程序中显示</td></tr><tr class="odd"><td>Motion</td><td>鼠标光标在控件内移动</td></tr><tr class="even"><td>MouseWheel</td><td>鼠标滚轮</td></tr><tr class="odd"><td>Unmap</td><td>控件取消映射，不再在程序中显示</td></tr><tr class="even"><td>Visibility</td><td>程序窗口在屏幕上显示</td></tr></tbody></table><p>具体信息有：</p><ul><li>鼠标按键<ul><li><strong>1</strong> （左键）</li><li><strong>2</strong> （中键）</li><li><strong>3</strong> （右键）</li></ul></li><li>键盘按键<ul><li>单个按键 A ~ Z</li><li>按键名 ，如下：</li></ul></li></ul><table><thead><tr class="header"><th>.keysym</th><th>Key</th><th>.keysym</th><th>Key</th><th>.keysym</th><th>Key</th></tr></thead><tbody><tr class="odd"><td>Alt_L</td><td><em>左Alt按键</em></td><td>KP_Multiply</td><td><em>小键盘按键 <strong>X</strong></em></td><td>Prior</td><td><em>PageUp</em></td></tr><tr class="even"><td>Alt_R</td><td><em>右Alt按键</em></td><td>KP_Add</td><td><em>小键盘按键 +</em></td><td>Next</td><td><em>PageDown</em></td></tr><tr class="odd"><td>Shift_L</td><td><em>左Shift按键</em></td><td>KP_Begin</td><td><em>小键盘中心按键</em></td><td>Pause</td><td><em>Pause</em></td></tr><tr class="even"><td>Shift_R</td><td><em>右Shift按键</em></td><td>KP_Decimal</td><td><em>小键盘按键 <strong>.</strong></em></td><td>Print</td><td><em>PrintScreen</em></td></tr><tr class="odd"><td>Control_L</td><td><em>左Ctrl按键</em></td><td>KP_Delete</td><td><em>小键盘按键 Delete</em></td><td>Cancel</td><td><em>Break</em></td></tr><tr class="even"><td>Control_R</td><td><em>右Ctrl按键</em></td><td>KP_Divide</td><td><em>小键盘按键 /</em></td><td>Scroll_Lock</td><td><em>ScrollLock</em></td></tr><tr class="odd"><td>Up</td><td><em>↑</em></td><td>KP_Subtract</td><td><em>小键盘按键 <strong>-</strong></em></td><td>Tab</td><td><em>Tab</em></td></tr><tr class="even"><td>Left</td><td>←</td><td>KP_End</td><td><em>小键盘按键 End</em></td><td>Insert</td><td><em>Insert</em></td></tr><tr class="odd"><td>Down</td><td>↓</td><td>KP_Enter</td><td><em>小键盘按键 Enter</em></td><td>End</td><td><em>end</em></td></tr><tr class="even"><td>Right</td><td><em>→</em></td><td>KP_Home</td><td><em>小键盘按键 Home</em></td><td>Escape</td><td><em>Esc</em></td></tr><tr class="odd"><td>F1 ~ F12</td><td><em>功能按键F1 ~ F12</em></td><td>KP_Insert</td><td><em>小键盘按键 Insert</em></td><td>Num_Lock</td><td><em>Num Lock</em></td></tr><tr class="even"><td>KP_0 ~ KP_9</td><td><em>小键盘按键 0 ~ 9</em></td><td>KP_Next</td><td><em>小键盘按键 PageDown</em></td><td>Home</td><td><em>Home</em></td></tr><tr class="odd"><td>KP_Right</td><td>*小键盘按键 →</td><td>KP_Prior</td><td><em>小键盘按键 PageUp</em></td><td>Return</td><td><em>Enter</em></td></tr><tr class="even"><td>KP_Up</td><td><em>小键盘按键 ↑</em></td><td>KP_Down</td><td><em>小键盘按键 ↓</em></td><td>Delete</td><td><em>Delete</em></td></tr><tr class="odd"><td>KP_Left</td><td><em>小键盘按键 ←</em></td><td>BackSpace</td><td><em>Backspace</em></td><td>Caps_Lock</td><td><em>Caps Lock</em></td></tr></tbody></table><p>举例如下：</p><div class="code-wrapper"><pre><code class="hljs python">&lt;KeyPress-H&gt; <span class="hljs-comment"># 按下按键H</span>&lt;Button-<span class="hljs-number">1</span>&gt; <span class="hljs-comment"># 单击鼠标左键</span>&lt;Control-Shift-KeyPress-H&gt;  <span class="hljs-comment"># control + shift + H  </span>&lt;ButtonRelease-<span class="hljs-number">1</span>&gt; <span class="hljs-comment"># 放开鼠标左键</span>&lt;Double-Button-<span class="hljs-number">3</span>&gt; <span class="hljs-comment"># 双击鼠标右键</span></code></pre></div><p>绑定事件，如：</p><div class="code-wrapper"><pre><code class="hljs python">btn.bind(<span class="hljs-string">&#x27;&lt;Button-1&gt;&#x27;</span>, event_handler) <span class="hljs-comment"># 在按钮上单击鼠标左键，执行中断函数</span><span class="hljs-keyword">def</span> <span class="hljs-title function_">event_handler</span>(<span class="hljs-params">event</span>):    <span class="hljs-string">&quot;&quot;&quot;获取光标位置&quot;&quot;&quot;</span>    pos_x = event.x    pos_y = event.y</code></pre></div>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;GUI程序是一种事件导向的应用程序设计，事件的来源可能是有鼠标操作、键盘操作。tkinter提供有一些处理方式。&lt;/p&gt;
&lt;h1 id=&quot;事件的绑定方式&quot;&gt;事件的绑定方式&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;单个控件绑定方法&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&quot;</summary>
      
    
    
    
    <category term="python" scheme="http://example.com/categories/python/"/>
    
    
    <category term="event" scheme="http://example.com/tags/event/"/>
    
  </entry>
  
  <entry>
    <title>Python 文件方法</title>
    <link href="http://example.com/2024/01/04/Python-%E6%96%87%E4%BB%B6%E6%96%B9%E6%B3%95/"/>
    <id>http://example.com/2024/01/04/Python-%E6%96%87%E4%BB%B6%E6%96%B9%E6%B3%95/</id>
    <published>2024-01-04T03:03:10.000Z</published>
    <updated>2024-01-04T05:19:21.453Z</updated>
    
    <content type="html"><![CDATA[<h1 id="python-文件操作基础知识">Python 文件操作基础知识</h1><p>参考：<a href="https://www.runoob.com/python3/python3-inputoutput.html">https://www.runoob.com/python3/python3-inputoutput.html</a></p><h1 id="python-文件操作内置方法">Python 文件操作内置方法</h1><table><thead><tr class="header"><th style="text-align: left;">方法</th><th style="text-align: left;">描述</th></tr></thead><tbody><tr class="odd"><td style="text-align: left;"><a href="https://w3schools.cn/python/ref_file_close.html">f.close()</a></td><td style="text-align: left;">关闭文件。</td></tr><tr class="even"><td style="text-align: left;">f.detach()</td><td style="text-align: left;">从缓冲区返回分离的原始流（raw stream）。</td></tr><tr class="odd"><td style="text-align: left;"><a href="https://w3schools.cn/python/ref_file_fileno.html">f.fileno()</a></td><td style="text-align: left;">从操作系统的角度返回表示流的数字。</td></tr><tr class="even"><td style="text-align: left;"><a href="https://w3schools.cn/python/ref_file_flush.html">f.flush()</a></td><td style="text-align: left;">刷新内部缓冲区。</td></tr><tr class="odd"><td style="text-align: left;"><a href="https://w3schools.cn/python/ref_file_isatty.html">f.isatty()</a></td><td style="text-align: left;">返回文件流是否是交互式的。</td></tr><tr class="even"><td style="text-align: left;"><a href="https://w3schools.cn/python/ref_file_read.html">f.read()</a></td><td style="text-align: left;">返回文件内容。</td></tr><tr class="odd"><td style="text-align: left;"><a href="https://w3schools.cn/python/ref_file_readable.html">f.readable()</a></td><td style="text-align: left;">返回是否能够读取文件流。</td></tr><tr class="even"><td style="text-align: left;"><a href="https://w3schools.cn/python/ref_file_readline.html">f.readline()</a></td><td style="text-align: left;">返回文件中的一行。</td></tr><tr class="odd"><td style="text-align: left;"><a href="https://w3schools.cn/python/ref_file_readlines.html">f.readlines()</a></td><td style="text-align: left;">返回文件中的行列表。</td></tr><tr class="even"><td style="text-align: left;"><a href="https://w3schools.cn/python/ref_file_seek.html">f.seek()</a></td><td style="text-align: left;">更改文件位置。</td></tr><tr class="odd"><td style="text-align: left;"><a href="https://w3schools.cn/python/ref_file_seekable.html">f.seekable()</a></td><td style="text-align: left;">返回文件是否允许我们更改文件位置。</td></tr><tr class="even"><td style="text-align: left;"><a href="https://w3schools.cn/python/ref_file_tell.html">f.tell()</a></td><td style="text-align: left;">返回当前的文件位置。</td></tr><tr class="odd"><td style="text-align: left;"><a href="https://w3schools.cn/python/ref_file_truncate.html">f.truncate()</a></td><td style="text-align: left;">把文件调整为指定的大小。</td></tr><tr class="even"><td style="text-align: left;"><a href="https://w3schools.cn/python/ref_file_writeable.html">f.writeable()</a></td><td style="text-align: left;">返回是否能够写入文件。</td></tr><tr class="odd"><td style="text-align: left;"><a href="https://w3schools.cn/python/ref_file_write.html">f.write()</a></td><td style="text-align: left;">把指定的字符串写入文件。</td></tr><tr class="even"><td style="text-align: left;"><a href="https://w3schools.cn/python/ref_file_writelines.html">f.writelines()</a></td><td style="text-align: left;">把字符串列表写入文件。</td></tr></tbody></table>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;python-文件操作基础知识&quot;&gt;Python 文件操作基础知识&lt;/h1&gt;
&lt;p&gt;参考：&lt;a href=&quot;https://www.runoob.com/python3/python3-inputoutput.html&quot;&gt;https://www.runoob.co</summary>
      
    
    
    
    <category term="python" scheme="http://example.com/categories/python/"/>
    
    
    <category term="文件" scheme="http://example.com/tags/%E6%96%87%E4%BB%B6/"/>
    
  </entry>
  
  <entry>
    <title>Python 集合方法</title>
    <link href="http://example.com/2024/01/04/Python-%E9%9B%86%E5%90%88%E6%96%B9%E6%B3%95/"/>
    <id>http://example.com/2024/01/04/Python-%E9%9B%86%E5%90%88%E6%96%B9%E6%B3%95/</id>
    <published>2024-01-04T03:02:56.000Z</published>
    <updated>2024-01-04T05:15:36.153Z</updated>
    
    <content type="html"><![CDATA[<h1 id="python-集合的基础">Python 集合的基础</h1><p>参考：<a href="https://www.runoob.com/python3/python3-set.html">https://www.runoob.com/python3/python3-set.html</a></p><h1 id="python-集合内置方法">Python 集合内置方法</h1><table><thead><tr class="header"><th style="text-align: left;">方法</th><th style="text-align: left;">描述</th></tr></thead><tbody><tr class="odd"><td style="text-align: left;"><a href="https://w3schools.cn/python/ref_set_add.html">set.add()</a></td><td style="text-align: left;">向集合添加元素。</td></tr><tr class="even"><td style="text-align: left;"><a href="https://w3schools.cn/python/ref_set_clear.html">set.clear()</a></td><td style="text-align: left;">删除集合中的所有元素。</td></tr><tr class="odd"><td style="text-align: left;"><a href="https://w3schools.cn/python/ref_set_copy.html">set.copy()</a></td><td style="text-align: left;">返回集合的副本。</td></tr><tr class="even"><td style="text-align: left;"><a href="https://w3schools.cn/python/ref_set_difference.html">set.difference()</a></td><td style="text-align: left;">返回包含两个或更多集合之间差异的集合。</td></tr><tr class="odd"><td style="text-align: left;"><a href="https://w3schools.cn/python/ref_set_difference_update.html">set.difference_update()</a></td><td style="text-align: left;">删除此集合中也包含在另一个指定集合中的项目。</td></tr><tr class="even"><td style="text-align: left;"><a href="https://w3schools.cn/python/ref_set_discard.html">set.discard()</a></td><td style="text-align: left;">删除指定项目。</td></tr><tr class="odd"><td style="text-align: left;"><a href="https://w3schools.cn/python/ref_set_intersection.html">set.intersection()</a></td><td style="text-align: left;">返回为两个其他集合的交集的集合。</td></tr><tr class="even"><td style="text-align: left;"><a href="https://w3schools.cn/python/ref_set_intersection_update.html">set.intersection_update()</a></td><td style="text-align: left;">删除此集合中不存在于其他指定集合中的项目。</td></tr><tr class="odd"><td style="text-align: left;"><a href="https://w3schools.cn/python/ref_set_isdisjoint.html">set.isdisjoint()</a></td><td style="text-align: left;">返回两个集合是否有交集。</td></tr><tr class="even"><td style="text-align: left;"><a href="https://w3schools.cn/python/ref_set_issubset.html">set.issubset()</a></td><td style="text-align: left;">返回另一个集合是否包含此集合。</td></tr><tr class="odd"><td style="text-align: left;"><a href="https://w3schools.cn/python/ref_set_issuperset.html">set.issuperset()</a></td><td style="text-align: left;">返回此集合是否包含另一个集合。</td></tr><tr class="even"><td style="text-align: left;"><a href="https://w3schools.cn/python/ref_set_pop.html">set.pop()</a></td><td style="text-align: left;">从集合中删除一个元素。</td></tr><tr class="odd"><td style="text-align: left;"><a href="https://w3schools.cn/python/ref_set_remove.html">set.remove()</a></td><td style="text-align: left;">删除指定元素。</td></tr><tr class="even"><td style="text-align: left;"><a href="https://w3schools.cn/python/ref_set_symmetric_difference.html">set.symmetric_difference()</a></td><td style="text-align: left;">返回具有两组集合的对称差集的集合。</td></tr><tr class="odd"><td style="text-align: left;"><a href="https://w3schools.cn/python/ref_set_symmetric_difference_update.html">set.symmetric_difference_update()</a></td><td style="text-align: left;">插入此集合和另一个集合的对称差集。</td></tr><tr class="even"><td style="text-align: left;"><a href="https://w3schools.cn/python/ref_set_union.html">set.union()</a></td><td style="text-align: left;">返回包含集合并集的集合。</td></tr><tr class="odd"><td style="text-align: left;"><a href="https://w3schools.cn/python/ref_set_update.html">set.update()</a></td><td style="text-align: left;">用此集合和其他集合的并集来更新集合。</td></tr></tbody></table>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;python-集合的基础&quot;&gt;Python 集合的基础&lt;/h1&gt;
&lt;p&gt;参考：&lt;a href=&quot;https://www.runoob.com/python3/python3-set.html&quot;&gt;https://www.runoob.com/python3/pyth</summary>
      
    
    
    
    <category term="python" scheme="http://example.com/categories/python/"/>
    
    
    <category term="set" scheme="http://example.com/tags/set/"/>
    
  </entry>
  
  <entry>
    <title>Python 字典方法</title>
    <link href="http://example.com/2024/01/04/Python-%E5%AD%97%E5%85%B8%E6%96%B9%E6%B3%95/"/>
    <id>http://example.com/2024/01/04/Python-%E5%AD%97%E5%85%B8%E6%96%B9%E6%B3%95/</id>
    <published>2024-01-04T03:02:39.000Z</published>
    <updated>2024-01-04T05:10:38.412Z</updated>
    
    <content type="html"><![CDATA[<h1 id="python-字典基础">Python 字典基础</h1><p>参考：<a href="https://www.runoob.com/python3/python3-dictionary.html">https://www.runoob.com/python3/python3-dictionary.html</a></p><h1 id="python-字典内置方法">Python 字典内置方法</h1><table><thead><tr class="header"><th style="text-align: left;">方法</th><th style="text-align: left;">描述</th></tr></thead><tbody><tr class="odd"><td style="text-align: left;"><a href="https://w3schools.cn/python/ref_dictionary_clear.html">dict.clear()</a></td><td style="text-align: left;">删除字典中的所有元素</td></tr><tr class="even"><td style="text-align: left;"><a href="https://w3schools.cn/python/ref_dictionary_copy.html">dict.copy()</a></td><td style="text-align: left;">返回字典的副本</td></tr><tr class="odd"><td style="text-align: left;"><a href="https://w3schools.cn/python/ref_dictionary_fromkeys.html">dict.fromkeys()</a></td><td style="text-align: left;">返回拥有指定键和值的字典</td></tr><tr class="even"><td style="text-align: left;"><a href="https://w3schools.cn/python/ref_dictionary_get.html">dict.get()</a></td><td style="text-align: left;">返回指定键的值</td></tr><tr class="odd"><td style="text-align: left;"><a href="https://w3schools.cn/python/ref_dictionary_items.html">dict.items()</a></td><td style="text-align: left;">返回包含每个键值对的元组的列表</td></tr><tr class="even"><td style="text-align: left;"><a href="https://w3schools.cn/python/ref_dictionary_keys.html">dict.keys()</a></td><td style="text-align: left;">返回包含字典键的列表</td></tr><tr class="odd"><td style="text-align: left;"><a href="https://w3schools.cn/python/ref_dictionary_pop.html">dict.pop()</a></td><td style="text-align: left;">删除拥有指定键的元素</td></tr><tr class="even"><td style="text-align: left;"><a href="https://w3schools.cn/python/ref_dictionary_popitem.html">dict.popitem()</a></td><td style="text-align: left;">删除最后插入的键值对</td></tr><tr class="odd"><td style="text-align: left;"><a href="https://w3schools.cn/python/ref_dictionary_setdefault.html">dict.setdefault()</a></td><td style="text-align: left;">返回指定键的值。如果该键不存在，则插入具有指定值的键。</td></tr><tr class="even"><td style="text-align: left;"><a href="https://w3schools.cn/python/ref_dictionary_update.html">dict.update()</a></td><td style="text-align: left;">使用指定的键值对字典进行更新</td></tr><tr class="odd"><td style="text-align: left;"><a href="https://w3schools.cn/python/ref_dictionary_values.html">dict.values()</a></td><td style="text-align: left;">返回字典中所有值的列表</td></tr></tbody></table>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;python-字典基础&quot;&gt;Python 字典基础&lt;/h1&gt;
&lt;p&gt;参考：&lt;a href=&quot;https://www.runoob.com/python3/python3-dictionary.html&quot;&gt;https://www.runoob.com/python3</summary>
      
    
    
    
    <category term="python" scheme="http://example.com/categories/python/"/>
    
    
    <category term="dict" scheme="http://example.com/tags/dict/"/>
    
  </entry>
  
  <entry>
    <title>Python 元组方法</title>
    <link href="http://example.com/2024/01/04/Python-%E5%85%83%E7%BB%84%E6%96%B9%E6%B3%95/"/>
    <id>http://example.com/2024/01/04/Python-%E5%85%83%E7%BB%84%E6%96%B9%E6%B3%95/</id>
    <published>2024-01-04T03:02:16.000Z</published>
    <updated>2024-01-04T05:11:30.951Z</updated>
    
    <content type="html"><![CDATA[<h1 id="元组基础">元组基础</h1><p>参考：<a href="https://www.runoob.com/python3/python3-tuple.html">https://www.runoob.com/python3/python3-tuple.html</a></p><h1 id="元组内置函数">元组内置函数</h1><table><thead><tr class="header"><th style="text-align: left;">方法</th><th>描述</th></tr></thead><tbody><tr class="odd"><td style="text-align: left;">len(tuple)</td><td>计算元组元素个数。</td></tr><tr class="even"><td style="text-align: left;">max(tuple)</td><td>返回元组中元素最大值。</td></tr><tr class="odd"><td style="text-align: left;">min(tuple)</td><td>返回元组中元素最小值。</td></tr><tr class="even"><td style="text-align: left;">tuple(iterable)</td><td>将可迭代对象转换为元组。</td></tr></tbody></table><h1 id="元组内置方法">元组内置方法</h1><table><thead><tr class="header"><th style="text-align: left;">方法</th><th style="text-align: left;">描述</th></tr></thead><tbody><tr class="odd"><td style="text-align: left;"><a href="https://w3schools.cn/python/ref_tuple_count.html">tuple.count()</a></td><td style="text-align: left;">返回元组中指定值出现的次数。</td></tr><tr class="even"><td style="text-align: left;"><a href="https://w3schools.cn/python/ref_tuple_index.html">tuple.index()</a></td><td style="text-align: left;">在元组中搜索指定的值并返回它被找到的位置。</td></tr></tbody></table>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;元组基础&quot;&gt;元组基础&lt;/h1&gt;
&lt;p&gt;参考：&lt;a href=&quot;https://www.runoob.com/python3/python3-tuple.html&quot;&gt;https://www.runoob.com/python3/python3-tuple.html</summary>
      
    
    
    
    <category term="python" scheme="http://example.com/categories/python/"/>
    
    
    <category term="tuple" scheme="http://example.com/tags/tuple/"/>
    
  </entry>
  
  <entry>
    <title>Python 列表方法</title>
    <link href="http://example.com/2024/01/04/Python-%E5%88%97%E8%A1%A8%E6%96%B9%E6%B3%95/"/>
    <id>http://example.com/2024/01/04/Python-%E5%88%97%E8%A1%A8%E6%96%B9%E6%B3%95/</id>
    <published>2024-01-04T03:01:52.000Z</published>
    <updated>2024-01-04T05:36:39.997Z</updated>
    
    <content type="html"><![CDATA[<h1 id="python-列表基础">Python 列表基础</h1><p>可参考：</p><p><a href="https://www.runoob.com/python3/python3-list.html">https://www.runoob.com/python3/python3-list.html</a></p><h1 id="python-列表内置函数">Python 列表内置函数</h1><table><thead><tr class="header"><th style="text-align: left;">函数</th><th style="text-align: left;">描述</th></tr></thead><tbody><tr class="odd"><td style="text-align: left;"><a href="https://www.runoob.com/python3/python3-att-list-len.html">len(list)</a></td><td style="text-align: left;">列表元素个数</td></tr><tr class="even"><td style="text-align: left;"><a href="https://www.runoob.com/python3/python3-att-list-max.html">max(list)</a></td><td style="text-align: left;">返回列表元素最大值</td></tr><tr class="odd"><td style="text-align: left;"><a href="https://www.runoob.com/python3/python3-att-list-min.html">min(list)</a></td><td style="text-align: left;">返回列表元素最小值</td></tr><tr class="even"><td style="text-align: left;"><a href="https://www.runoob.com/python3/python3-att-list-list.html">list(seq)</a></td><td style="text-align: left;">将元组或字符串转换为列表</td></tr><tr class="odd"><td style="text-align: left;">reserved(list)</td><td style="text-align: left;">反向列表顺序，原列表顺序改变</td></tr><tr class="even"><td style="text-align: left;">sorted(list)</td><td style="text-align: left;">对列表进行排序，原列表顺序改变</td></tr></tbody></table><h1 id="python-列表内置方法">Python 列表内置方法</h1><table><thead><tr class="header"><th style="text-align: left;">方法</th><th style="text-align: left;">描述</th></tr></thead><tbody><tr class="odd"><td style="text-align: left;"><a href="https://w3schools.cn/python/ref_list_append.html">list.append(obj)</a></td><td style="text-align: left;">在列表的末尾添加一个元素</td></tr><tr class="even"><td style="text-align: left;"><a href="https://w3schools.cn/python/ref_list_clear.html">list.clear()</a></td><td style="text-align: left;">删除列表中的所有元素</td></tr><tr class="odd"><td style="text-align: left;"><a href="https://w3schools.cn/python/ref_list_copy.html">list.copy()</a></td><td style="text-align: left;">返回列表的副本</td></tr><tr class="even"><td style="text-align: left;"><a href="https://w3schools.cn/python/ref_list_count.html">list.count(obj)</a></td><td style="text-align: left;">返回指定值的元素数量。</td></tr><tr class="odd"><td style="text-align: left;"><a href="https://w3schools.cn/python/ref_list_extend.html">list.extend(seq)</a></td><td style="text-align: left;">将列表元素（或任何可迭代的元素）添加到当前列表的末尾</td></tr><tr class="even"><td style="text-align: left;"><a href="https://w3schools.cn/python/ref_list_index.html">list.index(obj)</a></td><td style="text-align: left;">返回具有指定值的第一个元素的索引</td></tr><tr class="odd"><td style="text-align: left;"><a href="https://w3schools.cn/python/ref_list_insert.html">list.insert(obj)</a></td><td style="text-align: left;">在指定位置添加元素</td></tr><tr class="even"><td style="text-align: left;"><a href="https://w3schools.cn/python/ref_list_pop.html">list.pop(index=-1)</a></td><td style="text-align: left;">移除列表中的一个元素（默认最后一个元素），并且返回该元素的值</td></tr><tr class="odd"><td style="text-align: left;"><a href="https://w3schools.cn/python/ref_list_remove.html">list.remove(obj)</a></td><td style="text-align: left;">移除列表中某个值的第一个匹配项</td></tr><tr class="even"><td style="text-align: left;"><a href="https://w3schools.cn/python/ref_list_reverse.html">list.reverse()</a></td><td style="text-align: left;">反向列表顺序，原列表顺序不变</td></tr><tr class="odd"><td style="text-align: left;"><a href="https://w3schools.cn/python/ref_list_sort.html">list.sort()</a></td><td style="text-align: left;">对列表进行排序，原列表顺序不变</td></tr></tbody></table><p><strong>参考链接：</strong></p><p>https://w3schools.cn/</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;python-列表基础&quot;&gt;Python 列表基础&lt;/h1&gt;
&lt;p&gt;可参考：&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://www.runoob.com/python3/python3-list.html&quot;&gt;https://www.runoob.com/pyt</summary>
      
    
    
    
    <category term="python" scheme="http://example.com/categories/python/"/>
    
    
    <category term="list" scheme="http://example.com/tags/list/"/>
    
  </entry>
  
  <entry>
    <title>Python 内置函数和异常</title>
    <link href="http://example.com/2024/01/04/Python-%E5%86%85%E7%BD%AE%E5%87%BD%E6%95%B0%E5%92%8C%E5%BC%82%E5%B8%B8/"/>
    <id>http://example.com/2024/01/04/Python-%E5%86%85%E7%BD%AE%E5%87%BD%E6%95%B0%E5%92%8C%E5%BC%82%E5%B8%B8/</id>
    <published>2024-01-04T03:01:25.000Z</published>
    <updated>2024-01-04T03:50:08.031Z</updated>
    
    <content type="html"><![CDATA[<h1 id="python-内置函数">Python 内置函数</h1><p><strong>官方文档内置函数（中文）</strong>：</p><table><thead><tr class="header"><th style="text-align: left;">内置函数</th><th></th><th></th><th></th></tr></thead><tbody><tr class="odd"><td style="text-align: left;"><strong>A</strong><a href="https://www.bookstack.cn/read/python-3.12.0-zh/a4e24e7dfe75b271.md#abs">abs()</a><a href="https://www.bookstack.cn/read/python-3.12.0-zh/a4e24e7dfe75b271.md#aiter">aiter()</a><a href="https://www.bookstack.cn/read/python-3.12.0-zh/a4e24e7dfe75b271.md#all">all()</a><a href="https://www.bookstack.cn/read/python-3.12.0-zh/a4e24e7dfe75b271.md#anext">anext()</a><a href="https://www.bookstack.cn/read/python-3.12.0-zh/a4e24e7dfe75b271.md#any">any()</a><a href="https://www.bookstack.cn/read/python-3.12.0-zh/a4e24e7dfe75b271.md#ascii">ascii()</a> <strong>B</strong><a href="https://www.bookstack.cn/read/python-3.12.0-zh/a4e24e7dfe75b271.md#bin">bin()</a><a href="https://www.bookstack.cn/read/python-3.12.0-zh/a4e24e7dfe75b271.md#bool">bool()</a><a href="https://www.bookstack.cn/read/python-3.12.0-zh/a4e24e7dfe75b271.md#breakpoint">breakpoint()</a><a href="https://www.bookstack.cn/read/python-3.12.0-zh/a4e24e7dfe75b271.md#func-bytearray">bytearray()</a><a href="https://www.bookstack.cn/read/python-3.12.0-zh/a4e24e7dfe75b271.md#func-bytes">bytes()</a> <strong>C</strong><a href="https://www.bookstack.cn/read/python-3.12.0-zh/a4e24e7dfe75b271.md#callable">callable()</a><a href="https://www.bookstack.cn/read/python-3.12.0-zh/a4e24e7dfe75b271.md#chr">chr()</a><a href="https://www.bookstack.cn/read/python-3.12.0-zh/a4e24e7dfe75b271.md#classmethod">classmethod()</a><a href="https://www.bookstack.cn/read/python-3.12.0-zh/a4e24e7dfe75b271.md#compile">compile()</a><a href="https://www.bookstack.cn/read/python-3.12.0-zh/a4e24e7dfe75b271.md#complex">complex()</a> <strong>D</strong><a href="https://www.bookstack.cn/read/python-3.12.0-zh/a4e24e7dfe75b271.md#delattr">delattr()</a><a href="https://www.bookstack.cn/read/python-3.12.0-zh/a4e24e7dfe75b271.md#func-dict">dict()</a><a href="https://www.bookstack.cn/read/python-3.12.0-zh/a4e24e7dfe75b271.md#dir">dir()</a><a href="https://www.bookstack.cn/read/python-3.12.0-zh/a4e24e7dfe75b271.md#divmod">divmod()</a></td><td><strong>E</strong><a href="https://www.bookstack.cn/read/python-3.12.0-zh/a4e24e7dfe75b271.md#enumerate">enumerate()</a><a href="https://www.bookstack.cn/read/python-3.12.0-zh/a4e24e7dfe75b271.md#eval">eval()</a><a href="https://www.bookstack.cn/read/python-3.12.0-zh/a4e24e7dfe75b271.md#exec">exec()</a> <strong>F</strong><a href="https://www.bookstack.cn/read/python-3.12.0-zh/a4e24e7dfe75b271.md#filter">filter()</a><a href="https://www.bookstack.cn/read/python-3.12.0-zh/a4e24e7dfe75b271.md#float">float()</a><a href="https://www.bookstack.cn/read/python-3.12.0-zh/a4e24e7dfe75b271.md#format">format()</a><a href="https://www.bookstack.cn/read/python-3.12.0-zh/a4e24e7dfe75b271.md#func-frozenset">frozenset()</a> <strong>G</strong><a href="https://www.bookstack.cn/read/python-3.12.0-zh/a4e24e7dfe75b271.md#getattr">getattr()</a><a href="https://www.bookstack.cn/read/python-3.12.0-zh/a4e24e7dfe75b271.md#globals">globals()</a> <strong>H</strong><a href="https://www.bookstack.cn/read/python-3.12.0-zh/a4e24e7dfe75b271.md#hasattr">hasattr()</a><a href="https://www.bookstack.cn/read/python-3.12.0-zh/a4e24e7dfe75b271.md#hash">hash()</a><a href="https://www.bookstack.cn/read/python-3.12.0-zh/a4e24e7dfe75b271.md#help">help()</a><a href="https://www.bookstack.cn/read/python-3.12.0-zh/a4e24e7dfe75b271.md#hex">hex()</a> <strong>I</strong><a href="https://www.bookstack.cn/read/python-3.12.0-zh/a4e24e7dfe75b271.md#id">id()</a><a href="https://www.bookstack.cn/read/python-3.12.0-zh/a4e24e7dfe75b271.md#input">input()</a><a href="https://www.bookstack.cn/read/python-3.12.0-zh/a4e24e7dfe75b271.md#int">int()</a><a href="https://www.bookstack.cn/read/python-3.12.0-zh/a4e24e7dfe75b271.md#isinstance">isinstance()</a><a href="https://www.bookstack.cn/read/python-3.12.0-zh/a4e24e7dfe75b271.md#issubclass">issubclass()</a><a href="https://www.bookstack.cn/read/python-3.12.0-zh/a4e24e7dfe75b271.md#iter">iter()</a></td><td><strong>L</strong><a href="https://www.bookstack.cn/read/python-3.12.0-zh/a4e24e7dfe75b271.md#len">len()</a><a href="https://www.bookstack.cn/read/python-3.12.0-zh/a4e24e7dfe75b271.md#func-list">list()</a><a href="https://www.bookstack.cn/read/python-3.12.0-zh/a4e24e7dfe75b271.md#locals">locals()</a> <strong>M</strong><a href="https://www.bookstack.cn/read/python-3.12.0-zh/a4e24e7dfe75b271.md#map">map()</a><a href="https://www.bookstack.cn/read/python-3.12.0-zh/a4e24e7dfe75b271.md#max">max()</a><a href="https://www.bookstack.cn/read/python-3.12.0-zh/a4e24e7dfe75b271.md#func-memoryview">memoryview()</a><a href="https://www.bookstack.cn/read/python-3.12.0-zh/a4e24e7dfe75b271.md#min">min()</a> <strong>N</strong><a href="https://www.bookstack.cn/read/python-3.12.0-zh/a4e24e7dfe75b271.md#next">next()</a> <strong>O</strong><a href="https://www.bookstack.cn/read/python-3.12.0-zh/a4e24e7dfe75b271.md#object">object()</a><a href="https://www.bookstack.cn/read/python-3.12.0-zh/a4e24e7dfe75b271.md#oct">oct()</a><a href="https://www.bookstack.cn/read/python-3.12.0-zh/a4e24e7dfe75b271.md#open">open()</a><a href="https://www.bookstack.cn/read/python-3.12.0-zh/a4e24e7dfe75b271.md#ord">ord()</a> <strong>P</strong><a href="https://www.bookstack.cn/read/python-3.12.0-zh/a4e24e7dfe75b271.md#pow">pow()</a><a href="https://www.bookstack.cn/read/python-3.12.0-zh/a4e24e7dfe75b271.md#print">print()</a><a href="https://www.bookstack.cn/read/python-3.12.0-zh/a4e24e7dfe75b271.md#property">property()</a></td><td><strong>R</strong><a href="https://www.bookstack.cn/read/python-3.12.0-zh/a4e24e7dfe75b271.md#func-range">range()</a><a href="https://www.bookstack.cn/read/python-3.12.0-zh/a4e24e7dfe75b271.md#repr">repr()</a><a href="https://www.bookstack.cn/read/python-3.12.0-zh/a4e24e7dfe75b271.md#reversed">reversed()</a><a href="https://www.bookstack.cn/read/python-3.12.0-zh/a4e24e7dfe75b271.md#round">round()</a> <strong>S</strong><a href="https://www.bookstack.cn/read/python-3.12.0-zh/a4e24e7dfe75b271.md#func-set">set()</a><a href="https://www.bookstack.cn/read/python-3.12.0-zh/a4e24e7dfe75b271.md#setattr">setattr()</a><a href="https://www.bookstack.cn/read/python-3.12.0-zh/a4e24e7dfe75b271.md#slice">slice()</a><a href="https://www.bookstack.cn/read/python-3.12.0-zh/a4e24e7dfe75b271.md#sorted">sorted()</a><a href="https://www.bookstack.cn/read/python-3.12.0-zh/a4e24e7dfe75b271.md#staticmethod">staticmethod()</a><a href="https://www.bookstack.cn/read/python-3.12.0-zh/a4e24e7dfe75b271.md#func-str">str()</a><a href="https://www.bookstack.cn/read/python-3.12.0-zh/a4e24e7dfe75b271.md#sum">sum()</a><a href="https://www.bookstack.cn/read/python-3.12.0-zh/a4e24e7dfe75b271.md#super">super()</a> <strong>T</strong><a href="https://www.bookstack.cn/read/python-3.12.0-zh/a4e24e7dfe75b271.md#func-tuple">tuple()</a><a href="https://www.bookstack.cn/read/python-3.12.0-zh/a4e24e7dfe75b271.md#type">type()</a> <strong>V</strong><a href="https://www.bookstack.cn/read/python-3.12.0-zh/a4e24e7dfe75b271.md#vars">vars()</a> <strong>Z</strong><a href="https://www.bookstack.cn/read/python-3.12.0-zh/a4e24e7dfe75b271.md#zip">zip()</a> <em><a href="https://www.bookstack.cn/read/python-3.12.0-zh/a4e24e7dfe75b271.md#import__">*_import*</a></em><a href="https://www.bookstack.cn/read/python-3.12.0-zh/a4e24e7dfe75b271.md#import__">()</a></td></tr></tbody></table><p><strong>第三方文档：</strong></p><table><thead><tr class="header"><th style="text-align: left;">函数</th><th style="text-align: left;">描述</th></tr></thead><tbody><tr class="odd"><td style="text-align: left;"><a href="https://w3schools.cn/python/ref_func_abs.html">abs()</a></td><td style="text-align: left;">返回数的绝对值</td></tr><tr class="even"><td style="text-align: left;"><a href="https://w3schools.cn/python/ref_func_all.html">all()</a></td><td style="text-align: left;">如果可迭代对象中的所有项均为 true，则返回 True。</td></tr><tr class="odd"><td style="text-align: left;"><a href="https://w3schools.cn/python/ref_func_any.html">any()</a></td><td style="text-align: left;">如果可迭代对象中的任何项为 true，则返回 True。</td></tr><tr class="even"><td style="text-align: left;"><a href="https://w3schools.cn/python/ref_func_ascii.html">ascii()</a></td><td style="text-align: left;">返回对象的可读版本。用转义字符替换 none-ascii 字符。</td></tr><tr class="odd"><td style="text-align: left;"><a href="https://w3schools.cn/python/ref_func_bin.html">bin()</a></td><td style="text-align: left;">返回数的二进制版本。</td></tr><tr class="even"><td style="text-align: left;"><a href="https://w3schools.cn/python/ref_func_bool.html">bool()</a></td><td style="text-align: left;">返回指定对象的布尔值。</td></tr><tr class="odd"><td style="text-align: left;"><a href="https://w3schools.cn/python/ref_func_bytearray.html">bytearray()</a></td><td style="text-align: left;">返回字节数组。</td></tr><tr class="even"><td style="text-align: left;"><a href="https://w3schools.cn/python/ref_func_bytes.html">bytes()</a></td><td style="text-align: left;">返回字节对象。</td></tr><tr class="odd"><td style="text-align: left;"><a href="https://w3schools.cn/python/ref_func_callable.html">callable()</a></td><td style="text-align: left;">如果指定的对象是可调用的，则返回 True，否则返回 False。</td></tr><tr class="even"><td style="text-align: left;"><a href="https://w3schools.cn/python/ref_func_chr.html">chr()</a></td><td style="text-align: left;">返回指定 Unicode 代码中的字符。</td></tr><tr class="odd"><td style="text-align: left;">classmethod()</td><td style="text-align: left;">把方法转换为类方法。</td></tr><tr class="even"><td style="text-align: left;"><a href="https://w3schools.cn/python/ref_func_compile.html">compile()</a></td><td style="text-align: left;">把指定的源作为对象返回，准备执行。</td></tr><tr class="odd"><td style="text-align: left;"><a href="https://w3schools.cn/python/ref_func_complex.html">complex()</a></td><td style="text-align: left;">返回复数。</td></tr><tr class="even"><td style="text-align: left;"><a href="https://w3schools.cn/python/ref_func_delattr.html">delattr()</a></td><td style="text-align: left;">从指定的对象中删除指定的属性（属性或方法）。</td></tr><tr class="odd"><td style="text-align: left;"><a href="https://w3schools.cn/python/ref_func_dict.html">dict()</a></td><td style="text-align: left;">返回字典（数组）。</td></tr><tr class="even"><td style="text-align: left;"><a href="https://w3schools.cn/python/ref_func_dir.html">dir()</a></td><td style="text-align: left;">返回指定对象的属性和方法的列表。</td></tr><tr class="odd"><td style="text-align: left;"><a href="https://w3schools.cn/python/ref_func_divmod.html">divmod()</a></td><td style="text-align: left;">当参数1除以参数2时，返回商和余数。</td></tr><tr class="even"><td style="text-align: left;"><a href="https://w3schools.cn/python/ref_func_enumerate.html">enumerate()</a></td><td style="text-align: left;">获取集合（例如元组）并将其作为枚举对象返回。</td></tr><tr class="odd"><td style="text-align: left;"><a href="https://w3schools.cn/python/ref_func_eval.html">eval()</a></td><td style="text-align: left;">评估并执行表达式。</td></tr><tr class="even"><td style="text-align: left;"><a href="https://w3schools.cn/python/ref_func_exec.html">exec()</a></td><td style="text-align: left;">执行指定的代码（或对象）。</td></tr><tr class="odd"><td style="text-align: left;"><a href="https://w3schools.cn/python/ref_func_filter.html">filter()</a></td><td style="text-align: left;">使用过滤器函数排除可迭代对象中的项目。</td></tr><tr class="even"><td style="text-align: left;"><a href="https://w3schools.cn/python/ref_func_float.html">float()</a></td><td style="text-align: left;">返回浮点数。</td></tr><tr class="odd"><td style="text-align: left;"><a href="https://w3schools.cn/python/ref_func_format.html">format()</a></td><td style="text-align: left;">格式化指定值。</td></tr><tr class="even"><td style="text-align: left;"><a href="https://w3schools.cn/python/ref_func_frozenset.html">frozenset()</a></td><td style="text-align: left;">返回 frozenset 对象。</td></tr><tr class="odd"><td style="text-align: left;"><a href="https://w3schools.cn/python/ref_func_getattr.html">getattr()</a></td><td style="text-align: left;">返回指定属性的值（属性或方法）。</td></tr><tr class="even"><td style="text-align: left;"><a href="https://w3schools.cn/python/ref_func_globals.html">globals()</a></td><td style="text-align: left;">以字典返回当前全局符号表。</td></tr><tr class="odd"><td style="text-align: left;"><a href="https://w3schools.cn/python/ref_func_hasattr.html">hasattr()</a></td><td style="text-align: left;">如果指定的对象拥有指定的属性（属性/方法），则返回 True。</td></tr><tr class="even"><td style="text-align: left;">hash()</td><td style="text-align: left;">返回指定对象的哈希值。</td></tr><tr class="odd"><td style="text-align: left;">help()</td><td style="text-align: left;">执行内建的帮助系统。</td></tr><tr class="even"><td style="text-align: left;"><a href="https://w3schools.cn/python/ref_func_hex.html">hex()</a></td><td style="text-align: left;">把数字转换为十六进制值。</td></tr><tr class="odd"><td style="text-align: left;"><a href="https://w3schools.cn/python/ref_func_id.html">id()</a></td><td style="text-align: left;">返回对象的 id。</td></tr><tr class="even"><td style="text-align: left;"><a href="https://w3schools.cn/python/ref_func_input.html">input()</a></td><td style="text-align: left;">允许用户输入。</td></tr><tr class="odd"><td style="text-align: left;"><a href="https://w3schools.cn/python/ref_func_int.html">int()</a></td><td style="text-align: left;">返回整数。</td></tr><tr class="even"><td style="text-align: left;"><a href="https://w3schools.cn/python/ref_func_isinstance.html">isinstance()</a></td><td style="text-align: left;">如果指定的对象是指定对象的实例，则返回 True。</td></tr><tr class="odd"><td style="text-align: left;"><a href="https://w3schools.cn/python/ref_func_issubclass.html">issubclass()</a></td><td style="text-align: left;">如果指定的类是指定对象的子类，则返回 True。</td></tr><tr class="even"><td style="text-align: left;"><a href="https://w3schools.cn/python/ref_func_iter.html">iter()</a></td><td style="text-align: left;">返回迭代器对象。</td></tr><tr class="odd"><td style="text-align: left;"><a href="https://w3schools.cn/python/ref_func_len.html">len()</a></td><td style="text-align: left;">返回对象的长度。</td></tr><tr class="even"><td style="text-align: left;"><a href="https://w3schools.cn/python/ref_func_list.html">list()</a></td><td style="text-align: left;">返回列表。</td></tr><tr class="odd"><td style="text-align: left;"><a href="https://w3schools.cn/python/ref_func_locals.html">locals()</a></td><td style="text-align: left;">返回当前本地符号表的更新字典。</td></tr><tr class="even"><td style="text-align: left;"><a href="https://w3schools.cn/python/ref_func_map.html">map()</a></td><td style="text-align: left;">返回指定的迭代器，其中指定的函数应用于每个项目。</td></tr><tr class="odd"><td style="text-align: left;"><a href="https://w3schools.cn/python/ref_func_max.html">max()</a></td><td style="text-align: left;">返回可迭代对象中的最大项目。</td></tr><tr class="even"><td style="text-align: left;"><a href="https://w3schools.cn/python/ref_func_memoryview.html">memoryview()</a></td><td style="text-align: left;">返回内存视图（memory view）对象。</td></tr><tr class="odd"><td style="text-align: left;"><a href="https://w3schools.cn/python/ref_func_min.html">min()</a></td><td style="text-align: left;">返回可迭代对象中的最小项目。</td></tr><tr class="even"><td style="text-align: left;"><a href="https://w3schools.cn/python/ref_func_next.html">next()</a></td><td style="text-align: left;">返回可迭代对象中的下一项。</td></tr><tr class="odd"><td style="text-align: left;"><a href="https://w3schools.cn/python/ref_func_object.html">object()</a></td><td style="text-align: left;">返回新对象。</td></tr><tr class="even"><td style="text-align: left;"><a href="https://w3schools.cn/python/ref_func_oct.html">oct()</a></td><td style="text-align: left;">把数转换为八进制。</td></tr><tr class="odd"><td style="text-align: left;"><a href="https://w3schools.cn/python/ref_func_open.html">open()</a></td><td style="text-align: left;">打开文件并返回文件对象。</td></tr><tr class="even"><td style="text-align: left;"><a href="https://w3schools.cn/python/ref_func_ord.html">ord()</a></td><td style="text-align: left;">转换表示指定字符的 Unicode 的整数。</td></tr><tr class="odd"><td style="text-align: left;"><a href="https://w3schools.cn/python/ref_func_pow.html">pow()</a></td><td style="text-align: left;">返回 x 的 y 次幂的值。</td></tr><tr class="even"><td style="text-align: left;"><a href="https://w3schools.cn/python/ref_func_print.html">print()</a></td><td style="text-align: left;">打印标准输出设备。</td></tr><tr class="odd"><td style="text-align: left;">property()</td><td style="text-align: left;">获取、设置、删除属性。</td></tr><tr class="even"><td style="text-align: left;"><a href="https://w3schools.cn/python/ref_func_range.html">range()</a></td><td style="text-align: left;">返回数字序列，从 0 开始且以 1 为增量（默认地）。</td></tr><tr class="odd"><td style="text-align: left;">repr()</td><td style="text-align: left;">返回对象的可读版本。</td></tr><tr class="even"><td style="text-align: left;"><a href="https://w3schools.cn/python/ref_func_reversed.html">reversed()</a></td><td style="text-align: left;">返回反转的迭代器。</td></tr><tr class="odd"><td style="text-align: left;"><a href="https://w3schools.cn/python/ref_func_round.html">round()</a></td><td style="text-align: left;">对数进行舍入。</td></tr><tr class="even"><td style="text-align: left;"><a href="https://w3schools.cn/python/ref_func_set.html">set()</a></td><td style="text-align: left;">返回新的集合对象。</td></tr><tr class="odd"><td style="text-align: left;"><a href="https://w3schools.cn/python/ref_func_setattr.html">setattr()</a></td><td style="text-align: left;">设置对象的属性（属性/方法）。</td></tr><tr class="even"><td style="text-align: left;"><a href="https://w3schools.cn/python/ref_func_slice.html">slice()</a></td><td style="text-align: left;">返回 slice 对象。</td></tr><tr class="odd"><td style="text-align: left;"><a href="https://w3schools.cn/python/ref_func_sorted.html">sorted()</a></td><td style="text-align: left;">返回排序列表。</td></tr><tr class="even"><td style="text-align: left;"><span class="citation" data-cites="staticmethod">@staticmethod</span>()</td><td style="text-align: left;">把方法转换为静态方法。</td></tr><tr class="odd"><td style="text-align: left;"><a href="https://w3schools.cn/python/ref_func_str.html">str()</a></td><td style="text-align: left;">返回字符串对象。</td></tr><tr class="even"><td style="text-align: left;"><a href="https://w3schools.cn/python/ref_func_sum.html">sum()</a></td><td style="text-align: left;">对迭代器的项目进行求和。</td></tr><tr class="odd"><td style="text-align: left;"><a href="https://w3schools.cn/python/ref_func_super.html">super()</a></td><td style="text-align: left;">返回表示父类的对象。</td></tr><tr class="even"><td style="text-align: left;"><a href="https://w3schools.cn/python/ref_func_tuple.html">tuple()</a></td><td style="text-align: left;">返回元组。</td></tr><tr class="odd"><td style="text-align: left;"><a href="https://w3schools.cn/python/ref_func_type.html">type()</a></td><td style="text-align: left;">返回对象的类型。</td></tr><tr class="even"><td style="text-align: left;"><a href="https://w3schools.cn/python/ref_func_vars.html">vars()</a></td><td style="text-align: left;">返回对象的 <strong>dict</strong> 属性。</td></tr><tr class="odd"><td style="text-align: left;"><a href="https://w3schools.cn/python/ref_func_zip.html">zip()</a></td><td style="text-align: left;">从两个或多个迭代器返回一个迭代器。</td></tr></tbody></table><h1 id="section"></h1><h1 id="python-内置异常">Python 内置异常</h1><p>Python中所有内置异常的基类是 <strong>BaseException</strong>，常见的内置异常有：</p><table><thead><tr class="header"><th style="text-align: left;">异常</th><th style="text-align: left;">描述</th></tr></thead><tbody><tr class="odd"><td style="text-align: left;">ArithmeticError</td><td style="text-align: left;">数值计算发生错误时引发</td></tr><tr class="even"><td style="text-align: left;">AssertionError</td><td style="text-align: left;">在断言语句失败时引发</td></tr><tr class="odd"><td style="text-align: left;">AttributeError</td><td style="text-align: left;">属性引用或赋值失败时触发</td></tr><tr class="even"><td style="text-align: left;">Exception</td><td style="text-align: left;">所有异常的基类</td></tr><tr class="odd"><td style="text-align: left;">EOFError</td><td style="text-align: left;">当 input() 方法遇到"文件结尾"时引发条件（EOF）</td></tr><tr class="even"><td style="text-align: left;">FloatingPointError</td><td style="text-align: left;">浮点计算失败时引发</td></tr><tr class="odd"><td style="text-align: left;">GeneratorExit</td><td style="text-align: left;">在生成器关闭时引发（使用 close() 方法）</td></tr><tr class="even"><td style="text-align: left;">ImportError</td><td style="text-align: left;">当导入的模块不存在时引发</td></tr><tr class="odd"><td style="text-align: left;">IndentationError</td><td style="text-align: left;">缩进不正确时引发</td></tr><tr class="even"><td style="text-align: left;">IndexError</td><td style="text-align: left;">当序列的索引不存在时引发</td></tr><tr class="odd"><td style="text-align: left;">KeyError</td><td style="text-align: left;">在字典中不存在键时引发</td></tr><tr class="even"><td style="text-align: left;">KeyboardInterrupt</td><td style="text-align: left;">当用户按下 Ctrl+c、Ctrl+z 或 Delete 时触发</td></tr><tr class="odd"><td style="text-align: left;">LookupError</td><td style="text-align: left;">在找不到引发的错误时引发</td></tr><tr class="even"><td style="text-align: left;">MemoryError</td><td style="text-align: left;">当程序内存不足时引发</td></tr><tr class="odd"><td style="text-align: left;">NameError</td><td style="text-align: left;">当变量不存在时引发</td></tr><tr class="even"><td style="text-align: left;">NotImplementedError</td><td style="text-align: left;">当抽象方法需要继承的类来覆盖该方法时引发</td></tr><tr class="odd"><td style="text-align: left;">OSError</td><td style="text-align: left;">当系统相关操作导致错误时引发</td></tr><tr class="even"><td style="text-align: left;">OverflowError</td><td style="text-align: left;">数值计算结果过大时引发</td></tr><tr class="odd"><td style="text-align: left;">ReferenceError</td><td style="text-align: left;">当弱引用对象不存在时引发</td></tr><tr class="even"><td style="text-align: left;">RuntimeError</td><td style="text-align: left;">发生不属于任何特定期望的错误时引发</td></tr><tr class="odd"><td style="text-align: left;">StopIteration</td><td style="text-align: left;">当迭代器的 next() 方法没有更多值时引发</td></tr><tr class="even"><td style="text-align: left;">SyntaxError</td><td style="text-align: left;">发生语法错误时引发</td></tr><tr class="odd"><td style="text-align: left;">TabError</td><td style="text-align: left;">缩进包含制表符或空格时引发</td></tr><tr class="even"><td style="text-align: left;">SystemError</td><td style="text-align: left;">发生系统错误时引发</td></tr><tr class="odd"><td style="text-align: left;">SystemExit</td><td style="text-align: left;">在调用 sys.exit() 函数时引发</td></tr><tr class="even"><td style="text-align: left;">TypeError</td><td style="text-align: left;">两种不同类型组合时引发</td></tr><tr class="odd"><td style="text-align: left;">UnboundLocalError</td><td style="text-align: left;">在赋值前引用局部变量时引发</td></tr><tr class="even"><td style="text-align: left;">UnicodeError</td><td style="text-align: left;">发生 unicode 问题时引发</td></tr><tr class="odd"><td style="text-align: left;">UnicodeEncodeError</td><td style="text-align: left;">发生 unicode 编码问题时引发</td></tr><tr class="even"><td style="text-align: left;">UnicodeDecodeError</td><td style="text-align: left;">发生 unicode 解码问题时引发</td></tr><tr class="odd"><td style="text-align: left;">UnicodeTranslateError</td><td style="text-align: left;">发生 unicode 转换问题时引发</td></tr><tr class="even"><td style="text-align: left;">ValueError</td><td style="text-align: left;">在指定数据类型中存在错误值时引发</td></tr><tr class="odd"><td style="text-align: left;">ZeroDivisionError</td><td style="text-align: left;">当除法中的第二个运算符为零时引发</td></tr></tbody></table><p><strong>链接参考：</strong></p><p>https://w3schools.cn/</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;python-内置函数&quot;&gt;Python 内置函数&lt;/h1&gt;
&lt;p&gt;&lt;strong&gt;官方文档内置函数（中文）&lt;/strong&gt;：&lt;/p&gt;
&lt;table&gt;

&lt;thead&gt;
&lt;tr class=&quot;header&quot;&gt;
&lt;th style=&quot;text-align</summary>
      
    
    
    
    <category term="python" scheme="http://example.com/categories/python/"/>
    
    
    <category term="内置函数" scheme="http://example.com/tags/%E5%86%85%E7%BD%AE%E5%87%BD%E6%95%B0/"/>
    
    <category term="异常" scheme="http://example.com/tags/%E5%BC%82%E5%B8%B8/"/>
    
  </entry>
  
  <entry>
    <title>Python 字符串方法</title>
    <link href="http://example.com/2024/01/04/Python-%E5%AD%97%E7%AC%A6%E4%B8%B2%E6%96%B9%E6%B3%95/"/>
    <id>http://example.com/2024/01/04/Python-%E5%AD%97%E7%AC%A6%E4%B8%B2%E6%96%B9%E6%B3%95/</id>
    <published>2024-01-04T02:30:56.000Z</published>
    <updated>2024-01-04T04:59:21.417Z</updated>
    
    <content type="html"><![CDATA[<h1 id="python字符串基础知识">Python字符串基础知识</h1><p>可参考：</p><ul><li><p><a href="https://www.runoob.com/python3/python3-string.html">https://www.runoob.com/python3/python3-string.html</a></p></li><li><p><a href="https://w3schools.cn/python/python_strings.html">https://w3schools.cn/python/python_strings.html</a></p></li></ul><h1 id="python-字符串的内置函数">Python 字符串的内置函数</h1><table><thead><tr class="header"><th style="text-align: left;">函数</th><th style="text-align: left;">描述</th></tr></thead><tbody><tr class="odd"><td style="text-align: left;"><a href="https://www.runoob.com/python3/python3-string-len.html">len(string)</a></td><td style="text-align: left;">返回字符串长度</td></tr><tr class="even"><td style="text-align: left;"><a href="https://www.runoob.com/python3/python3-string-max.html">max(str)</a></td><td style="text-align: left;">返回字符串 str 中最大的字母。</td></tr><tr class="odd"><td style="text-align: left;"><a href="https://www.runoob.com/python3/python3-string-min.html">min(str)</a></td><td style="text-align: left;">返回字符串 str 中最小的字母。</td></tr><tr class="even"><td style="text-align: left;"><a href="https://w3schools.cn/python/ref_func_str.html">str(obj)</a></td><td style="text-align: left;">将指定的值转换为字符串</td></tr></tbody></table><h1 id="python-字符串的内置方法">Python 字符串的内置方法</h1><table><thead><tr class="header"><th style="text-align: left;">方法</th><th style="text-align: left;">描述</th></tr></thead><tbody><tr class="odd"><td style="text-align: left;"><a href="https://w3schools.cn/python/ref_string_capitalize.html">str.capitalize()</a></td><td style="text-align: left;">把首字符转换为大写。</td></tr><tr class="even"><td style="text-align: left;"><a href="https://w3schools.cn/python/ref_string_casefold.html">str.casefold()</a></td><td style="text-align: left;">把字符串转换为小写。</td></tr><tr class="odd"><td style="text-align: left;"><a href="https://w3schools.cn/python/ref_string_center.html">str.center()</a></td><td style="text-align: left;">返回居中的字符串。</td></tr><tr class="even"><td style="text-align: left;"><a href="https://w3schools.cn/python/ref_string_count.html">str.count()</a></td><td style="text-align: left;">返回指定值在字符串中出现的次数。</td></tr><tr class="odd"><td style="text-align: left;"><a href="https://w3schools.cn/python/ref_string_encode.html">str.encode()</a></td><td style="text-align: left;">返回字符串的编码版本。</td></tr><tr class="even"><td style="text-align: left;"><a href="https://w3schools.cn/python/ref_string_endswith.html">str.endswith()</a></td><td style="text-align: left;">如果字符串以指定值结尾，则返回 true。</td></tr><tr class="odd"><td style="text-align: left;"><a href="https://w3schools.cn/python/ref_string_expandtabs.html">str.expandtabs()</a></td><td style="text-align: left;">设置字符串的 tab 尺寸。</td></tr><tr class="even"><td style="text-align: left;"><a href="https://w3schools.cn/python/ref_string_find.html">str.find()</a></td><td style="text-align: left;">在字符串中搜索指定的值并返回它被找到的位置。</td></tr><tr class="odd"><td style="text-align: left;"><a href="https://w3schools.cn/python/ref_string_format.html">str.format()</a></td><td style="text-align: left;">格式化字符串中的指定值。</td></tr><tr class="even"><td style="text-align: left;">str.format_map()</td><td style="text-align: left;">格式化字符串中的指定值。</td></tr><tr class="odd"><td style="text-align: left;"><a href="https://w3schools.cn/python/ref_string_index.html">str.index()</a></td><td style="text-align: left;">在字符串中搜索指定的值并返回它被找到的位置。</td></tr><tr class="even"><td style="text-align: left;"><a href="https://w3schools.cn/python/ref_string_isalnum.html">str.isalnum()</a></td><td style="text-align: left;">如果字符串中的所有字符都是字母数字，则返回 True。</td></tr><tr class="odd"><td style="text-align: left;"><a href="https://w3schools.cn/python/ref_string_isalpha.html">str.isalpha()</a></td><td style="text-align: left;">如果字符串中的所有字符都在字母表中，则返回 True。</td></tr><tr class="even"><td style="text-align: left;"><a href="https://w3schools.cn/python/ref_string_isdecimal.html">str.isdecimal()</a></td><td style="text-align: left;">如果字符串中的所有字符都是小数，则返回 True。</td></tr><tr class="odd"><td style="text-align: left;"><a href="https://w3schools.cn/python/ref_string_isdigit.html">str.isdigit()</a></td><td style="text-align: left;">如果字符串中的所有字符都是数字，则返回 True。</td></tr><tr class="even"><td style="text-align: left;"><a href="https://w3schools.cn/python/ref_string_isidentifier.html">str.isidentifier()</a></td><td style="text-align: left;">如果字符串是标识符，则返回 True。</td></tr><tr class="odd"><td style="text-align: left;"><a href="https://w3schools.cn/python/ref_string_islower.html">str.islower()</a></td><td style="text-align: left;">如果字符串中的所有字符都是小写，则返回 True。</td></tr><tr class="even"><td style="text-align: left;"><a href="https://w3schools.cn/python/ref_string_isnumeric.html">str.isnumeric()</a></td><td style="text-align: left;">如果字符串中的所有字符都是数，则返回 True。</td></tr><tr class="odd"><td style="text-align: left;"><a href="https://w3schools.cn/python/ref_string_isprintable.html">str.isprintable()</a></td><td style="text-align: left;">如果字符串中的所有字符都是可打印的，则返回 True。</td></tr><tr class="even"><td style="text-align: left;"><a href="https://w3schools.cn/python/ref_string_isspace.html">str.isspace()</a></td><td style="text-align: left;">如果字符串中的所有字符都是空白字符，则返回 True。</td></tr><tr class="odd"><td style="text-align: left;"><a href="https://w3schools.cn/python/ref_string_istitle.html">str.istitle()</a></td><td style="text-align: left;">如果字符串遵循标题规则，则返回 True。</td></tr><tr class="even"><td style="text-align: left;"><a href="https://w3schools.cn/python/ref_string_isupper.html">str.isupper()</a></td><td style="text-align: left;">如果字符串中的所有字符都是大写，则返回 True。</td></tr><tr class="odd"><td style="text-align: left;"><a href="https://w3schools.cn/python/ref_string_join.html">str.join()</a></td><td style="text-align: left;">把可迭代对象的元素连接到字符串的末尾。</td></tr><tr class="even"><td style="text-align: left;"><a href="https://w3schools.cn/python/ref_string_ljust.html">str.ljust()</a></td><td style="text-align: left;">返回字符串的左对齐版本。</td></tr><tr class="odd"><td style="text-align: left;"><a href="https://w3schools.cn/python/ref_string_lower.html">str.lower()</a></td><td style="text-align: left;">把字符串转换为小写。</td></tr><tr class="even"><td style="text-align: left;"><a href="https://w3schools.cn/python/ref_string_lstrip.html">str.lstrip()</a></td><td style="text-align: left;">返回字符串的左修剪版本。</td></tr><tr class="odd"><td style="text-align: left;"><a href="https://w3schools.cn/python/ref_string_maketrans.html">str.maketrans()</a></td><td style="text-align: left;">返回在转换中使用的转换表。</td></tr><tr class="even"><td style="text-align: left;"><a href="https://w3schools.cn/python/ref_string_partition.html">str.partition()</a></td><td style="text-align: left;">返回元组，其中的字符串被分为三部分。</td></tr><tr class="odd"><td style="text-align: left;"><a href="https://w3schools.cn/python/ref_string_replace.html">str.replace()</a></td><td style="text-align: left;">返回字符串，其中指定的值被替换为指定的值。</td></tr><tr class="even"><td style="text-align: left;"><a href="https://w3schools.cn/python/ref_string_rfind.html">str.rfind()</a></td><td style="text-align: left;">在字符串中搜索指定的值，并返回它被找到的最后位置。</td></tr><tr class="odd"><td style="text-align: left;"><a href="https://w3schools.cn/python/ref_string_rindex.html">str.rindex()</a></td><td style="text-align: left;">在字符串中搜索指定的值，并返回它被找到的最后位置。</td></tr><tr class="even"><td style="text-align: left;"><a href="https://w3schools.cn/python/ref_string_rjust.html">str.rjust()</a></td><td style="text-align: left;">返回字符串的右对齐版本。</td></tr><tr class="odd"><td style="text-align: left;"><a href="https://w3schools.cn/python/ref_string_rpartition.html">str.rpartition()</a></td><td style="text-align: left;">返回元组，其中字符串分为三部分。</td></tr><tr class="even"><td style="text-align: left;"><a href="https://w3schools.cn/python/ref_string_rsplit.html">str.rsplit()</a></td><td style="text-align: left;">在指定的分隔符处拆分字符串，并返回列表。</td></tr><tr class="odd"><td style="text-align: left;"><a href="https://w3schools.cn/python/ref_string_rstrip.html">str.rstrip()</a></td><td style="text-align: left;">返回字符串的右边修剪版本。</td></tr><tr class="even"><td style="text-align: left;"><a href="https://w3schools.cn/python/ref_string_split.html">str.split()</a></td><td style="text-align: left;">在指定的分隔符处拆分字符串，并返回列表。</td></tr><tr class="odd"><td style="text-align: left;"><a href="https://w3schools.cn/python/ref_string_splitlines.html">str.splitlines()</a></td><td style="text-align: left;">在换行符处拆分字符串并返回列表。</td></tr><tr class="even"><td style="text-align: left;"><a href="https://w3schools.cn/python/ref_string_startswith.html">str.startswith()</a></td><td style="text-align: left;">如果以指定值开头的字符串，则返回 true。</td></tr><tr class="odd"><td style="text-align: left;"><a href="https://w3schools.cn/python/ref_string_strip.html">str.strip()</a></td><td style="text-align: left;">返回字符串的剪裁版本。</td></tr><tr class="even"><td style="text-align: left;"><a href="https://w3schools.cn/python/ref_string_swapcase.html">str.swapcase()</a></td><td style="text-align: left;">切换大小写，小写成为大写，反之亦然。</td></tr><tr class="odd"><td style="text-align: left;"><a href="https://w3schools.cn/python/ref_string_title.html">str.title()</a></td><td style="text-align: left;">把每个单词的首字符转换为大写。</td></tr><tr class="even"><td style="text-align: left;"><a href="https://w3schools.cn/python/ref_string_translate.html">str.translate()</a></td><td style="text-align: left;">返回被转换的字符串。</td></tr><tr class="odd"><td style="text-align: left;"><a href="https://w3schools.cn/python/ref_string_upper.html">str.upper()</a></td><td style="text-align: left;">把字符串转换为大写。</td></tr><tr class="even"><td style="text-align: left;"><a href="https://w3schools.cn/python/ref_string_zfill.html">str.zfill()</a></td><td style="text-align: left;">在字符串的开头填充指定数量的 0 值。</td></tr></tbody></table><p><span style="color:red"><strong>Note:</strong> 所有字符串方法都返回新值，不会更改原始字符串。</span></p><p><strong>参考链接：</strong></p><p>https://w3schools.cn/</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;python字符串基础知识&quot;&gt;Python字符串基础知识&lt;/h1&gt;
&lt;p&gt;可参考：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;a href=&quot;https://www.runoob.com/python3/python3-string.html&quot;&gt;https://ww</summary>
      
    
    
    
    <category term="python" scheme="http://example.com/categories/python/"/>
    
    
    <category term="字符串" scheme="http://example.com/tags/%E5%AD%97%E7%AC%A6%E4%B8%B2/"/>
    
  </entry>
  
  <entry>
    <title>tkinter widgets 窗口管理</title>
    <link href="http://example.com/2024/01/02/tkinter-widgets-%E7%AA%97%E5%8F%A3%E7%AE%A1%E7%90%86/"/>
    <id>http://example.com/2024/01/02/tkinter-widgets-%E7%AA%97%E5%8F%A3%E7%AE%A1%E7%90%86/</id>
    <published>2024-01-02T02:36:14.000Z</published>
    <updated>2024-01-02T10:37:56.755Z</updated>
    
    <content type="html"><![CDATA[<p>Tkinter 多个控件被摆放到父窗口时，就需要进行布局管理（<font color="#0000FF">geometry management</font>），tkinter中提供了三种管理方法，分别如下：</p><ul><li>pack()</li></ul><p>按照控件的添加顺序从上到下依次排列，通过代码可以直观知道摆放情况。</p><ul><li>grid()</li></ul><p>以行列网格形式进行排列。</p><ul><li>place()</li></ul><p>精确指定控件的摆放位置。</p><h1 id="pack方法">pack()方法</h1><p>属性参数有：</p><table><thead><tr class="header"><th>属性</th><th>说明</th></tr></thead><tbody><tr class="odd"><td>anchor</td><td>控件在窗口中的对齐方位："n"/"w"/"s"/"e"/"ne"/"nw"/"sw"/"se"/"center"</td></tr><tr class="even"><td><strong>expand</strong></td><td>控件是否随着窗口扩展，参数值： True / False，默认为 False</td></tr><tr class="odd"><td><strong>fill</strong></td><td>控件可在水平/垂直/同时在两个方向上进行拉伸，参数值： X/Y/BOTH/NONE</td></tr><tr class="even"><td>ipadx,ipady</td><td>控件边框与内容的距离（内边距），单位为像素</td></tr><tr class="odd"><td>padx,pady</td><td>控件之间的上下、左右的距离（外边距），单位为像素</td></tr><tr class="even"><td><strong>side</strong></td><td>控件在窗口的位置，参数值： 'top','bottom','left','right'。</td></tr></tbody></table><h1 id="grid方法">grid()方法</h1><p>属性参数有：</p><table><thead><tr class="header"><th>属性</th><th>说明</th></tr></thead><tbody><tr class="odd"><td><strong>column</strong></td><td>控件位于表格中列数，默认为第 0 列</td></tr><tr class="even"><td><strong>columnspan</strong></td><td>控件所跨的列数，默认为 1 列，通过该参数可以合并一行中多个单元格。</td></tr><tr class="odd"><td>ipadx,ipady</td><td>用于控制内边距，在单元格内部，左右、上下方向上填充指定大小的空间。</td></tr><tr class="even"><td>padx,pady</td><td>用于控制外边距，在单元格外部，左右、上下方向上填充指定大小的空间。</td></tr><tr class="odd"><td><strong>row</strong></td><td>控件位于表格中行数，默认为第 0 行</td></tr><tr class="even"><td><strong>rowspan</strong></td><td>控件所跨的行数，默认为 1 行，通过该参数可以合并一列中多个单元格。</td></tr><tr class="odd"><td><strong>sticky</strong></td><td>功能类似于 anchor，参数：N/S/W/E,即上下左右对齐，或组合使用，默认居中对齐。</td></tr></tbody></table><h1 id="place方法">place()方法</h1><p>属性参数有：</p><table><thead><tr class="header"><th>属性</th><th>说明</th></tr></thead><tbody><tr class="odd"><td>anchor</td><td>控件在窗口中的对齐方位："n"/"w"/"s"/"e"/"ne"/"nw"/"sw"/"se"/"center"</td></tr><tr class="even"><td><strong>x,y</strong></td><td>定义控件在窗体中左上方位置</td></tr><tr class="odd"><td><strong>relx,rely</strong></td><td>相对于父窗口的位置比例，取值范围： 0.0~1.0</td></tr><tr class="even"><td>height,width</td><td>控件的高度和宽度（单位为像素）</td></tr><tr class="odd"><td><strong>relheight,relwidth</strong></td><td>相对于父窗口的大小比例，取值范围： 0.0~1.0</td></tr></tbody></table><p><span style="color:red"><strong>注意：</strong></span>在一个父窗口中，place()可以和grid()或pack()方法混合使用，但grid()和pack()方法不能混合使用。</p><p>一般在应用中使用pack()和grid()方法比较多。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;Tkinter 多个控件被摆放到父窗口时，就需要进行布局管理（&lt;font color=&quot;#0000FF&quot;&gt;geometry management&lt;/font&gt;），tkinter中提供了三种管理方法，分别如下：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;pack()&lt;/li&gt;
&lt;/ul</summary>
      
    
    
    
    <category term="python" scheme="http://example.com/categories/python/"/>
    
    
    <category term="layout" scheme="http://example.com/tags/layout/"/>
    
  </entry>
  
  <entry>
    <title>Python tkinter 主窗口与控件</title>
    <link href="http://example.com/2024/01/01/Python-tkinter-%E4%B8%BB%E7%AA%97%E5%8F%A3%E4%B8%8E%E6%8E%A7%E4%BB%B6/"/>
    <id>http://example.com/2024/01/01/Python-tkinter-%E4%B8%BB%E7%AA%97%E5%8F%A3%E4%B8%8E%E6%8E%A7%E4%BB%B6/</id>
    <published>2024-01-01T12:54:24.000Z</published>
    <updated>2024-01-02T02:29:24.800Z</updated>
    
    <content type="html"><![CDATA[<h1 id="tkinter-主窗口">Tkinter 主窗口</h1><p>Hardware --&gt; OS --&gt; Tcl/Tk --&gt; tkinter --&gt; Python</p><p><font color="#FF33FF">tkinter module(Python 3.x --&gt; tkinter, Python 2.x --&gt; Tkinter)</font></p><p>导入 tkinter module： <code>from tkinter import *</code> or <code>import tkinter</code></p><p>创建主窗口,如: <code>window = Tk()</code> or <code>window = tkinter.Tk()</code></p><div class="code-wrapper"><pre><code class="hljs python">Tk(screenName=<span class="hljs-literal">None</span>, baseName=<span class="hljs-literal">None</span>, className=<span class="hljs-string">&#x27;Tk’, useTk=1)</span></code></pre></div><p>窗口的相关方法：</p><table><thead><tr class="header"><th>函数</th><th>说明</th></tr></thead><tbody><tr class="odd"><td>window.title("my title")</td><td>接受一个字符串参数，为窗口起一个标题</td></tr><tr class="even"><td>window.resizable()</td><td>是否允许用户拉伸主窗口大小，默认为可更改，当设置为 resizable(0,0)或者resizable(False,False)时不可更改,help(tkinter.Tk().resizable)</td></tr><tr class="odd"><td>window.geometry("widthxheight+x+y")</td><td>设定主窗口的大小以及位置，当参数值为 None 时表示获取窗口的大小和位置信息。</td></tr><tr class="even"><td>window.quit()</td><td>关闭当前窗口</td></tr><tr class="odd"><td>window.update()</td><td>刷新当前窗口</td></tr><tr class="even"><td>window.mainloop()</td><td>设置窗口主循环，使窗口循环显示（一直显示，指导窗口被关闭）</td></tr><tr class="odd"><td>window.iconbitmap('xx.ico')</td><td>设置窗口左上角的图标（图标是.ico文件类型）</td></tr><tr class="even"><td>window.config(background ="red")</td><td>设置窗口的背景色为红色，也可以接受 16 进制的颜色值</td></tr><tr class="odd"><td>window.minsize(50,50)</td><td>设置窗口被允许调整的最小范围，即宽和高各50</td></tr><tr class="even"><td>window.maxsize(400,400)</td><td>设置窗口被允许调整的最大范围，即宽和高各400</td></tr><tr class="odd"><td>window.attributes("-alpha",0.5)</td><td>用来设置窗口的一些属性，比如透明度（-alpha）、是否置顶（-topmost）即将主屏置于其他图标之上、是否全屏（-fullscreen）全屏显示等</td></tr><tr class="even"><td>window.state("normal")</td><td>用来设置窗口的显示状态，参数值 normal（正常显示），icon（最小化），zoomed（最大化），</td></tr><tr class="odd"><td>window.withdraw()</td><td>用来隐藏主窗口，但不会销毁窗口。</td></tr><tr class="even"><td>window.iconify()</td><td>设置窗口最小化</td></tr><tr class="odd"><td>window.deiconify()</td><td>将窗口从隐藏状态还原</td></tr><tr class="even"><td>window.winfo_screenwidth() window.winfo_screenheight()</td><td>获取电脑屏幕的分辨率（尺寸）</td></tr><tr class="odd"><td>window.winfo_width() window.winfo_height()</td><td>获取窗口的大小，同样也适用于其他控件，但是使用前需要使用 window.update() 刷新屏幕，否则返回值为1</td></tr><tr class="even"><td>window.protocol("协议名",回调函数)</td><td>启用协议处理机制，常用协议有 WN_DELETE_WINDOW，当用户点击关闭窗口时，窗口不会关闭，而是触发回调函数。</td></tr></tbody></table><h1 id="tkinter常用widgets">Tkinter常用widgets</h1><table><thead><tr class="header"><th>序号</th><th>控件类型</th><th>控件名称</th><th>控件作用</th></tr></thead><tbody><tr class="odd"><td>1</td><td>Button</td><td>按钮</td><td>点击按钮时触发/执行一些事件（函数）</td></tr><tr class="even"><td>2</td><td>Canvas</td><td>画布</td><td>提供绘制图，比如直线、矩形、多边形等</td></tr><tr class="odd"><td>3</td><td>Checkbutton</td><td>复选框</td><td>多项选择按钮，用于在程序中提供多项选择框</td></tr><tr class="even"><td>4</td><td>Entry</td><td>文本框输入框</td><td>用于接收单行文本输入</td></tr><tr class="odd"><td>5</td><td>Frame</td><td>框架（容器）</td><td>定义一个窗体（根窗口也是一个窗体），用于承载其他控件，作为其他控件的容器</td></tr><tr class="even"><td>6</td><td>Label</td><td>标签</td><td>用于显示单行文本或者图片</td></tr><tr class="odd"><td>7</td><td>LabelFrame</td><td>便签框架</td><td><font color="#FFCCE5">一个简单的容器控件，常用于复杂的窗口布局。？</font></td></tr><tr class="even"><td>8</td><td>Listbox</td><td>列表框</td><td>以列表的形式显示文本</td></tr><tr class="odd"><td>9</td><td>Menu</td><td>菜单</td><td>菜单组件（下拉菜单和弹出菜单）</td></tr><tr class="even"><td>10</td><td>MenuButton</td><td>菜单按钮</td><td>用于显示菜单项</td></tr><tr class="odd"><td>11</td><td>Message</td><td>信息</td><td>用于显示多行不可编辑的文本，与 Label控件类似，增加了自动分行的功能</td></tr><tr class="even"><td>12</td><td>MessageBox</td><td>消息框</td><td>定义与用户交互的消息对话框</td></tr><tr class="odd"><td>13</td><td>OptionMenu</td><td>选项菜单</td><td>下拉菜单</td></tr><tr class="even"><td>14</td><td>PanedWindow</td><td>面板</td><td>为组件提供一个框架，允许用户自己划分窗口空间</td></tr><tr class="odd"><td>15</td><td>Radiobutton</td><td>单选框</td><td>单项选择按钮，只允许从多个选项中选择一项</td></tr><tr class="even"><td>16</td><td>Scale</td><td>进度条</td><td>定义一个线性“滑块”用来控制范围，可以设定起始值和结束值，并显示当前位置的精确值</td></tr><tr class="odd"><td>17</td><td>Spinbox</td><td>微调输入框</td><td>Entry 控件的升级版，可以通过该组件的上、下箭头选择不同的值</td></tr><tr class="even"><td>18</td><td>Scrollbar</td><td>滚动条</td><td>默认垂直方向，鼠标拖动改变数值，可以和 Text、Listbox、Canvas等控件配合使用</td></tr><tr class="odd"><td>19</td><td>Text</td><td>多行文本框</td><td>接收或输出多行文本内容</td></tr><tr class="even"><td>20</td><td>Toplevel</td><td>上层窗口</td><td>在创建一个独立于主窗口之外的子窗口，位于主窗口的上一层，可作为其他控件的容器</td></tr></tbody></table><h1 id="widgets共同属性与方法">widgets共同属性与方法</h1><table><thead><tr class="header"><th>属性名称</th><th>说明</th></tr></thead><tbody><tr class="odd"><td>anchor</td><td>定义控件或者文字信息在窗口内的位置("n" 、"ne" 、"e" 、"se" 、"s" 、"sw" 、"w" 、"nw" 和 "center")</td></tr><tr class="even"><td>bg</td><td>bg 是 background 的缩写，用来定义控件的背景颜色，参数值可以颜色的十六进制数，或者颜色英文单词</td></tr><tr class="odd"><td>bitmap</td><td>定义显示在控件内的位图文件</td></tr><tr class="even"><td>borderwidth (bd)</td><td>定于控件的边框宽度，单位是像素</td></tr><tr class="odd"><td>command</td><td>该参数用于执行事件函数，比如单击按钮时执行特定的动作，可将执行用户自定义的函数</td></tr><tr class="even"><td>cursor</td><td>当鼠标指针移动到控件上时，定义鼠标指针的类型，字符换格式，参数值有 crosshair（十字光标）watch（待加载圆圈）plus（加号）arrow（箭头）等</td></tr><tr class="odd"><td>font</td><td>若控件支持设置标题文字，就可以使用此属性来定义，它是一个数组格式的参数 (字体,大小，字体样式)</td></tr><tr class="even"><td>fg</td><td>fg 是 foreground 的缩写，用来定义控件的前景色，也就是字体的颜色</td></tr><tr class="odd"><td>height</td><td>该参数值用来设置控件的高度，文本控件以字符的数目为高度（px），其他控件则以像素为单位</td></tr><tr class="even"><td>image</td><td>定义显示在控件内的图片文件</td></tr><tr class="odd"><td>justify</td><td>定义多行文字的排列方式，此属性可以是 LEFT/CENTER/RIGHT</td></tr><tr class="even"><td>padx/pady</td><td>定义控件内的文字或者图片与控件边框之间的水平/垂直距离</td></tr><tr class="odd"><td>relief</td><td>定义控件的边框样式，参数值为FLAT（平的）/RAISED（凸起的）/SUNKEN（凹陷的）/GROOVE（沟槽桩边缘）/RIDGE（脊状边缘）</td></tr><tr class="even"><td>text 文本</td><td>定义控件的标题文字</td></tr><tr class="odd"><td>state 状态</td><td>控制控件是否处于可用状态，参数值默认为 NORMAL/DISABLED，默认为 NORMAL（正常的）</td></tr><tr class="even"><td>width</td><td>用于设置控件的宽度，使用方法与 height 相同</td></tr><tr class="odd"><td>config(option=value)</td><td>设置属性</td></tr><tr class="even"><td>cget(''option')</td><td>取得option参数值</td></tr><tr class="odd"><td>keys()</td><td>获取该widget参数</td></tr><tr class="even"><td>quit()</td><td>python shell窗口结束，但所建窗口继续执行</td></tr><tr class="odd"><td>update()</td><td>更新窗口画面</td></tr><tr class="even"><td>bind(event, callback)</td><td>事件绑定</td></tr><tr class="odd"><td>unbind(event)</td><td>解除事件绑定</td></tr><tr class="even"><td>after(time, callback)</td><td>间隔指定时间后，调用callback()方法</td></tr></tbody></table><h1 id="tkinter.ttk模块增加的widgets">tkinter.ttk模块增加的widgets</h1><table><thead><tr class="header"><th>序号</th><th>控件类型</th><th>控件名称</th><th>控件作用</th></tr></thead><tbody><tr class="odd"><td>1</td><td>Combobox</td><td>组合框</td><td>Entry与下拉菜单组合的控件</td></tr><tr class="even"><td>2</td><td>Notebook</td><td>选项卡容器</td><td>可有多个选项卡，承载不同的子控件内容</td></tr><tr class="odd"><td>3</td><td>Progressbar</td><td>进度条</td><td>通过进度指针显示当前阶段</td></tr><tr class="even"><td>4</td><td>Separator</td><td>分割线</td><td>增加视觉效果</td></tr><tr class="odd"><td>5</td><td>Sizegrip</td><td>大小控制</td><td>拖拽更改窗口大小</td></tr><tr class="even"><td>6</td><td>Treeview</td><td>树状表格视图</td><td>将内容分层隐藏与显示</td></tr></tbody></table>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;tkinter-主窗口&quot;&gt;Tkinter 主窗口&lt;/h1&gt;
&lt;p&gt;Hardware --&amp;gt; OS --&amp;gt; Tcl/Tk --&amp;gt; tkinter --&amp;gt; Python&lt;/p&gt;
&lt;p&gt;&lt;font color=&quot;#FF33FF&quot;&gt;tkinte</summary>
      
    
    
    
    <category term="python" scheme="http://example.com/categories/python/"/>
    
    
    <category term="python" scheme="http://example.com/tags/python/"/>
    
    <category term="tkinter" scheme="http://example.com/tags/tkinter/"/>
    
  </entry>
  
  <entry>
    <title>Python基础</title>
    <link href="http://example.com/2024/01/01/Python-%E5%9F%BA%E7%A1%80/"/>
    <id>http://example.com/2024/01/01/Python-%E5%9F%BA%E7%A1%80/</id>
    <published>2024-01-01T09:44:15.000Z</published>
    <updated>2024-01-04T09:22:40.459Z</updated>
    
    <content type="html"><![CDATA[<h1 id="python的基本知识点">Python的基本知识点</h1><ul><li><p>Python官方文档：<a href="https://docs.python.org/3/">3.12.1 Documentation (python.org)</a></p></li><li><p><a href="https://www.bookstack.cn/books/python-3.12.0-zh">Python 中文文档(全)</a></p></li><li><p>Python Shell环境输入<code>import this</code> ， 可显示Python编程的理念，简约而清晰。</p></li><li><p>注释符：</p><ul><li>单行注释：<code>#</code></li><li>多行注释：<code>'''</code> or <code>"""</code></li></ul></li><li><p><strong>ptpython</strong> 是一个增强型交互 python shell， 具有 <strong>语法高亮、自动补全、自动建议、自动缩进</strong> 等便捷功能，<code>pip install ptpython</code></p></li><li><p>Python中主要的数据结构：列表、元组、字典、集合</p></li><li><p>```python help('modules') # 查看python所有modules <div class="code-wrapper"><pre><code class="hljs bash">  - ```python  <span class="hljs-built_in">dir</span>(__builtins__)  <span class="hljs-comment"># 查看Python所有内置函数,表达式及其它对象</span>  <span class="hljs-built_in">help</span>(__builtins__) <span class="hljs-comment"># 内置函数、表达式及其它对象详细描述</span>    <span class="hljs-built_in">dir</span>(<span class="hljs-string">&#x27;&#x27;</span>) <span class="hljs-comment"># 查看内置模块字符串类方法</span>  <span class="hljs-built_in">help</span>(<span class="hljs-string">&#x27;&#x27;</span>) <span class="hljs-comment"># 字符串类详细描述</span>    <span class="hljs-built_in">dir</span>(0) <span class="hljs-comment"># 查看整数对象方法</span>  <span class="hljs-built_in">help</span>(0) <span class="hljs-comment"># 整数对象详细描述</span>    <span class="hljs-built_in">dir</span>([]) <span class="hljs-comment"># 查看列表对象的方法</span>  <span class="hljs-built_in">help</span>([]) <span class="hljs-comment"># 列表对象详细描述</span>    <span class="hljs-built_in">dir</span>(()) <span class="hljs-comment"># 查看元组对象的方法</span>  <span class="hljs-built_in">help</span>(()) <span class="hljs-comment"># 元组对象详细描述</span>    <span class="hljs-built_in">dir</span>(&#123;&#125;) <span class="hljs-comment"># 查看字典对象的方法</span>  <span class="hljs-built_in">help</span>(&#123;&#125;) <span class="hljs-comment"># 字典对象详细描述</span>    <span class="hljs-built_in">dir</span>(<span class="hljs-built_in">set</span>()) <span class="hljs-comment"># 查看集合对象的方法</span>  <span class="hljs-built_in">help</span>(<span class="hljs-built_in">set</span>()) <span class="hljs-comment"># 集合对象详细描述</span></code></pre></div></p></li><li><p>Python运算优先级：次方(**) &gt; 乘除，求余(%)，求整(//) &gt; 加减</p></li><li><p><code>divmod()</code> 函数可以一次获得商和余数</p></li><li><p><code>id()</code> 可查看变量十进制地址。</p></li><li><p><code>type()</code> 函数可列出变量的数据类型</p></li><li><p>字符串前加 <code>r</code> ,可取消转义字符含义</p></li><li><p><code>chr()</code> # 回传ASCII字符</p></li><li><p><code>ord()</code> # 回传Unicode码</p></li><li><p><code>bytes()</code> # 回传bytes数据，内容不可变</p></li><li><p><code>bytearray()</code> # 回传bytearray数据，内容可变</p></li><li><p>字符串格式输出</p><ul><li><code>print('%s - %d - %f' % (str1, num, score))</code></li><li><code>print('&#123;&#125; - &#123;&#125; - &#123;&#125;'.format(str1, num, score))</code></li><li><code>print(f'&#123;score&#125;')</code> # v3.6版本后</li></ul></li><li><p><code>eval(input(''))</code> 可处理字符串中数学表达式</p></li><li><p><code>enumerate(iterable, start = 0)</code> # 可迭代对象更改索引值</p></li><li><p><code>新列表 = [表达式 for 项目 in 可迭代对象]</code> # 生成式列表</p></li><li><p>元组内只有一个元素，在定义时要在右边加上逗号</p></li><li><p><code>zip()</code> # 对多个可迭代对象打包</p></li><li><p><code>zip(*)</code> # unzip</p></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;python的基本知识点&quot;&gt;Python的基本知识点&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Python官方文档：&lt;a href=&quot;https://docs.python.org/3/&quot;&gt;3.12.1 Documentation (python.org)&lt;/a&gt;&lt;</summary>
      
    
    
    
    <category term="python" scheme="http://example.com/categories/python/"/>
    
    
    <category term="python" scheme="http://example.com/tags/python/"/>
    
  </entry>
  
  <entry>
    <title>STM32CubeMX+VScode搭建STM32开发环境</title>
    <link href="http://example.com/2023/11/18/STM32CubeMX-VScode%E6%90%AD%E5%BB%BASTM32%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83/"/>
    <id>http://example.com/2023/11/18/STM32CubeMX-VScode%E6%90%AD%E5%BB%BASTM32%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83/</id>
    <published>2023-11-18T07:19:27.000Z</published>
    <updated>2023-11-20T08:51:45.735Z</updated>
    
    <content type="html"><![CDATA[<p>市面上开发STM32使用的IDE软件有很多，像常用的 <strong>Keil</strong> 和 <strong>IAR</strong>，国外比较流行的 <strong>mikroC PRO</strong> ，以及ST公司自己推出的免费 <strong>STM32CubeIDE</strong> ，前面三款软件牵涉到版权收费问题，虽说 <strong>STM32CubeIDE</strong> 是免费的，但体积比较大，启动比较慢，所以，很多开发人员选择微软的 <strong>VSCode</strong> 来进行开发，而开发环境需要自己来进行配置，具体配置如下：</p><h2 id="下载开发软件">下载开发软件</h2><p>现在很多软件和插件对windows电脑的<font color="#FF007F"><strong>最低要求是Win10</strong></font>，所以这里以我的电脑Win10 64位来进行操作。</p><p>下载的软件有：</p><ul><li><a href="https://code.visualstudio.com/">Visual Studio Code</a></li></ul><p>主要的文本编辑软件，官网下载比较慢，可以进入 <strong><a href="https://code.visualstudio.com/updates/">Updates</a></strong> 栏进行下载。</p><p><img src="https://gitee.com/kayoungzhang/picgo_res/raw/master/img/image-20231118160017135.png" alt="image-20231118160017135" style="zoom:50%;" /></p><ul><li><a href="https://www.st.com/zh/development-tools/stm32cubemx.html">STM32cubeMX</a></li></ul><p>ST推出的图形化配置工具，注册后即可下载。操作说明：<a href="https://www.stmcu.com.cn/ecosystem/Cube/STM32cubemx">生态系统 | STMCU中文官网</a></p><p><img src="https://gitee.com/kayoungzhang/picgo_res/raw/master/img/image-20231118155902022.png" alt="image-20231118155902022" style="zoom:50%;" /></p><ul><li><a href="%5BArm%20GNU%20Toolchain%20Downloads%20–%20Arm%20Developer%5D(https://developer.arm.com/downloads/-/arm-gnu-toolchain-downloads)">arm-gnu-toolchain</a></li></ul><p>Windows (mingw-w64-i686)下交叉编译工具链，主要使用里面的gcc工具链。</p><p><img src="https://gitee.com/kayoungzhang/picgo_res/raw/master/img/image-20231118155746858.png" alt="image-20231118155746858" style="zoom:50%;" /></p><ul><li><a href="https://www.gnutoolchains.com/arm-eabi/openocd/">OpenOCD</a></li></ul><p>开源的GDB调试软件。</p><p><img src="https://gitee.com/kayoungzhang/picgo_res/raw/master/img/image-20231118160350697.png" alt="image-20231118160350697" style="zoom:50%;" /></p><ul><li><a href="https://gnuwin32.sourceforge.net/packages/make.htm">GNU make</a></li></ul><p>工程的构建工具，通过 <strong>makefile</strong> 脚本文件，自动进行编译处理过程。</p><p><img src="https://gitee.com/kayoungzhang/picgo_res/raw/master/img/image-20231118160902580.png" alt="image-20231118160902580" style="zoom:50%;" /></p><h1 id="软件安装与环境变量配置">软件安装与环境变量配置</h1><p><strong>VS Code</strong> 和 <strong>STM32CubeMX</strong> 及 <strong>GNU make</strong> 按照正常方式安装即可，<strong>arm-gnu-toolchain</strong> 和 <strong>OpenOCD</strong> 是压缩包，将它们解压到某个盘（如：<strong>D:\Program Files (x86)文件夹下</strong>）， 然后将它们的<font color="#FF00FF"><strong>bin文件夹路径</strong></font>添加到环境变量的<strong>PATH</strong>中。</p><figure><img src="https://gitee.com/kayoungzhang/picgo_res/raw/master/img/image-20231118161850553.png" alt="" /><figcaption>image-20231118161850553</figcaption></figure><h1 id="vs-code插件安装">VS Code插件安装</h1><p>打开 <strong>VS code</strong> ，安装以下插件：</p><ul><li><strong>C/C++</strong></li></ul><p>VS code中对C和C++的支持</p><ul><li><strong>Cortex-Debug</strong></li></ul><p>调试功能，支持寄存器查看、内存查看、断点调试、变量观察等功能。</p><ul><li><strong>stm32-for-vscode</strong></li></ul><p>编译、调试和烧录STM32项目的扩展，自动完成 <strong>.vscode文件夹</strong> json文件的编写。</p><ul><li><strong>aiXcoder Code Completer 或 Tabnine</strong></li></ul><p>代码提示扩展</p><h1 id="创建stm32-hal工程">创建STM32 HAL工程</h1><p>通过STM32CubeMX新建一个工程，正常创建即可，只需要注意选择工具链为 <strong><font color="#FF3333">Makefile</font></strong></p><p><img src="https://gitee.com/kayoungzhang/picgo_res/raw/master/img/image-20231118163633024.png" alt="image-20231118163633024" style="zoom:67%;" /></p><h1 id="vs-code编译下载">VS Code编译下载</h1><p>进入刚刚创建的STM32工程文件夹，使用VS Code打开文件夹。</p><p><img src="https://gitee.com/kayoungzhang/picgo_res/raw/master/img/image-20231118164336856.png" alt="image-20231118164336856" style="zoom:67%;" /></p><p>工程打开后，左侧会出现 <strong>stm32-for-vscode</strong> 插件，如果环境变量配置OK，它会自动进行适配，如下：</p><p><img src="https://gitee.com/kayoungzhang/picgo_res/raw/master/img/image-20231118165358844.png" alt="image-20231118165358844" style="zoom:50%;" /></p><p>如果没有出现以上画面，则需要自己进入插件设置，进行路径的配置。</p><p><img src="https://gitee.com/kayoungzhang/picgo_res/raw/master/img/image-20231118165049806.png" alt="image-20231118165049806" style="zoom:50%;" /></p><p>点击 <strong>Build</strong> ，即可看到 <strong>TERMINAL</strong> 栏的编译过程，如果一切正常，最终会生成hex和bin文件。</p><p><img src="https://gitee.com/kayoungzhang/picgo_res/raw/master/img/image-20231118165612525.png" alt="image-20231118165612525" style="zoom:80%;" /></p><p>需要烧录程序时，因为默认的烧录器是 <strong>stlink</strong>， 我这里是 <strong>daplink</strong> ，点击 <strong>Change Programmer</strong> ，选择 <strong>daplink</strong> ，插上烧录器，上电，然后点击 <strong>Flash STM32</strong> 即可完成程序的下载。</p><p><img src="https://gitee.com/kayoungzhang/picgo_res/raw/master/img/image-20231118170208735.png" alt="image-20231118170208735" style="zoom:67%;" /></p><p>至于调试，点击 <strong>Debug STM32</strong> ，弹出调试界面，进行openocd的调试即可， 好了，以上就是 VS code 开发STM32环境的搭建过程。</p><p>另外，在keil中调用printf 需要重载<code>putc</code>函数，这里因为使用的是gcc编译器，所以需要重载 <code>_write</code> 函数：</p><div class="code-wrapper"><pre><code class="hljs c"><span class="hljs-type">int</span> _write(<span class="hljs-type">int</span> fd, <span class="hljs-type">char</span> *ch, <span class="hljs-type">int</span> len)&#123;  HAL_UART_Transmit(&amp;huart1, (<span class="hljs-type">uint8_t</span>*)ch, len, <span class="hljs-number">0xFFFF</span>);  <span class="hljs-keyword">return</span> len;&#125;</code></pre></div><p><strong>参考链接：</strong></p><p><a href="https://blog.csdn.net/gorgeousa/article/details/129525234">vscode stm32cubemx 优雅开发stm32，最简单步骤教程_vscode怎么开发stm32_合理说明的博客-CSDN博客</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;市面上开发STM32使用的IDE软件有很多，像常用的 &lt;strong&gt;Keil&lt;/strong&gt; 和 &lt;strong&gt;IAR&lt;/strong&gt;，国外比较流行的 &lt;strong&gt;mikroC PRO&lt;/strong&gt; ，以及ST公司自己推出的免费 &lt;strong&gt;STM32C</summary>
      
    
    
    
    <category term="stm32" scheme="http://example.com/categories/stm32/"/>
    
    
    <category term="stm32" scheme="http://example.com/tags/stm32/"/>
    
  </entry>
  
  <entry>
    <title>锂电池充放电方案</title>
    <link href="http://example.com/2023/11/16/%E9%94%82%E7%94%B5%E6%B1%A0%E5%85%85%E6%94%BE%E7%94%B5%E6%96%B9%E6%A1%88/"/>
    <id>http://example.com/2023/11/16/%E9%94%82%E7%94%B5%E6%B1%A0%E5%85%85%E6%94%BE%E7%94%B5%E6%96%B9%E6%A1%88/</id>
    <published>2023-11-16T12:55:49.000Z</published>
    <updated>2023-11-16T14:34:12.990Z</updated>
    
    <content type="html"><![CDATA[<p>对于便携式设备来讲，锂电池作为电源，在应用中必不可少，一般锂电池标称电压3.7V,充满电后4.2V，我们在设计锂电池充放电功能的时候需要考虑其保护电路、充电电路、电量检测电路、电源转换电路。</p><h1 id="保护电路的设计">保护电路的设计</h1><p>锂电池保护电路主要过充和过放保护，使用集成芯片对锂电池进行保护，如深圳富满的 <strong>DW03D芯片</strong>，它具有过充，过放，过流，短路等所有电池所需保护功能，采用TSSOP-8封装，面积占用小，外围电路也非常简单。</p><figure><img src="https://gitee.com/kayoungzhang/picgo_res/raw/master/img/image-20231116211206743.png" alt="" /><figcaption>image-20231116211206743</figcaption></figure><figure><img src="https://gitee.com/kayoungzhang/picgo_res/raw/master/img/image-20231116211127222.png" alt="" /><figcaption>image-20231116211127222</figcaption></figure><p>这是消费电子产品中常用的锂电池保护芯片，还有其它保护芯片，一般电池都自带有保护电路，为了方便，选用时可选带有保护电路的锂电池。</p><h1 id="充电电路的设计">充电电路的设计</h1><p>锂电池充电芯片非常多，有TI、ADI、MPS这些大厂的充电芯片，国内也有很多充电芯片，像南京拓品微、上海贝岭、深圳富满电子、英集芯等。这些充电芯片有的也包含有保护电路的部分。</p><ul><li><strong>充电电流小</strong></li></ul><p>如果充电电流较小，可以选用 <strong>线性充电芯片</strong>，比如 <strong>TP4056、TC4056、TC4054</strong> 等，这类充电芯片最大电流1A，外围电路简单，但发热比较大。</p><figure><img src="https://gitee.com/kayoungzhang/picgo_res/raw/master/img/image-20231116213108065.png" alt="" /><figcaption>image-20231116213108065</figcaption></figure><ul><li><strong>充电电流大</strong></li></ul><p>如果充电电流较大，就必须要用 <strong>开关降压型芯片</strong>，这类芯片充电电流大，可达2A或更高，但发热量小，典型的有 <strong>TP5000、IP5306</strong> 等。</p><figure><img src="https://gitee.com/kayoungzhang/picgo_res/raw/master/img/image-20231116213150850.png" alt="" /><figcaption>image-20231116213150850</figcaption></figure><h1 id="电量检测电路设计">电量检测电路设计</h1><p>在使用的时候需要对电池的电量做检测，防止设备欠压，出现故障。</p><ul><li><strong>电阻分压的方案</strong></li></ul><p>对电池电压使用分压电阻分压，然后直接使用AD进行检测，根据其一个周期的放电曲线和AD值计算出简单的电量，这种方法成本低。（<a href="https://blog.csdn.net/switch_love_case/article/details/113553837">低功耗产品ADC精确测量电池电压（电量）_adc电池电量采集</a>）</p><p><img src="https://gitee.com/kayoungzhang/picgo_res/raw/master/img/image-20231116215139377.png" alt="image-20231116215139377" style="zoom: 67%;" /></p><ul><li><strong>芯片方案</strong></li></ul><p>使用专业的库仑计IC检测电量，这类芯片通过I2C总线来传输电量信息，检测比较准确，如<strong>TI的BQ27541</strong>、<strong>美信的MAX17043</strong>、还有<strong>凌特的LTC2644</strong>，国内的如大疆和智能手机都在使用的 <strong>CW2015</strong> 。</p><figure><img src="https://gitee.com/kayoungzhang/picgo_res/raw/master/img/image-20231116220010964.png" alt="" /><figcaption>image-20231116220010964</figcaption></figure><figure><img src="https://gitee.com/kayoungzhang/picgo_res/raw/master/img/image-20231116220316629.png" alt="" /><figcaption>image-20231116220316629</figcaption></figure><figure><img src="https://gitee.com/kayoungzhang/picgo_res/raw/master/img/image-20231116220534950.png" alt="" /><figcaption>image-20231116220534950</figcaption></figure><figure><img src="https://gitee.com/kayoungzhang/picgo_res/raw/master/img/image-20231116220550595.png" alt="" /><figcaption>image-20231116220550595</figcaption></figure><h1 id="电源转换电路的设计">电源转换电路的设计</h1><p>电池供电一般都比较小，要给后端设备提供稳定的电压，就需要进行转换处理。</p><ul><li><strong>PMIC电池电源管理</strong></li></ul><p>在一些复杂的设备中，一般会有一颗PMIC电池电源管理芯片，这类芯片集成了多路DCDC、多路LDO、电源路径管理、锂电池充放电管理，锂电池电量检测等。一般多数情况下使用不到。如ST的 <strong>STPMIC1</strong></p><figure><img src="https://gitee.com/kayoungzhang/picgo_res/raw/master/img/image-20231116221514278.png" alt="" /><figcaption>image-20231116221514278</figcaption></figure><ul><li><strong>升降压转换</strong></li></ul><p>使用升压或降压芯片对锂电池电压进行处理。</p><figure><img src="https://gitee.com/kayoungzhang/picgo_res/raw/master/img/image-20231116221733398.png" alt="" /><figcaption>image-20231116221733398</figcaption></figure><ul><li><strong>充电升压一体集成芯片</strong></li></ul><p>用集成的充电和升压一体IC进行升压，然后使用DCDC进行降压，如 <strong>TP5400、IP5109、IP5318、IP5306</strong> 等。这类IC有放电保护，一般放电截止电压在3V左右。</p><figure><img src="https://gitee.com/kayoungzhang/picgo_res/raw/master/img/image-20231116222607678.png" alt="" /><figcaption>image-20231116222607678</figcaption></figure><figure><img src="https://gitee.com/kayoungzhang/picgo_res/raw/master/img/image-20231116222628162.png" alt="" /><figcaption>image-20231116222628162</figcaption></figure><figure><img src="https://gitee.com/kayoungzhang/picgo_res/raw/master/img/image-20231116222937890.png" alt="" /><figcaption>image-20231116222937890</figcaption></figure><p>锂电池相关的芯片有很多，对于产品不同的需求，可根据应用进行不同的取舍，有的芯片在使用过程中，也会出现各种问题，所以，在选择时也需要认真考虑。</p><p><strong>参考链接：</strong></p><p><a href="https://mp.weixin.qq.com/s/WkLsDG0sdHt2pWuwGOsb6g">折腾一下锂电池供电方案 (qq.com)</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;对于便携式设备来讲，锂电池作为电源，在应用中必不可少，一般锂电池标称电压3.7V,充满电后4.2V，我们在设计锂电池充放电功能的时候需要考虑其保护电路、充电电路、电量检测电路、电源转换电路。&lt;/p&gt;
&lt;h1 id=&quot;保护电路的设计&quot;&gt;保护电路的设计&lt;/h1&gt;
&lt;p&gt;锂电</summary>
      
    
    
    
    <category term="硬件" scheme="http://example.com/categories/%E7%A1%AC%E4%BB%B6/"/>
    
    
    <category term="锂电池" scheme="http://example.com/tags/%E9%94%82%E7%94%B5%E6%B1%A0/"/>
    
  </entry>
  
</feed>
