<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Hexo</title>
  
  
  <link href="http://example.com/atom.xml" rel="self"/>
  
  <link href="http://example.com/"/>
  <updated>2023-10-07T06:43:43.429Z</updated>
  <id>http://example.com/</id>
  
  <author>
    <name>John Doe</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>解决Microsoft Edge浏览器关于“根据热门内容向你推荐”的问题</title>
    <link href="http://example.com/2023/10/07/%E8%A7%A3%E5%86%B3Microsoft-Edge%E6%B5%8F%E8%A7%88%E5%99%A8%E5%85%B3%E4%BA%8E%E2%80%9C%E6%A0%B9%E6%8D%AE%E7%83%AD%E9%97%A8%E5%86%85%E5%AE%B9%E5%90%91%E4%BD%A0%E6%8E%A8%E8%8D%90%E2%80%9D%E7%9A%84%E9%97%AE%E9%A2%98/"/>
    <id>http://example.com/2023/10/07/%E8%A7%A3%E5%86%B3Microsoft-Edge%E6%B5%8F%E8%A7%88%E5%99%A8%E5%85%B3%E4%BA%8E%E2%80%9C%E6%A0%B9%E6%8D%AE%E7%83%AD%E9%97%A8%E5%86%85%E5%AE%B9%E5%90%91%E4%BD%A0%E6%8E%A8%E8%8D%90%E2%80%9D%E7%9A%84%E9%97%AE%E9%A2%98/</id>
    <published>2023-10-07T05:32:42.000Z</published>
    <updated>2023-10-07T06:43:43.429Z</updated>
    
    <content type="html"><![CDATA[<p>在使用微软的Edge浏览器搜索时，当我们点开某个页面后，它会自动在原网页弹出推荐的内容，如下所示：</p><p><img src="https://gitee.com/kayoungzhang/picgo_res/raw/master/img/image-20231007135553301.png" alt="image-20231007135553301" style="zoom:80%;" /></p><p>通常情况下，它占用了屏幕大部分空间，且弹出的内容好多并无作用，浪费了浏览时间。在浏览器的设置中，并没有这个设置项。因为这个是点击所触发的情况，所以可以利用广告拦截的方式进行处理，具体操作如下：</p><ol type="1"><li>在浏览器扩展应用商店中搜索“<strong>广告拦截</strong>”,安装一个广告拦截器插件（我这里选择 AdGuard）:</li></ol><p><img src="https://gitee.com/kayoungzhang/picgo_res/raw/master/img/image-20231007141805618.png" alt="image-20231007141805618" style="zoom:80%;" /></p><ol start="2" type="1"><li>安装完插件后，在搜索页面 <strong>鼠标右键 =&gt; AdGuard广告拦截器 =&gt; 拦截此网站上的广告</strong> ，选择搜索页面弹出的推荐外框，点击拦截即可。</li></ol><figure><img src="https://gitee.com/kayoungzhang/picgo_res/raw/master/img/image-20231007143227303.png" alt="" /><figcaption>image-20231007143227303</figcaption></figure><p>这样设置后，就不会再弹出推荐的内容了，完美解决。</p><p><strong>参考：</strong></p><p><a href="https://blog.csdn.net/qq_42920270/article/details/128224356">拦截Edge的“根据热门内容向您推荐”_buding0716的博客-CSDN博客</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;在使用微软的Edge浏览器搜索时，当我们点开某个页面后，它会自动在原网页弹出推荐的内容，如下所示：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://gitee.com/kayoungzhang/picgo_res/raw/master/img/image-2023100</summary>
      
    
    
    
    <category term="其它" scheme="http://example.com/categories/%E5%85%B6%E5%AE%83/"/>
    
    
    <category term="Edge" scheme="http://example.com/tags/Edge/"/>
    
  </entry>
  
  <entry>
    <title>FreeRTOS中内存管理(HeapMemory)</title>
    <link href="http://example.com/2023/10/06/FreeRTOS%E4%B8%AD%E5%86%85%E5%AD%98%E7%AE%A1%E7%90%86-HeapMemory/"/>
    <id>http://example.com/2023/10/06/FreeRTOS%E4%B8%AD%E5%86%85%E5%AD%98%E7%AE%A1%E7%90%86-HeapMemory/</id>
    <published>2023-10-06T13:58:26.000Z</published>
    <updated>2023-10-07T05:27:42.353Z</updated>
    
    <content type="html"><![CDATA[]]></content>
    
    
      
      
    <summary type="html">
</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>FreeRTOS中互斥量(Mutexes)</title>
    <link href="http://example.com/2023/10/06/FreeRTOS%E4%B8%AD%E4%BA%92%E6%96%A5%E9%87%8F-Mutexes/"/>
    <id>http://example.com/2023/10/06/FreeRTOS%E4%B8%AD%E4%BA%92%E6%96%A5%E9%87%8F-Mutexes/</id>
    <published>2023-10-06T13:50:32.000Z</published>
    <updated>2023-10-07T05:27:42.353Z</updated>
    
    <content type="html"><![CDATA[]]></content>
    
    
      
      
    <summary type="html">
</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>FreeRTOS中中断(Interrupt)</title>
    <link href="http://example.com/2023/10/06/FreeRTOS%E4%B8%AD%E4%B8%AD%E6%96%AD-Interrupt/"/>
    <id>http://example.com/2023/10/06/FreeRTOS%E4%B8%AD%E4%B8%AD%E6%96%AD-Interrupt/</id>
    <published>2023-10-06T13:47:57.000Z</published>
    <updated>2023-10-07T05:27:42.353Z</updated>
    
    <content type="html"><![CDATA[]]></content>
    
    
      
      
    <summary type="html">
</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>FreeRTOS中事件组(EventGroups)</title>
    <link href="http://example.com/2023/10/06/FreeRTOS%E4%B8%AD%E4%BA%8B%E4%BB%B6%E7%BB%84-EventGroups/"/>
    <id>http://example.com/2023/10/06/FreeRTOS%E4%B8%AD%E4%BA%8B%E4%BB%B6%E7%BB%84-EventGroups/</id>
    <published>2023-10-06T13:46:34.000Z</published>
    <updated>2023-10-07T05:27:42.353Z</updated>
    
    <content type="html"><![CDATA[]]></content>
    
    
      
      
    <summary type="html">
</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>FreeRTOS中软件定时器(SoftwareTimer)</title>
    <link href="http://example.com/2023/10/06/FreeRTOS%E4%B8%AD%E8%BD%AF%E4%BB%B6%E5%AE%9A%E6%97%B6%E5%99%A8-SoftwareTimer/"/>
    <id>http://example.com/2023/10/06/FreeRTOS%E4%B8%AD%E8%BD%AF%E4%BB%B6%E5%AE%9A%E6%97%B6%E5%99%A8-SoftwareTimer/</id>
    <published>2023-10-06T13:45:35.000Z</published>
    <updated>2023-10-07T05:27:42.353Z</updated>
    
    <content type="html"><![CDATA[]]></content>
    
    
      
      
    <summary type="html">
</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>FreeRTOS中任务通知(TaskNotifications)</title>
    <link href="http://example.com/2023/10/06/FreeRTOS%E4%B8%AD%E4%BB%BB%E5%8A%A1%E9%80%9A%E7%9F%A5-TaskNotifications/"/>
    <id>http://example.com/2023/10/06/FreeRTOS%E4%B8%AD%E4%BB%BB%E5%8A%A1%E9%80%9A%E7%9F%A5-TaskNotifications/</id>
    <published>2023-10-06T13:45:01.000Z</published>
    <updated>2023-10-07T05:27:42.353Z</updated>
    
    <content type="html"><![CDATA[]]></content>
    
    
      
      
    <summary type="html">
</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>FreeRTOS中信号量(Semaphore)</title>
    <link href="http://example.com/2023/10/05/FreeRTOS%E4%B8%AD%E4%BF%A1%E5%8F%B7%E9%87%8F(Semaphore)/"/>
    <id>http://example.com/2023/10/05/FreeRTOS%E4%B8%AD%E4%BF%A1%E5%8F%B7%E9%87%8F(Semaphore)/</id>
    <published>2023-10-05T13:47:08.000Z</published>
    <updated>2023-10-07T05:27:42.353Z</updated>
    
    <content type="html"><![CDATA[]]></content>
    
    
      
      
    <summary type="html">
</summary>
      
    
    
    
    <category term="RTOS" scheme="http://example.com/categories/RTOS/"/>
    
    
    <category term="Semaphore" scheme="http://example.com/tags/Semaphore/"/>
    
  </entry>
  
  <entry>
    <title>FreeRTOS中队列(Queue)</title>
    <link href="http://example.com/2023/10/05/FreeRTOS%E4%B8%AD%E9%98%9F%E5%88%97(Queue)/"/>
    <id>http://example.com/2023/10/05/FreeRTOS%E4%B8%AD%E9%98%9F%E5%88%97(Queue)/</id>
    <published>2023-10-05T13:46:36.000Z</published>
    <updated>2023-10-07T05:27:42.369Z</updated>
    
    <content type="html"><![CDATA[<p>在Free RTOS中，队列是任务间通信的主要形式。它们可以用于在任务之间、中断和任务之间发送消息。下面来看看队列的相关内容。</p><h1 id="队列特性">队列特性</h1><ol type="1"><li><strong>数据存储（Data Storage）</strong></li></ol><p>队列通常用作先进先出（FIFO）缓冲区，其中数据被写入队列的末尾（尾部），并从队列的前端（头部）移除。队列可以容纳有限数量（长度）的固定大小的数据项。每个数据项的长度和大小都是在创建队列时设置的。</p><figure><img src="https://gitee.com/kayoungzhang/picgo_res/raw/master/img/queue_animation.gif" alt="" /><figcaption>img</figcaption></figure><p>上图展示创建的队列可容纳5个项目，Task A向队列中写入数据，Task B从队列中读取数据，队列中数据被读取后就会被删除，头部就会指向下一个数据。</p><p>队列中数据传输有两种方式：</p><ul><li><strong>拷贝</strong>：把数据、把变量的值复制进队列里</li><li><strong>引用</strong>：把数据、把变量的地址复制进队列里</li></ul><p>在FreeRTOS中，使用的是拷贝方式进行队列数据传输，这是因为：</p><ul><li>局部变量的值可直接送入队列，后续即使函数退出、局部变量被回收，也不会影响队列中的数据</li><li>无需分配缓冲区来保存数据，队列中有 buffer</li><li>局部变量可以立即再次使用</li><li>发送任务、接收任务解耦：不用关心哪个任务有数据，哪个任务释放数据</li><li>如果数据实在太大，你还是可以使用队列传输它的地址</li><li>FreeRTOS 负责分配队列的数据存储空间</li><li>在内存保护系统中，任务可访问的内存将受到限制。在这种情况下，只有当发送和接收任务都可以访问存储数据的内存时，才能使用队列应用。而队列拷贝并没有这种限制，内核有足够权限，允许使用队列跨内存保护边界传递数据。</li></ul><ol start="2" type="1"><li><strong>可被多个任务访问 （Access by Multiple Tasks）</strong></li></ol><p>只要知道队列的句柄，任何任务或中断就能访问该队列，多个任务可以对同一个队列进行读写操作。多个任务对同一个队列写操作的情况很常见，但多个任务对同一个队列读操作的情况很少见。</p><ol start="3" type="1"><li><strong>队列阻塞（Blocking on Queues）</strong></li></ol><p>当任务从队列中读操作时，可以指定阻塞时间。当队列为空，则任务进入阻塞状态，一旦队列中有数据，该任务会自动进入就绪态。如果阻塞时间超时，则任务也会进入就绪态。多个任务可对一个队列读操作，因此多个任务会对一个队列阻塞等待数据的到来，这种情况下，当数据到来时，只有一个任务会处于非阻塞态，且该任务具有最高优先级。如果所有阻塞态的任务具有相同的优先级，则等待数据时间最长的任务退出阻塞态。</p><p>同理，当任务从队列中写操作时，也可以指定阻塞时间。这个阻塞时间是指如果队列已满，任务保持在阻塞态以等待队列上有可用空间的最长时间。多个任务可对一个队列写操作，因此多个任务会对一个满队列阻塞等待数据的发送，在这种情况下，当队列上有可用空间，只有一个任务处于非阻塞态，且该任务具有最高优先级。如果所有阻塞态的任务具有相同的优先级，则等待空间最长时间的任务将退出阻塞态。</p><h1 id="队列操作">队列操作</h1><p>Free RTOS中，队列的API函数有：</p><ul><li><p><strong>xQueueCreate()</strong></p></li><li><p><strong>xQueueSendToBack() </strong></p></li><li><p><strong>xQueueSendToFront()</strong></p></li><li><p><strong>xQueueReceive()</strong></p></li><li><p><strong>uxQueueMessagesWaiting()</strong></p></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;在Free RTOS中，队列是任务间通信的主要形式。它们可以用于在任务之间、中断和任务之间发送消息。下面来看看队列的相关内容。&lt;/p&gt;
&lt;h1 id=&quot;队列特性&quot;&gt;队列特性&lt;/h1&gt;
&lt;ol type=&quot;1&quot;&gt;
&lt;li&gt;&lt;strong&gt;数据存储（Data Storag</summary>
      
    
    
    
    <category term="RTOS" scheme="http://example.com/categories/RTOS/"/>
    
    
    <category term="queue" scheme="http://example.com/tags/queue/"/>
    
  </entry>
  
  <entry>
    <title>FreeRTOS中任务(Task)</title>
    <link href="http://example.com/2023/10/05/FreeRTOS%E4%B8%AD%E4%BB%BB%E5%8A%A1(Task)/"/>
    <id>http://example.com/2023/10/05/FreeRTOS%E4%B8%AD%E4%BB%BB%E5%8A%A1(Task)/</id>
    <published>2023-10-05T02:41:10.000Z</published>
    <updated>2023-10-07T05:27:42.353Z</updated>
    
    <content type="html"><![CDATA[<p>使用 FreeRTOS 的实时应用程序，我们可以在应用程序中创建多个独立任务(task)，也可称为线程(thread)。</p><h1 id="任务的简介">任务的简介</h1><p>在FreeRTOS中创建任务时，每个任务都分配有自己的堆栈，在自己的上下文（寄存器值、堆栈内容等）中执行，不依赖于系统内的其他任务或 RTOS 调度器本身。在任何时间点，应用程序中只能执行一个任务，由调度器决定所要执行的任务调入和调出。当任务调出时，执行上下文信息被保存到该任务的堆栈中，以便再调入时可以正常恢复。</p><h1 id="任务的创建">任务的创建</h1><p>在 FreeRTOS 中，任务就是一个个独立且无法返回的函数，任务结构应如下：</p><div class="code-wrapper"><pre><code class="hljs c"><span class="hljs-type">void</span> <span class="hljs-title function_">vATask</span><span class="hljs-params">( <span class="hljs-type">void</span> *pvParameters )</span>&#123;    <span class="hljs-keyword">for</span>( ;; )    &#123;    <span class="hljs-comment">/* 添加任务实现代码 */</span>    &#125;vTaskDelete( <span class="hljs-literal">NULL</span> );<span class="hljs-comment">/* 如果任务需要退出，则删除该任务,NULL表示删除的是自己 /</span><span class="hljs-comment">&#125;</span></code></pre></div><p>如需创建任务，则调用 <code>xTaskCreate()</code>或 <code>xTaskCreateStatic()</code> ；如需删除任务，则调用 <code>vTaskDelete()</code> 。</p><div class="code-wrapper"><pre><code class="hljs c"><span class="hljs-comment">/* 动态创建一个任务 */</span>BaseType_t <span class="hljs-title function_">xTaskCreate</span><span class="hljs-params">(TaskFunction_t pxTaskCode,  <span class="hljs-comment">/* 任务函数，如 vATask */</span></span><span class="hljs-params">                       <span class="hljs-type">const</span> <span class="hljs-type">char</span> * <span class="hljs-type">const</span> pcName,<span class="hljs-comment">/* 任务名，自定义 */</span></span><span class="hljs-params">                       <span class="hljs-type">const</span> configSTACK_DEPTH_TYPE usStackDepth, <span class="hljs-comment">/* 任务栈大小，单位为word,10表示40字节 */</span></span><span class="hljs-params">                       <span class="hljs-type">void</span> * <span class="hljs-type">const</span> pvParameters,<span class="hljs-comment">/* 任务函数的参数 */</span></span><span class="hljs-params">                       UBaseType_t uxPriority,<span class="hljs-comment">/* 任务优先级,数值越小优先级越低 */</span></span><span class="hljs-params">                       TaskHandle_t * <span class="hljs-type">const</span> pxCreatedTask )</span> <span class="hljs-comment">/* 任务句柄,以后可用它来操作这个任务,如不使用该 handle，     可以传入 NULL */</span>    <span class="hljs-comment">/* 静态创建一个任务 */</span>    TaskHandle_t <span class="hljs-title function_">xTaskCreateStatic</span><span class="hljs-params">(TaskFunction_t pxTaskCode, <span class="hljs-comment">/* 任务函数，如 vATask */</span></span><span class="hljs-params">                               <span class="hljs-type">const</span> <span class="hljs-type">char</span> * <span class="hljs-type">const</span> pcName,  <span class="hljs-comment">/* 任务名，自定义 */</span></span><span class="hljs-params">                               <span class="hljs-type">const</span> <span class="hljs-type">uint32_t</span> ulStackDepth, <span class="hljs-comment">/* 任务栈大小，单位为word,10表示40字节 */</span></span><span class="hljs-params">                               <span class="hljs-type">void</span> * <span class="hljs-type">const</span> pvParameters, <span class="hljs-comment">/* 任务函数的参数 */</span></span><span class="hljs-params">                               UBaseType_t uxPriority,<span class="hljs-comment">/* 任务优先级,数值越小优先级越低 */</span></span><span class="hljs-params">                               StackType_t * <span class="hljs-type">const</span> puxStackBuffer,<span class="hljs-comment">/* 静态分配的任务栈缓冲区数组 */</span></span><span class="hljs-params">                               StaticTask_t * <span class="hljs-type">const</span> pxTaskBuffer )</span><span class="hljs-comment">/* 任务缓冲区句柄 */</span><span class="hljs-comment">/* 删除一个任务 */</span>    <span class="hljs-type">void</span> <span class="hljs-title function_">vTaskDelete</span><span class="hljs-params">( TaskHandle_t xTaskToDelete )</span></code></pre></div><p>以上API函数在 <code>task.h</code> 文件中有详细的使用说明。举例如下：</p><ul><li>动态创建任务</li></ul><div class="code-wrapper"><pre><code class="hljs c"><span class="hljs-comment">/* 具体的任务实现函数 */</span>  <span class="hljs-type">void</span> <span class="hljs-title function_">vStartLedTask</span><span class="hljs-params">(<span class="hljs-type">void</span> *pvParameters)</span>&#123; <span class="hljs-keyword">while</span>(<span class="hljs-number">1</span>) &#123; HAL_GPIO_TogglePin(LED0_GPIO_Port, LED0_Pin);         vTaskDelay(<span class="hljs-number">500</span>); &#125;&#125;<span class="hljs-comment">/* 创建任务 */</span><span class="hljs-type">void</span> <span class="hljs-title function_">vLedTask</span><span class="hljs-params">(<span class="hljs-type">void</span>)</span>&#123;    <span class="hljs-type">static</span> <span class="hljs-type">uint8_t</span> ucParameterToPass;    TaskHandle_t xLedTaskHandle = <span class="hljs-literal">NULL</span>; <span class="hljs-comment">/* 任务句柄 */</span>    xTaskCreate(vStartLedTask, <span class="hljs-string">&quot;LEDTask&quot;</span>, <span class="hljs-number">128</span>, &amp;ucParameterToPass, osPriorityNormal, &amp;xLedTaskHandle);          <span class="hljs-keyword">if</span>(xLedTaskHandle != <span class="hljs-literal">NULL</span>)    &#123;        vTaskDelete(<span class="hljs-literal">NULL</span>); <span class="hljs-comment">/* 任务退出，则删除任务 */</span>    &#125;&#125;</code></pre></div><ul><li>静态创建任务</li></ul><div class="code-wrapper"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">define</span> STACK_SIZE 200 <span class="hljs-comment">/* 200 word */</span></span>StackType_t xStack[ STACK_SIZE ]; <span class="hljs-comment">/* 分配的静态栈数组大小 */</span>StaticTask_t xTaskBuffer; <span class="hljs-comment">/* 任务结构体数据句柄 */</span><span class="hljs-comment">/* 具体的任务实现函数 */</span>  <span class="hljs-type">void</span> <span class="hljs-title function_">vStartLedSaticTask</span><span class="hljs-params">(<span class="hljs-type">void</span> *pvParameters)</span>&#123; <span class="hljs-keyword">while</span>(<span class="hljs-number">1</span>) &#123; HAL_GPIO_TogglePin(LED0_GPIO_Port, LED0_Pin);         vTaskDelay(<span class="hljs-number">500</span>); &#125;&#125;<span class="hljs-comment">/* 创建任务 */</span><span class="hljs-type">void</span> <span class="hljs-title function_">vLedStaticTask</span><span class="hljs-params">(<span class="hljs-type">void</span>)</span>&#123;    TaskHandle_t xReturnHandle = <span class="hljs-literal">NULL</span>; <span class="hljs-comment">/* 任务句柄 */</span>    xReturnHandle = xTaskCreateStatic(vStartLedSaticTask, <span class="hljs-string">&quot;LedStaticTask&quot;</span>, STACK_SIZE, <span class="hljs-literal">NULL</span>,                                                   osPriorityNormal, xStack, &amp;xTaskBuffer );     vTaskSuspend(xReturnHandle); <span class="hljs-comment">/* 挂起任务 */</span>&#125;</code></pre></div><h1 id="任务的状态">任务的状态</h1><p>Free RTOS中任务的状态有以下几种：</p><ul><li><p><strong>运行</strong></p><p>当任务实际执行时，它被称为处于运行状态。 如果处理器只有一个内核， 那么在给定的任何时间内都只能有一个任务处于运行状态。</p></li><li><p><strong>准备就绪</strong></p><p>准备就绪任务指那些能够执行（它们不处于阻塞或挂起状态）， 但目前没有执行的任务， 因为同等或更高优先级的不同任务已经处于运行状态。</p></li><li><p><strong>阻塞</strong></p><p>如果任务当前正在等待外部事件，则该任务被认为处于阻塞状态。任务可以进入阻塞状态来等待两种不同类型的事件：</p><ol type="1"><li>时间相关事件。可以是等待一段时间 <code>vTaskDelay()</code>，也可以是等到某个绝对时间。</li><li>同步事件。事件由另一个任务或中断程序产生，可以由队列、信号量、事件组、通知或信号量等产生事件。如在一个队列中等待数据的到来。</li></ol><p>处于阻塞状态的任务通常有一个"超时"期，超时后任务将被退出阻塞状态， 即使该任务所等待的事件没有发生。“阻塞”状态下的任务不使用任何处理时间，不能进入运行状态。</p></li><li><p><strong>挂起</strong></p><p>“挂起”状态下（即暂停）的任务不能被选择调度器调用，只能通过 <code>vTaskSuspend()</code> 和 <code>xTaskResume()</code> 及 <code>xTaskResumeFromISR()</code> 函数进入或退出挂起状态。大部分的应用不会使用挂起状态。</p></li></ul><p><img src="https://gitee.com/kayoungzhang/picgo_res/raw/master/img/image-20231005180546855.png" style="zoom:80%;" /></p><h1 id="任务的优先级">任务的优先级</h1><p>Free RTOS中每个任务都被分配了优先级：（<strong>0 ~ （configMAX_PRIORITIES - 1）</strong>），数值越大优先级越高，这与RT-Thread和μC/OS相反，<code>configMAX_PRIORITIES</code> 宏在 <code>FreeRTOSConfig.h</code>文件中进行配置定义。当 <code>configUSE_PORT_OPTIMIED_TASK_SELECTION = 1</code> 时，即使用端口优化任务选择机制，则 <code>configMAX_PRIORITIES</code> 配置不能大于32， 其它情况，为了RAM使用效率，应将其保持为实际所需的最小值。</p><p>Free RTOS调度器会一直选择最高优先级的任务进入运行的状态。当多个任务处于同一优先级，调度器会使用时间切片轮询方式切换这些任务，此时宏 <code>configUSE_TIME_SLICING  = 1</code>。</p><p><img src="https://gitee.com/kayoungzhang/picgo_res/raw/master/img/image-20231005185629584.png" alt="image-20231005185629584" style="zoom:80%;" /></p><div class="code-wrapper"><pre><code class="hljs c">UBaseType_t <span class="hljs-title function_">uxTaskPriorityGet</span><span class="hljs-params">( TaskHandle_t xTask )</span>; <span class="hljs-comment">/* 获得任务的优先级 */</span><span class="hljs-type">void</span> <span class="hljs-title function_">vTaskPrioritySet</span><span class="hljs-params">( TaskHandle_t xTask, UBaseType_t uxNewPriority )</span>; <span class="hljs-comment">/* 设置任务的优先级 */</span></code></pre></div><h1 id="空闲任务和空闲任务钩子idle-task-hook">空闲任务和空闲任务钩子（Idle Task Hook）</h1><p>RTOS 调度器启动时，会自动创建空闲任务，以确保始终存在一个能够运行的任务。它以最低优先级创建，要么处于就绪态，要么处于运行态，永远不会阻塞。空闲任务负责释放被删除任务的内存。</p><p>空闲任务钩子是在空闲任务的每个周期中调用的函数，在没有能够运行的更高优先级的任务时，这种空闲钩子函数就会被执行。 它的作用主要有：</p><ul><li>执行一些低优先级的、后台的、需要连续执行的函数 。</li><li>测量系统的空闲时间。</li><li>让系统进入低功耗省电模式。</li></ul><p>要创建一个空闲钩子，需要在 <code>FreeRTOSConfig.h</code> 文件中将 <strong>configUSE_IDLE_HOOK</strong> 设置为 1，然后定义空闲钩子回调函数 <code>void vApplicationIdleHook( void );</code></p><p><strong>需要注意的是</strong>：空闲钩子函数不调用任何可能导致其阻塞的 API 函数。 此外，如果应用程序使用 vTaskDelete() API 函数，则必须允许空闲任务钩子定期返回 。</p><h1 id="任务的调度">任务的调度</h1><p>FreeRTOS 调度算法主要针对单核、非对称多核 (AMP)、和对称多核 (SMP) RTOS的配置。在 AMP 中， 每个处理器核心运行自身的 FreeRTOS 实例。在 SMP 中， 存在一个 FreeRTOS 实例，可以跨多核调度 RTOS 任务 。FreeRTOS调度默认针对是单核，这里主要看看单核调度算法。</p><p>调度算法，是指决定哪个就绪态的任务可以切换到运行态的程序。可通过 <code>FreeRTOSConfig.h</code> 中的三个配置项来改变调度算法 ：</p><ul><li><strong>configUSE_PREEMPTION</strong></li></ul><p>如果设置为 0，则关闭“抢占”， 只有当运行态的任务进入“阻塞”或“挂起”状态， 或调用 <code>taskYIELD()</code>， 或中断服务程序 (ISR) 手动请求上下文切换时，才会发生上下文切换。</p><ul><li><strong>configUSE_TIME_SLICING</strong></li></ul><p>如果设置为 0，则表示时间切片已关闭， 因此调度器不会在每个 tick 中断上在同等优先级的任务之间切换 。</p><ul><li><strong>configUSE_TICKLESS_IDLE</strong></li></ul><p>用于关闭Tick中断来实现省电。</p><p>调度算法的行为主要体现在两方面：高优先级的任务先运行、同优先级的就绪态任务如何被选中。调度算法要确保同优先级的就绪态任务，能轮询运行，策略是"轮询调度"(Round Robin Scheduling)。</p><p><strong>对于单核来讲，FreeRTOS 默认使用固定优先级的抢占式调度策略，对同等优先级的任务执行时间片轮询调度，即将上面的配置项设置为1。</strong></p><p>使用抢占式优先级调度，避免了任务间的强盗行为，因为不进入“阻塞”或 “挂起”状态的高优先级任务会让其它低优先级任务不被执行。例如，一个高优先级任务正在等待一个事件， 它不应该处于事件的循环（轮询）中，因为它永远不会进入阻塞或挂起状态。任务应进入阻塞状态以等待事件，优先级较低的任务从而可以被调度执行，当使用任务间通信将事件发送给高优先级任务时，它会自动从“阻塞”状态进入再次运行状态。</p><p>每个任务具有固定的优先级时，其时间片轮询调度时序图如下：</p><p><img src="https://gitee.com/kayoungzhang/picgo_res/raw/master/img/image-20231005212220169.png" alt="image-20231005212220169" style="zoom:80%;" /></p><p>当有两个任务优先级一样时，其时间片轮询调度时序图如下：</p><p><img src="https://gitee.com/kayoungzhang/picgo_res/raw/master/img/image-20231005212233030.png" alt="image-20231005212233030" style="zoom:80%;" /></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;使用 FreeRTOS 的实时应用程序，我们可以在应用程序中创建多个独立任务(task)，也可称为线程(thread)。&lt;/p&gt;
&lt;h1 id=&quot;任务的简介&quot;&gt;任务的简介&lt;/h1&gt;
&lt;p&gt;在FreeRTOS中创建任务时，每个任务都分配有自己的堆栈，在自己的上下文（寄存器</summary>
      
    
    
    
    <category term="RTOS" scheme="http://example.com/categories/RTOS/"/>
    
    
    <category term="Task" scheme="http://example.com/tags/Task/"/>
    
  </entry>
  
  <entry>
    <title>FreeRTOS变量、函数及宏命名规则</title>
    <link href="http://example.com/2023/10/04/FreeRTOS%E5%8F%98%E9%87%8F%E3%80%81%E5%87%BD%E6%95%B0%E5%8F%8A%E5%AE%8F%E5%91%BD%E5%90%8D%E8%A7%84%E5%88%99/"/>
    <id>http://example.com/2023/10/04/FreeRTOS%E5%8F%98%E9%87%8F%E3%80%81%E5%87%BD%E6%95%B0%E5%8F%8A%E5%AE%8F%E5%91%BD%E5%90%8D%E8%A7%84%E5%88%99/</id>
    <published>2023-10-04T14:57:41.000Z</published>
    <updated>2023-10-07T05:27:42.369Z</updated>
    
    <content type="html"><![CDATA[<p>在FreeRTOS内核和demo应用程序源代码中，会发现很多变量名、函数名、宏名前有很多小写字母的前缀。这是因为RTOS中重定义了很多数据类型，为了便于移植和快速知道变量、函数及宏的类型或定义的文件。</p><h2 id="变量名">变量名</h2><p>变量名称使用驼峰式大小写，具有明确的描述性的单词，变量名有前缀：</p><table><thead><tr class="header"><th>变量名前缀</th><th>含义</th><th>举例</th></tr></thead><tbody><tr class="odd"><td>ul</td><td>unsigned long</td><td>uint32_t ulFrequency;</td></tr><tr class="even"><td>us</td><td>unsigned short</td><td>uint16_t usThisCount;</td></tr><tr class="odd"><td>uc</td><td>unsigned char</td><td>uint8_t ucName;</td></tr><tr class="even"><td>x</td><td>BaseType_t，TickType_t ,其他非标准的类型：结构体、任务、队列等</td><td>QueueHandle_t xRxedChars;</td></tr><tr class="odd"><td>e</td><td>枚举变量</td><td>eTaskState TaskStartState</td></tr><tr class="even"><td>p</td><td>指针</td><td>int *pNext</td></tr><tr class="odd"><td>pc</td><td>char 指针</td><td>char *pcValue</td></tr><tr class="even"><td>px</td><td>非标准类型指针</td><td>List_t * pxList</td></tr></tbody></table><h2 id="函数">函数</h2><p>函数名称使用驼峰式大小写，具有明确的描述性单词，包含了函数返回值的类型、函数所在的文件名和函数的功能：</p><table><thead><tr class="header"><th>函数名前缀</th><th>含义</th><th>举例及含义</th></tr></thead><tbody><tr class="odd"><td>prv</td><td>文件作用域静态（私有）函数</td><td>prvCopyDataFromQueue()</td></tr><tr class="even"><td>v</td><td>函数返回类型为void</td><td>vPortEnableVFP()</td></tr><tr class="odd"><td>x</td><td>函数返回类型为BaseType_t,其他非标准的类型：结构体、任务、队列等</td><td>xTaskAbortDelay()</td></tr><tr class="even"><td>pv</td><td>函数返回类型为 void * 类型</td><td>pvTimerGetTimerID()</td></tr><tr class="odd"><td>px</td><td>函数返回类型为结构体类型指针</td><td>pxUARTInstance()</td></tr></tbody></table><h2 id="宏">宏</h2><p>宏具有明确的描述性，并使用完整的单词，宏以定义宏的文件为前缀(小写)。除前缀外，所有宏均使用大写字母书写，并使用下划线来分隔单词。</p><table><thead><tr class="header"><th>宏前缀</th><th>举例</th><th>含义</th></tr></thead><tbody><tr class="odd"><td>port</td><td>portMAX_DELAY</td><td>在portable.h 或 portmacro.h中定义</td></tr><tr class="even"><td>task</td><td>taskENTER_CRITICAL()</td><td>在task.h中定义</td></tr><tr class="odd"><td>pd</td><td>pdFREERTOS_ERRNO_ENOENT</td><td>在projdefs.h中定义</td></tr><tr class="even"><td>config</td><td>configUSE_TIME_SLICING</td><td>在FreeRTOSConfig.h中定义</td></tr><tr class="odd"><td>err</td><td>errQUEUE_FULL</td><td>在projdefs.h中定义</td></tr><tr class="even"><td>tmr</td><td>tmrCOMMAND_START_FROM_ISR</td><td>在timers.h中定义</td></tr><tr class="odd"><td>queue</td><td>queueQUEUE_TYPE_BASE</td><td>在queue.h中定义</td></tr><tr class="even"><td>sem</td><td>semGIVE_BLOCK_TIME</td><td>在semphr.h中定义</td></tr></tbody></table>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;在FreeRTOS内核和demo应用程序源代码中，会发现很多变量名、函数名、宏名前有很多小写字母的前缀。这是因为RTOS中重定义了很多数据类型，为了便于移植和快速知道变量、函数及宏的类型或定义的文件。&lt;/p&gt;
&lt;h2 id=&quot;变量名&quot;&gt;变量名&lt;/h2&gt;
&lt;p&gt;变量名称使</summary>
      
    
    
    
    <category term="RTOS" scheme="http://example.com/categories/RTOS/"/>
    
    
    <category term="FreeRTOS" scheme="http://example.com/tags/FreeRTOS/"/>
    
  </entry>
  
  <entry>
    <title>FreeRTOS重定义的数据类型</title>
    <link href="http://example.com/2023/10/04/FreeRTOS%E9%87%8D%E5%AE%9A%E4%B9%89%E7%9A%84%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B/"/>
    <id>http://example.com/2023/10/04/FreeRTOS%E9%87%8D%E5%AE%9A%E4%B9%89%E7%9A%84%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B/</id>
    <published>2023-10-04T14:31:03.000Z</published>
    <updated>2023-10-07T05:27:42.369Z</updated>
    
    <content type="html"><![CDATA[<p>因为不同的数据类型在不同的架构平台上，它的长度是不一样的，为了便于移植，很多独立的流行代码程序都会采用相应的数据类型的重定义，FreeRTOS也不例外，它除了使用了标准的数据类型定义的头文件 <code>&lt;stdint.h&gt;</code> 外，源码中还重定义了很多数据类型，但都是由基本数据类型衍生而来，熟悉这些重定义的数据类型，对查看FreeRTOS源码和掌握与使用它有很大益处。下面具体来看看：</p><p><strong><code>cmsis_os2.h</code></strong></p><div class="code-wrapper"><pre><code class="hljs c"><span class="hljs-keyword">typedef</span> <span class="hljs-class"><span class="hljs-keyword">struct</span> &#123;</span>  <span class="hljs-type">uint32_t</span>                       api;   <span class="hljs-comment">/* API 版本 (major.minor.rev: mmnnnrrrr dec). */</span>  <span class="hljs-type">uint32_t</span>                    kernel;   <span class="hljs-comment">/* Kernel 版本 (major.minor.rev: mmnnnrrrr dec). */</span>&#125; osVersion_t;<span class="hljs-comment">/* 版本信息 */</span><span class="hljs-keyword">typedef</span> <span class="hljs-class"><span class="hljs-keyword">enum</span> &#123;</span>  osKernelInactive        =  <span class="hljs-number">0</span>,         <span class="hljs-comment">/* Kernel非工作态 */</span>  osKernelReady           =  <span class="hljs-number">1</span>,         <span class="hljs-comment">/* Kernel就绪态 */</span>  osKernelRunning         =  <span class="hljs-number">2</span>,         <span class="hljs-comment">/* Kernel运行态 */</span>  osKernelLocked          =  <span class="hljs-number">3</span>,         <span class="hljs-comment">/* Kernel锁定态 */</span>  osKernelSuspended       =  <span class="hljs-number">4</span>,         <span class="hljs-comment">/* Kernel挂起态 */</span>  osKernelError           = <span class="hljs-number">-1</span>,         <span class="hljs-comment">/* Kernel发生错误态 */</span>  osKernelReserved        = <span class="hljs-number">0x7FFFFFFF</span>U <span class="hljs-comment">/* 预留，编译器体积优化 */</span>&#125; osKernelState_t;<span class="hljs-comment">/* Kernel 状态*/</span><span class="hljs-keyword">typedef</span> <span class="hljs-class"><span class="hljs-keyword">enum</span> &#123;</span>  osThreadInactive        =  <span class="hljs-number">0</span>,         <span class="hljs-comment">/* 线程非工作态 */</span>  osThreadReady           =  <span class="hljs-number">1</span>,         <span class="hljs-comment">/* 线程就绪态 */</span>  osThreadRunning         =  <span class="hljs-number">2</span>,         <span class="hljs-comment">/* 线程运行态 */</span>  osThreadBlocked         =  <span class="hljs-number">3</span>,         <span class="hljs-comment">/* 线程阻塞态 */</span>  osThreadTerminated      =  <span class="hljs-number">4</span>,         <span class="hljs-comment">/* 线程结束态 */</span>  osThreadError           = <span class="hljs-number">-1</span>,         <span class="hljs-comment">/* 线程错误 */</span>  osThreadReserved        = <span class="hljs-number">0x7FFFFFFF</span>  <span class="hljs-comment">/* 预留 */</span>&#125; osThreadState_t;<span class="hljs-comment">/* 线程状态 */</span><span class="hljs-keyword">typedef</span> <span class="hljs-class"><span class="hljs-keyword">enum</span> &#123;</span>  osPriorityNone          =  <span class="hljs-number">0</span>,         <span class="hljs-comment">///&lt; No priority (not initialized).</span>  osPriorityIdle          =  <span class="hljs-number">1</span>,         <span class="hljs-comment">///&lt; Reserved for Idle thread.</span>  osPriorityLow           =  <span class="hljs-number">8</span>,         <span class="hljs-comment">///&lt; Priority: low</span>  osPriorityLow1          =  <span class="hljs-number">8</span>+<span class="hljs-number">1</span>,       <span class="hljs-comment">///&lt; Priority: low + 1</span>  osPriorityLow2          =  <span class="hljs-number">8</span>+<span class="hljs-number">2</span>,       <span class="hljs-comment">///&lt; Priority: low + 2</span>  osPriorityLow3          =  <span class="hljs-number">8</span>+<span class="hljs-number">3</span>,       <span class="hljs-comment">///&lt; Priority: low + 3</span>  osPriorityLow4          =  <span class="hljs-number">8</span>+<span class="hljs-number">4</span>,       <span class="hljs-comment">///&lt; Priority: low + 4</span>  osPriorityLow5          =  <span class="hljs-number">8</span>+<span class="hljs-number">5</span>,       <span class="hljs-comment">///&lt; Priority: low + 5</span>  osPriorityLow6          =  <span class="hljs-number">8</span>+<span class="hljs-number">6</span>,       <span class="hljs-comment">///&lt; Priority: low + 6</span>  osPriorityLow7          =  <span class="hljs-number">8</span>+<span class="hljs-number">7</span>,       <span class="hljs-comment">///&lt; Priority: low + 7</span>  osPriorityBelowNormal   = <span class="hljs-number">16</span>,         <span class="hljs-comment">///&lt; Priority: below normal</span>  osPriorityBelowNormal1  = <span class="hljs-number">16</span>+<span class="hljs-number">1</span>,       <span class="hljs-comment">///&lt; Priority: below normal + 1</span>  osPriorityBelowNormal2  = <span class="hljs-number">16</span>+<span class="hljs-number">2</span>,       <span class="hljs-comment">///&lt; Priority: below normal + 2</span>  osPriorityBelowNormal3  = <span class="hljs-number">16</span>+<span class="hljs-number">3</span>,       <span class="hljs-comment">///&lt; Priority: below normal + 3</span>  osPriorityBelowNormal4  = <span class="hljs-number">16</span>+<span class="hljs-number">4</span>,       <span class="hljs-comment">///&lt; Priority: below normal + 4</span>  osPriorityBelowNormal5  = <span class="hljs-number">16</span>+<span class="hljs-number">5</span>,       <span class="hljs-comment">///&lt; Priority: below normal + 5</span>  osPriorityBelowNormal6  = <span class="hljs-number">16</span>+<span class="hljs-number">6</span>,       <span class="hljs-comment">///&lt; Priority: below normal + 6</span>  osPriorityBelowNormal7  = <span class="hljs-number">16</span>+<span class="hljs-number">7</span>,       <span class="hljs-comment">///&lt; Priority: below normal + 7</span>  osPriorityNormal        = <span class="hljs-number">24</span>,         <span class="hljs-comment">///&lt; Priority: normal</span>  osPriorityNormal1       = <span class="hljs-number">24</span>+<span class="hljs-number">1</span>,       <span class="hljs-comment">///&lt; Priority: normal + 1</span>  osPriorityNormal2       = <span class="hljs-number">24</span>+<span class="hljs-number">2</span>,       <span class="hljs-comment">///&lt; Priority: normal + 2</span>  osPriorityNormal3       = <span class="hljs-number">24</span>+<span class="hljs-number">3</span>,       <span class="hljs-comment">///&lt; Priority: normal + 3</span>  osPriorityNormal4       = <span class="hljs-number">24</span>+<span class="hljs-number">4</span>,       <span class="hljs-comment">///&lt; Priority: normal + 4</span>  osPriorityNormal5       = <span class="hljs-number">24</span>+<span class="hljs-number">5</span>,       <span class="hljs-comment">///&lt; Priority: normal + 5</span>  osPriorityNormal6       = <span class="hljs-number">24</span>+<span class="hljs-number">6</span>,       <span class="hljs-comment">///&lt; Priority: normal + 6</span>  osPriorityNormal7       = <span class="hljs-number">24</span>+<span class="hljs-number">7</span>,       <span class="hljs-comment">///&lt; Priority: normal + 7</span>  osPriorityAboveNormal   = <span class="hljs-number">32</span>,         <span class="hljs-comment">///&lt; Priority: above normal</span>  osPriorityAboveNormal1  = <span class="hljs-number">32</span>+<span class="hljs-number">1</span>,       <span class="hljs-comment">///&lt; Priority: above normal + 1</span>  osPriorityAboveNormal2  = <span class="hljs-number">32</span>+<span class="hljs-number">2</span>,       <span class="hljs-comment">///&lt; Priority: above normal + 2</span>  osPriorityAboveNormal3  = <span class="hljs-number">32</span>+<span class="hljs-number">3</span>,       <span class="hljs-comment">///&lt; Priority: above normal + 3</span>  osPriorityAboveNormal4  = <span class="hljs-number">32</span>+<span class="hljs-number">4</span>,       <span class="hljs-comment">///&lt; Priority: above normal + 4</span>  osPriorityAboveNormal5  = <span class="hljs-number">32</span>+<span class="hljs-number">5</span>,       <span class="hljs-comment">///&lt; Priority: above normal + 5</span>  osPriorityAboveNormal6  = <span class="hljs-number">32</span>+<span class="hljs-number">6</span>,       <span class="hljs-comment">///&lt; Priority: above normal + 6</span>  osPriorityAboveNormal7  = <span class="hljs-number">32</span>+<span class="hljs-number">7</span>,       <span class="hljs-comment">///&lt; Priority: above normal + 7</span>  osPriorityHigh          = <span class="hljs-number">40</span>,         <span class="hljs-comment">///&lt; Priority: high</span>  osPriorityHigh1         = <span class="hljs-number">40</span>+<span class="hljs-number">1</span>,       <span class="hljs-comment">///&lt; Priority: high + 1</span>  osPriorityHigh2         = <span class="hljs-number">40</span>+<span class="hljs-number">2</span>,       <span class="hljs-comment">///&lt; Priority: high + 2</span>  osPriorityHigh3         = <span class="hljs-number">40</span>+<span class="hljs-number">3</span>,       <span class="hljs-comment">///&lt; Priority: high + 3</span>  osPriorityHigh4         = <span class="hljs-number">40</span>+<span class="hljs-number">4</span>,       <span class="hljs-comment">///&lt; Priority: high + 4</span>  osPriorityHigh5         = <span class="hljs-number">40</span>+<span class="hljs-number">5</span>,       <span class="hljs-comment">///&lt; Priority: high + 5</span>  osPriorityHigh6         = <span class="hljs-number">40</span>+<span class="hljs-number">6</span>,       <span class="hljs-comment">///&lt; Priority: high + 6</span>  osPriorityHigh7         = <span class="hljs-number">40</span>+<span class="hljs-number">7</span>,       <span class="hljs-comment">///&lt; Priority: high + 7</span>  osPriorityRealtime      = <span class="hljs-number">48</span>,         <span class="hljs-comment">///&lt; Priority: realtime</span>  osPriorityRealtime1     = <span class="hljs-number">48</span>+<span class="hljs-number">1</span>,       <span class="hljs-comment">///&lt; Priority: realtime + 1</span>  osPriorityRealtime2     = <span class="hljs-number">48</span>+<span class="hljs-number">2</span>,       <span class="hljs-comment">///&lt; Priority: realtime + 2</span>  osPriorityRealtime3     = <span class="hljs-number">48</span>+<span class="hljs-number">3</span>,       <span class="hljs-comment">///&lt; Priority: realtime + 3</span>  osPriorityRealtime4     = <span class="hljs-number">48</span>+<span class="hljs-number">4</span>,       <span class="hljs-comment">///&lt; Priority: realtime + 4</span>  osPriorityRealtime5     = <span class="hljs-number">48</span>+<span class="hljs-number">5</span>,       <span class="hljs-comment">///&lt; Priority: realtime + 5</span>  osPriorityRealtime6     = <span class="hljs-number">48</span>+<span class="hljs-number">6</span>,       <span class="hljs-comment">///&lt; Priority: realtime + 6</span>  osPriorityRealtime7     = <span class="hljs-number">48</span>+<span class="hljs-number">7</span>,       <span class="hljs-comment">///&lt; Priority: realtime + 7</span>  osPriorityISR           = <span class="hljs-number">56</span>,         <span class="hljs-comment">///&lt; Reserved for ISR deferred thread.</span>  osPriorityError         = <span class="hljs-number">-1</span>,         <span class="hljs-comment">///&lt; System cannot determine priority or illegal priority.</span>  osPriorityReserved      = <span class="hljs-number">0x7FFFFFFF</span>  <span class="hljs-comment">///&lt; Prevents enum down-size compiler optimization.</span>&#125; osPriority_t;<span class="hljs-comment">/* 优先级值枚举 */</span><span class="hljs-keyword">typedef</span> <span class="hljs-title function_">void</span> <span class="hljs-params">(*osThreadFunc_t)</span> <span class="hljs-params">(<span class="hljs-type">void</span> *argument)</span>;<span class="hljs-comment">/* 线程入口 */</span><span class="hljs-keyword">typedef</span> <span class="hljs-title function_">void</span> <span class="hljs-params">(*osTimerFunc_t)</span> <span class="hljs-params">(<span class="hljs-type">void</span> *argument)</span>;<span class="hljs-comment">/* 定时器回调函数 */</span><span class="hljs-keyword">typedef</span> <span class="hljs-class"><span class="hljs-keyword">enum</span> &#123;</span>  osTimerOnce               = <span class="hljs-number">0</span>,          <span class="hljs-comment">/* 单次定时 */</span>  osTimerPeriodic           = <span class="hljs-number">1</span>           <span class="hljs-comment">/* 周期性定时 */</span>&#125; osTimerType_t;<span class="hljs-comment">/* 定时器类型枚举 */</span><span class="hljs-keyword">typedef</span> <span class="hljs-class"><span class="hljs-keyword">enum</span> &#123;</span>  osOK                      =  <span class="hljs-number">0</span>,         <span class="hljs-comment">/* 操作成功完成 */</span>  osError                   = <span class="hljs-number">-1</span>,         <span class="hljs-comment">/* RTOS error */</span>  osErrorTimeout            = <span class="hljs-number">-2</span>,         <span class="hljs-comment">/* 超时前操作未完成 */</span>  osErrorResource           = <span class="hljs-number">-3</span>,         <span class="hljs-comment">/* 资源不可用 */</span>  osErrorParameter          = <span class="hljs-number">-4</span>,         <span class="hljs-comment">/* 参数错误 */</span>  osErrorNoMemory           = <span class="hljs-number">-5</span>,         <span class="hljs-comment">/* 系统内存不足 */</span>  osErrorISR                = <span class="hljs-number">-6</span>,         <span class="hljs-comment">/* 中断错误 */</span>  osStatusReserved          = <span class="hljs-number">0x7FFFFFFF</span>  <span class="hljs-comment">/* 预留 */</span>&#125; osStatus_t;<span class="hljs-comment">/* CMSIS-RTOS函数返回的状态码 */</span><span class="hljs-keyword">typedef</span> <span class="hljs-type">void</span> *osThreadId_t;<span class="hljs-comment">/* 线程ID */</span><span class="hljs-keyword">typedef</span> <span class="hljs-type">void</span> *osTimerId_t;<span class="hljs-comment">/* 定时器ID */</span><span class="hljs-keyword">typedef</span> <span class="hljs-type">void</span> *osEventFlagsId_t;<span class="hljs-comment">/* 事件标志ID */</span><span class="hljs-keyword">typedef</span> <span class="hljs-type">void</span> *osMutexId_t;<span class="hljs-comment">/* 互斥量ID */</span><span class="hljs-keyword">typedef</span> <span class="hljs-type">void</span> *osSemaphoreId_t;<span class="hljs-comment">/* 信号量ID */</span><span class="hljs-keyword">typedef</span> <span class="hljs-type">void</span> *osMemoryPoolId_t;<span class="hljs-comment">/* 内存池ID */</span><span class="hljs-keyword">typedef</span> <span class="hljs-type">void</span> *osMessageQueueId_t;<span class="hljs-comment">/* 消息队列ID */</span><span class="hljs-keyword">typedef</span> <span class="hljs-class"><span class="hljs-keyword">struct</span> &#123;</span>  <span class="hljs-type">const</span> <span class="hljs-type">char</span>                   *name;   <span class="hljs-comment">/* 线程名 */</span>  <span class="hljs-type">uint32_t</span>                 attr_bits;   <span class="hljs-comment">/* 线程属性位 */</span>  <span class="hljs-type">void</span>                      *cb_mem;    <span class="hljs-comment">/* 线程控制块内存 */</span>  <span class="hljs-type">uint32_t</span>                   cb_size;   <span class="hljs-comment">/* 线程控制块内存大小 */</span>  <span class="hljs-type">void</span>                   *stack_mem;    <span class="hljs-comment">/* 栈内存 */</span>  <span class="hljs-type">uint32_t</span>                stack_size;   <span class="hljs-comment">/* 栈内存大小 */</span>  osPriority_t              priority;   <span class="hljs-comment">/* 初始化线程优先级 (默认: osPriorityNormal) */</span>  TZ_ModuleId_t            tz_module;   <span class="hljs-comment">/* 安全区组件 */</span>  <span class="hljs-type">uint32_t</span>                  reserved;   <span class="hljs-comment">/* 预留(must be 0) */</span>&#125; osThreadAttr_t;<span class="hljs-comment">/* 线程属性结构体 */</span><span class="hljs-keyword">typedef</span> <span class="hljs-class"><span class="hljs-keyword">struct</span> &#123;</span>  <span class="hljs-type">const</span> <span class="hljs-type">char</span>                   *name;   <span class="hljs-comment">/* 定时器名 */</span>  <span class="hljs-type">uint32_t</span>                 attr_bits;   <span class="hljs-comment">/* 定时器属性位 */</span>  <span class="hljs-type">void</span>                      *cb_mem;    <span class="hljs-comment">/* 定时器控制块内存 */</span>  <span class="hljs-type">uint32_t</span>                   cb_size;   <span class="hljs-comment">/* 定时器控制块内存大小 */</span>&#125; osTimerAttr_t;<span class="hljs-comment">/* 定时器属性结构体 */</span><span class="hljs-keyword">typedef</span> <span class="hljs-class"><span class="hljs-keyword">struct</span> &#123;</span>  <span class="hljs-type">const</span> <span class="hljs-type">char</span>                   *name;   <span class="hljs-comment">/* 事件标志名 */</span>  <span class="hljs-type">uint32_t</span>                 attr_bits;   <span class="hljs-comment">/* 事件标志属性位 */</span>  <span class="hljs-type">void</span>                      *cb_mem;    <span class="hljs-comment">/* 事件标志控制块内存 */</span>  <span class="hljs-type">uint32_t</span>                   cb_size;   <span class="hljs-comment">/* 事件标志控制块内存大小 */</span>&#125; osEventFlagsAttr_t;<span class="hljs-comment">/* 事件标志属性结构体 */</span><span class="hljs-keyword">typedef</span> <span class="hljs-class"><span class="hljs-keyword">struct</span> &#123;</span>  <span class="hljs-type">const</span> <span class="hljs-type">char</span>                   *name;   <span class="hljs-comment">/* 互斥量名 */</span>  <span class="hljs-type">uint32_t</span>                 attr_bits;   <span class="hljs-comment">/* 互斥量属性位 */</span>  <span class="hljs-type">void</span>                      *cb_mem;    <span class="hljs-comment">/* 互斥量控制块内存 */</span>  <span class="hljs-type">uint32_t</span>                   cb_size;   <span class="hljs-comment">/* 互斥量控制块内存大小 */</span>&#125; osMutexAttr_t;<span class="hljs-comment">/* 互斥量属性结构体 */</span><span class="hljs-keyword">typedef</span> <span class="hljs-class"><span class="hljs-keyword">struct</span> &#123;</span>  <span class="hljs-type">const</span> <span class="hljs-type">char</span>                   *name;   <span class="hljs-comment">/* 信号量名 */</span>  <span class="hljs-type">uint32_t</span>                 attr_bits;   <span class="hljs-comment">/* 信号量属性位 */</span>  <span class="hljs-type">void</span>                      *cb_mem;    <span class="hljs-comment">/* 信号量控制块内存 */</span>  <span class="hljs-type">uint32_t</span>                   cb_size;   <span class="hljs-comment">/* 信号量控制块内存大小 */</span>&#125; osSemaphoreAttr_t;<span class="hljs-comment">/* 信号量属性结构体 */</span><span class="hljs-keyword">typedef</span> <span class="hljs-class"><span class="hljs-keyword">struct</span> &#123;</span>  <span class="hljs-type">const</span> <span class="hljs-type">char</span>                   *name;   <span class="hljs-comment">/* 内存池名 */</span>  <span class="hljs-type">uint32_t</span>                 attr_bits;   <span class="hljs-comment">/* 内存池属性位 */</span>  <span class="hljs-type">void</span>                      *cb_mem;    <span class="hljs-comment">/* 内存池控制块内存 */</span>  <span class="hljs-type">uint32_t</span>                   cb_size;   <span class="hljs-comment">/* 内存池控制块内存大小 */</span>  <span class="hljs-type">void</span>                      *mp_mem;    <span class="hljs-comment">/* 数据存储内存 */</span>  <span class="hljs-type">uint32_t</span>                   mp_size;   <span class="hljs-comment">/* 数据存储内存大小 */</span>&#125; osMemoryPoolAttr_t;<span class="hljs-comment">/* 内存池属性结构体 */</span><span class="hljs-keyword">typedef</span> <span class="hljs-class"><span class="hljs-keyword">struct</span> &#123;</span>  <span class="hljs-type">const</span> <span class="hljs-type">char</span>                   *name;   <span class="hljs-comment">/* 消息队列名 */</span>  <span class="hljs-type">uint32_t</span>                 attr_bits;   <span class="hljs-comment">/* 消息队列属性位 */</span>  <span class="hljs-type">void</span>                      *cb_mem;    <span class="hljs-comment">/* 消息队列控制块内存 */</span>  <span class="hljs-type">uint32_t</span>                   cb_size;   <span class="hljs-comment">/* 消息队列控制块内存大小 */</span>  <span class="hljs-type">void</span>                      *mq_mem;    <span class="hljs-comment">/* 数据存储内存 */</span>  <span class="hljs-type">uint32_t</span>                   mq_size;   <span class="hljs-comment">/* 数据存储内存大小 */</span>&#125; osMessageQueueAttr_t;<span class="hljs-comment">/* 消息队列属性结构体 */</span></code></pre></div><p><strong><code>portmacro.h</code> 和 <code>projdefs.h</code></strong></p><div class="code-wrapper"><pre><code class="hljs c">`portmacro.h`<span class="hljs-meta">#<span class="hljs-keyword">define</span> portCHARchar</span><span class="hljs-meta">#<span class="hljs-keyword">define</span> portFLOATfloat</span><span class="hljs-meta">#<span class="hljs-keyword">define</span> portDOUBLEdouble</span><span class="hljs-meta">#<span class="hljs-keyword">define</span> portLONGlong</span><span class="hljs-meta">#<span class="hljs-keyword">define</span> portSHORTshort</span><span class="hljs-meta">#<span class="hljs-keyword">define</span> portSTACK_TYPEuint32_t</span><span class="hljs-meta">#<span class="hljs-keyword">define</span> portBASE_TYPElong</span><span class="hljs-keyword">typedef</span> portSTACK_TYPE StackType_t;<span class="hljs-keyword">typedef</span> <span class="hljs-type">long</span> BaseType_t;<span class="hljs-keyword">typedef</span> <span class="hljs-type">unsigned</span> <span class="hljs-type">long</span> UBaseType_t;<span class="hljs-keyword">typedef</span> <span class="hljs-type">uint32_t</span> TickType_t; <span class="hljs-comment">//typedef uint16_t TickType_t;</span><span class="hljs-meta">#<span class="hljs-keyword">define</span> portINLINE __inline</span>-------------------------------------------------------------------`projdefs.h`<span class="hljs-keyword">typedef</span> <span class="hljs-title function_">void</span> <span class="hljs-params">(*TaskFunction_t)</span><span class="hljs-params">( <span class="hljs-type">void</span> * )</span>; <span class="hljs-comment">/* 定义任务函数指针 */</span><span class="hljs-meta">#<span class="hljs-keyword">define</span> pdFALSE( ( BaseType_t ) 0 )</span><span class="hljs-meta">#<span class="hljs-keyword">define</span> pdTRUE( ( BaseType_t ) 1 )</span><span class="hljs-meta">#<span class="hljs-keyword">define</span> pdPASS( pdTRUE )</span><span class="hljs-meta">#<span class="hljs-keyword">define</span> pdFAIL( pdFALSE )</span><span class="hljs-meta">#<span class="hljs-keyword">define</span> errQUEUE_EMPTY( ( BaseType_t ) 0 )</span><span class="hljs-meta">#<span class="hljs-keyword">define</span> errQUEUE_FULL( ( BaseType_t ) 0 )</span></code></pre></div><p><strong><code>FreeRTOS.h</code> 和 <code>task.h</code></strong></p><div class="code-wrapper"><pre><code class="hljs c">`FreeRTOS.h`<span class="hljs-meta">#<span class="hljs-keyword">if</span> configENABLE_BACKWARD_COMPATIBILITY == 1</span><span class="hljs-meta">#<span class="hljs-keyword">define</span> eTaskStateGet eTaskGetState</span><span class="hljs-meta">#<span class="hljs-keyword">define</span> portTickType TickType_t</span><span class="hljs-meta">#<span class="hljs-keyword">define</span> xTaskHandle TaskHandle_t</span><span class="hljs-meta">#<span class="hljs-keyword">define</span> xQueueHandle QueueHandle_t</span><span class="hljs-meta">#<span class="hljs-keyword">define</span> xSemaphoreHandle SemaphoreHandle_t</span><span class="hljs-meta">#<span class="hljs-keyword">define</span> xQueueSetHandle QueueSetHandle_t</span><span class="hljs-meta">#<span class="hljs-keyword">define</span> xQueueSetMemberHandle QueueSetMemberHandle_t</span><span class="hljs-meta">#<span class="hljs-keyword">define</span> xTimeOutType TimeOut_t</span><span class="hljs-meta">#<span class="hljs-keyword">define</span> xMemoryRegion MemoryRegion_t</span><span class="hljs-meta">#<span class="hljs-keyword">define</span> xTaskParameters TaskParameters_t</span><span class="hljs-meta">#<span class="hljs-keyword">define</span> xTaskStatusTypeTaskStatus_t</span><span class="hljs-meta">#<span class="hljs-keyword">define</span> xTimerHandle TimerHandle_t</span><span class="hljs-meta">#<span class="hljs-keyword">define</span> xCoRoutineHandle CoRoutineHandle_t</span><span class="hljs-meta">#<span class="hljs-keyword">define</span> pdTASK_HOOK_CODE TaskHookFunction_t</span><span class="hljs-meta">#<span class="hljs-keyword">define</span> portTICK_RATE_MS portTICK_PERIOD_MS</span><span class="hljs-meta">#<span class="hljs-keyword">define</span> pcTaskGetTaskName pcTaskGetName</span><span class="hljs-meta">#<span class="hljs-keyword">define</span> pcTimerGetTimerName pcTimerGetName</span><span class="hljs-meta">#<span class="hljs-keyword">define</span> pcQueueGetQueueName pcQueueGetName</span><span class="hljs-meta">#<span class="hljs-keyword">define</span> vTaskGetTaskInfo vTaskGetInfo</span><span class="hljs-comment">/* 仅在任务调度器中向后兼容，这些定义非必须，但为了完整性而被包含 */</span><span class="hljs-meta">#<span class="hljs-keyword">define</span> tmrTIMER_CALLBACK TimerCallbackFunction_t</span><span class="hljs-meta">#<span class="hljs-keyword">define</span> pdTASK_CODE TaskFunction_t</span><span class="hljs-meta">#<span class="hljs-keyword">define</span> xListItem ListItem_t</span><span class="hljs-meta">#<span class="hljs-keyword">define</span> xList List_t</span><span class="hljs-meta">#<span class="hljs-keyword">endif</span> <span class="hljs-comment">/* 向后兼容 */</span></span><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">xSTATIC_LIST_ITEM</span></span><span class="hljs-class">&#123;</span>TickType_t xDummy1;<span class="hljs-type">void</span> *pvDummy2[ <span class="hljs-number">4</span> ];&#125;;<span class="hljs-keyword">typedef</span> <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">xSTATIC_LIST_ITEM</span> <span class="hljs-title">StaticListItem_t</span>;</span><span class="hljs-comment">/* 静态列表项结构体 */</span><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">xSTATIC_MINI_LIST_ITEM</span></span><span class="hljs-class">&#123;</span>TickType_t xDummy1;<span class="hljs-type">void</span> *pvDummy2[ <span class="hljs-number">2</span> ];&#125;;<span class="hljs-keyword">typedef</span> <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">xSTATIC_MINI_LIST_ITEM</span> <span class="hljs-title">StaticMiniListItem_t</span>;</span><span class="hljs-comment">/* mini静态列表项结构体 */</span><span class="hljs-keyword">typedef</span> <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">xSTATIC_LIST</span></span><span class="hljs-class">&#123;</span>UBaseType_t uxDummy1;<span class="hljs-type">void</span> *pvDummy2;StaticMiniListItem_t xDummy3;&#125; StaticList_t;<span class="hljs-comment">/* 静态列表结构体 */</span><span class="hljs-keyword">typedef</span> <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">xSTATIC_TCB</span></span><span class="hljs-class">&#123;</span><span class="hljs-type">void</span>*pxDummy1;<span class="hljs-meta">#<span class="hljs-keyword">if</span> ( portUSING_MPU_WRAPPERS == 1 )</span>xMPU_SETTINGSxDummy2;<span class="hljs-meta">#<span class="hljs-keyword">endif</span></span>StaticListItem_txDummy3[ <span class="hljs-number">2</span> ];UBaseType_tuxDummy5;<span class="hljs-type">void</span>*pxDummy6;<span class="hljs-type">uint8_t</span>ucDummy7[ configMAX_TASK_NAME_LEN ];<span class="hljs-meta">#<span class="hljs-keyword">if</span> ( ( portSTACK_GROWTH &gt; 0 ) || ( configRECORD_STACK_HIGH_ADDRESS == 1 ) )</span><span class="hljs-type">void</span>*pxDummy8;<span class="hljs-meta">#<span class="hljs-keyword">endif</span></span><span class="hljs-meta">#<span class="hljs-keyword">if</span> ( portCRITICAL_NESTING_IN_TCB == 1 )</span>UBaseType_tuxDummy9;<span class="hljs-meta">#<span class="hljs-keyword">endif</span></span><span class="hljs-meta">#<span class="hljs-keyword">if</span> ( configUSE_TRACE_FACILITY == 1 )</span>UBaseType_tuxDummy10[ <span class="hljs-number">2</span> ];<span class="hljs-meta">#<span class="hljs-keyword">endif</span></span><span class="hljs-meta">#<span class="hljs-keyword">if</span> ( configUSE_MUTEXES == 1 )</span>UBaseType_tuxDummy12[ <span class="hljs-number">2</span> ];<span class="hljs-meta">#<span class="hljs-keyword">endif</span></span><span class="hljs-meta">#<span class="hljs-keyword">if</span> ( configUSE_APPLICATION_TASK_TAG == 1 )</span><span class="hljs-type">void</span>*pxDummy14;<span class="hljs-meta">#<span class="hljs-keyword">endif</span></span><span class="hljs-meta">#<span class="hljs-keyword">if</span>( configNUM_THREAD_LOCAL_STORAGE_POINTERS &gt; 0 )</span><span class="hljs-type">void</span>*pvDummy15[ configNUM_THREAD_LOCAL_STORAGE_POINTERS ];<span class="hljs-meta">#<span class="hljs-keyword">endif</span></span><span class="hljs-meta">#<span class="hljs-keyword">if</span> ( configGENERATE_RUN_TIME_STATS == 1 )</span><span class="hljs-type">uint32_t</span>ulDummy16;<span class="hljs-meta">#<span class="hljs-keyword">endif</span></span><span class="hljs-meta">#<span class="hljs-keyword">if</span> ( configUSE_NEWLIB_REENTRANT == 1 )</span><span class="hljs-class"><span class="hljs-keyword">struct</span>_<span class="hljs-title">reent</span><span class="hljs-title">xDummy17</span>;</span><span class="hljs-meta">#<span class="hljs-keyword">endif</span></span><span class="hljs-meta">#<span class="hljs-keyword">if</span> ( configUSE_TASK_NOTIFICATIONS == 1 )</span><span class="hljs-type">uint32_t</span> ulDummy18;<span class="hljs-type">uint8_t</span> ucDummy19;<span class="hljs-meta">#<span class="hljs-keyword">endif</span></span><span class="hljs-meta">#<span class="hljs-keyword">if</span>( ( ( configSUPPORT_STATIC_ALLOCATION == 1 ) &amp;&amp; ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) || ( portUSING_MPU_WRAPPERS == 1 ) )</span><span class="hljs-type">uint8_t</span>uxDummy20;<span class="hljs-meta">#<span class="hljs-keyword">endif</span></span><span class="hljs-meta">#<span class="hljs-keyword">if</span>( INCLUDE_xTaskAbortDelay == 1 )</span><span class="hljs-type">uint8_t</span> ucDummy21;<span class="hljs-meta">#<span class="hljs-keyword">endif</span></span>&#125; StaticTask_t;<span class="hljs-comment">/* 静态任务结构体 */</span><span class="hljs-keyword">typedef</span> <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">xSTATIC_QUEUE</span></span><span class="hljs-class">&#123;</span><span class="hljs-type">void</span> *pvDummy1[ <span class="hljs-number">3</span> ];<span class="hljs-class"><span class="hljs-keyword">union</span></span><span class="hljs-class">&#123;</span><span class="hljs-type">void</span> *pvDummy2;UBaseType_t uxDummy2;&#125; u;StaticList_t xDummy3[ <span class="hljs-number">2</span> ];UBaseType_t uxDummy4[ <span class="hljs-number">3</span> ];<span class="hljs-type">uint8_t</span> ucDummy5[ <span class="hljs-number">2</span> ];<span class="hljs-meta">#<span class="hljs-keyword">if</span>( ( configSUPPORT_STATIC_ALLOCATION == 1 ) &amp;&amp; ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )</span><span class="hljs-type">uint8_t</span> ucDummy6;<span class="hljs-meta">#<span class="hljs-keyword">endif</span></span><span class="hljs-meta">#<span class="hljs-keyword">if</span> ( configUSE_QUEUE_SETS == 1 )</span><span class="hljs-type">void</span> *pvDummy7;<span class="hljs-meta">#<span class="hljs-keyword">endif</span></span><span class="hljs-meta">#<span class="hljs-keyword">if</span> ( configUSE_TRACE_FACILITY == 1 )</span>UBaseType_t uxDummy8;<span class="hljs-type">uint8_t</span> ucDummy9;<span class="hljs-meta">#<span class="hljs-keyword">endif</span></span>&#125; StaticQueue_t;<span class="hljs-keyword">typedef</span> StaticQueue_t StaticSemaphore_t;<span class="hljs-comment">/* 静态信号量结构体 */</span><span class="hljs-keyword">typedef</span> <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">xSTATIC_EVENT_GROUP</span></span><span class="hljs-class">&#123;</span>TickType_t xDummy1;StaticList_t xDummy2;<span class="hljs-meta">#<span class="hljs-keyword">if</span>( configUSE_TRACE_FACILITY == 1 )</span>UBaseType_t uxDummy3;<span class="hljs-meta">#<span class="hljs-keyword">endif</span></span><span class="hljs-meta">#<span class="hljs-keyword">if</span>( ( configSUPPORT_STATIC_ALLOCATION == 1 ) &amp;&amp; ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )</span><span class="hljs-type">uint8_t</span> ucDummy4;<span class="hljs-meta">#<span class="hljs-keyword">endif</span></span>&#125; StaticEventGroup_t;<span class="hljs-comment">/* 静态事件组结构体 */</span><span class="hljs-keyword">typedef</span> <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">xSTATIC_TIMER</span></span><span class="hljs-class">&#123;</span><span class="hljs-type">void</span>*pvDummy1;StaticListItem_txDummy2;TickType_txDummy3;UBaseType_tuxDummy4;<span class="hljs-type">void</span> *pvDummy5[ <span class="hljs-number">2</span> ];<span class="hljs-meta">#<span class="hljs-keyword">if</span>( configUSE_TRACE_FACILITY == 1 )</span>UBaseType_tuxDummy6;<span class="hljs-meta">#<span class="hljs-keyword">endif</span></span><span class="hljs-meta">#<span class="hljs-keyword">if</span>( ( configSUPPORT_STATIC_ALLOCATION == 1 ) &amp;&amp; ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )</span><span class="hljs-type">uint8_t</span> ucDummy7;<span class="hljs-meta">#<span class="hljs-keyword">endif</span></span>&#125; StaticTimer_t;<span class="hljs-comment">/* 静态定时器结构体 */</span><span class="hljs-keyword">typedef</span> <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">xSTATIC_STREAM_BUFFER</span></span><span class="hljs-class">&#123;</span><span class="hljs-type">size_t</span> uxDummy1[ <span class="hljs-number">4</span> ];<span class="hljs-type">void</span> * pvDummy2[ <span class="hljs-number">3</span> ];<span class="hljs-type">uint8_t</span> ucDummy3;<span class="hljs-meta">#<span class="hljs-keyword">if</span> ( configUSE_TRACE_FACILITY == 1 )</span>UBaseType_t uxDummy4;<span class="hljs-meta">#<span class="hljs-keyword">endif</span></span>&#125; StaticStreamBuffer_t;<span class="hljs-keyword">typedef</span> StaticStreamBuffer_t StaticMessageBuffer_t;<span class="hljs-comment">/* 静态消息缓冲区结构体 */</span>-----------------------------------------------------------------------------------------------`task.h`<span class="hljs-keyword">typedef</span> <span class="hljs-type">void</span> * TaskHandle_t; <span class="hljs-comment">/* 任务句柄指针 */</span><span class="hljs-keyword">typedef</span> <span class="hljs-title function_">BaseType_t</span> <span class="hljs-params">(*TaskHookFunction_t)</span><span class="hljs-params">( <span class="hljs-type">void</span> * )</span>;<span class="hljs-comment">/* 定义任务钩子函数指针 */</span><span class="hljs-keyword">typedef</span> <span class="hljs-class"><span class="hljs-keyword">enum</span></span><span class="hljs-class">&#123;</span>eRunning = <span class="hljs-number">0</span>,<span class="hljs-comment">/* 运行态. */</span>eReady,<span class="hljs-comment">/* 就绪态 */</span>eBlocked,<span class="hljs-comment">/* 阻塞态 */</span>eSuspended,<span class="hljs-comment">/* 挂起态 */</span>eDeleted,<span class="hljs-comment">/* 删除，但任务控制块还没有释放 */</span>eInvalid<span class="hljs-comment">/* 无效态 */</span>&#125; eTaskState;<span class="hljs-comment">/* eTaskGetState()函数返回的任务状态 */</span><span class="hljs-keyword">typedef</span> <span class="hljs-class"><span class="hljs-keyword">enum</span></span><span class="hljs-class">&#123;</span>eNoAction = <span class="hljs-number">0</span>,<span class="hljs-comment">/* 不更新notification value 而通知任务 */</span>eSetBits,<span class="hljs-comment">/* 设置任务notification value的位 */</span>eIncrement,<span class="hljs-comment">/* 增加任务notification value */</span>eSetValueWithOverwrite,<span class="hljs-comment">/* 即使之前的值还没有被读取，也设置任务notification value为指定值*/</span>eSetValueWithoutOverwrite<span class="hljs-comment">/* 如果之前的值被读取，就设置notification value */</span>&#125; eNotifyAction;<span class="hljs-comment">/* 调用vTaskNotify()函数执行的动作枚举 */</span><span class="hljs-keyword">typedef</span> <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">xTIME_OUT</span></span><span class="hljs-class">&#123;</span>BaseType_t xOverflowCount;TickType_t xTimeOnEntering;&#125; TimeOut_t;<span class="hljs-comment">/* 仅内部使用 */</span><span class="hljs-keyword">typedef</span> <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">xMEMORY_REGION</span></span><span class="hljs-class">&#123;</span><span class="hljs-type">void</span> *pvBaseAddress;<span class="hljs-type">uint32_t</span> ulLengthInBytes;<span class="hljs-type">uint32_t</span> ulParameters;&#125; MemoryRegion_t;<span class="hljs-comment">/* 使用MPU时定义任务内存分配范围 */</span><span class="hljs-keyword">typedef</span> <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">xTASK_PARAMETERS</span></span><span class="hljs-class">&#123;</span>TaskFunction_t pvTaskCode;<span class="hljs-type">const</span> <span class="hljs-type">char</span> * <span class="hljs-type">const</span> pcName;<span class="hljs-type">uint16_t</span> usStackDepth;<span class="hljs-type">void</span> *pvParameters;UBaseType_t uxPriority;StackType_t *puxStackBuffer;MemoryRegion_t xRegions[ portNUM_CONFIGURABLE_REGIONS ];<span class="hljs-meta">#<span class="hljs-keyword">if</span> ( ( portUSING_MPU_WRAPPERS == 1 ) &amp;&amp; ( configSUPPORT_STATIC_ALLOCATION == 1 ) )</span>StaticTask_t * <span class="hljs-type">const</span> pxTaskBuffer;<span class="hljs-meta">#<span class="hljs-keyword">endif</span></span>&#125; TaskParameters_t;<span class="hljs-comment">/* 创建MPU被保护的任务参数结构体 */</span><span class="hljs-keyword">typedef</span> <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">xTASK_STATUS</span></span><span class="hljs-class">&#123;</span>TaskHandle_t xHandle;<span class="hljs-comment">/* 任务结构体句柄 */</span><span class="hljs-type">const</span> <span class="hljs-type">char</span> *pcTaskName;<span class="hljs-comment">/* 任务名指针 */</span>UBaseType_t xTaskNumber;<span class="hljs-comment">/* 任务的独有number */</span>eTaskState eCurrentState;<span class="hljs-comment">/* 任务结构体当前状态 */</span>UBaseType_t uxCurrentPriority;<span class="hljs-comment">/* 运行任务当前优先级 */</span>UBaseType_t uxBasePriority;<span class="hljs-comment">/* 任务当前优先级已被继承，以避免在获得互斥锁时发生无界优先级反转，返回任务优先级 */</span><span class="hljs-type">uint32_t</span> ulRunTimeCounter;<span class="hljs-comment">/* 到目前为止分配给任务的总运行时间 */</span>StackType_t *pxStackBase;<span class="hljs-comment">/* 任务栈最低地址点 */</span><span class="hljs-type">uint16_t</span> usStackHighWaterMark;<span class="hljs-comment">/* 任务剩余的最小栈空间 */</span>&#125; TaskStatus_t;<span class="hljs-comment">/* 使用 uxTaskGetSystemState() 函数系统返回每个任务的状态 */</span><span class="hljs-keyword">typedef</span> <span class="hljs-class"><span class="hljs-keyword">enum</span></span><span class="hljs-class">&#123;</span>eAbortSleep = <span class="hljs-number">0</span>, <span class="hljs-comment">/* 调用portSUPPORESS_TICKS_AND_SLEEP()函数而中止进入睡眠模式，任务进入就绪态或任务切换挂起 */</span>eStandardSleep,<span class="hljs-comment">/* 进入睡眠模式，该模式不会持续超过预期的空闲时间 */</span>eNoTasksWaitingTimeout<span class="hljs-comment">/* 没有任务等待超时，安全进入睡眠模式，只能从外部中断中退出 */</span>&#125; eSleepModeStatus; <span class="hljs-comment">/* eTaskConfirmSleepModeStatus()函数的返回值枚举 */</span></code></pre></div><p><strong><code>其它重定义类型</code></strong></p><div class="code-wrapper"><pre><code class="hljs c">`event_groups.h`<span class="hljs-keyword">typedef</span> <span class="hljs-type">void</span> * EventGroupHandle_t;<span class="hljs-comment">/* 事件组句柄指针 */</span><span class="hljs-keyword">typedef</span> TickType_t EventBits_t;-----------------------------------------------------------------------------------------------`<span class="hljs-built_in">list</span>.h`<span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">xLIST_ITEM</span></span><span class="hljs-class">&#123;</span>configLIST_VOLATILE TickType_t xItemValue;<span class="hljs-comment">/* 列表的值，一般降序排列 */</span><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">xLIST_ITEM</span> * <span class="hljs-title">configLIST_VOLATILE</span> <span class="hljs-title">pxNext</span>;</span><span class="hljs-comment">/* 下一个列表项指针 */</span><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">xLIST_ITEM</span> * <span class="hljs-title">configLIST_VOLATILE</span> <span class="hljs-title">pxPrevious</span>;</span><span class="hljs-comment">/* 前一个列表项指针 */</span><span class="hljs-type">void</span> * pvOwner;<span class="hljs-comment">/* 包含列表项对象的指针 */</span><span class="hljs-type">void</span> * configLIST_VOLATILE pvContainer;<span class="hljs-comment">/* 有列表项的列表指针 */</span>&#125;;<span class="hljs-keyword">typedef</span> <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">xLIST_ITEM</span> <span class="hljs-title">ListItem_t</span>;</span><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">xMINI_LIST_ITEM</span></span><span class="hljs-class">&#123;</span>configLIST_VOLATILE TickType_t xItemValue;<span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">xLIST_ITEM</span> * <span class="hljs-title">configLIST_VOLATILE</span> <span class="hljs-title">pxNext</span>;</span><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">xLIST_ITEM</span> * <span class="hljs-title">configLIST_VOLATILE</span> <span class="hljs-title">pxPrevious</span>;</span>&#125;;<span class="hljs-keyword">typedef</span> <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">xMINI_LIST_ITEM</span> <span class="hljs-title">MiniListItem_t</span>;</span><span class="hljs-keyword">typedef</span> <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">xLIST</span></span><span class="hljs-class">&#123;</span><span class="hljs-keyword">volatile</span> UBaseType_t uxNumberOfItems;ListItem_t * configLIST_VOLATILE pxIndex;<span class="hljs-comment">/* 遍历列表索引，调用listGET_OWNER_OF_NEXT_ENTRY ()函数指向最后一个列表项 */</span>MiniListItem_t xListEnd;<span class="hljs-comment">/* 列表项最后一个 */</span>&#125; List_t;<span class="hljs-comment">/* 队列结构体 */</span>----------------------------------------------------------------------------------------------`message_buffer.h`<span class="hljs-keyword">typedef</span> <span class="hljs-type">void</span> * MessageBufferHandle_t; <span class="hljs-comment">/* 消息缓冲句柄指针 */</span>----------------------------------------------------------------------------------------------`<span class="hljs-built_in">queue</span>.h`<span class="hljs-keyword">typedef</span> <span class="hljs-type">void</span> * QueueHandle_t; <span class="hljs-comment">/* 队列句柄指针 */</span><span class="hljs-keyword">typedef</span> <span class="hljs-type">void</span> * QueueSetHandle_t; <span class="hljs-comment">/* 队列设置句柄指针 */</span><span class="hljs-keyword">typedef</span> <span class="hljs-type">void</span> * QueueSetMemberHandle_t;<span class="hljs-comment">/* 队列或信号量设置成员句柄指针 */</span>----------------------------------------------------------------------------------------------`semphr.h`<span class="hljs-keyword">typedef</span> QueueHandle_t SemaphoreHandle_t;----------------------------------------------------------------------------------------------`stream_buffer.h`<span class="hljs-keyword">typedef</span> <span class="hljs-type">void</span> * StreamBufferHandle_t; <span class="hljs-comment">/* 流缓冲区句柄指针 */</span>----------------------------------------------------------------------------------------------`timers.h`<span class="hljs-keyword">typedef</span> <span class="hljs-type">void</span> * TimerHandle_t;<span class="hljs-comment">/* 定义软定时器句柄指针 */</span><span class="hljs-keyword">typedef</span> <span class="hljs-title function_">void</span> <span class="hljs-params">(*TimerCallbackFunction_t)</span><span class="hljs-params">( TimerHandle_t xTimer )</span>; <span class="hljs-comment">/* 定义软定时器回调函数指针 */</span><span class="hljs-keyword">typedef</span> <span class="hljs-title function_">void</span> <span class="hljs-params">(*PendedFunction_t)</span><span class="hljs-params">( <span class="hljs-type">void</span> *, <span class="hljs-type">uint32_t</span> )</span>;<span class="hljs-comment">/* 定义定时器挂起函数指针 */</span>----------------------------------------------------------------------------------------------`croutine.h`<span class="hljs-keyword">typedef</span> <span class="hljs-type">void</span> * CoRoutineHandle_t;<span class="hljs-comment">/* 协同程序句柄指针 */</span><span class="hljs-keyword">typedef</span> <span class="hljs-title function_">void</span> <span class="hljs-params">(*crCOROUTINE_CODE)</span><span class="hljs-params">( CoRoutineHandle_t, UBaseType_t )</span>;<span class="hljs-comment">/* 协同程序函数指针 */</span><span class="hljs-keyword">typedef</span> <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">corCoRoutineControlBlock</span></span><span class="hljs-class">&#123;</span>crCOROUTINE_CODE pxCoRoutineFunction;ListItem_txGenericListItem;<span class="hljs-comment">/* 协同程序控制块中就绪态和阻塞态列表项 */</span>ListItem_txEventListItem;<span class="hljs-comment">/* 协同程序控制块中事件列表项 */</span>UBaseType_t uxPriority;<span class="hljs-comment">/* 协同程序间的优先级 */</span>UBaseType_t uxIndex;<span class="hljs-comment">/* 当多个协同程序使用同一个函数时用来区别协同程序 */</span><span class="hljs-type">uint16_t</span> uxState;<span class="hljs-comment">/* 协同程序开发内部使用 */</span>&#125; CRCB_t; <span class="hljs-comment">/* 协同控制块 */</span></code></pre></div><p>可以看到这里出现了很多重定义的数据类型，一般我们只需要熟悉常用的，如 <code>portmacro.h</code> 文件中的重定义的数据类型，其它的了解一下即可，至少知道表示什么意思。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;因为不同的数据类型在不同的架构平台上，它的长度是不一样的，为了便于移植，很多独立的流行代码程序都会采用相应的数据类型的重定义，FreeRTOS也不例外，它除了使用了标准的数据类型定义的头文件 &lt;code&gt;&amp;lt;stdint.h&amp;gt;&lt;/code&gt; 外，源码中还重定义了很</summary>
      
    
    
    
    <category term="RTOS" scheme="http://example.com/categories/RTOS/"/>
    
    
    <category term="FreeRTOS" scheme="http://example.com/tags/FreeRTOS/"/>
    
  </entry>
  
  <entry>
    <title>FreeRTOS工程目录文件概览</title>
    <link href="http://example.com/2023/10/04/FreeRTOS%E5%B7%A5%E7%A8%8B%E7%9B%AE%E5%BD%95%E6%96%87%E4%BB%B6%E6%A6%82%E8%A7%88/"/>
    <id>http://example.com/2023/10/04/FreeRTOS%E5%B7%A5%E7%A8%8B%E7%9B%AE%E5%BD%95%E6%96%87%E4%BB%B6%E6%A6%82%E8%A7%88/</id>
    <published>2023-10-04T14:09:48.000Z</published>
    <updated>2023-10-07T05:27:42.369Z</updated>
    
    <content type="html"><![CDATA[<p>FreeRTOS 是市场领先的面向微控制器和小型微处理器的实时操作系统，通过 MIT 开源许可免费分发，包括一个内核和一组不断丰富的 IoT 库，适用于所有行业领域。FreeRTOS 因其免费开源和易用性而得到广泛应用。</p><p>FreeRTOS官网：<a href="https://www.freertos.org/">https://www.freertos.org/</a></p><p>官网上有专门的内核开发文档，这一节主要来看看在STM32开发过程中，使用STM32CubeMX创建FreeRTOS工程生成的目录文件，在正常使用开发工具创建STM32中，只需要添加FreeRTOS选项，如下所示：</p><p><img src="https://gitee.com/kayoungzhang/picgo_res/raw/master/img/image-20231004222504259.png" alt="image-20231004222504259" style="zoom:80%;" /></p><p>配置完成生成MDK-ARM工程即可，生成的整个工程目录如下(Hardware_Driver文件夹为自己添加的BSP文件):</p><figure><img src="https://gitee.com/kayoungzhang/picgo_res/raw/master/img/image-20231004221916476.png" alt="" /><figcaption>image-20231004221916476</figcaption></figure><p>具体的目录结构如下：</p><div class="code-wrapper"><pre><code class="hljs stylus">.│  <span class="hljs-selector-class">.mxproject</span>│  freertos_led<span class="hljs-selector-class">.ioc</span>│├─Core│  ├─Inc│  │      FreeRTOSConfig<span class="hljs-selector-class">.h</span>│  │      gpio<span class="hljs-selector-class">.h</span>│  │      <span class="hljs-selector-tag">main</span><span class="hljs-selector-class">.h</span>│  │      stm32f1xx_hal_conf<span class="hljs-selector-class">.h</span>│  │      stm32f1xx_it<span class="hljs-selector-class">.h</span>│  ││  └─Src│          freertos<span class="hljs-selector-class">.c</span>│          gpio<span class="hljs-selector-class">.c</span>│          <span class="hljs-selector-tag">main</span><span class="hljs-selector-class">.c</span>│          stm32f1xx_hal_msp<span class="hljs-selector-class">.c</span>│          stm32f1xx_hal_timebase_tim<span class="hljs-selector-class">.c</span>│          stm32f1xx_it<span class="hljs-selector-class">.c</span>│          system_stm32f1xx<span class="hljs-selector-class">.c</span>│├─Drivers│  ├─CMSIS│  │  ├─Device│  │  │  └─ST│  │  │      └─STM32F1xx│  │  │          ├─Include│  │  │          │      stm32f103xe<span class="hljs-selector-class">.h</span>│  │  │          │      stm32f1xx<span class="hljs-selector-class">.h</span>│  │  │          │      system_stm32f1xx<span class="hljs-selector-class">.h</span>│  │  │          ││  │  │          └─Source│  │  │              └─Templates│  │  └─Include│  │          cmsis_armcc<span class="hljs-selector-class">.h</span>│  │          cmsis_armclang<span class="hljs-selector-class">.h</span>│  │          cmsis_compiler<span class="hljs-selector-class">.h</span>│  │          cmsis_gcc<span class="hljs-selector-class">.h</span>│  │          cmsis_iccarm<span class="hljs-selector-class">.h</span>│  │          cmsis_version<span class="hljs-selector-class">.h</span>│  │          core_armv8mbl<span class="hljs-selector-class">.h</span>│  │          core_armv8mml<span class="hljs-selector-class">.h</span>│  │          core_cm0<span class="hljs-selector-class">.h</span>│  │          core_cm0plus<span class="hljs-selector-class">.h</span>│  │          core_cm1<span class="hljs-selector-class">.h</span>│  │          core_cm23<span class="hljs-selector-class">.h</span>│  │          core_cm3<span class="hljs-selector-class">.h</span>│  │          core_cm33<span class="hljs-selector-class">.h</span>│  │          core_cm4<span class="hljs-selector-class">.h</span>│  │          core_cm7<span class="hljs-selector-class">.h</span>│  │          core_sc000<span class="hljs-selector-class">.h</span>│  │          core_sc300<span class="hljs-selector-class">.h</span>│  │          mpu_armv7<span class="hljs-selector-class">.h</span>│  │          mpu_armv8<span class="hljs-selector-class">.h</span>│  │          tz_context<span class="hljs-selector-class">.h</span>│  ││  ├─Hardware_Driver│  │      driver_key<span class="hljs-selector-class">.c</span>│  │      driver_key<span class="hljs-selector-class">.h</span>│  │      driver_lcd<span class="hljs-selector-class">.c</span>│  │      driver_lcd<span class="hljs-selector-class">.h</span>│  │      driver_led<span class="hljs-selector-class">.c</span>│  │      driver_led<span class="hljs-selector-class">.h</span>│  │      driver_motor<span class="hljs-selector-class">.c</span>│  │      driver_motor<span class="hljs-selector-class">.h</span>│  │      driver_oled<span class="hljs-selector-class">.c</span>│  │      driver_oled<span class="hljs-selector-class">.h</span>│  ││  └─STM32F1xx_HAL_Driver│      ├─Inc│      │  │  stm32f1xx_hal<span class="hljs-selector-class">.h</span>│      │  │  stm32f1xx_hal_cortex<span class="hljs-selector-class">.h</span>│      │  │  stm32f1xx_hal_def<span class="hljs-selector-class">.h</span>│      │  │  stm32f1xx_hal_dma<span class="hljs-selector-class">.h</span>│      │  │  stm32f1xx_hal_dma_ex<span class="hljs-selector-class">.h</span>│      │  │  stm32f1xx_hal_exti<span class="hljs-selector-class">.h</span>│      │  │  stm32f1xx_hal_flash<span class="hljs-selector-class">.h</span>│      │  │  stm32f1xx_hal_flash_ex<span class="hljs-selector-class">.h</span>│      │  │  stm32f1xx_hal_gpio<span class="hljs-selector-class">.h</span>│      │  │  stm32f1xx_hal_gpio_ex<span class="hljs-selector-class">.h</span>│      │  │  stm32f1xx_hal_pwr<span class="hljs-selector-class">.h</span>│      │  │  stm32f1xx_hal_rcc<span class="hljs-selector-class">.h</span>│      │  │  stm32f1xx_hal_rcc_ex<span class="hljs-selector-class">.h</span>│      │  │  stm32f1xx_hal_tim<span class="hljs-selector-class">.h</span>│      │  │  stm32f1xx_hal_tim_ex<span class="hljs-selector-class">.h</span>│      │  ││      │  └─Legacy│      │          stm32_hal_legacy<span class="hljs-selector-class">.h</span>│      ││      └─Src│              stm32f1xx_hal<span class="hljs-selector-class">.c</span>│              stm32f1xx_hal_cortex<span class="hljs-selector-class">.c</span>│              stm32f1xx_hal_dma<span class="hljs-selector-class">.c</span>│              stm32f1xx_hal_exti<span class="hljs-selector-class">.c</span>│              stm32f1xx_hal_flash<span class="hljs-selector-class">.c</span>│              stm32f1xx_hal_flash_ex<span class="hljs-selector-class">.c</span>│              stm32f1xx_hal_gpio<span class="hljs-selector-class">.c</span>│              stm32f1xx_hal_gpio_ex<span class="hljs-selector-class">.c</span>│              stm32f1xx_hal_pwr<span class="hljs-selector-class">.c</span>│              stm32f1xx_hal_rcc<span class="hljs-selector-class">.c</span>│              stm32f1xx_hal_rcc_ex<span class="hljs-selector-class">.c</span>│              stm32f1xx_hal_tim<span class="hljs-selector-class">.c</span>│              stm32f1xx_hal_tim_ex<span class="hljs-selector-class">.c</span>│├─MDK-ARM│      freertos_led<span class="hljs-selector-class">.uvoptx</span>│      freertos_led<span class="hljs-selector-class">.uvprojx</span>│      startup_stm32f103xe<span class="hljs-selector-class">.s</span>│└─Middlewares    └─Third_Party        └─FreeRTOS            └─Source                │  croutine<span class="hljs-selector-class">.c</span>                │  event_groups<span class="hljs-selector-class">.c</span>                │  list<span class="hljs-selector-class">.c</span>                │  queue<span class="hljs-selector-class">.c</span>                │  stream_buffer<span class="hljs-selector-class">.c</span>                │  tasks<span class="hljs-selector-class">.c</span>                │  timers<span class="hljs-selector-class">.c</span>                │                ├─CMSIS_RTOS_V2                │      cmsis_os<span class="hljs-selector-class">.h</span>                │      cmsis_os2<span class="hljs-selector-class">.c</span>                │      cmsis_os2<span class="hljs-selector-class">.h</span>                │                ├─include                │      croutine<span class="hljs-selector-class">.h</span>                │      deprecated_definitions<span class="hljs-selector-class">.h</span>                │      event_groups<span class="hljs-selector-class">.h</span>                │      FreeRTOS<span class="hljs-selector-class">.h</span>                │      list<span class="hljs-selector-class">.h</span>                │      message_buffer<span class="hljs-selector-class">.h</span>                │      mpu_prototypes<span class="hljs-selector-class">.h</span>                │      mpu_wrappers<span class="hljs-selector-class">.h</span>                │      portable<span class="hljs-selector-class">.h</span>                │      projdefs<span class="hljs-selector-class">.h</span>                │      queue<span class="hljs-selector-class">.h</span>                │      semphr<span class="hljs-selector-class">.h</span>                │      StackMacros<span class="hljs-selector-class">.h</span>                │      stack_macros<span class="hljs-selector-class">.h</span>                │      stream_buffer<span class="hljs-selector-class">.h</span>                │      task<span class="hljs-selector-class">.h</span>                │      timers<span class="hljs-selector-class">.h</span>                │                └─portable                    ├─MemMang                    │      heap_4<span class="hljs-selector-class">.c</span>                    │                    └─RVDS                        └─ARM_CM3                                port<span class="hljs-selector-class">.c</span>                                portmacro.h</code></pre></div>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;FreeRTOS 是市场领先的面向微控制器和小型微处理器的实时操作系统，通过 MIT 开源许可免费分发，包括一个内核和一组不断丰富的 IoT 库，适用于所有行业领域。FreeRTOS 因其免费开源和易用性而得到广泛应用。&lt;/p&gt;
&lt;p&gt;FreeRTOS官网：&lt;a href</summary>
      
    
    
    
    <category term="RTOS" scheme="http://example.com/categories/RTOS/"/>
    
    
    <category term="FreeRTOS" scheme="http://example.com/tags/FreeRTOS/"/>
    
  </entry>
  
  <entry>
    <title>PID控制器算法进阶</title>
    <link href="http://example.com/2023/09/25/PID%E6%8E%A7%E5%88%B6%E5%99%A8%E7%AE%97%E6%B3%95%E8%BF%9B%E9%98%B6/"/>
    <id>http://example.com/2023/09/25/PID%E6%8E%A7%E5%88%B6%E5%99%A8%E7%AE%97%E6%B3%95%E8%BF%9B%E9%98%B6/</id>
    <published>2023-09-25T10:47:15.000Z</published>
    <updated>2023-09-27T01:46:42.940Z</updated>
    
    <content type="html"><![CDATA[<p>PID算法中处理方式有：</p><ul><li><p>pid算法巩固</p><p><a href="https://blog.csdn.net/foxclever/article/details/80250994">https://blog.csdn.net/foxclever/article/details/80250994</a></p></li><li><p>积分分离</p><p><a href="https://blog.csdn.net/foxclever/article/details/80274790">https://blog.csdn.net/foxclever/article/details/80274790</a></p></li><li><p>抗积分饱和</p><p><a href="https://blog.csdn.net/foxclever/article/details/80294264">https://blog.csdn.net/foxclever/article/details/80294264</a></p></li><li><p>梯形积分</p><p><a href="https://blog.csdn.net/foxclever/article/details/80297989">https://blog.csdn.net/foxclever/article/details/80297989</a></p></li><li><p>变积分</p><p><a href="https://blog.csdn.net/foxclever/article/details/80466623">https://blog.csdn.net/foxclever/article/details/80466623</a></p></li><li><p>不完全微分</p><p><a href="https://blog.csdn.net/foxclever/article/details/80551919">https://blog.csdn.net/foxclever/article/details/80551919</a></p></li><li><p>微分先行</p><p><a href="https://blog.csdn.net/foxclever/article/details/80633275">https://blog.csdn.net/foxclever/article/details/80633275</a></p></li><li><p>带死区pid</p><p><a href="https://blog.csdn.net/foxclever/article/details/80778748">https://blog.csdn.net/foxclever/article/details/80778748</a></p></li><li><p>模糊pid</p><p><a href="https://blog.csdn.net/foxclever/article/details/83932107">https://blog.csdn.net/foxclever/article/details/83932107</a></p></li><li><p>神经元网络pid</p><p><a href="https://blog.csdn.net/foxclever/article/details/84678393">https://blog.csdn.net/foxclever/article/details/84678393</a></p></li><li><p>前馈补偿</p><p><a href="https://blog.csdn.net/foxclever/article/details/81048086">https://blog.csdn.net/foxclever/article/details/81048086</a></p></li><li><p>手动自动切换</p><p><a href="https://blog.csdn.net/foxclever/article/details/105308284">https://blog.csdn.net/foxclever/article/details/105308284</a></p></li><li><p>pid参数的动态调整</p><p><a href="https://blog.csdn.net/foxclever/article/details/105006205">https://blog.csdn.net/foxclever/article/details/105006205</a></p></li><li><p>pid参数的选择设置</p><p><a href="https://blog.csdn.net/foxclever/article/details/122801130">https://blog.csdn.net/foxclever/article/details/122801130</a></p></li><li><p>正反向的控制过程</p><p><a href="https://blog.csdn.net/foxclever/article/details/105613183">https://blog.csdn.net/foxclever/article/details/105613183</a></p></li><li><p>串级pid</p><p><a href="https://blog.csdn.net/foxclever/article/details/105907982">https://blog.csdn.net/foxclever/article/details/105907982</a></p></li><li><p>pid设定值相应</p><p><a href="https://blog.csdn.net/foxclever/article/details/105747647">https://blog.csdn.net/foxclever/article/details/105747647</a></p></li><li><p>pid防超调设置</p><p><a href="https://blog.csdn.net/foxclever/article/details/126085428">https://blog.csdn.net/foxclever/article/details/126085428</a></p></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;PID算法中处理方式有：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;pid算法巩固&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://blog.csdn.net/foxclever/article/details/80250994&quot;&gt;https://blog.csdn.net/f</summary>
      
    
    
    
    <category term="数据结构与算法" scheme="http://example.com/categories/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/"/>
    
    
    <category term="pid" scheme="http://example.com/tags/pid/"/>
    
  </entry>
  
  <entry>
    <title>基于算术平均算法的滤波器</title>
    <link href="http://example.com/2023/09/22/%E5%9F%BA%E4%BA%8E%E7%AE%97%E6%9C%AF%E5%B9%B3%E5%9D%87%E7%AE%97%E6%B3%95%E7%9A%84%E6%BB%A4%E6%B3%A2%E5%99%A8/"/>
    <id>http://example.com/2023/09/22/%E5%9F%BA%E4%BA%8E%E7%AE%97%E6%9C%AF%E5%B9%B3%E5%9D%87%E7%AE%97%E6%B3%95%E7%9A%84%E6%BB%A4%E6%B3%A2%E5%99%A8/</id>
    <published>2023-09-22T05:58:53.000Z</published>
    <updated>2023-09-25T05:48:10.424Z</updated>
    
    <content type="html"><![CDATA[<p>在AD采集获取数据时，为避免干扰信号的影响，一般我们都会对获取的原始数据进行滤波处理，比较常见的做法是算术平均，即对N个数据进行平均求值，为了进一步优化这种简易的平均算法，我们可以采用以下方法：</p><ul><li><strong>算术平均的递推平滑滤波</strong></li><li><strong>算术平均的带阻平滑滤波</strong></li><li><strong>算术平均的阶梯平滑滤波</strong></li><li><strong>算术平均的中值滤波</strong></li><li><strong>算术平均的限幅滤波</strong></li></ul><p>下面分别来看看这几种算术平均滤波算法：</p><h2 id="算术平均的递推平滑滤波">算术平均的递推平滑滤波</h2><p>在简易的平均算法中，取N个数计算后就会丢弃，如果N值较大，耗时就会较长，这样数据看起来可能就并不那么平滑，而递推平均算法则不存在这些问题。同样一个长度为N的数据队列，每新采样一次数据，就用此数据替换掉最老的数据，并输出算术平均值。实现如下：</p><div class="code-wrapper"><pre><code class="hljs c"><span class="hljs-comment">/* 定义平滑滤波对象类型 */</span><span class="hljs-keyword">typedef</span> <span class="hljs-class"><span class="hljs-keyword">struct</span> _<span class="hljs-title">FilterObject</span>&#123;</span>  <span class="hljs-type">float</span> newValue;       <span class="hljs-comment">//最新测量值</span>  <span class="hljs-type">float</span> lastValue;      <span class="hljs-comment">//上一个输出值</span>  <span class="hljs-type">float</span> *buffer;        <span class="hljs-comment">//数据缓存区</span>  <span class="hljs-type">int16_t</span> position;     <span class="hljs-comment">//写操作位置</span>  <span class="hljs-type">uint16_t</span> bufCount;    <span class="hljs-comment">//滤波的数量</span>&#125;<span class="hljs-type">filter_t</span>;<span class="hljs-comment">/* 平滑滤波处理函数，返回滤波后的值 */</span><span class="hljs-type">float</span> <span class="hljs-title function_">SmoothingFilter</span><span class="hljs-params">(<span class="hljs-keyword">struct</span> _FilterObject *filter)</span>&#123;  <span class="hljs-type">float</span> result=lastValue;   <span class="hljs-comment">/* 填充缓冲区 */</span>  <span class="hljs-keyword">if</span>(filter-&gt;position&gt;=filter-&gt;bufCount)  &#123;<span class="hljs-comment">/* 超出范围 */</span>    filter-&gt;position=<span class="hljs-number">0</span>;  &#125;  <span class="hljs-keyword">else</span>  &#123;    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>;i&lt;filter-&gt;bufCount;i++)    &#123;      filter-&gt;buffer[i]=filter-&gt;newValue;    &#125;    filter-&gt;position=<span class="hljs-number">0</span>;    filter-&gt;lastValue=filter-&gt;newValue;  &#125; <span class="hljs-comment">/* 算法的关键处-&gt;类同变化率 */</span>  result = filter-&gt;lastValue - filter-&gt;buffer[filter-&gt;position]/filter-&gt;bufCount;  result += filter-&gt;newValue/filter-&gt;bufCount;    filter-&gt;buffer[filter-&gt;position++] = filter-&gt;newValue;<span class="hljs-comment">//替换之后，位置后移</span>  filter-&gt;lastValue = result;  filter-&gt;newValue = <span class="hljs-number">0.0</span>;    <span class="hljs-keyword">return</span> result;&#125;</code></pre></div><p>特点：第一，对周期性干扰和高频的干扰都有一定的效果。第二，数据变化不明显，响应较慢，而且N越大越明显。第三，对偶然出现的脉冲性干扰的抑制作用较差。所以这种滤波器并不适用于脉冲干扰比较严重的场合。</p><h2 id="算术平均的带阻平滑滤波">算术平均的带阻平滑滤波</h2><p>这种方式是对比本次采集与上次采集数据的偏差值，如果偏差值大于设定的做大值则认为数据变化远超干扰的影响，忽略干扰，直接对数据进行更新。如果偏差值小于设定的最小值则认为数据稳定，不需要滤波。如果偏差值处于设定的最大最小值之间，则需要进行滤波处理。</p><div class="code-wrapper"><pre><code class="hljs c"><span class="hljs-comment">/*定义平滑滤波对象类型*/</span><span class="hljs-keyword">typedef</span> <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">FilterObject</span>&#123;</span>  <span class="hljs-type">float</span> newValue;       <span class="hljs-comment">//最新测量值</span>  <span class="hljs-type">float</span> lastValue;      <span class="hljs-comment">//上一个输出值</span>  <span class="hljs-type">float</span> *buffer;        <span class="hljs-comment">//数据缓存区</span>  <span class="hljs-type">int16_t</span> position;    <span class="hljs-comment">//写操作位置指针</span>  <span class="hljs-type">uint16_t</span> bufCount;    <span class="hljs-comment">//滤波的数量</span>  <span class="hljs-type">uint16_t</span> delayCount;  <span class="hljs-comment">//延迟计数</span>  <span class="hljs-type">uint16_t</span> delayLimit;  <span class="hljs-comment">//延迟限值</span>  <span class="hljs-type">float</span> rangeLimit;     <span class="hljs-comment">//量程范围</span>  <span class="hljs-type">float</span> upperRario;     <span class="hljs-comment">//比例下限</span>  <span class="hljs-type">float</span> lowerRatio;     <span class="hljs-comment">//比例下限</span>&#125;FilterObjectType;<span class="hljs-comment">/* 带阻平滑滤波器，对指定区间滤波，返回滤波后的值*/</span><span class="hljs-type">float</span> <span class="hljs-title function_">BandSmoothingFilter</span><span class="hljs-params">(FilterObjectType *filter)</span>&#123;  <span class="hljs-type">float</span> result=filter-&gt;lastValue;   <span class="hljs-comment">/* 填充缓冲区 */</span>  <span class="hljs-keyword">if</span>(filter-&gt;position&gt;=filter-&gt;bufCount)  &#123;    filter-&gt;position=<span class="hljs-number">0</span>;  &#125;  <span class="hljs-keyword">else</span>  &#123;    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>;i&lt;filter-&gt;bufCount;i++)    &#123;      filter-&gt;buffer[i]=filter-&gt;newValue;    &#125;    filter-&gt;position=<span class="hljs-number">0</span>;    filter-&gt;lastValue=filter-&gt;newValue;  &#125;   <span class="hljs-keyword">if</span>(<span class="hljs-built_in">fabs</span>(filter-&gt;newValue-filter-&gt;lastValue)&gt;=(filter-&gt;rangeLimit*filter-&gt;lowerRatio/<span class="hljs-number">100</span>))  &#123;<span class="hljs-comment">/* 范围之间 滤波 */</span>    result=filter-&gt;lastValue-filter-&gt;buffer[filter-&gt;position]/filter-&gt;bufCount;    result+=filter-&gt;newValue/filter-&gt;bufCount;      filter-&gt;buffer[filter-&gt;position++]=filter-&gt;newValue;  &#125;  <span class="hljs-keyword">else</span>  &#123;<span class="hljs-comment">/* 不滤波 消抖 */</span>    filter-&gt;delayCount+=<span class="hljs-number">1</span>;    <span class="hljs-keyword">if</span>(filter-&gt;delayCount&gt;=filter-&gt;delayLimit)    &#123;      <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>;i&lt;filter-&gt;bufCount;i++)      &#123;        filter-&gt;buffer[i]=filter-&gt;newValue;      &#125;      filter-&gt;position++;      result=filter-&gt;newValue;      filter-&gt;delayCount=<span class="hljs-number">0</span>;    &#125;  &#125;  filter-&gt;lastValue=result;  filter-&gt;newValue=<span class="hljs-number">0.0</span>;    <span class="hljs-keyword">return</span> result;&#125;</code></pre></div><p>特点：通过区间滤波，对周期性干扰和小幅的噪声干扰均有较好的效果。如果出现持续性的高频大幅脉冲干扰，这一滤波器将变得无能为力。</p><h2 id="算术平均的阶梯平滑滤波">算术平均的阶梯平滑滤波</h2><p>对于一些情况，如小幅值干扰信号持续存在而被测信号也基本处于一个稳定的区间内。对比本次采集与上次采集数据的偏差值，如果偏差值大于设定的做大值则认为数据变化远超干扰的影响，忽略干扰，直接对数据进行更新。如果偏差值小于设定的最小值则认为数据稳定，这时的干扰于数据的变化不能忽略，我们需要采用完全滤波。如果偏差值处于设定的最大最小值之间，则干扰信号相比于数据的变化较小，但不可忽略，进行半滤波处理。</p><div class="code-wrapper"><pre><code class="hljs c"><span class="hljs-comment">/*定义平滑滤波对象类型*/</span><span class="hljs-keyword">typedef</span> <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">FilterObject</span>&#123;</span>  <span class="hljs-type">float</span> newValue;       <span class="hljs-comment">//最新测量值</span>  <span class="hljs-type">float</span> lastValue;      <span class="hljs-comment">//上一个输出值</span>  <span class="hljs-type">float</span> *buffer;        <span class="hljs-comment">//数据缓存区</span>  <span class="hljs-type">int16_t</span> position;    <span class="hljs-comment">//写操作位置指针</span>  <span class="hljs-type">uint16_t</span> bufCount;    <span class="hljs-comment">//滤波的数量</span>  <span class="hljs-type">uint16_t</span> delayCount;  <span class="hljs-comment">//延迟计数</span>  <span class="hljs-type">uint16_t</span> delayLimit;  <span class="hljs-comment">//延迟限值</span>  <span class="hljs-type">float</span> rangeLimit;     <span class="hljs-comment">//量程范围</span>  <span class="hljs-type">float</span> upperRario;     <span class="hljs-comment">//比例下限</span>  <span class="hljs-type">float</span> lowerRatio;     <span class="hljs-comment">//比例下限</span>&#125;FilterObjectType;<span class="hljs-comment">/* 阶梯平滑滤波处理函数，返回滤波后的值*/</span><span class="hljs-type">float</span> <span class="hljs-title function_">StepSmoothingFilter</span><span class="hljs-params">(FilterObjectType *filter)</span>&#123;  <span class="hljs-type">float</span> result=filter-&gt;lastValue;  <span class="hljs-comment">/* 填充缓冲区 */</span>  <span class="hljs-keyword">if</span>(filter-&gt;position&gt;=filter-&gt;bufCount)  &#123;    filter-&gt;position=<span class="hljs-number">0</span>;  &#125;  <span class="hljs-keyword">else</span>  &#123;    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>;i&lt;filter-&gt;bufCount;i++)    &#123;      filter-&gt;buffer[i]=filter-&gt;newValue;    &#125;    filter-&gt;position=<span class="hljs-number">0</span>;    filter-&gt;lastValue=filter-&gt;newValue;  &#125;   <span class="hljs-keyword">if</span>(<span class="hljs-built_in">fabs</span>(filter-&gt;newValue-filter-&gt;lastValue)&gt;(filter-&gt;rangeLimit*filter-&gt;upperRario/<span class="hljs-number">100</span>))  &#123;<span class="hljs-comment">/* 超过最大值直接更新值 消抖 */</span>    filter-&gt;delayCount+=<span class="hljs-number">1</span>;    <span class="hljs-keyword">if</span>(filter-&gt;delayCount&gt;=filter-&gt;delayLimit)    &#123;      <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>;i&lt;filter-&gt;bufCount;i++)      &#123;        filter-&gt;buffer[i]=filter-&gt;newValue;      &#125;      filter-&gt;position++;      result=filter-&gt;newValue;      filter-&gt;delayCount=<span class="hljs-number">0</span>;    &#125;  &#125;  <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(<span class="hljs-built_in">fabs</span>(filter-&gt;newValue-filter-&gt;lastValue)&gt;=(filter-&gt;rangeLimit*filter-&gt;lowerRatio/<span class="hljs-number">100</span>))  &#123;<span class="hljs-comment">/* 小于最小值 完全滤波 */</span>    result=filter-&gt;lastValue-filter-&gt;buffer[filter-&gt;position]/filter-&gt;bufCount;       result+=filter-&gt;newValue/filter-&gt;bufCount;       filter-&gt;buffer[filter-&gt;position++]=filter-&gt;newValue;    <span class="hljs-keyword">if</span>(filter-&gt;position&gt;=filter-&gt;bufCount)    &#123;      filter-&gt;position=<span class="hljs-number">0</span>;    &#125;       result=result-filter-&gt;buffer[filter-&gt;position]/filter-&gt;bufCount;    result=result+filter-&gt;newValue/filter-&gt;bufCount;    filter-&gt;buffer[filter-&gt;position++]=filter-&gt;newValue;    filter-&gt;delayCount=<span class="hljs-number">0</span>;  &#125;  <span class="hljs-keyword">else</span>  &#123;<span class="hljs-comment">/* 范围之内 半滤波 */</span>    result=filter-&gt;lastValue-filter-&gt;buffer[filter-&gt;position]/filter-&gt;bufCount;     result=result+filter-&gt;newValue/filter-&gt;bufCount;    filter-&gt;buffer[filter-&gt;position++]=filter-&gt;newValue;    filter-&gt;delayCount=<span class="hljs-number">0</span>;  &#125;   filter-&gt;lastValue=result;  filter-&gt;newValue=<span class="hljs-number">0.0</span>;  <span class="hljs-keyword">return</span> result;&#125;</code></pre></div><h2 id="算术平均的中值滤波"><strong>算术平均的中值滤波</strong></h2><p>中值滤波主要是去除相对频率较低的周期干扰和相对频率较高的非周期干扰。去掉最高和最低的数，中间的数更为接近真实值。这一滤波算法适用于高速采集，必须采集到一定数量的数据，一般一次采集几十个数然后再做此滤波是比较有效果的。</p><div class="code-wrapper"><pre><code class="hljs c"><span class="hljs-comment">/* 中值平均滤波算法 */</span><span class="hljs-comment">/* pData:采集的数据指针 */</span><span class="hljs-comment">/* aSize:采集的数据长度 */</span><span class="hljs-comment">/* eSize:各需要丢弃的极大值和极小值的数量 */</span><span class="hljs-type">static</span> <span class="hljs-type">uint32_t</span> <span class="hljs-title function_">MedianMeanFilter</span><span class="hljs-params">(<span class="hljs-type">uint32_t</span> *pData,<span class="hljs-type">uint16_t</span> aSize,<span class="hljs-type">uint16_t</span> eSize)</span>&#123;    <span class="hljs-type">uint32_t</span> tData;    <span class="hljs-type">uint32_t</span> result=<span class="hljs-number">0</span>;        <span class="hljs-keyword">if</span>(aSize&lt;=<span class="hljs-number">2</span>*eSize)    &#123;        <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;    &#125;    <span class="hljs-comment">/* 冒泡排序 */</span>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>; i&lt;aSize<span class="hljs-number">-1</span>; i++)  <span class="hljs-comment">//比较n-1轮</span>    &#123;        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> j=<span class="hljs-number">0</span>; j&lt;aSize<span class="hljs-number">-1</span>-i; j++)  <span class="hljs-comment">//每轮比较n-1-i次,</span>        &#123;            <span class="hljs-keyword">if</span> (pData[j] &lt; pData[j+<span class="hljs-number">1</span>])            &#123;                tData = pData[j];                pData[j] = pData[j+<span class="hljs-number">1</span>];                pData[j+<span class="hljs-number">1</span>] = tData;            &#125;        &#125;    &#125;    <span class="hljs-comment">/* 去掉首末端eSize数据，取平均值 */</span>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> j=eSize;j&lt;(aSize-eSize);j++)    &#123;        result+=pData[j];    &#125;        result /= (aSize<span class="hljs-number">-2</span>*eSize);        <span class="hljs-keyword">return</span> result;&#125;</code></pre></div><h2 id="算术平均的限幅滤波"><strong>算术平均的限幅滤波</strong></h2><p>此种算法就是在中值滤波的基础上剔除超出限幅的数据。</p><div class="code-wrapper"><pre><code class="hljs c"><span class="hljs-comment">/*限幅平均滤波算法*/</span><span class="hljs-comment">/* pData:采集的数据指针 */</span><span class="hljs-comment">/* aSize:采集的数据长度 */</span><span class="hljs-comment">/* eSize:各需要丢弃的极大值和极小值的数量 */</span><span class="hljs-comment">/* rData:参考值 */</span><span class="hljs-comment">/* lValue:偏离参考值的限幅 */</span><span class="hljs-type">static</span> <span class="hljs-type">uint32_t</span> <span class="hljs-title function_">LimitedMeanFilter</span><span class="hljs-params">(<span class="hljs-type">uint32_t</span> *pData,<span class="hljs-type">uint16_t</span> aSize,<span class="hljs-type">uint16_t</span> eSize,<span class="hljs-type">uint32_t</span> rData,<span class="hljs-type">uint32_t</span> lValue)</span>&#123;  <span class="hljs-type">uint32_t</span> uResult=<span class="hljs-number">0</span>, mResult=<span class="hljs-number">0</span>, lResult=<span class="hljs-number">0</span>; <span class="hljs-comment">//求和值</span>  <span class="hljs-type">uint16_t</span> uNumber=<span class="hljs-number">0</span>, mNumber=<span class="hljs-number">0</span>, lNumber=<span class="hljs-number">0</span>; <span class="hljs-comment">//数量</span>  <span class="hljs-comment">/* 判断采集的数据量 */</span>  <span class="hljs-keyword">if</span>(aSize&lt;=<span class="hljs-number">2</span>*eSize)  &#123;     <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;  &#125;  <span class="hljs-comment">/* 冒泡排序 */</span>  <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>; i&lt;aSize<span class="hljs-number">-1</span>; i++) <span class="hljs-comment">//比较n-1轮</span>  &#123;     <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> j=<span class="hljs-number">0</span>; j&lt;aSize<span class="hljs-number">-1</span>-i; j++) <span class="hljs-comment">//每轮比较n-1-i次,</span>     &#123;       <span class="hljs-keyword">if</span> (pData[j] &lt; pData[j+<span class="hljs-number">1</span>])       &#123;         pData[j]^=pData[j+<span class="hljs-number">1</span>];         pData[j+<span class="hljs-number">1</span>]^= pData[j];         pData[j]^=pData[j+<span class="hljs-number">1</span>];       &#125;     &#125;  &#125;  <span class="hljs-comment">/* 剔除极值后根据限幅值求和 */</span>  <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> j=eSize;j&lt;(aSize-eSize);j++)  &#123;     <span class="hljs-keyword">if</span>(pData[j]&gt;(rData+lValue))     &#123;<span class="hljs-comment">/* 大于上限 */</span>       uResult+=pData[j];       uNumber++;     &#125;     <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(pData[j]&lt;(rData-lValue))     &#123;<span class="hljs-comment">/* 小于下限 */</span>       lResult+=pData[j];       lNumber++;     &#125;     <span class="hljs-keyword">else</span>     &#123;<span class="hljs-comment">/* 上下限之间 */</span>       mResult+=pData[j];       mNumber++;     &#125;  &#125;  <span class="hljs-comment">/* 求平均值 */</span>  <span class="hljs-keyword">if</span>((mNumber&gt;uNumber)&amp;&amp;(mNumber&gt;lNumber))  &#123;<span class="hljs-comment">/* 处于上下限之间的数据量较大时 */</span>     mResult = mResult/mNumber;  &#125;  <span class="hljs-keyword">else</span>  &#123;     mResult = (uResult+mResult+lResult)/(uNumber+mNumber+lNumber);  &#125;    <span class="hljs-keyword">return</span> mResult;&#125;</code></pre></div><p><strong>参考链接：</strong></p><p><a href="https://blog.csdn.net/foxclever/article/details/106038732">滤波器开发之一：基于算数平均的平滑滤波器_算术平均掩模_foxclever的博客-CSDN博客</a></p><p><a href="https://blog.csdn.net/foxclever/article/details/106296222">滤波器开发之二：基于算数平均的带阻平滑滤波器_用均值滤波实现带阻滤波-CSDN博客</a></p><p><a href="https://blog.csdn.net/foxclever/article/details/106448052">滤波器开发之三：基于算数平均的阶进平滑滤波器_阶梯平滑_foxclever的博客-CSDN博客</a></p><p><a href="https://blog.csdn.net/foxclever/article/details/120925665">滤波器开发之四：基于算术平均的中值滤波器_算术中值滤波_foxclever的博客-CSDN博客</a></p><p><a href="https://blog.csdn.net/foxclever/article/details/121191411">滤波器开发之五：基于算术平均的限幅滤波器-CSDN博客</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;在AD采集获取数据时，为避免干扰信号的影响，一般我们都会对获取的原始数据进行滤波处理，比较常见的做法是算术平均，即对N个数据进行平均求值，为了进一步优化这种简易的平均算法，我们可以采用以下方法：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;算术平均的递推平滑滤波&lt;/str</summary>
      
    
    
    
    <category term="数据结构与算法" scheme="http://example.com/categories/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/"/>
    
    
    <category term="算术平均" scheme="http://example.com/tags/%E7%AE%97%E6%9C%AF%E5%B9%B3%E5%9D%87/"/>
    
  </entry>
  
  <entry>
    <title>C语言中的回调函数及使用</title>
    <link href="http://example.com/2023/09/07/C%E8%AF%AD%E8%A8%80%E4%B8%AD%E7%9A%84%E5%9B%9E%E8%B0%83%E5%87%BD%E6%95%B0%E5%8F%8A%E4%BD%BF%E7%94%A8/"/>
    <id>http://example.com/2023/09/07/C%E8%AF%AD%E8%A8%80%E4%B8%AD%E7%9A%84%E5%9B%9E%E8%B0%83%E5%87%BD%E6%95%B0%E5%8F%8A%E4%BD%BF%E7%94%A8/</id>
    <published>2023-09-07T02:13:19.000Z</published>
    <updated>2023-09-19T00:36:00.844Z</updated>
    
    <content type="html"><![CDATA[<p>在开发过程中，我们会经常碰到回调函数的问题，那什么是回调函数？怎么使用回调函数呢？下面具体来看看。</p><h1 id="什么是回调函数">什么是回调函数</h1><p><strong>回调函数</strong>就是一个通过<strong>函数指针</strong>调用的函数。</p><p>假如你把 <strong>函数A的指针</strong> 当作参数传给 <strong>函数B</strong>，然后在 <strong>函数B</strong> 中通过传进来的这个指针调用 <strong>函数A</strong> ，那么这就是回调机制，<strong>函数A</strong> 就是<strong>回调函数</strong>。</p><p>知乎上有个比较形象的比喻：你到商店买东西，刚好没货，于是留下了你的电话，有货后店员就打了你的电话，去店里取货。在这个例子里，你的电话号码就叫<strong>回调函数</strong>，你把电话留给店员就叫<strong>注册回调函数</strong>，店里后来有货了叫做<strong>触发了回调关联的事件</strong>，店员给你打电话叫做<strong>调用回调函数</strong>，你到店里去取货叫做<strong>响应回调事件</strong>。</p><h1 id="为何要使用回调函数">为何要使用回调函数</h1><p>回调函数最大的优势是解耦，降低了程序的耦合度，使上层的应用更完整，而不需要考虑底层的实现细节，方便协作与移植。</p><figure><img src="https://gitee.com/kayoungzhang/picgo_res/raw/master/img/2ecc00017db499f2620d.jpeg" alt="" /><figcaption>img</figcaption></figure><div class="code-wrapper"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;stdio.h&gt;</span></span><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;softwareLib.h&gt;</span> <span class="hljs-comment">//Library 函数所在库的头文件</span></span><span class="hljs-type">int</span> <span class="hljs-title function_">Callback</span><span class="hljs-params">()</span> <span class="hljs-comment">// Callback Function</span>&#123;    <span class="hljs-comment">// TODO</span>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;&#125;<span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span> <span class="hljs-comment">// Main program</span>&#123;    <span class="hljs-comment">// TODO</span>    Library(Callback);    <span class="hljs-comment">// TODO</span>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;&#125;</code></pre></div><p>乍一看，回调似乎只是函数间的调用，和普通函数调用没啥区别，但仔细一看，可以发现：</p><p>主函数和回调函数是在同一层，而库函数在另外一层，主程序中把回调函数当参数传入库函数中。只要我们改变传进库函数的参数（函数指针），就可以实现不同的功能，丝毫不需要修改库函数的实现，这就是解耦。</p><h1 id="如何使用回调函数">如何使用回调函数</h1><h3 id="以简单的函数指针参数形式使用">1.以简单的函数指针参数形式使用</h3><div class="code-wrapper"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><span class="hljs-type">int</span> <span class="hljs-title function_">Callback_1</span><span class="hljs-params">()</span> <span class="hljs-comment">// Callback Function 1</span>&#123;<span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;Hello, this is Callback_1\n&quot;</span>);  <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;&#125;<span class="hljs-type">int</span> <span class="hljs-title function_">Callback_2</span><span class="hljs-params">()</span> <span class="hljs-comment">// Callback Function 2</span>&#123;<span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;Hello, this is Callback_2\n&quot;</span>);  <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;&#125;<span class="hljs-type">void</span> <span class="hljs-title function_">Handle</span><span class="hljs-params">(<span class="hljs-type">int</span> (*Callback)())</span>&#123;Callback();&#125;<span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span>&#123;Handle(Callback_1);  Handle(Callback_2);  <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;&#125;</code></pre></div><figure><img src="https://gitee.com/kayoungzhang/picgo_res/raw/master/img/image-20230918221802882.png" alt="" /><figcaption>image-20230918221802882</figcaption></figure><h3 id="以typedef定义的函数指针类型方式使用">2.以typedef定义的函数指针类型方式使用</h3><div class="code-wrapper"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><span class="hljs-keyword">typedef</span> <span class="hljs-title function_">int</span> <span class="hljs-params">(*cb)</span><span class="hljs-params">(<span class="hljs-type">int</span>)</span>;<span class="hljs-type">int</span> <span class="hljs-title function_">Callback_1</span><span class="hljs-params">(<span class="hljs-type">int</span> a)</span> <span class="hljs-comment">// Callback Function 1</span>&#123;<span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;Hello, this is Callback_1, %d\n&quot;</span>, a);  <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;&#125;<span class="hljs-type">int</span> <span class="hljs-title function_">Callback_2</span><span class="hljs-params">(<span class="hljs-type">int</span> b)</span> <span class="hljs-comment">// Callback Function 2</span>&#123;<span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;Hello, this is Callback_2, %d\n&quot;</span>, b);  <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;&#125;<span class="hljs-type">void</span> <span class="hljs-title function_">Handle</span><span class="hljs-params">(cb callback, <span class="hljs-type">int</span> x)</span>&#123;callback(x);&#125;<span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span>&#123;  Handle(Callback_1, <span class="hljs-number">1</span>);  Handle(Callback_2, <span class="hljs-number">2</span>);  <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;&#125;</code></pre></div><figure><img src="https://gitee.com/kayoungzhang/picgo_res/raw/master/img/image-20230918225732968.png" alt="" /><figcaption>image-20230918225732968</figcaption></figure><h3 id="以弱函数的方式使用">3.以弱函数的方式使用</h3><p>在回调函数前面添加标识： <code>__weak</code> ，该函数允许定义与其名称和形式完全一样的函数，若使用者重新定义了该函数则会调用新函数，否则使用此默认函数。在STM32的HAL库中使用了很多这样的函数。如：</p><div class="code-wrapper"><pre><code class="hljs c">__weak <span class="hljs-type">void</span> <span class="hljs-title function_">HAL_GPIO_EXTI_Callback</span><span class="hljs-params">(<span class="hljs-type">uint16_t</span> GPIO_Pin)</span>&#123;  <span class="hljs-comment">/* Prevent unused argument(s) compilation warning */</span>  UNUSED(GPIO_Pin);  <span class="hljs-comment">/* <span class="hljs-doctag">NOTE:</span> This function Should not be modified, when the callback is needed,</span><span class="hljs-comment">           the HAL_GPIO_EXTI_Callback could be implemented in the user file</span><span class="hljs-comment">   */</span>&#125;</code></pre></div><h3 id="以函数封装注册的方式使用">4.以函数封装注册的方式使用</h3><p>对于一些复杂的对象进行属性和方法的封装，如STM32中DMA外设中的回调函数被一起封装在一个结构体中：</p><div class="code-wrapper"><pre><code class="hljs c"><span class="hljs-keyword">typedef</span> <span class="hljs-class"><span class="hljs-keyword">struct</span> __<span class="hljs-title">DMA_HandleTypeDef</span></span><span class="hljs-class">&#123;</span>  DMA_Channel_TypeDef        *Instance;                                               DMA_InitTypeDef            Init;                                                    HAL_LockTypeDef            Lock;                                                    __IO HAL_DMA_StateTypeDef  State;                                                    <span class="hljs-type">void</span>                       *Parent;                                                   <span class="hljs-type">void</span>  (* XferCpltCallback)( <span class="hljs-keyword">struct</span> __DMA_HandleTypeDef * hdma);   <span class="hljs-type">void</span>  (* XferHalfCpltCallback)( <span class="hljs-keyword">struct</span> __DMA_HandleTypeDef * hdma);  <span class="hljs-type">void</span>  (* XferErrorCallback)( <span class="hljs-keyword">struct</span> __DMA_HandleTypeDef * hdma);    <span class="hljs-type">void</span>  (* XferAbortCallback)( <span class="hljs-keyword">struct</span> __DMA_HandleTypeDef * hdma);      __IO <span class="hljs-type">uint32_t</span>              ErrorCode;                                                 DMA_TypeDef                *DmaBaseAddress;                                           <span class="hljs-type">uint32_t</span>                   ChannelIndex;                                           &#125; DMA_HandleTypeDef;</code></pre></div><p>在使用时我们只需声明一个DMA对象，编写对应的回调函数，然后通过注册函数进行注册(<code>HAL_StatusTypeDef HAL_DMA_RegisterCallback(DMA_HandleTypeDef *hdma, HAL_DMA_CallbackIDTypeDef CallbackID, void (* pCallback)( DMA_HandleTypeDef * _hdma))</code>),这样就可以使用了。可参考：<a href="https://zhuanlan.zhihu.com/p/390460838">c语言回调函数的使用及实际作用详解</a></p><p><strong>链接：</strong></p><p><a href="https://www.runoob.com/w3cnote/c-callback-function.html">C 语言回调函数详解 | 菜鸟教程 (runoob.com)</a></p><p><a href="https://blog.csdn.net/miao19920101/article/details/75648491">回调指针回调函数的使用（C语言）_森林之猫猫狗狗的博客-CSDN博客</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;在开发过程中，我们会经常碰到回调函数的问题，那什么是回调函数？怎么使用回调函数呢？下面具体来看看。&lt;/p&gt;
&lt;h1 id=&quot;什么是回调函数&quot;&gt;什么是回调函数&lt;/h1&gt;
&lt;p&gt;&lt;strong&gt;回调函数&lt;/strong&gt;就是一个通过&lt;strong&gt;函数指针&lt;/strong&gt;</summary>
      
    
    
    
    <category term="编程基础" scheme="http://example.com/categories/%E7%BC%96%E7%A8%8B%E5%9F%BA%E7%A1%80/"/>
    
    
    <category term="回调函数" scheme="http://example.com/tags/%E5%9B%9E%E8%B0%83%E5%87%BD%E6%95%B0/"/>
    
  </entry>
  
  <entry>
    <title>C语言中几个重要的关键字</title>
    <link href="http://example.com/2023/09/07/C%E8%AF%AD%E8%A8%80%E4%B8%AD%E5%87%A0%E4%B8%AA%E9%87%8D%E8%A6%81%E7%9A%84%E5%85%B3%E9%94%AE%E5%AD%97/"/>
    <id>http://example.com/2023/09/07/C%E8%AF%AD%E8%A8%80%E4%B8%AD%E5%87%A0%E4%B8%AA%E9%87%8D%E8%A6%81%E7%9A%84%E5%85%B3%E9%94%AE%E5%AD%97/</id>
    <published>2023-09-07T02:12:24.000Z</published>
    <updated>2023-09-07T09:45:59.835Z</updated>
    
    <content type="html"><![CDATA[<p>在了解关键字之前，先来了解变量或函数的“声明”与“定义”之间的区别：</p><p><strong>声明</strong>：告诉编译器，声明的变量或函数在程序中的某个位置，数据类型，参数顺序及返回类型，但未为它们分配内存。</p><p><strong>定义</strong>：编译器创建一个对象并分配一块内存并给取一个名字，这个名字就是变量名或对象名。</p><p>因此，我们可以将声明作为定义的子集。变量或函数可以声明多次，但只能定义一次。</p><p>由ANSI标准定义的C语言关键字共32个:</p><ul><li><strong>数据类型关键字（14个）：char double float short unsigned signed int long void struct enum union typedef sizeof</strong></li><li><strong>存储类型关键字（6个）：extern const static auto register volatile</strong><br /></li><li><strong>流程控制关键字（12个）：do if while break else switch case continue for default goto return</strong></li></ul><p>这里主要来看看存储类型的几个关键字。</p><h1 id="extern">extern</h1><p>通过使用 <strong>extern</strong> 关键字来声明变量或函数，不会为变量或函数分配存储空间，而只是指示编译器该变量或函数在其他文件中定义，提供一个全局变量的引用，可以在当前文件引用此变量或函数。</p><p>一般在模块化编程中，我们都会在头文件中声明的函数名前添加 extern 关键字，以供外部文件使用，当我们不添加此关键字，使用也是正常的，那是因为编译器会默认给该函数增加外部使用的属性，但我们在编写程序时，为养成好习惯，最好添加 extern 关键字，不同的平台，不同的编译器，所产生的结果会不一样。</p><h1 id="const">const</h1><p>const 关键字用来告诉编译器，<strong>被修饰的这些变量或函数，具有“只读”的特点</strong>。在编译的过程中，一旦我们的代码试图去改变这些变量或函数，编译器就会给出错误提示。关于 const 的用法有以下几种：</p><h4 id="修饰局部变量">1.修饰局部变量</h4><p><strong>const 变量必须被初始化</strong>！！</p><div class="code-wrapper"><pre><code class="hljs c"><span class="hljs-comment">/* 这两种方式都是表示变量n的值不能被改变了 */</span><span class="hljs-type">const</span> <span class="hljs-type">int</span> n = <span class="hljs-number">5</span>;<span class="hljs-type">int</span> <span class="hljs-type">const</span> n = <span class="hljs-number">5</span>;<span class="hljs-comment">/* 修饰字符串常量 */</span><span class="hljs-type">const</span> <span class="hljs-type">char</span>* str = <span class="hljs-string">&quot;abcdef&quot;</span>; <span class="hljs-comment">//防止无意错误的修改，如：str[4] = &#x27;y&#x27;;</span><span class="hljs-comment">/* 以下编译错误 */</span><span class="hljs-type">const</span> <span class="hljs-type">int</span> n;n = <span class="hljs-number">5</span>;</code></pre></div><h4 id="修饰指针变量">2.修饰指针变量</h4><p><strong>常量指针</strong>：说明此指针指向常量。<strong>指针指向的值不能改变，但指针的指向可以改变。</strong></p><div class="code-wrapper"><pre><code class="hljs c"><span class="hljs-type">int</span> a = <span class="hljs-number">5</span>;<span class="hljs-type">int</span> b = <span class="hljs-number">6</span>;<span class="hljs-type">const</span> <span class="hljs-type">int</span>* p = &amp;a;<span class="hljs-comment">//常量指针p，指向const的变量，这里指向int型变量a</span>p = &amp;b;<span class="hljs-comment">//编译正常，指针的指向可以改变</span>*p = <span class="hljs-number">10</span>; <span class="hljs-comment">//编译报错，指针指向的值是只读的</span></code></pre></div><p><strong>指针常量</strong>：说明此指针是个常量。<strong>指针指向不可改变，但指针指向的值可以改变。</strong></p><div class="code-wrapper"><pre><code class="hljs c"><span class="hljs-type">int</span> a = <span class="hljs-number">5</span>;<span class="hljs-type">int</span> b = <span class="hljs-number">6</span>;<span class="hljs-type">int</span>* <span class="hljs-type">const</span> p = &amp;a; <span class="hljs-comment">//只读变量指针p，指向变量a</span>*p = <span class="hljs-number">8</span>;<span class="hljs-comment">//编译正常，指针指向的值可以改变</span>p = &amp;b;<span class="hljs-comment">//编译报错，const指针自身内容(指向)不能改变</span></code></pre></div><p>区分常量指针和指针常量的一般规则是：<strong>从右向左，const就近依次结合</strong>。如：</p><p><code>int * const p</code> : p先与<code>const</code>结合，说明p为只读变量，然后与<code>*</code>结合，说明p是一个只读变量指针，最后与<code>int</code> 结合，说明只读变量指针p指向一个int型的变量。所以这就是一个指向int型的只读指针。</p><p><code>const int * p</code> : p先与<code>*</code>结合，说明p为一个指针，然后与<code>int</code>结合，说明p指向一个int型的变量，最后与<code>const</code> 结合，说明p指向的是一个只读的int型变量。所以这是一个指向只读int型变量的指针。</p><p>当然也可以根据const关键字的位置来区别：当const关键字的右边是类型时，则表示值是常量。当const关键字的右边是指针变量时，则表示指针本身是常量。</p><h4 id="修饰函数的参数">3.修饰函数的参数</h4><p>关键字const修饰函数形参时，通常用于参数为指针或引用的情况，且只能修饰输入参数。若输入参数采用“值传递”方式，由于函数将自动产生临时变量用于复制该参数，该参数本就不需要保护，所以不用const修饰。将函数参数声明为 const 类型，表示函数内部是不能改变这个参数的值。</p><div class="code-wrapper"><pre><code class="hljs c"><span class="hljs-comment">/* 防止修改指针指向的内容，即改变了源字符串的值 */</span><span class="hljs-type">void</span> *<span class="hljs-title function_">memcpy</span><span class="hljs-params">(<span class="hljs-type">void</span> *dest, <span class="hljs-type">const</span> <span class="hljs-type">void</span> *src, <span class="hljs-type">size_t</span> n)</span>  <span class="hljs-comment">/* 防止修改指针指向的地址 */</span><span class="hljs-type">void</span> <span class="hljs-title function_">swap</span> <span class="hljs-params">( <span class="hljs-type">int</span> * <span class="hljs-type">const</span> p1 , <span class="hljs-type">int</span> * <span class="hljs-type">const</span> p2 )</span></code></pre></div><h4 id="修饰函数的返回值">4.修饰函数的返回值</h4><p>const 型的返回值，指的是函数的返回值为一个 const 变量，函数返回值（即指针）的内容不能被修改，且该返回值只能被赋给加const 修饰的同类型指针。</p><div class="code-wrapper"><pre><code class="hljs c"><span class="hljs-type">const</span> <span class="hljs-type">char</span> * <span class="hljs-title function_">GetString</span><span class="hljs-params">(<span class="hljs-type">void</span>)</span>;<span class="hljs-type">char</span> *str = GetString(); <span class="hljs-comment">//编译错误</span><span class="hljs-type">const</span> <span class="hljs-type">char</span> *str = GetString();<span class="hljs-comment">//编译正确</span></code></pre></div><h4 id="修饰全局变量">5.修饰全局变量</h4><p>全局变量的作用域是整个文件，我们应该尽量避免使用全局变量，因为一旦有一个函数改变了全局变量的值，它也会影响到其他引用这个变量的函数，导致除了bug后很难发现，如果一定要用全局变量，我们应该尽量的使用const修饰符进行修饰，这样防止不必要的人为修改，使用的方法与局部变量是相同的。</p><h1 id="static">static</h1><p>static关键字常见用法有三种：</p><h4 id="修饰局部变量-1">1.修饰局部变量</h4><p>使用static修饰局部变量，称为静态局部变量，即使在声明时未赋初值，编译器也会把它初始化为0。且静态局部变量存储于全局（静态）存储区，在函数返回时，<strong>它的值会保持不变</strong>。其作用域为局部作用域，当定义它的函数结束时，其作用域随之结束。</p><h4 id="修饰全局变量-1">2.修饰全局变量</h4><p>使用static修饰全局变量，称为静态全局变量，变量可以被当前文件内的所有函数访问，但不能被其它文件内的函数访问。其他文件可以定义与其同名的变量，两者互不影响。</p><h4 id="修饰函数">3.修饰函数</h4><p>函数的使用方式与全局变量类似，在函数的返回类型前加上static，就是静态函数。静态函数只能在声明它的文件中被调用，不可被其它模块的函数调用，方便封装一些模块内部属性的功能。不同的文件可以使用相同名字的静态函数，互不影响。</p><h1 id="volatile">volatile</h1><p>用 volatile 关键字声明的变量是提醒编译器该变量随时都有可能改变(如被别的程序更新)，不要对该变量进行优化，需要存储或读取该变量时，直接从该变量地址中存储或读取数据。</p><p>使用 volatile 的场景主要有：</p><h4 id="存储器映射的硬件寄存器">1.存储器映射的硬件寄存器</h4><p>由于我们外部的数据都是直接进入内存区域，而程序只是引用它的值。编译器优化时可能就直接采用寄存器中的副本了，所以需要将这段内存对应的变量声明为volatile。如在STM32库文件中的各外设寄存器存储器映射：</p><figure><img src="https://gitee.com/kayoungzhang/picgo_res/raw/master/img/image-20230907171919476.png" alt="" /><figcaption>image-20230907171919476</figcaption></figure><h4 id="中断服务程序中改变对象值">2.中断服务程序中改变对象值</h4><p>中断服务程序中需要修改的变量，以供其它程序检测，则需要加volatile。如：</p><p>我们将变量定义为：<code>static int var=0;</code> ，然后在中断服务程序中将其修改：<code>var=1;</code>，但是在另一函数中使用它但不会修改它，那么编译器会认为它没有变化，从而直接使用寄存器中的副本。</p><p>如果我们将变量定义为：<code>volatile int var=0;</code> ，那么每次在函数中使用var变量时，都会重新读取寄存器中的值。</p><h4 id="多任务共享标志">3.多任务共享标志</h4><p>多任务共享时，其实也是一样的，在一个任务中修改了一个对象后，在另一个对象中应用它，但编译器并没发现在该任务中对它有修改。由于访问寄存器的速度要快过RAM，所以编译器一般都会作减少存取外部RAM的优化。从而并不能响应在另一任务下的变化。</p><p>在这种情况下，一般我们都需要使用volatile关键字来定义任务间共享的标识。</p><p><strong>链接：</strong></p><p><a href="https://blog.csdn.net/xingjiarong/article/details/47282255">C语言中const关键字的用法_xingjiarong的博客-CSDN博客</a></p><p><a href="https://blog.csdn.net/guotianqing/article/details/79828100">c语言中static关键字用法详解_static在c语言中的用法_guotianqing的博客-CSDN博客</a></p><p><a href="https://blog.csdn.net/foxclever/article/details/83721019?spm=1001.2014.3001.5502">C语言volatile关键字及其使用_foxclever的博客-CSDN博客</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;在了解关键字之前，先来了解变量或函数的“声明”与“定义”之间的区别：&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;声明&lt;/strong&gt;：告诉编译器，声明的变量或函数在程序中的某个位置，数据类型，参数顺序及返回类型，但未为它们分配内存。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;定义&lt;/stro</summary>
      
    
    
    
    <category term="编程基础" scheme="http://example.com/categories/%E7%BC%96%E7%A8%8B%E5%9F%BA%E7%A1%80/"/>
    
    
    <category term="关键字" scheme="http://example.com/tags/%E5%85%B3%E9%94%AE%E5%AD%97/"/>
    
  </entry>
  
  <entry>
    <title>Modbus通讯协议详解</title>
    <link href="http://example.com/2023/09/04/Modbus%E9%80%9A%E8%AE%AF%E5%8D%8F%E8%AE%AE%E8%AF%A6%E8%A7%A3/"/>
    <id>http://example.com/2023/09/04/Modbus%E9%80%9A%E8%AE%AF%E5%8D%8F%E8%AE%AE%E8%AF%A6%E8%A7%A3/</id>
    <published>2023-09-04T02:44:48.000Z</published>
    <updated>2023-09-06T14:37:48.858Z</updated>
    
    <content type="html"><![CDATA[<h1 id="modbus协议简介">Modbus协议简介</h1><p>Modbus协议是一种通用的工业通讯总线协议，跟I2C、SPI总线类似，通讯的服务器端和客户端都在同一条总线上。</p><p>Modbus协议最初是Modicon公司（现在的施耐德电气 Schneider Electric）于1979年为使用可编程逻辑控制器（PLC）通信而开发的，现在已成为工业领域通信协议的业界标准。</p><p>Modbus官网：<a href="https://modbus.org/">https://modbus.org/</a></p><p>本文主要以modbus官方文档（<a href="https://modbus.org/specs.php">Modbus Specifications and Implementation Guides</a>）进行说明。</p><h1 id="modbus协议传输方式">Modbus协议传输方式</h1><p>Modbus协议主要有以下几种传输方式：</p><ul><li><p><strong>基于串口的Modbus-RTU</strong></p><p>采用二进制表现形式以及紧凑数据结构，通信效率较高，应用比较广泛，在工业现场一般都是采用Modbus RTU协议。</p><p>RTU协议中的指令由地址码(一个字节），功能码（一个字节），起始地址（两个字节），数据（N个字节），校验码（两个字节）五个部分组成，其中数据又由数据长度（两个字节，表示的是寄存器个数，假定内容为M）和数据正文（M乘以2个字节）组成，而RTU协议是采用3.5个字节的空闲时间作为指令的起始和结束，一般而言，只有当从机返回数据或者主机写操作的时候，才会有数据正文，而其他时候比如主机读操作指令的时候，没有数据正文，只需要数据长度即可。</p></li><li><p><strong>基于串口的Modbus-ASCII</strong></p><p>采用ASCII码传输，并且利用特殊字符作为其字节的开始与结束标识，其传输效率要远远低于Modbus RTU协议，一般只有在通信数据量较小的情况下才使用Modbus ASCII通信。</p></li><li><p><strong>基于以太网的Modbus-TCP</strong></p><p>是在RTU协议上加一个MBAP报文头，由于TCP是基于可靠连接的服务，所以就不需要CRC校验了。</p></li></ul><h1 id="modbus协议数据帧">Modbus协议数据帧</h1><p>Modbus协议帧比较简洁，如下所示：</p><figure><img src="https://gitee.com/kayoungzhang/picgo_res/raw/master/img/image-20230904153822090.png" alt="" /><figcaption>image-20230904153822090</figcaption></figure><p>一帧Modbus数据由客户端构建，开启数据传输（无错误发生）：</p><figure><img src="https://gitee.com/kayoungzhang/picgo_res/raw/master/img/image-20230904155252355.png" alt="" /><figcaption>image-20230904155252355</figcaption></figure><p>当服务器检测到异常，则会发出异常码和异常功能码：</p><figure><img src="https://gitee.com/kayoungzhang/picgo_res/raw/master/img/image-20230904155609179.png" alt="" /><figcaption>image-20230904155609179</figcaption></figure><h1 id="modbus数据编码和数据模型">Modbus数据编码和数据模型</h1><p>Modbus协议中采用的是 <strong>大端模式</strong> ，所以传输多字节地址和数据时，要先发送高位字节，如数据：<strong>0x1234</strong> ，要先发送高位字节 <strong>0x12</strong>，然后发送低位字节 <strong>0x34</strong> 。</p><p>Modbus协议规定，进行读写操作的数据类型主要分为以下4种：</p><figure><img src="https://gitee.com/kayoungzhang/picgo_res/raw/master/img/image-20230904185445076.png" alt="" /><figcaption>image-20230904185445076</figcaption></figure><h1 id="功能码的分类与定义">功能码的分类与定义</h1><p>Modbus功能码主要有公共功能码(如：1~65 或 73~100 或 111~127)和自定义功能码（如：66~72 或 101~110）。</p><p>主要来看看公共功能码：</p><figure><img src="https://gitee.com/kayoungzhang/picgo_res/raw/master/img/image-20230904164451733.png" alt="" /><figcaption>image-20230904164451733</figcaption></figure><p>因为PLC主要控制的是继电器触点，所以在PLC上还会经常对线圈（Coils）进行读写。</p><p>最常用的功能码：</p><ul><li><p><strong>03 (0x03) - 读保持寄存器</strong></p><figure><img src="https://gitee.com/kayoungzhang/picgo_res/raw/master/img/image-20230904181240364.png" alt="" /><figcaption>image-20230904181240364</figcaption></figure></li><li><p><strong>04 (0x04) - 读输入寄存器</strong></p><figure><img src="https://gitee.com/kayoungzhang/picgo_res/raw/master/img/image-20230904182100762.png" alt="" /><figcaption>image-20230904182100762</figcaption></figure></li><li><p><strong>06 (0x06) - 写单个寄存器</strong></p><figure><img src="https://gitee.com/kayoungzhang/picgo_res/raw/master/img/image-20230904182705385.png" alt="" /><figcaption>image-20230904182705385</figcaption></figure></li><li><p><strong>16 (0x10) - 写多个寄存器</strong></p><figure><img src="https://gitee.com/kayoungzhang/picgo_res/raw/master/img/image-20230904184016458.png" alt="" /><figcaption>image-20230904184016458</figcaption></figure></li></ul><p>可以看出，不同的功能码，对应的请求和响应不太一样，但一般 <strong>功能码占用1Byte，地址占用2Bytes，寄存器数量占用2Bytes，寄存器值占用2Bytes，数据字节数占用1Byte</strong>。另外，在实际应用中，还有设备地址占用1Byte，CRC校验占用2Bytes。如在Modbus RTU传输中：</p><ul><li><strong>03 (0x03) - 读保持寄存器</strong></li></ul><p><strong>请求</strong>：1byte设备地址 + 1byte功能代码 + 2bytes寄存器起始地址 + 2bytes寄存器数量 + 2bytes CRC校验</p><p><strong>响应</strong>：1byte设备地址 + 1byte功能代码 + 1byte数据字节数 + 2N bytes寄存器数据 + 2bytes CRC校验</p><ul><li><strong>06 (0x06) - 写单个寄存器</strong></li></ul><p><strong>请求</strong>：1byte设备地址 + 1byte功能代码 + 2bytes寄存器起始地址 + 2bytes数据 + 2bytes CRC校验</p><p><strong>响应</strong>：1byte设备地址 + 1byte功能代码 + 2bytes寄存器起始地址 + 2bytes数据 + 2bytes CRC校验</p><h1 id="modbus协议应用">Modbus协议应用</h1><p><a href="https://www.modbus.cn/11740.html">格力中央空调多联机 Modbus 通讯协议 | Modbus物联网云平台</a></p><p>Modbus官网有个外链驱动库：<a href="https://libmodbus.org/">libmodbus驱动库</a> ，在应用中可以直接移植到程序中，而不用自己重复的编写驱动。具体移植过程可参考：<a href="https://blog.csdn.net/whik1194/article/details/119010616?spm=1001.2014.3001.5501">Modbus驱动库—libmodbus驱动库的使用_whik1194的博客-CSDN博客</a>）</p><p><strong>链接：</strong></p><p><a href="https://zhuanlan.zhihu.com/p/38920259">Modbus RTU/TCP协议解析 - 知乎 (zhihu.com)</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;modbus协议简介&quot;&gt;Modbus协议简介&lt;/h1&gt;
&lt;p&gt;Modbus协议是一种通用的工业通讯总线协议，跟I2C、SPI总线类似，通讯的服务器端和客户端都在同一条总线上。&lt;/p&gt;
&lt;p&gt;Modbus协议最初是Modicon公司（现在的施耐德电气 Schne</summary>
      
    
    
    
    <category term="编程基础" scheme="http://example.com/categories/%E7%BC%96%E7%A8%8B%E5%9F%BA%E7%A1%80/"/>
    
    
    <category term="Modbus" scheme="http://example.com/tags/Modbus/"/>
    
  </entry>
  
  <entry>
    <title>关于OLED字模取模方式的选择</title>
    <link href="http://example.com/2023/09/02/%E5%85%B3%E4%BA%8EOLED%E5%AD%97%E6%A8%A1%E5%8F%96%E6%A8%A1%E6%96%B9%E5%BC%8F%E7%9A%84%E9%80%89%E6%8B%A9/"/>
    <id>http://example.com/2023/09/02/%E5%85%B3%E4%BA%8EOLED%E5%AD%97%E6%A8%A1%E5%8F%96%E6%A8%A1%E6%96%B9%E5%BC%8F%E7%9A%84%E9%80%89%E6%8B%A9/</id>
    <published>2023-09-02T05:30:21.000Z</published>
    <updated>2023-09-04T02:44:10.554Z</updated>
    
    <content type="html"><![CDATA[<p>OLED（Organic Light-Emitting Diode）,有机发光二极体，属于一种电流型的有机发光器件，当电流流动时就会自行发光。因其简单，使用方便，所以在开发过程中会经常使用到这种显示器件。</p><p>市面上有很多OLED显示模块，根据控制显示的驱动芯片的不同，有不同的连接接口，一般大体会有四种：</p><ul><li><strong>6800并行接口</strong></li><li><strong>8080并行接口</strong></li><li><strong>4线SPI串行接口</strong></li><li><strong>I2C接口</strong></li></ul><p>下面主要是来看看OLED在显示中文信息时，需要注意的事项：</p><p>显示中文信息需要用到字模工具，如：<a href="https://gitee.com/kayoungzhang/my_codehub/blob/master/tools/PCtoLCD2018.zip">PCtoLCD</a> ，当然，还有其它的一些字模工具，功能都差不多。</p><p>PCtoLCD字符模式的配置（16*16汉字）与使用方式如图：</p><p><img src="https://gitee.com/kayoungzhang/picgo_res/raw/master/img/image-20230902141405518.png" alt="image-20230902141405518" style="zoom:80%;" /></p><p>将生成的数据放到一个二维数组中，可以将这个二维数组保存到一个头文件中，使用时，包含这个头文件即可。如：</p><div class="code-wrapper"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">ifndef</span> OLEDFONT_H</span><span class="hljs-meta">#<span class="hljs-keyword">define</span> OLEDFONT_H    </span><span class="hljs-type">char</span> <span class="hljs-type">const</span> SHOW[][<span class="hljs-number">32</span>]=&#123;    &#123;<span class="hljs-number">0x00</span>,<span class="hljs-number">0x00</span>,<span class="hljs-number">0xF0</span>,<span class="hljs-number">0x10</span>,<span class="hljs-number">0x10</span>,<span class="hljs-number">0x10</span>,<span class="hljs-number">0x10</span>,<span class="hljs-number">0xFF</span>,<span class="hljs-number">0x10</span>,<span class="hljs-number">0x10</span>,<span class="hljs-number">0x10</span>,<span class="hljs-number">0x10</span>,<span class="hljs-number">0xF0</span>,<span class="hljs-number">0x00</span>,<span class="hljs-number">0x00</span>,<span class="hljs-number">0x00</span>&#125;,    &#123;<span class="hljs-number">0x00</span>,<span class="hljs-number">0x00</span>,<span class="hljs-number">0x0F</span>,<span class="hljs-number">0x04</span>,<span class="hljs-number">0x04</span>,<span class="hljs-number">0x04</span>,<span class="hljs-number">0x04</span>,<span class="hljs-number">0xFF</span>,<span class="hljs-number">0x04</span>,<span class="hljs-number">0x04</span>,<span class="hljs-number">0x04</span>,<span class="hljs-number">0x04</span>,<span class="hljs-number">0x0F</span>,<span class="hljs-number">0x00</span>,<span class="hljs-number">0x00</span>,<span class="hljs-number">0x00</span>&#125;,<span class="hljs-comment">/*&quot;中&quot;,0*/</span>    <span class="hljs-comment">/* (16 X 16 , 宋体 )*/</span>    &#123;<span class="hljs-number">0x00</span>,<span class="hljs-number">0xFE</span>,<span class="hljs-number">0x02</span>,<span class="hljs-number">0x12</span>,<span class="hljs-number">0x92</span>,<span class="hljs-number">0x92</span>,<span class="hljs-number">0x92</span>,<span class="hljs-number">0xF2</span>,<span class="hljs-number">0x92</span>,<span class="hljs-number">0x92</span>,<span class="hljs-number">0x92</span>,<span class="hljs-number">0x12</span>,<span class="hljs-number">0x02</span>,<span class="hljs-number">0xFE</span>,<span class="hljs-number">0x00</span>,<span class="hljs-number">0x00</span>&#125;,    &#123;<span class="hljs-number">0x00</span>,<span class="hljs-number">0xFF</span>,<span class="hljs-number">0x40</span>,<span class="hljs-number">0x48</span>,<span class="hljs-number">0x48</span>,<span class="hljs-number">0x48</span>,<span class="hljs-number">0x48</span>,<span class="hljs-number">0x4F</span>,<span class="hljs-number">0x48</span>,<span class="hljs-number">0x4A</span>,<span class="hljs-number">0x4C</span>,<span class="hljs-number">0x48</span>,<span class="hljs-number">0x40</span>,<span class="hljs-number">0xFF</span>,<span class="hljs-number">0x00</span>,<span class="hljs-number">0x00</span>&#125;,<span class="hljs-comment">/*&quot;国&quot;,1*/</span>    <span class="hljs-comment">/* (16 X 16 , 宋体 )*/</span>    &#123;<span class="hljs-number">0x40</span>,<span class="hljs-number">0x40</span>,<span class="hljs-number">0x42</span>,<span class="hljs-number">0x44</span>,<span class="hljs-number">0x58</span>,<span class="hljs-number">0xC0</span>,<span class="hljs-number">0x40</span>,<span class="hljs-number">0x7F</span>,<span class="hljs-number">0x40</span>,<span class="hljs-number">0xC0</span>,<span class="hljs-number">0x50</span>,<span class="hljs-number">0x48</span>,<span class="hljs-number">0x46</span>,<span class="hljs-number">0x40</span>,<span class="hljs-number">0x40</span>,<span class="hljs-number">0x00</span>&#125;,    &#123;<span class="hljs-number">0x80</span>,<span class="hljs-number">0x80</span>,<span class="hljs-number">0x40</span>,<span class="hljs-number">0x20</span>,<span class="hljs-number">0x18</span>,<span class="hljs-number">0x07</span>,<span class="hljs-number">0x00</span>,<span class="hljs-number">0x00</span>,<span class="hljs-number">0x00</span>,<span class="hljs-number">0x3F</span>,<span class="hljs-number">0x40</span>,<span class="hljs-number">0x40</span>,<span class="hljs-number">0x40</span>,<span class="hljs-number">0x40</span>,<span class="hljs-number">0x78</span>,<span class="hljs-number">0x00</span>&#125;,<span class="hljs-comment">/*&quot;光&quot;,2*/</span>    <span class="hljs-comment">/* (16 X 16 , 宋体 )*/</span>    &#123;<span class="hljs-number">0x00</span>,<span class="hljs-number">0x10</span>,<span class="hljs-number">0x88</span>,<span class="hljs-number">0x84</span>,<span class="hljs-number">0x43</span>,<span class="hljs-number">0x20</span>,<span class="hljs-number">0x10</span>,<span class="hljs-number">0x0C</span>,<span class="hljs-number">0x10</span>,<span class="hljs-number">0x20</span>,<span class="hljs-number">0x41</span>,<span class="hljs-number">0x82</span>,<span class="hljs-number">0x84</span>,<span class="hljs-number">0x08</span>,<span class="hljs-number">0x00</span>,<span class="hljs-number">0x00</span>&#125;,    &#123;<span class="hljs-number">0x01</span>,<span class="hljs-number">0x01</span>,<span class="hljs-number">0x00</span>,<span class="hljs-number">0xFE</span>,<span class="hljs-number">0x42</span>,<span class="hljs-number">0x42</span>,<span class="hljs-number">0x42</span>,<span class="hljs-number">0x42</span>,<span class="hljs-number">0x42</span>,<span class="hljs-number">0x42</span>,<span class="hljs-number">0x42</span>,<span class="hljs-number">0xFE</span>,<span class="hljs-number">0x00</span>,<span class="hljs-number">0x01</span>,<span class="hljs-number">0x01</span>,<span class="hljs-number">0x00</span>&#125;,<span class="hljs-comment">/*&quot;谷&quot;,3*/</span>    <span class="hljs-comment">/* (16 X 16 , 宋体 )*/</span>&#125;;<span class="hljs-meta">#<span class="hljs-keyword">endif</span>  <span class="hljs-comment">/* OLEDFONT_H */</span></span></code></pre></div><p>这里看一下它的取模方式，各种取模方式的演示，可查看软件上自带的演示示例。这四种方式各自的特点如下：</p><ul><li><p><strong>逐列式</strong></p><ul><li>从第一列开始向下每取8个点作为一个字节，如果最后不足8个点就补满8位。取模顺序是从低到高，即第一个点作为最低位。</li><li>不需要进行数据重组，取模软件取出数据直接运用。</li><li>写完一字节数据就需要重新设置一次地址，写一个16x16汉字，需要经历32次地址设置 ： 每一列数据需要设置2次，共16列。</li></ul></li><li><p><strong>逐行式</strong></p><ul><li><p>从第一行开始向右每取8个点作为一个字节，如果最后不足8个点就补满8位。取模顺序是从低到高 ，即第一个点作为最低位。</p></li><li><p>需要进行数据重组，取模软件取出的数值无法直接运用。</p></li><li><p>写1个字节数据需要对8个数据进行Bit位数值的提取和重组操作，写完16字节数据需要重新设置一次地址，写一个16x16汉字，需要经历2次地址设置 ： 汉字上半部分的页地址和汉字下半部分的页地址分别设置一次。</p></li></ul></li><li><p><strong>列行式</strong></p><ul><li>从第一列开始向下取8个点作为一个字节，然后从第二列开始向下取8个点作为第二个字节...依此类推。如果最后不足8个点就补满8位。取模顺序是从低到高，即第一个点作为最低位。</li><li>不需要进行数据重组，取模软件取出数据直接运用。</li><li>写完16字节数据需要重新设置一次地址，写一个16x16汉字，需要经历2次地址变换： 汉字上半部分的页地址和汉字下半部分的页地址分别设置一次。（注意这里和逐行式的做法本质上是一样的，只是在于数据是否可以直接运用）</li></ul></li><li><p><strong>行列式</strong></p><ul><li>从第一行开始向右取8个点作为一个字节，然后从第二行开始向右取8个点作为第二个字节...依此类推。如果最后不足8个点就补满8位。取模顺序是从低到高，即第一个点作为最位。</li><li>需要进行数据重组，取模软件取出的数值无法直接运用。</li><li>写1个字节数据需要对8个数据进行Bit位数值的提取和重组操作，写完8个字节数据就需要重新设置一次地址，写一个16x16汉字，需要经历4次地址设置：汉字分为左上部分、左下部分、右上部分、右下部分，共需要设置4次地址</li></ul></li></ul><p>通过对比，可以发现：</p><ul><li>从数据处理方面看，不进行数据重组，其书写速度上可以更快，因此逐列式和列行式更有优势。</li><li>从地址设置方面看，尽量少的程序设置地址，而尽量多的利用硬件自身的列地址自增的性质，这样速度更快，因此逐行式=列行式&gt;行列式&gt;逐列式。</li></ul><p>所以， 对于显示16x16汉字，列行式是最为突出的算法，不仅直接利用数据无需重组，而且尽量多的利用了其硬件特性，是最好的选择。</p><p>PCtoLCD图形模式的配置（128*64图片）与使用方式如图：</p><p><img src="https://gitee.com/kayoungzhang/picgo_res/raw/master/img/image-20230902152256627.png" alt="image-20230902152256627" style="zoom:67%;" /></p><p>同上一样，将生成的数据放到一个数组中，将这个数组保存到一个头文件中，使用时，包含这个头文件即可。</p><div class="code-wrapper"><pre><code class="hljs c"><span class="hljs-type">char</span> <span class="hljs-type">const</span> pic[] = &#123;    <span class="hljs-number">0x00</span>,<span class="hljs-number">0x00</span>,<span class="hljs-number">0x00</span>,<span class="hljs-number">0x00</span>,<span class="hljs-number">0x20</span>,<span class="hljs-number">0x00</span>,<span class="hljs-number">0xC0</span>,<span class="hljs-number">0xE4</span>,<span class="hljs-number">0xF8</span>,<span class="hljs-number">0xFC</span>,<span class="hljs-number">0xFE</span>,<span class="hljs-number">0xFF</span>,<span class="hljs-number">0xFF</span>,<span class="hljs-number">0xFF</span>,<span class="hljs-number">0xFF</span>,<span class="hljs-number">0xFF</span>,    <span class="hljs-number">0xFF</span>,<span class="hljs-number">0xFF</span>,<span class="hljs-number">0xFF</span>,<span class="hljs-number">0xFE</span>,<span class="hljs-number">0xFC</span>,<span class="hljs-number">0xF8</span>,<span class="hljs-number">0xF2</span>,<span class="hljs-number">0xC0</span>,<span class="hljs-number">0x80</span>,<span class="hljs-number">0x40</span>,<span class="hljs-number">0x00</span>,<span class="hljs-number">0x00</span>,<span class="hljs-number">0x00</span>,<span class="hljs-number">0x00</span>,<span class="hljs-number">0x00</span>,<span class="hljs-number">0x00</span>,    <span class="hljs-number">0x00</span>,<span class="hljs-number">0x00</span>,<span class="hljs-number">0x00</span>,<span class="hljs-number">0x00</span>,<span class="hljs-number">0x00</span>,<span class="hljs-number">0x00</span>,<span class="hljs-number">0x00</span>,<span class="hljs-number">0x00</span>,<span class="hljs-number">0x00</span>,<span class="hljs-number">0x80</span>,<span class="hljs-number">0xE0</span>,<span class="hljs-number">0xE0</span>,<span class="hljs-number">0xF2</span>,<span class="hljs-number">0xF0</span>,<span class="hljs-number">0xF8</span>,<span class="hljs-number">0xF8</span>,    <span class="hljs-number">0xF8</span>,<span class="hljs-number">0xF0</span>,<span class="hljs-number">0xF0</span>,<span class="hljs-number">0xF0</span>,<span class="hljs-number">0xE0</span>,<span class="hljs-number">0xC0</span>,<span class="hljs-number">0x00</span>,<span class="hljs-number">0x00</span>,<span class="hljs-number">0x00</span>,<span class="hljs-number">0x00</span>,<span class="hljs-number">0x80</span>,<span class="hljs-number">0x80</span>,<span class="hljs-number">0x80</span>,<span class="hljs-number">0x00</span>,<span class="hljs-number">0x40</span>,<span class="hljs-number">0x00</span>,    <span class="hljs-number">0x00</span>,<span class="hljs-number">0x00</span>,<span class="hljs-number">0x00</span>,<span class="hljs-number">0x00</span>,<span class="hljs-number">0x00</span>,<span class="hljs-number">0x00</span>,<span class="hljs-number">0x00</span>,<span class="hljs-number">0x00</span>,<span class="hljs-number">0x00</span>,<span class="hljs-number">0x00</span>,<span class="hljs-number">0x00</span>,<span class="hljs-number">0x00</span>,<span class="hljs-number">0xC0</span>,<span class="hljs-number">0xE0</span>,<span class="hljs-number">0xE0</span>,<span class="hljs-number">0xE0</span>,    <span class="hljs-number">0xE0</span>,<span class="hljs-number">0xE0</span>,<span class="hljs-number">0x00</span>,<span class="hljs-number">0x00</span>,<span class="hljs-number">0x00</span>,<span class="hljs-number">0x00</span>,<span class="hljs-number">0x00</span>,<span class="hljs-number">0x00</span>,<span class="hljs-number">0xC0</span>,<span class="hljs-number">0xE0</span>,<span class="hljs-number">0xE0</span>,<span class="hljs-number">0xE0</span>,<span class="hljs-number">0xE0</span>,<span class="hljs-number">0xE0</span>,<span class="hljs-number">0x00</span>,<span class="hljs-number">0x00</span>,    <span class="hljs-number">0x00</span>,<span class="hljs-number">0x00</span>,<span class="hljs-number">0x00</span>,<span class="hljs-number">0x00</span>,<span class="hljs-number">0x00</span>,<span class="hljs-number">0x00</span>,<span class="hljs-number">0x00</span>,<span class="hljs-number">0x00</span>,<span class="hljs-number">0x00</span>,<span class="hljs-number">0x00</span>,<span class="hljs-number">0x00</span>,<span class="hljs-number">0x00</span>,<span class="hljs-number">0x00</span>,<span class="hljs-number">0x00</span>,<span class="hljs-number">0x00</span>,<span class="hljs-number">0x00</span>,    <span class="hljs-number">0xE0</span>,<span class="hljs-number">0xE0</span>,<span class="hljs-number">0xE0</span>,<span class="hljs-number">0xE0</span>,<span class="hljs-number">0xE0</span>,<span class="hljs-number">0x00</span>,<span class="hljs-number">0x00</span>,<span class="hljs-number">0x00</span>,<span class="hljs-number">0x00</span>,<span class="hljs-number">0x00</span>,<span class="hljs-number">0x00</span>,<span class="hljs-number">0x00</span>,<span class="hljs-number">0x00</span>,<span class="hljs-number">0x00</span>,<span class="hljs-number">0x00</span>,<span class="hljs-number">0x00</span>,    <span class="hljs-number">0x00</span>,<span class="hljs-number">0x00</span>,<span class="hljs-number">0x00</span>,<span class="hljs-number">0xE0</span>,<span class="hljs-number">0xFC</span>,<span class="hljs-number">0xFF</span>,<span class="hljs-number">0xFF</span>,<span class="hljs-number">0xFF</span>,<span class="hljs-number">0x3F</span>,<span class="hljs-number">0x7F</span>,<span class="hljs-number">0xFF</span>,<span class="hljs-number">0xFF</span>,<span class="hljs-number">0xFF</span>,<span class="hljs-number">0xFF</span>,<span class="hljs-number">0xFF</span>,<span class="hljs-number">0xFF</span>,    <span class="hljs-number">0xFF</span>,<span class="hljs-number">0xFF</span>,<span class="hljs-number">0xFF</span>,<span class="hljs-number">0xFF</span>,<span class="hljs-number">0x7F</span>,<span class="hljs-number">0x3F</span>,<span class="hljs-number">0xFF</span>,<span class="hljs-number">0xFF</span>,<span class="hljs-number">0xFF</span>,<span class="hljs-number">0xFC</span>,<span class="hljs-number">0xF0</span>,<span class="hljs-number">0x00</span>,<span class="hljs-number">0x00</span>,<span class="hljs-number">0x00</span>,<span class="hljs-number">0x00</span>,<span class="hljs-number">0x00</span>,    <span class="hljs-number">0x00</span>,<span class="hljs-number">0x00</span>,<span class="hljs-number">0x00</span>,<span class="hljs-number">0x00</span>,<span class="hljs-number">0x00</span>,<span class="hljs-number">0x00</span>,<span class="hljs-number">0xE0</span>,<span class="hljs-number">0xFC</span>,<span class="hljs-number">0xFF</span>,<span class="hljs-number">0xFF</span>,<span class="hljs-number">0xFF</span>,<span class="hljs-number">0xFF</span>,<span class="hljs-number">0xFF</span>,<span class="hljs-number">0xFF</span>,<span class="hljs-number">0xFF</span>,<span class="hljs-number">0xFF</span>,    <span class="hljs-number">0xFF</span>,<span class="hljs-number">0xFF</span>,<span class="hljs-number">0xFF</span>,<span class="hljs-number">0xFF</span>,<span class="hljs-number">0xFF</span>,<span class="hljs-number">0x3F</span>,<span class="hljs-number">0x00</span>,<span class="hljs-number">0x00</span>,<span class="hljs-number">0x00</span>,<span class="hljs-number">0xFE</span>,<span class="hljs-number">0xFF</span>,<span class="hljs-number">0xFF</span>,<span class="hljs-number">0xFF</span>,<span class="hljs-number">0xFF</span>,<span class="hljs-number">0xF8</span>,<span class="hljs-number">0x00</span>,    <span class="hljs-number">0x00</span>,<span class="hljs-number">0x08</span>,<span class="hljs-number">0xF0</span>,<span class="hljs-number">0xF0</span>,<span class="hljs-number">0xF0</span>,<span class="hljs-number">0xF0</span>,<span class="hljs-number">0xF0</span>,<span class="hljs-number">0xE0</span>,<span class="hljs-number">0x00</span>,<span class="hljs-number">0x00</span>,<span class="hljs-number">0x00</span>,<span class="hljs-number">0x00</span>,<span class="hljs-number">0xFF</span>,<span class="hljs-number">0xFF</span>,<span class="hljs-number">0xFF</span>,<span class="hljs-number">0xFF</span>,    <span class="hljs-number">0xFF</span>,<span class="hljs-number">0xFF</span>,<span class="hljs-number">0x00</span>,<span class="hljs-number">0x00</span>,<span class="hljs-number">0x00</span>,<span class="hljs-number">0x00</span>,<span class="hljs-number">0x00</span>,<span class="hljs-number">0x00</span>,<span class="hljs-number">0xFF</span>,<span class="hljs-number">0xFF</span>,<span class="hljs-number">0xFF</span>,<span class="hljs-number">0xFF</span>,<span class="hljs-number">0xFF</span>,<span class="hljs-number">0xFF</span>,<span class="hljs-number">0x00</span>,<span class="hljs-number">0x00</span>,    <span class="hljs-number">0x00</span>,<span class="hljs-number">0x00</span>,<span class="hljs-number">0x00</span>,<span class="hljs-number">0x00</span>,<span class="hljs-number">0x00</span>,<span class="hljs-number">0x00</span>,<span class="hljs-number">0x00</span>,<span class="hljs-number">0x00</span>,<span class="hljs-number">0x00</span>,<span class="hljs-number">0x00</span>,<span class="hljs-number">0x00</span>,<span class="hljs-number">0x00</span>,<span class="hljs-number">0x00</span>,<span class="hljs-number">0x00</span>,<span class="hljs-number">0x00</span>,<span class="hljs-number">0x00</span>,    <span class="hljs-number">0xFF</span>,<span class="hljs-number">0xFF</span>,<span class="hljs-number">0xFF</span>,<span class="hljs-number">0xFF</span>,<span class="hljs-number">0xFF</span>,<span class="hljs-number">0xFF</span>,<span class="hljs-number">0x00</span>,<span class="hljs-number">0x00</span>,<span class="hljs-number">0x00</span>,<span class="hljs-number">0x00</span>,<span class="hljs-number">0x00</span>,<span class="hljs-number">0x00</span>,<span class="hljs-number">0x00</span>,<span class="hljs-number">0x00</span>,<span class="hljs-number">0x00</span>,<span class="hljs-number">0x00</span>,    <span class="hljs-number">0x00</span>,<span class="hljs-number">0xC0</span>,<span class="hljs-number">0xFE</span>,<span class="hljs-number">0xFF</span>,<span class="hljs-number">0xFF</span>,<span class="hljs-number">0xFF</span>,<span class="hljs-number">0xFF</span>,<span class="hljs-number">0xFF</span>,<span class="hljs-number">0x00</span>,<span class="hljs-number">0x04</span>,<span class="hljs-number">0x00</span>,<span class="hljs-number">0x05</span>,<span class="hljs-number">0x09</span>,<span class="hljs-number">0x01</span>,<span class="hljs-number">0x00</span>,<span class="hljs-number">0x00</span>,    <span class="hljs-number">0x01</span>,<span class="hljs-number">0x01</span>,<span class="hljs-number">0x01</span>,<span class="hljs-number">0x09</span>,<span class="hljs-number">0x00</span>,<span class="hljs-number">0x00</span>,<span class="hljs-number">0x61</span>,<span class="hljs-number">0xFF</span>,<span class="hljs-number">0xFF</span>,<span class="hljs-number">0xFF</span>,<span class="hljs-number">0xFF</span>,<span class="hljs-number">0xFF</span>,<span class="hljs-number">0xF0</span>,<span class="hljs-number">0x00</span>,<span class="hljs-number">0x00</span>,<span class="hljs-number">0x00</span>,    <span class="hljs-number">0x00</span>,<span class="hljs-number">0x00</span>,<span class="hljs-number">0x00</span>,<span class="hljs-number">0x00</span>,<span class="hljs-number">0x00</span>,<span class="hljs-number">0xFC</span>,<span class="hljs-number">0xFF</span>,<span class="hljs-number">0xFF</span>,<span class="hljs-number">0xFF</span>,<span class="hljs-number">0xFF</span>,<span class="hljs-number">0xFF</span>,<span class="hljs-number">0x1F</span>,<span class="hljs-number">0x03</span>,<span class="hljs-number">0x05</span>,<span class="hljs-number">0x00</span>,<span class="hljs-number">0x00</span>,    <span class="hljs-number">0x00</span>,<span class="hljs-number">0x00</span>,<span class="hljs-number">0x00</span>,<span class="hljs-number">0x00</span>,<span class="hljs-number">0x01</span>,<span class="hljs-number">0x04</span>,<span class="hljs-number">0x00</span>,<span class="hljs-number">0x00</span>,<span class="hljs-number">0x08</span>,<span class="hljs-number">0x87</span>,<span class="hljs-number">0x8F</span>,<span class="hljs-number">0x9F</span>,<span class="hljs-number">0x9F</span>,<span class="hljs-number">0x87</span>,<span class="hljs-number">0x81</span>,<span class="hljs-number">0x00</span>,    <span class="hljs-number">0x00</span>,<span class="hljs-number">0x80</span>,<span class="hljs-number">0xFF</span>,<span class="hljs-number">0xFF</span>,<span class="hljs-number">0xFF</span>,<span class="hljs-number">0xFF</span>,<span class="hljs-number">0xFF</span>,<span class="hljs-number">0xFF</span>,<span class="hljs-number">0x80</span>,<span class="hljs-number">0x80</span>,<span class="hljs-number">0x80</span>,<span class="hljs-number">0x00</span>,<span class="hljs-number">0xFF</span>,<span class="hljs-number">0xFF</span>,<span class="hljs-number">0xFF</span>,<span class="hljs-number">0xFF</span>,    <span class="hljs-number">0xFF</span>,<span class="hljs-number">0xFF</span>,<span class="hljs-number">0x00</span>,<span class="hljs-number">0x00</span>,<span class="hljs-number">0x00</span>,<span class="hljs-number">0x00</span>,<span class="hljs-number">0x00</span>,<span class="hljs-number">0x00</span>,<span class="hljs-number">0xFF</span>,<span class="hljs-number">0xFF</span>,<span class="hljs-number">0xFF</span>,<span class="hljs-number">0xFF</span>,<span class="hljs-number">0xFF</span>,<span class="hljs-number">0xFF</span>,<span class="hljs-number">0x00</span>,<span class="hljs-number">0x80</span>,    <span class="hljs-number">0x80</span>,<span class="hljs-number">0x80</span>,<span class="hljs-number">0x80</span>,<span class="hljs-number">0x80</span>,<span class="hljs-number">0x80</span>,<span class="hljs-number">0x00</span>,<span class="hljs-number">0x00</span>,<span class="hljs-number">0x00</span>,<span class="hljs-number">0x00</span>,<span class="hljs-number">0x80</span>,<span class="hljs-number">0x80</span>,<span class="hljs-number">0x80</span>,<span class="hljs-number">0x80</span>,<span class="hljs-number">0x80</span>,<span class="hljs-number">0x00</span>,<span class="hljs-number">0x00</span>,    <span class="hljs-number">0xFF</span>,<span class="hljs-number">0xFF</span>,<span class="hljs-number">0xFF</span>,<span class="hljs-number">0xFF</span>,<span class="hljs-number">0xFF</span>,<span class="hljs-number">0x3F</span>,<span class="hljs-number">0x80</span>,<span class="hljs-number">0xC0</span>,<span class="hljs-number">0xC0</span>,<span class="hljs-number">0xC0</span>,<span class="hljs-number">0xC0</span>,<span class="hljs-number">0xD0</span>,<span class="hljs-number">0x00</span>,<span class="hljs-number">0x00</span>,<span class="hljs-number">0x00</span>,<span class="hljs-number">0x00</span>,    <span class="hljs-number">0x00</span>,<span class="hljs-number">0xFF</span>,<span class="hljs-number">0xFF</span>,<span class="hljs-number">0xFF</span>,<span class="hljs-number">0xFF</span>,<span class="hljs-number">0xFF</span>,<span class="hljs-number">0xFF</span>,<span class="hljs-number">0x00</span>,<span class="hljs-number">0x00</span>,<span class="hljs-number">0x00</span>,<span class="hljs-number">0x00</span>,<span class="hljs-number">0x00</span>,<span class="hljs-number">0x00</span>,<span class="hljs-number">0x00</span>,<span class="hljs-number">0x00</span>,<span class="hljs-number">0x00</span>,    <span class="hljs-number">0x00</span>,<span class="hljs-number">0x00</span>,<span class="hljs-number">0x00</span>,<span class="hljs-number">0x00</span>,<span class="hljs-number">0x00</span>,<span class="hljs-number">0x00</span>,<span class="hljs-number">0x00</span>,<span class="hljs-number">0x07</span>,<span class="hljs-number">0xFF</span>,<span class="hljs-number">0xFF</span>,<span class="hljs-number">0xFF</span>,<span class="hljs-number">0xFF</span>,<span class="hljs-number">0xFF</span>,<span class="hljs-number">0xE0</span>,<span class="hljs-number">0x00</span>,<span class="hljs-number">0x00</span>,    <span class="hljs-number">0x00</span>,<span class="hljs-number">0x00</span>,<span class="hljs-number">0x00</span>,<span class="hljs-number">0x00</span>,<span class="hljs-number">0x00</span>,<span class="hljs-number">0xFF</span>,<span class="hljs-number">0xFF</span>,<span class="hljs-number">0xFF</span>,<span class="hljs-number">0xFF</span>,<span class="hljs-number">0xFF</span>,<span class="hljs-number">0x3F</span>,<span class="hljs-number">0x00</span>,<span class="hljs-number">0x00</span>,<span class="hljs-number">0x00</span>,<span class="hljs-number">0xF0</span>,<span class="hljs-number">0xF0</span>,    <span class="hljs-number">0xF0</span>,<span class="hljs-number">0xF0</span>,<span class="hljs-number">0xF0</span>,<span class="hljs-number">0xF0</span>,<span class="hljs-number">0xF0</span>,<span class="hljs-number">0xF0</span>,<span class="hljs-number">0xF0</span>,<span class="hljs-number">0x00</span>,<span class="hljs-number">0x00</span>,<span class="hljs-number">0xFF</span>,<span class="hljs-number">0xFF</span>,<span class="hljs-number">0xFF</span>,<span class="hljs-number">0xFF</span>,<span class="hljs-number">0xFF</span>,<span class="hljs-number">0x01</span>,<span class="hljs-number">0xFE</span>,    <span class="hljs-number">0xFF</span>,<span class="hljs-number">0xFF</span>,<span class="hljs-number">0xFF</span>,<span class="hljs-number">0xFF</span>,<span class="hljs-number">0xFF</span>,<span class="hljs-number">0xFF</span>,<span class="hljs-number">0xFF</span>,<span class="hljs-number">0xFF</span>,<span class="hljs-number">0xFF</span>,<span class="hljs-number">0xFF</span>,<span class="hljs-number">0xFF</span>,<span class="hljs-number">0x00</span>,<span class="hljs-number">0xFF</span>,<span class="hljs-number">0xFF</span>,<span class="hljs-number">0xFF</span>,<span class="hljs-number">0xFF</span>,    <span class="hljs-number">0xFF</span>,<span class="hljs-number">0xFF</span>,<span class="hljs-number">0xFC</span>,<span class="hljs-number">0xFC</span>,<span class="hljs-number">0xFC</span>,<span class="hljs-number">0xFC</span>,<span class="hljs-number">0xFC</span>,<span class="hljs-number">0xFC</span>,<span class="hljs-number">0xFF</span>,<span class="hljs-number">0xFF</span>,<span class="hljs-number">0xFF</span>,<span class="hljs-number">0xFF</span>,<span class="hljs-number">0xFF</span>,<span class="hljs-number">0xFF</span>,<span class="hljs-number">0x00</span>,<span class="hljs-number">0xFF</span>,    <span class="hljs-number">0xFF</span>,<span class="hljs-number">0xFF</span>,<span class="hljs-number">0xFF</span>,<span class="hljs-number">0xFF</span>,<span class="hljs-number">0xFF</span>,<span class="hljs-number">0x00</span>,<span class="hljs-number">0x00</span>,<span class="hljs-number">0x00</span>,<span class="hljs-number">0x00</span>,<span class="hljs-number">0xFF</span>,<span class="hljs-number">0xFF</span>,<span class="hljs-number">0xFF</span>,<span class="hljs-number">0xFF</span>,<span class="hljs-number">0xFF</span>,<span class="hljs-number">0x00</span>,<span class="hljs-number">0x00</span>,    <span class="hljs-number">0xFF</span>,<span class="hljs-number">0xFF</span>,<span class="hljs-number">0xFF</span>,<span class="hljs-number">0xFF</span>,<span class="hljs-number">0xFF</span>,<span class="hljs-number">0xFF</span>,<span class="hljs-number">0xFF</span>,<span class="hljs-number">0xFF</span>,<span class="hljs-number">0xFF</span>,<span class="hljs-number">0xFF</span>,<span class="hljs-number">0xFF</span>,<span class="hljs-number">0xFF</span>,<span class="hljs-number">0xFF</span>,<span class="hljs-number">0xFE</span>,<span class="hljs-number">0xF0</span>,<span class="hljs-number">0x00</span>,    <span class="hljs-number">0x00</span>,<span class="hljs-number">0xFF</span>,<span class="hljs-number">0xFF</span>,<span class="hljs-number">0xFF</span>,<span class="hljs-number">0xFF</span>,<span class="hljs-number">0xFF</span>,<span class="hljs-number">0xFF</span>,<span class="hljs-number">0x00</span>,<span class="hljs-number">0x00</span>,<span class="hljs-number">0x00</span>,<span class="hljs-number">0x00</span>,<span class="hljs-number">0x00</span>,<span class="hljs-number">0x00</span>,<span class="hljs-number">0x00</span>,<span class="hljs-number">0x00</span>,<span class="hljs-number">0x00</span>,    <span class="hljs-number">0x00</span>,<span class="hljs-number">0x00</span>,<span class="hljs-number">0x00</span>,<span class="hljs-number">0x00</span>,<span class="hljs-number">0x00</span>,<span class="hljs-number">0x00</span>,<span class="hljs-number">0x00</span>,<span class="hljs-number">0xF0</span>,<span class="hljs-number">0xFF</span>,<span class="hljs-number">0xFF</span>,<span class="hljs-number">0xFF</span>,<span class="hljs-number">0xFF</span>,<span class="hljs-number">0xFF</span>,<span class="hljs-number">0x1F</span>,<span class="hljs-number">0x00</span>,<span class="hljs-number">0x00</span>,    <span class="hljs-number">0x00</span>,<span class="hljs-number">0x00</span>,<span class="hljs-number">0x00</span>,<span class="hljs-number">0x00</span>,<span class="hljs-number">0x00</span>,<span class="hljs-number">0xFF</span>,<span class="hljs-number">0xFF</span>,<span class="hljs-number">0xFF</span>,<span class="hljs-number">0xFF</span>,<span class="hljs-number">0xFF</span>,<span class="hljs-number">0xF8</span>,<span class="hljs-number">0x00</span>,<span class="hljs-number">0x00</span>,<span class="hljs-number">0x00</span>,<span class="hljs-number">0x7F</span>,<span class="hljs-number">0x7F</span>,    <span class="hljs-number">0x7F</span>,<span class="hljs-number">0xFF</span>,<span class="hljs-number">0xFF</span>,<span class="hljs-number">0xFF</span>,<span class="hljs-number">0xFF</span>,<span class="hljs-number">0xFF</span>,<span class="hljs-number">0xFF</span>,<span class="hljs-number">0x00</span>,<span class="hljs-number">0x00</span>,<span class="hljs-number">0xFF</span>,<span class="hljs-number">0xFF</span>,<span class="hljs-number">0xFF</span>,<span class="hljs-number">0xFF</span>,<span class="hljs-number">0xFF</span>,<span class="hljs-number">0xFE</span>,<span class="hljs-number">0x01</span>,    <span class="hljs-number">0x01</span>,<span class="hljs-number">0x01</span>,<span class="hljs-number">0xFF</span>,<span class="hljs-number">0xFF</span>,<span class="hljs-number">0xFF</span>,<span class="hljs-number">0xFF</span>,<span class="hljs-number">0xFF</span>,<span class="hljs-number">0xFD</span>,<span class="hljs-number">0x01</span>,<span class="hljs-number">0x01</span>,<span class="hljs-number">0x01</span>,<span class="hljs-number">0x00</span>,<span class="hljs-number">0xFF</span>,<span class="hljs-number">0xFF</span>,<span class="hljs-number">0xFF</span>,<span class="hljs-number">0xFF</span>,    <span class="hljs-number">0xFF</span>,<span class="hljs-number">0xFF</span>,<span class="hljs-number">0x1F</span>,<span class="hljs-number">0x1F</span>,<span class="hljs-number">0x1F</span>,<span class="hljs-number">0x1F</span>,<span class="hljs-number">0x1F</span>,<span class="hljs-number">0x1F</span>,<span class="hljs-number">0xFF</span>,<span class="hljs-number">0xFF</span>,<span class="hljs-number">0xFF</span>,<span class="hljs-number">0xFF</span>,<span class="hljs-number">0xFF</span>,<span class="hljs-number">0xFF</span>,<span class="hljs-number">0x00</span>,<span class="hljs-number">0xFF</span>,    <span class="hljs-number">0xFF</span>,<span class="hljs-number">0xFF</span>,<span class="hljs-number">0xFF</span>,<span class="hljs-number">0xFF</span>,<span class="hljs-number">0xFF</span>,<span class="hljs-number">0x00</span>,<span class="hljs-number">0x00</span>,<span class="hljs-number">0x00</span>,<span class="hljs-number">0x00</span>,<span class="hljs-number">0xFF</span>,<span class="hljs-number">0xFF</span>,<span class="hljs-number">0xFF</span>,<span class="hljs-number">0xFF</span>,<span class="hljs-number">0xFF</span>,<span class="hljs-number">0x00</span>,<span class="hljs-number">0x00</span>,    <span class="hljs-number">0xFF</span>,<span class="hljs-number">0xFF</span>,<span class="hljs-number">0xFF</span>,<span class="hljs-number">0xFF</span>,<span class="hljs-number">0xFF</span>,<span class="hljs-number">0x01</span>,<span class="hljs-number">0x00</span>,<span class="hljs-number">0x00</span>,<span class="hljs-number">0x00</span>,<span class="hljs-number">0x0F</span>,<span class="hljs-number">0xFF</span>,<span class="hljs-number">0xFF</span>,<span class="hljs-number">0xFF</span>,<span class="hljs-number">0xFF</span>,<span class="hljs-number">0xFF</span>,<span class="hljs-number">0x00</span>,    <span class="hljs-number">0x00</span>,<span class="hljs-number">0x07</span>,<span class="hljs-number">0xFF</span>,<span class="hljs-number">0xFF</span>,<span class="hljs-number">0xFF</span>,<span class="hljs-number">0xBF</span>,<span class="hljs-number">0xFF</span>,<span class="hljs-number">0xFF</span>,<span class="hljs-number">0xF8</span>,<span class="hljs-number">0xE0</span>,<span class="hljs-number">0xC8</span>,<span class="hljs-number">0xC0</span>,<span class="hljs-number">0x80</span>,<span class="hljs-number">0x00</span>,<span class="hljs-number">0x00</span>,<span class="hljs-number">0x00</span>,    <span class="hljs-number">0x00</span>,<span class="hljs-number">0x80</span>,<span class="hljs-number">0xC0</span>,<span class="hljs-number">0xC0</span>,<span class="hljs-number">0xE2</span>,<span class="hljs-number">0xF0</span>,<span class="hljs-number">0xFC</span>,<span class="hljs-number">0xFF</span>,<span class="hljs-number">0xFF</span>,<span class="hljs-number">0xFF</span>,<span class="hljs-number">0xFF</span>,<span class="hljs-number">0xFF</span>,<span class="hljs-number">0x1F</span>,<span class="hljs-number">0x00</span>,<span class="hljs-number">0x00</span>,<span class="hljs-number">0x00</span>,    <span class="hljs-number">0x00</span>,<span class="hljs-number">0x00</span>,<span class="hljs-number">0x00</span>,<span class="hljs-number">0x00</span>,<span class="hljs-number">0x00</span>,<span class="hljs-number">0x7F</span>,<span class="hljs-number">0xFF</span>,<span class="hljs-number">0xFF</span>,<span class="hljs-number">0xFF</span>,<span class="hljs-number">0xFF</span>,<span class="hljs-number">0xFF</span>,<span class="hljs-number">0xE0</span>,<span class="hljs-number">0x00</span>,<span class="hljs-number">0x00</span>,<span class="hljs-number">0x00</span>,<span class="hljs-number">0x00</span>,    <span class="hljs-number">0x00</span>,<span class="hljs-number">0xFF</span>,<span class="hljs-number">0xFF</span>,<span class="hljs-number">0xFF</span>,<span class="hljs-number">0xFF</span>,<span class="hljs-number">0xFF</span>,<span class="hljs-number">0xFF</span>,<span class="hljs-number">0x00</span>,<span class="hljs-number">0x00</span>,<span class="hljs-number">0xFF</span>,<span class="hljs-number">0xFF</span>,<span class="hljs-number">0xFF</span>,<span class="hljs-number">0xFF</span>,<span class="hljs-number">0xFF</span>,<span class="hljs-number">0xFF</span>,<span class="hljs-number">0x00</span>,    <span class="hljs-number">0x00</span>,<span class="hljs-number">0x00</span>,<span class="hljs-number">0xFF</span>,<span class="hljs-number">0xFF</span>,<span class="hljs-number">0xFF</span>,<span class="hljs-number">0xFF</span>,<span class="hljs-number">0xFF</span>,<span class="hljs-number">0xFF</span>,<span class="hljs-number">0x00</span>,<span class="hljs-number">0x00</span>,<span class="hljs-number">0x00</span>,<span class="hljs-number">0x00</span>,<span class="hljs-number">0xFF</span>,<span class="hljs-number">0xFF</span>,<span class="hljs-number">0xFF</span>,<span class="hljs-number">0xFF</span>,    <span class="hljs-number">0xFF</span>,<span class="hljs-number">0xFF</span>,<span class="hljs-number">0x00</span>,<span class="hljs-number">0x00</span>,<span class="hljs-number">0x00</span>,<span class="hljs-number">0x00</span>,<span class="hljs-number">0x00</span>,<span class="hljs-number">0x00</span>,<span class="hljs-number">0xFF</span>,<span class="hljs-number">0xFF</span>,<span class="hljs-number">0xFF</span>,<span class="hljs-number">0xFF</span>,<span class="hljs-number">0xFF</span>,<span class="hljs-number">0xFF</span>,<span class="hljs-number">0x00</span>,<span class="hljs-number">0xFF</span>,    <span class="hljs-number">0xFF</span>,<span class="hljs-number">0xFF</span>,<span class="hljs-number">0xFF</span>,<span class="hljs-number">0xFF</span>,<span class="hljs-number">0xFF</span>,<span class="hljs-number">0x00</span>,<span class="hljs-number">0x00</span>,<span class="hljs-number">0x00</span>,<span class="hljs-number">0x00</span>,<span class="hljs-number">0xFF</span>,<span class="hljs-number">0xFF</span>,<span class="hljs-number">0xFF</span>,<span class="hljs-number">0xFF</span>,<span class="hljs-number">0xFF</span>,<span class="hljs-number">0x00</span>,<span class="hljs-number">0x00</span>,    <span class="hljs-number">0xFF</span>,<span class="hljs-number">0xFF</span>,<span class="hljs-number">0xFF</span>,<span class="hljs-number">0xFF</span>,<span class="hljs-number">0xFF</span>,<span class="hljs-number">0x00</span>,<span class="hljs-number">0x00</span>,<span class="hljs-number">0x00</span>,<span class="hljs-number">0x00</span>,<span class="hljs-number">0x00</span>,<span class="hljs-number">0xFF</span>,<span class="hljs-number">0xFF</span>,<span class="hljs-number">0xFF</span>,<span class="hljs-number">0xFF</span>,<span class="hljs-number">0xFF</span>,<span class="hljs-number">0x01</span>,    <span class="hljs-number">0x00</span>,<span class="hljs-number">0x00</span>,<span class="hljs-number">0x41</span>,<span class="hljs-number">0x0F</span>,<span class="hljs-number">0x7F</span>,<span class="hljs-number">0xFF</span>,<span class="hljs-number">0xFF</span>,<span class="hljs-number">0xE7</span>,<span class="hljs-number">0xBF</span>,<span class="hljs-number">0x3F</span>,<span class="hljs-number">0x7F</span>,<span class="hljs-number">0xBF</span>,<span class="hljs-number">0x41</span>,<span class="hljs-number">0x00</span>,<span class="hljs-number">0x00</span>,<span class="hljs-number">0x00</span>,    <span class="hljs-number">0x00</span>,<span class="hljs-number">0x00</span>,<span class="hljs-number">0xFF</span>,<span class="hljs-number">0xFF</span>,<span class="hljs-number">0xFF</span>,<span class="hljs-number">0xFF</span>,<span class="hljs-number">0xFF</span>,<span class="hljs-number">0xFF</span>,<span class="hljs-number">0xFF</span>,<span class="hljs-number">0xFF</span>,<span class="hljs-number">0x1F</span>,<span class="hljs-number">0x43</span>,<span class="hljs-number">0x00</span>,<span class="hljs-number">0x00</span>,<span class="hljs-number">0x00</span>,<span class="hljs-number">0x00</span>,    <span class="hljs-number">0x00</span>,<span class="hljs-number">0x00</span>,<span class="hljs-number">0x00</span>,<span class="hljs-number">0x00</span>,<span class="hljs-number">0x00</span>,<span class="hljs-number">0x00</span>,<span class="hljs-number">0x0F</span>,<span class="hljs-number">0x7F</span>,<span class="hljs-number">0xFF</span>,<span class="hljs-number">0xFF</span>,<span class="hljs-number">0xFF</span>,<span class="hljs-number">0xFF</span>,<span class="hljs-number">0xFF</span>,<span class="hljs-number">0xFE</span>,<span class="hljs-number">0xFE</span>,<span class="hljs-number">0xFC</span>,    <span class="hljs-number">0xFE</span>,<span class="hljs-number">0xFF</span>,<span class="hljs-number">0xFF</span>,<span class="hljs-number">0xFF</span>,<span class="hljs-number">0xFF</span>,<span class="hljs-number">0xFF</span>,<span class="hljs-number">0xFF</span>,<span class="hljs-number">0x00</span>,<span class="hljs-number">0x00</span>,<span class="hljs-number">0xFF</span>,<span class="hljs-number">0xFF</span>,<span class="hljs-number">0xFF</span>,<span class="hljs-number">0xFF</span>,<span class="hljs-number">0xFF</span>,<span class="hljs-number">0xFF</span>,<span class="hljs-number">0x00</span>,    <span class="hljs-number">0x00</span>,<span class="hljs-number">0x00</span>,<span class="hljs-number">0x7F</span>,<span class="hljs-number">0xFF</span>,<span class="hljs-number">0xFF</span>,<span class="hljs-number">0xFF</span>,<span class="hljs-number">0xFF</span>,<span class="hljs-number">0xFF</span>,<span class="hljs-number">0xF8</span>,<span class="hljs-number">0xF8</span>,<span class="hljs-number">0xF8</span>,<span class="hljs-number">0x00</span>,<span class="hljs-number">0xFF</span>,<span class="hljs-number">0xFF</span>,<span class="hljs-number">0xFF</span>,<span class="hljs-number">0xFF</span>,    <span class="hljs-number">0xFF</span>,<span class="hljs-number">0xFF</span>,<span class="hljs-number">0x00</span>,<span class="hljs-number">0x00</span>,<span class="hljs-number">0x00</span>,<span class="hljs-number">0x00</span>,<span class="hljs-number">0x00</span>,<span class="hljs-number">0x00</span>,<span class="hljs-number">0xFF</span>,<span class="hljs-number">0xFF</span>,<span class="hljs-number">0xFF</span>,<span class="hljs-number">0xFF</span>,<span class="hljs-number">0xFF</span>,<span class="hljs-number">0xFF</span>,<span class="hljs-number">0x00</span>,<span class="hljs-number">0x3F</span>,    <span class="hljs-number">0xFF</span>,<span class="hljs-number">0xFF</span>,<span class="hljs-number">0xFF</span>,<span class="hljs-number">0xFF</span>,<span class="hljs-number">0xFF</span>,<span class="hljs-number">0xF8</span>,<span class="hljs-number">0xF8</span>,<span class="hljs-number">0xF8</span>,<span class="hljs-number">0xFC</span>,<span class="hljs-number">0xFF</span>,<span class="hljs-number">0xFF</span>,<span class="hljs-number">0xFF</span>,<span class="hljs-number">0xFF</span>,<span class="hljs-number">0xFF</span>,<span class="hljs-number">0x00</span>,<span class="hljs-number">0x00</span>,    <span class="hljs-number">0xFF</span>,<span class="hljs-number">0xFF</span>,<span class="hljs-number">0xFF</span>,<span class="hljs-number">0xFF</span>,<span class="hljs-number">0xFF</span>,<span class="hljs-number">0xFC</span>,<span class="hljs-number">0xF8</span>,<span class="hljs-number">0xF8</span>,<span class="hljs-number">0xF8</span>,<span class="hljs-number">0xFF</span>,<span class="hljs-number">0xFF</span>,<span class="hljs-number">0xFF</span>,<span class="hljs-number">0xFF</span>,<span class="hljs-number">0xFF</span>,<span class="hljs-number">0x7F</span>,<span class="hljs-number">0x00</span>,    <span class="hljs-number">0x00</span>,<span class="hljs-number">0x00</span>,<span class="hljs-number">0x00</span>,<span class="hljs-number">0x00</span>,<span class="hljs-number">0x08</span>,<span class="hljs-number">0x09</span>,<span class="hljs-number">0x07</span>,<span class="hljs-number">0x1F</span>,<span class="hljs-number">0x3F</span>,<span class="hljs-number">0xFF</span>,<span class="hljs-number">0xFF</span>,<span class="hljs-number">0xFF</span>,<span class="hljs-number">0x00</span>,<span class="hljs-number">0x00</span>,<span class="hljs-number">0x00</span>,<span class="hljs-number">0x00</span>,    <span class="hljs-number">0x00</span>,<span class="hljs-number">0x00</span>,<span class="hljs-number">0xFF</span>,<span class="hljs-number">0xFF</span>,<span class="hljs-number">0xFF</span>,<span class="hljs-number">0x7F</span>,<span class="hljs-number">0x1F</span>,<span class="hljs-number">0x0F</span>,<span class="hljs-number">0x03</span>,<span class="hljs-number">0x00</span>,<span class="hljs-number">0x00</span>,<span class="hljs-number">0x00</span>,<span class="hljs-number">0x00</span>,<span class="hljs-number">0x00</span>,<span class="hljs-number">0x00</span>,<span class="hljs-number">0x00</span>,    <span class="hljs-number">0x00</span>,<span class="hljs-number">0x00</span>,<span class="hljs-number">0x00</span>,<span class="hljs-number">0x00</span>,<span class="hljs-number">0x00</span>,<span class="hljs-number">0x00</span>,<span class="hljs-number">0x00</span>,<span class="hljs-number">0x00</span>,<span class="hljs-number">0x01</span>,<span class="hljs-number">0x03</span>,<span class="hljs-number">0x07</span>,<span class="hljs-number">0x0F</span>,<span class="hljs-number">0x1F</span>,<span class="hljs-number">0x1F</span>,<span class="hljs-number">0x1F</span>,<span class="hljs-number">0x3F</span>,    <span class="hljs-number">0x3F</span>,<span class="hljs-number">0x1F</span>,<span class="hljs-number">0x1F</span>,<span class="hljs-number">0x1F</span>,<span class="hljs-number">0x0F</span>,<span class="hljs-number">0x07</span>,<span class="hljs-number">0x13</span>,<span class="hljs-number">0x00</span>,<span class="hljs-number">0x00</span>,<span class="hljs-number">0x0F</span>,<span class="hljs-number">0x1F</span>,<span class="hljs-number">0x0F</span>,<span class="hljs-number">0x1F</span>,<span class="hljs-number">0x1F</span>,<span class="hljs-number">0x06</span>,<span class="hljs-number">0x00</span>,    <span class="hljs-number">0x00</span>,<span class="hljs-number">0x00</span>,<span class="hljs-number">0x00</span>,<span class="hljs-number">0x03</span>,<span class="hljs-number">0x0F</span>,<span class="hljs-number">0x1F</span>,<span class="hljs-number">0x1F</span>,<span class="hljs-number">0x1F</span>,<span class="hljs-number">0x1F</span>,<span class="hljs-number">0x1F</span>,<span class="hljs-number">0x1F</span>,<span class="hljs-number">0x00</span>,<span class="hljs-number">0x0F</span>,<span class="hljs-number">0x1F</span>,<span class="hljs-number">0x1F</span>,<span class="hljs-number">0x1F</span>,    <span class="hljs-number">0x1F</span>,<span class="hljs-number">0x1F</span>,<span class="hljs-number">0x00</span>,<span class="hljs-number">0x00</span>,<span class="hljs-number">0x00</span>,<span class="hljs-number">0x00</span>,<span class="hljs-number">0x00</span>,<span class="hljs-number">0x00</span>,<span class="hljs-number">0x0F</span>,<span class="hljs-number">0x1F</span>,<span class="hljs-number">0x0F</span>,<span class="hljs-number">0x1F</span>,<span class="hljs-number">0x1F</span>,<span class="hljs-number">0x0F</span>,<span class="hljs-number">0x00</span>,<span class="hljs-number">0x00</span>,    <span class="hljs-number">0x03</span>,<span class="hljs-number">0x0F</span>,<span class="hljs-number">0x1F</span>,<span class="hljs-number">0x1F</span>,<span class="hljs-number">0x1F</span>,<span class="hljs-number">0x3F</span>,<span class="hljs-number">0x1F</span>,<span class="hljs-number">0x1F</span>,<span class="hljs-number">0x0F</span>,<span class="hljs-number">0x07</span>,<span class="hljs-number">0x1F</span>,<span class="hljs-number">0x1F</span>,<span class="hljs-number">0x1F</span>,<span class="hljs-number">0x1F</span>,<span class="hljs-number">0x00</span>,<span class="hljs-number">0x00</span>,    <span class="hljs-number">0x0F</span>,<span class="hljs-number">0x1F</span>,<span class="hljs-number">0x1F</span>,<span class="hljs-number">0x1F</span>,<span class="hljs-number">0x07</span>,<span class="hljs-number">0x0F</span>,<span class="hljs-number">0x1F</span>,<span class="hljs-number">0x1F</span>,<span class="hljs-number">0x1F</span>,<span class="hljs-number">0x3F</span>,<span class="hljs-number">0x1F</span>,<span class="hljs-number">0x1F</span>,<span class="hljs-number">0x07</span>,<span class="hljs-number">0x03</span>,<span class="hljs-number">0x00</span>,<span class="hljs-number">0x00</span>&#125;</code></pre></div><p><strong>链接：</strong></p><p><a href="https://blog.csdn.net/yagnruinihao/article/details/47133455">https://blog.csdn.net/yagnruinihao/article/details/47133455</a></p><p><a href="https://www.cnblogs.com/dragonet-Z/p/14689345.html">https://www.cnblogs.com/dragonet-Z/p/14689345.html</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;OLED（Organic Light-Emitting Diode）,有机发光二极体，属于一种电流型的有机发光器件，当电流流动时就会自行发光。因其简单，使用方便，所以在开发过程中会经常使用到这种显示器件。&lt;/p&gt;
&lt;p&gt;市面上有很多OLED显示模块，根据控制显示的驱动芯片</summary>
      
    
    
    
    <category term="编程基础" scheme="http://example.com/categories/%E7%BC%96%E7%A8%8B%E5%9F%BA%E7%A1%80/"/>
    
    
    <category term="OLED" scheme="http://example.com/tags/OLED/"/>
    
  </entry>
  
  <entry>
    <title>cJSON使用教程</title>
    <link href="http://example.com/2023/08/29/cJSON%E4%BD%BF%E7%94%A8%E6%95%99%E7%A8%8B/"/>
    <id>http://example.com/2023/08/29/cJSON%E4%BD%BF%E7%94%A8%E6%95%99%E7%A8%8B/</id>
    <published>2023-08-29T07:52:37.000Z</published>
    <updated>2023-08-30T06:39:32.727Z</updated>
    
    <content type="html"><![CDATA[<p><strong>JSON</strong> (JavaScript Object Notation) 是一种轻量级的数据交换格式。它采用完全独立于编程语言的文本格式来存储和表示数据，语法简洁、层次结构清晰，易于人阅读和编写，同时也易于机器解析和生成，有效的提升了网络传输效率。</p><h2 id="json-构建结构">JSON 构建结构</h2><p>JSON 构建结构主要有两种：</p><ul><li><strong>名称/值的集合。</strong>在不同的编程语言中，体现方式分别有 对象、记录、结构体、字典、哈希表、键值列表或关联数组。(object, record, struct, dictionary, hash table, keyed list, associative array)</li><li><strong>有序的数据列表。</strong>在大多数编程语言中，体现方式主要是数组、向量、列表或序列。(array, vector, list, sequence)</li></ul><h2 id="json-语法">JSON 语法</h2><ul><li>数据以 <strong>name：value</strong> (名称:值) 的形式存在，名称和值之间使用"<code>:</code>"分隔</li><li>每个数据由逗号 <strong><code>,</code></strong> 分隔</li><li>大括号 <strong><code>&#123;&#125;</code></strong> 内部保存对象，允许嵌套使用</li><li>中括号 <strong><code>[]</code></strong> 内部保存数组，数组可以包含多个对象</li></ul><p>JSON值类型有：</p><div class="code-wrapper"><pre><code class="hljs c"><span class="hljs-comment">/* cJSON Types: */</span><span class="hljs-meta">#<span class="hljs-keyword">define</span> cJSON_False 0</span><span class="hljs-meta">#<span class="hljs-keyword">define</span> cJSON_True 1</span><span class="hljs-meta">#<span class="hljs-keyword">define</span> cJSON_NULL 2</span><span class="hljs-meta">#<span class="hljs-keyword">define</span> cJSON_Number 3</span><span class="hljs-meta">#<span class="hljs-keyword">define</span> cJSON_String 4</span><span class="hljs-meta">#<span class="hljs-keyword">define</span> cJSON_Array 5</span><span class="hljs-meta">#<span class="hljs-keyword">define</span> cJSON_Object 6</span></code></pre></div><p>示例如下：</p><div class="code-wrapper"><pre><code class="hljs json"><span class="hljs-punctuation">&#123;</span>    <span class="hljs-attr">&quot;name&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;JSON中国&quot;</span><span class="hljs-punctuation">,</span>    <span class="hljs-attr">&quot;url&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;http://www.json.org.cn&quot;</span><span class="hljs-punctuation">,</span>    <span class="hljs-attr">&quot;page&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">88</span><span class="hljs-punctuation">,</span>    <span class="hljs-attr">&quot;isNonProfit&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-literal"><span class="hljs-keyword">true</span></span><span class="hljs-punctuation">,</span>    <span class="hljs-attr">&quot;address&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span>        <span class="hljs-attr">&quot;street&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;浙大路38号.&quot;</span><span class="hljs-punctuation">,</span>        <span class="hljs-attr">&quot;city&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;浙江杭州&quot;</span><span class="hljs-punctuation">,</span>        <span class="hljs-attr">&quot;country&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;中国&quot;</span>    <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span>    <span class="hljs-attr">&quot;links&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">[</span>        <span class="hljs-punctuation">&#123;</span>            <span class="hljs-attr">&quot;name&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;Google&quot;</span><span class="hljs-punctuation">,</span>            <span class="hljs-attr">&quot;url&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;http://www.google.com&quot;</span>        <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span>        <span class="hljs-punctuation">&#123;</span>            <span class="hljs-attr">&quot;name&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;Baidu&quot;</span><span class="hljs-punctuation">,</span>            <span class="hljs-attr">&quot;url&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;http://www.baidu.com&quot;</span>        <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span>        <span class="hljs-punctuation">&#123;</span>            <span class="hljs-attr">&quot;name&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;SoSo&quot;</span><span class="hljs-punctuation">,</span>            <span class="hljs-attr">&quot;url&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;http://www.SoSo.com&quot;</span>        <span class="hljs-punctuation">&#125;</span>    <span class="hljs-punctuation">]</span><span class="hljs-punctuation">&#125;</span></code></pre></div><h2 id="cjson">cJSON</h2><p>cJSON是一个基于C的JSON解析库，这个库非常简短，提供有很多有用的API，支持JSON的解析和创建，移植时只需包含<code>cJSON.h</code>和<code>cJSON.c</code> 这两个文件，然后包含头文件即可调用其API函数。</p><p>cJSON项目托管在Github上，地址：<a href="https://github.com/DaveGamble/cJSON">https://github.com/DaveGamble/cJSON</a></p><h2 id="使用cjson库创建json数据">使用cJSON库创建JSON数据</h2><div class="code-wrapper"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;cJSON.h&quot;</span></span><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">(<span class="hljs-type">void</span>)</span>&#123;    cJSON* cjson_test = <span class="hljs-literal">NULL</span>;    cJSON* cjson_address = <span class="hljs-literal">NULL</span>;    cJSON* cjson_skill = <span class="hljs-literal">NULL</span>;    <span class="hljs-type">char</span>* str = <span class="hljs-literal">NULL</span>;    <span class="hljs-comment">/* 创建一个JSON数据对象(链表头结点) */</span>    cjson_test = cJSON_CreateObject();    <span class="hljs-comment">/* 添加一条字符串类型的JSON数据(添加一个链表节点) */</span>    cJSON_AddStringToObject(cjson_test, <span class="hljs-string">&quot;name&quot;</span>, <span class="hljs-string">&quot;cjson&quot;</span>);    <span class="hljs-comment">/* 添加一条整数类型的JSON数据(添加一个链表节点) */</span>    cJSON_AddNumberToObject(cjson_test, <span class="hljs-string">&quot;age&quot;</span>, <span class="hljs-number">10</span>);    <span class="hljs-comment">/* 添加一条浮点类型的JSON数据(添加一个链表节点) */</span>    cJSON_AddNumberToObject(cjson_test, <span class="hljs-string">&quot;weight&quot;</span>, <span class="hljs-number">20.3</span>);    <span class="hljs-comment">/* 添加一个嵌套的JSON数据（添加一个链表节点） */</span>    cjson_address = cJSON_CreateObject();    cJSON_AddStringToObject(cjson_address, <span class="hljs-string">&quot;country&quot;</span>, <span class="hljs-string">&quot;China&quot;</span>);    cJSON_AddNumberToObject(cjson_address, <span class="hljs-string">&quot;zip-code&quot;</span>, <span class="hljs-number">111111</span>);    cJSON_AddItemToObject(cjson_test, <span class="hljs-string">&quot;address&quot;</span>, cjson_address);    <span class="hljs-comment">/* 添加一个数组类型的JSON数据(添加一个链表节点) */</span>    cjson_skill = cJSON_CreateArray();    cJSON_AddItemToArray(cjson_skill, cJSON_CreateString(<span class="hljs-string">&quot;C&quot;</span>));    cJSON_AddItemToArray(cjson_skill, cJSON_CreateString(<span class="hljs-string">&quot;Java&quot;</span>));    cJSON_AddItemToArray(cjson_skill, cJSON_CreateString(<span class="hljs-string">&quot;Python&quot;</span>));    cJSON_AddItemToObject(cjson_test, <span class="hljs-string">&quot;skill&quot;</span>, cjson_skill);    <span class="hljs-comment">/* 添加一个值为 False 的布尔类型的JSON数据(添加一个链表节点) */</span>    cJSON_AddFalseToObject(cjson_test, <span class="hljs-string">&quot;student&quot;</span>);    <span class="hljs-comment">/* 打印JSON对象(整条链表)的所有数据 */</span>    str = cJSON_Print(cjson_test);    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%s\n&quot;</span>, str);<span class="hljs-comment">/* 释放内存 */</span>cJSON_Delete(cjson_test);cJSON_Delete(cjson_address);cJSON_Delete(cjson_skill);  <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;&#125;</code></pre></div><p>运行结果：</p><p><img src="https://gitee.com/kayoungzhang/picgo_res/raw/master/img/image-20230830083025553.png" alt="image-20230830083025553" style="zoom:80%;" /></p><h2 id="使用cjson库来解析json数据">使用cJSON库来解析JSON数据</h2><p>用于测试JSON数据，我们先用一个char型的字符串来保存，由于JSON对象的name和value都需要使用引号（数值或逻辑型value除外），所以 <strong>在遇到引号时，要加反斜杠<code>\</code>来转义</strong>。</p><div class="code-wrapper"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;cJSON.h&quot;</span></span><span class="hljs-type">char</span> *message =                               <span class="hljs-string">&quot;&#123;\&quot;name\&quot;: \&quot;cjson\&quot;,                      \</span><span class="hljs-string">\&quot;age\&quot;:  10,                             \</span><span class="hljs-string">\&quot;weight\&quot;:       20.300000,              \</span><span class="hljs-string">\&quot;address\&quot;:      &#123;                       \</span><span class="hljs-string">\&quot;country\&quot;:      \&quot;China\&quot;,      \</span><span class="hljs-string">\&quot;zip-code\&quot;:     111111          \</span><span class="hljs-string">&#125;,                                        \</span><span class="hljs-string">\&quot;skill\&quot;:        [\&quot;C\&quot;, \&quot;Java\&quot;, \&quot;Python\&quot;],  \</span><span class="hljs-string">\&quot;student\&quot;:      false                   \</span><span class="hljs-string">&#125;&quot;</span>;<span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">(<span class="hljs-type">void</span>)</span>&#123;  cJSON* cjson_test = <span class="hljs-literal">NULL</span>;  cJSON* cjson_name = <span class="hljs-literal">NULL</span>;  cJSON* cjson_age = <span class="hljs-literal">NULL</span>;  cJSON* cjson_weight = <span class="hljs-literal">NULL</span>;  cJSON* cjson_address = <span class="hljs-literal">NULL</span>;  cJSON* cjson_address_country = <span class="hljs-literal">NULL</span>;  cJSON* cjson_address_zipcode = <span class="hljs-literal">NULL</span>;  cJSON* cjson_skill = <span class="hljs-literal">NULL</span>;  cJSON* cjson_student = <span class="hljs-literal">NULL</span>;  <span class="hljs-type">int</span>    skill_array_size = <span class="hljs-number">0</span>, i = <span class="hljs-number">0</span>;  cJSON* cjson_skill_item = <span class="hljs-literal">NULL</span>;  <span class="hljs-comment">/* 解析整段JSON数据 */</span>  cjson_test = cJSON_Parse(message);  <span class="hljs-keyword">if</span>(cjson_test == <span class="hljs-literal">NULL</span>)  &#123;    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;parse fail.\n&quot;</span>);    <span class="hljs-keyword">return</span> <span class="hljs-number">-1</span>;  &#125;  <span class="hljs-comment">/* 依次根据名称提取JSON数据（键值对） */</span>  cjson_name = cJSON_GetObjectItem(cjson_test, <span class="hljs-string">&quot;name&quot;</span>);  cjson_age = cJSON_GetObjectItem(cjson_test, <span class="hljs-string">&quot;age&quot;</span>);  cjson_weight = cJSON_GetObjectItem(cjson_test, <span class="hljs-string">&quot;weight&quot;</span>);  <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;name: %s\n&quot;</span>, cjson_name-&gt;valuestring);  <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;age:%d\n&quot;</span>, cjson_age-&gt;valueint);  <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;weight:%.1f\n&quot;</span>, cjson_weight-&gt;valuedouble);  <span class="hljs-comment">/* 解析嵌套JSON数据 */</span>  cjson_address = cJSON_GetObjectItem(cjson_test, <span class="hljs-string">&quot;address&quot;</span>);  cjson_address_country = cJSON_GetObjectItem(cjson_address, <span class="hljs-string">&quot;country&quot;</span>);  cjson_address_zipcode = cJSON_GetObjectItem(cjson_address, <span class="hljs-string">&quot;zip-code&quot;</span>);  <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;address-country:%s\naddress-zipcode:%d\n&quot;</span>, cjson_address_country-&gt;valuestring, cjson_address_zipcode-&gt;valueint);  <span class="hljs-comment">/* 解析数组 */</span>  cjson_skill = cJSON_GetObjectItem(cjson_test, <span class="hljs-string">&quot;skill&quot;</span>);  skill_array_size = cJSON_GetArraySize(cjson_skill);  <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;skill:[&quot;</span>);  <span class="hljs-keyword">for</span>(i = <span class="hljs-number">0</span>; i &lt; skill_array_size; i++)  &#123;    cjson_skill_item = cJSON_GetArrayItem(cjson_skill, i);    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%s,&quot;</span>, cjson_skill_item-&gt;valuestring);  &#125;  <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;\b]\n&quot;</span>);  <span class="hljs-comment">/* 解析布尔型数据 */</span>  cjson_student = cJSON_GetObjectItem(cjson_test, <span class="hljs-string">&quot;student&quot;</span>);  <span class="hljs-keyword">if</span>(cjson_student-&gt;valueint == <span class="hljs-number">0</span>)    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;student: false\n&quot;</span>);  <span class="hljs-keyword">else</span>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;student:error\n&quot;</span>);  <span class="hljs-comment">/* 释放内存 */</span>  cJSON_Delete(cjson_test);  cJSON_Delete(cjson_name);  cJSON_Delete(cjson_age);  cJSON_Delete(cjson_weight);  cJSON_Delete(cjson_address);  cJSON_Delete(cjson_address_country);  cJSON_Delete(cjson_address_zipcode);  cJSON_Delete(cjson_skill);  cJSON_Delete(cjson_student);  <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;&#125;</code></pre></div><p>运行结果：</p><figure><img src="https://gitee.com/kayoungzhang/picgo_res/raw/master/img/image-20230830103105877.png" alt="" /><figcaption>image-20230830103105877</figcaption></figure><p>上面是针对JSON数据量较少的情况，通过一个字符串来保存，然后进行解析的方式。但实际使用中，JSON数据的内容较为庞大，<strong>一般都是使用文件的形式来保存JSON数据</strong>。</p><p>下面准备一个原始数据，如下面的json.txt：</p><div class="code-wrapper"><pre><code class="hljs c">&#123;    <span class="hljs-string">&quot;url&quot;</span>: <span class="hljs-string">&quot;http://www.json.org.cn&quot;</span>,    <span class="hljs-string">&quot;page&quot;</span>: <span class="hljs-number">88</span>,    <span class="hljs-string">&quot;address&quot;</span>: &#123;        <span class="hljs-string">&quot;street&quot;</span>: <span class="hljs-string">&quot;浙大路38号.&quot;</span>,        <span class="hljs-string">&quot;city&quot;</span>: <span class="hljs-string">&quot;浙江杭州&quot;</span>,        <span class="hljs-string">&quot;country&quot;</span>: <span class="hljs-string">&quot;中国&quot;</span>    &#125;,    <span class="hljs-string">&quot;links&quot;</span>: [        &#123;            <span class="hljs-string">&quot;name&quot;</span>: <span class="hljs-string">&quot;Google&quot;</span>,            <span class="hljs-string">&quot;url&quot;</span>: <span class="hljs-string">&quot;http://www.google.com&quot;</span>        &#125;,        &#123;            <span class="hljs-string">&quot;name&quot;</span>: <span class="hljs-string">&quot;Baidu&quot;</span>,            <span class="hljs-string">&quot;url&quot;</span>: <span class="hljs-string">&quot;http://www.baidu.com&quot;</span>        &#125;,        &#123;            <span class="hljs-string">&quot;name&quot;</span>: <span class="hljs-string">&quot;SoSo&quot;</span>,            <span class="hljs-string">&quot;url&quot;</span>: <span class="hljs-string">&quot;http://www.SoSo.com&quot;</span>        &#125;    ]&#125;</code></pre></div><p>解析这种JSON文件，使用要使用 <code>fopen()</code> 来打开这个文件,还要使用<code>fseek()</code>和<code>ftell()</code>来计算文件的大小，目的是用于后面的分配内存时指定大小。然后使用<code>fread()</code>将文件读入分配的内存中,接着使用<code>cJSON_Parse()</code> 将JSON数据解析为 <code>cJSON</code> 型的对象,然后就可以同上面的一样使用cJSON库中提供的各种函数API来操作这个对象了。</p><div class="code-wrapper"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdlib.h&gt;</span></span><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;memory.h&gt;</span> <span class="hljs-comment">//memset</span></span><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;cJSON.h&quot;</span></span><span class="hljs-type">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(<span class="hljs-type">void</span>)</span>&#123;<span class="hljs-type">int</span> fileSize; <span class="hljs-comment">//文件大小</span><span class="hljs-type">char</span> *buf; <span class="hljs-comment">//分配内存buf</span><span class="hljs-type">int</span> ret = <span class="hljs-number">0</span>, i = <span class="hljs-number">0</span>, len = <span class="hljs-number">0</span>;<span class="hljs-comment">//数组长度</span>    <span class="hljs-comment">/* 打开JSON文件 */</span>     FILE *fp = fopen(<span class="hljs-string">&quot;json.txt&quot;</span>, <span class="hljs-string">&quot;r&quot;</span>);    <span class="hljs-keyword">if</span>(fp == <span class="hljs-literal">NULL</span>)        <span class="hljs-keyword">return</span>;    <span class="hljs-comment">/* 计算文件大小 */</span>     fseek(fp, <span class="hljs-number">0</span>, SEEK_END);<span class="hljs-comment">/* 定位文件指针到文件尾 */</span>     fileSize = ftell(fp);<span class="hljs-comment">/* 获取文件指针偏移量，即文件大小 */</span>     <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;fileSize: %d Byte\r\n&quot;</span>, fileSize);fseek(fp, <span class="hljs-number">0</span>, SEEK_SET);<span class="hljs-comment">/* 再将文件指针移到文件开头 */</span>     <span class="hljs-comment">/* 根据文件大小分配内存，并读取文件到内存 */</span>     buf = (<span class="hljs-type">char</span> *)<span class="hljs-built_in">malloc</span>(fileSize * <span class="hljs-keyword">sizeof</span>(<span class="hljs-type">char</span>));    <span class="hljs-built_in">memset</span>(buf, <span class="hljs-number">0</span>, fileSize);    ret = fread(buf, fileSize, <span class="hljs-keyword">sizeof</span>(<span class="hljs-type">char</span>), fp);    <span class="hljs-keyword">if</span>(ret == <span class="hljs-number">-1</span>)    &#123;        fclose(fp);        <span class="hljs-keyword">return</span>;    &#125;    fclose(fp);    <span class="hljs-comment">/* 把该字符串数据转成JSON数据 */</span>     cJSON *srcJsonData = cJSON_Parse(buf);    <span class="hljs-keyword">if</span>(srcJsonData == <span class="hljs-literal">NULL</span>)    &#123;        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;err\r\n&quot;</span>);        <span class="hljs-keyword">return</span>;    &#125;<span class="hljs-built_in">free</span>(buf);    <span class="hljs-comment">/* 解析JSON数据并输出显示 */</span>    <span class="hljs-comment">/*根据key值(url)获取对应的value*/</span>    cJSON *json_url = cJSON_GetObjectItem(srcJsonData, <span class="hljs-string">&quot;url&quot;</span>);    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;website: %s\r\n&quot;</span>, cJSON_Print(json_url));<span class="hljs-comment">/*根据key值(page)获取对应的value*/</span>    cJSON *json_page = cJSON_GetObjectItem(srcJsonData, <span class="hljs-string">&quot;page&quot;</span>);    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;page: %d\r\n&quot;</span>, json_page-&gt;valueint);<span class="hljs-comment">/* 根据嵌套的key值(address)获取对应的value */</span>cJSON *json_address = cJSON_GetObjectItem(srcJsonData, <span class="hljs-string">&quot;address&quot;</span>);cJSON *json_street = cJSON_GetObjectItem(json_address, <span class="hljs-string">&quot;street&quot;</span>);cJSON *json_city = cJSON_GetObjectItem(json_address, <span class="hljs-string">&quot;city&quot;</span>);cJSON *json_country = cJSON_GetObjectItem(json_address, <span class="hljs-string">&quot;country&quot;</span>);<span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;address-street: %s; address-city: %s; address-country: %s\r\n&quot;</span>, cJSON_Print(json_street), \      cJSON_Print(json_city), cJSON_Print(json_country));      <span class="hljs-comment">// /* 根据数组key值(links)获取对应的value */</span>    cJSON* json_links = cJSON_GetObjectItem(srcJsonData, <span class="hljs-string">&quot;links&quot;</span>);    len = cJSON_GetArraySize(json_links); <span class="hljs-comment">/* 获取该数组的大小 */</span>    <span class="hljs-keyword">for</span>(i = <span class="hljs-number">0</span>; i &lt; len; i++)    &#123;        <span class="hljs-comment">/* 先获取每一条信息 */</span>        cJSON *tmpValue = cJSON_GetArrayItem(json_links, i);        <span class="hljs-comment">/* 再获取每条信息中的具体内容 */</span>         cJSON *nameValue = cJSON_GetObjectItem(tmpValue,<span class="hljs-string">&quot;name&quot;</span>);cJSON *urlValue = cJSON_GetObjectItem(tmpValue,<span class="hljs-string">&quot;url&quot;</span>);        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;[%d] %s \t %s \t %s\r\n&quot;</span>, i+<span class="hljs-number">1</span>, nameValue-&gt;valuestring, urlValue-&gt;valuestring);    &#125;<span class="hljs-comment">/* 释放内存 */</span>cJSON_Delete(json_url);cJSON_Delete(json_page);cJSON_Delete(json_address);cJSON_Delete(json_street);cJSON_Delete(json_city);cJSON_Delete(json_country);cJSON_Delete(json_links);  cJSON_Delete(srcJsonData);&#125;</code></pre></div><p>运行结果：</p><figure><img src="https://gitee.com/kayoungzhang/picgo_res/raw/master/img/image-20230830132151235.png" alt="" /><figcaption>image-20230830132151235</figcaption></figure><h2 id="cjson使用过程中的内存问题">cJSON使用过程中的内存问题</h2><p>cJSON在使用过程中<strong>大量的使用<code>malloc</code>从堆中分配内存的，所以用完之后，应及时释放内存 <code>(void) cJSON_Delete(cJSON *item)</code></strong>。</p><p>另外，cJSON中还可以通过 <strong>cJSON_Hooks</strong> ，自定义malloc函数和free函数。</p><div class="code-wrapper"><pre><code class="hljs c"><span class="hljs-keyword">typedef</span> <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">cJSON_Hooks</span> &#123;</span>      <span class="hljs-type">void</span> *(*malloc_fn)(<span class="hljs-type">size_t</span> sz);      <span class="hljs-type">void</span> (*free_fn)(<span class="hljs-type">void</span> *ptr);&#125; cJSON_Hooks;<span class="hljs-type">void</span> <span class="hljs-title function_">cJSON_InitHooks</span><span class="hljs-params">(cJSON_Hooks* hooks)</span>&#123;    <span class="hljs-keyword">if</span> (!hooks) &#123; <span class="hljs-comment">/* Reset hooks */</span>        cJSON_malloc = <span class="hljs-built_in">malloc</span>;        cJSON_free = <span class="hljs-built_in">free</span>;        <span class="hljs-keyword">return</span>;    &#125;cJSON_malloc = (hooks-&gt;malloc_fn)?hooks-&gt;malloc_fn:<span class="hljs-built_in">malloc</span>;cJSON_free = (hooks-&gt;free_fn)?hooks-&gt;free_fn:<span class="hljs-built_in">free</span>;&#125;</code></pre></div><p>工程文件已上传Gitee：<a href="https://gitee.com/kayoungzhang/my_codehub/raw/master/cjson/cjson_demo.zip">cjson_demo</a></p><p><strong>链接：</strong></p><p><strong>JSON在线工具：</strong><a href="http://www.json.org.cn/tools/JSONEditorOnline2.0/index.htm">http://www.json.org.cn/tools/JSONEditorOnline2.0/index.htm</a></p><p><a href="https://blog.csdn.net/Mculover666/article/details/103796256">https://blog.csdn.net/Mculover666/article/details/103796256</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;&lt;strong&gt;JSON&lt;/strong&gt; (JavaScript Object Notation) 是一种轻量级的数据交换格式。它采用完全独立于编程语言的文本格式来存储和表示数据，语法简洁、层次结构清晰，易于人阅读和编写，同时也易于机器解析和生成，有效的提升了网络传输效率</summary>
      
    
    
    
    <category term="编程基础" scheme="http://example.com/categories/%E7%BC%96%E7%A8%8B%E5%9F%BA%E7%A1%80/"/>
    
    
    <category term="JSON" scheme="http://example.com/tags/JSON/"/>
    
  </entry>
  
</feed>
