<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Hexo</title>
  
  
  <link href="http://example.com/atom.xml" rel="self"/>
  
  <link href="http://example.com/"/>
  <updated>2023-05-24T14:40:06.233Z</updated>
  <id>http://example.com/</id>
  
  <author>
    <name>John Doe</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>PCB layout rules</title>
    <link href="http://example.com/2023/05/24/PCB-layout-rules/"/>
    <id>http://example.com/2023/05/24/PCB-layout-rules/</id>
    <published>2023-05-24T11:23:43.000Z</published>
    <updated>2023-05-24T14:40:06.233Z</updated>
    
    <content type="html"><![CDATA[<p>PCB设计过程中，器件的整体布局和关键信号的layout至关重要，布局得当，信号线layout顺畅，就会在后续设计开发过程中，减少不必要的麻烦，相反，布局不当，layout失误，一是影响PCB整体的美观程度，二是在测试应用中带来诸多麻烦。为了减少不必要的设计麻烦，下面介绍一些常用的PCB设计的布局和layout规则：</p><h3 id="pcb布局">PCB布局</h3><ul><li>首先对结构有限高或位置要求的器件进行摆放。布局要美观，器件间尽量对齐。</li><li>PCB整体布局要考虑散热，电源，模拟、数字电路和高速、中速、低速电路等要分开布局。强电流、高电压、强辐射元件要远离弱电流、低电压、敏感器件。</li></ul><p><img src="https://gitee.com/kayoungzhang/picgo_res/raw/master/img/image-20230524194603654.png" alt="image-20230524194603654" style="zoom:80%;" /></p><ul><li><p>以每个功能电路的核心组件为中心，围绕它进行布局，尽量减少和缩短各零件间的引线和连接。</p></li><li><p>高压元器件和低压元器件之间最好要有较宽的电气隔离带。</p></li><li><p>布局要考虑布线通道和空间，预估电源通道，不要来回绕。</p></li><li><p>接口保护器件尽量靠近接口摆放，采用一字型布局。信号转换芯片靠近插接口放置。</p></li><li><p>插拔器件或板边连接器周围3mm范围内尽量不布置SMD，以防止连接器插拔时产生的应力损伤器件。</p></li><li><p>器件摆放要外围留有足够的焊接空间，考虑后期可手动焊接。</p></li><li><p>有极性或方向性的插件器件在布局上方向一致，排列整齐。</p></li><li><p>对于会产生磁场的元件，如变压器、扬声器、电感等，布局时应注意减少磁力线对印制导线的切割，相邻元件磁场方向应相互垂直，减少彼此之间的耦合。</p></li></ul><p><imgsrc="https://gitee.com/kayoungzhang/picgo_res/raw/master/img/image-20230524222945408.png" /></p><ul><li><p>晶振不要放置到PCB板边，滤波电容与晶体采用π型滤波方式摆放。</p></li><li><p>元器件的编号应该紧靠元器件的边框布置，大小统一，方向整齐，不与元器件、过孔和焊盘重叠。</p></li><li><p>滤波电容尽量靠近芯片管脚，容值越小，越靠近管脚且先经过电容再进入芯片。</p></li></ul><h3 id="pcb-layout">PCB layout</h3><ul><li>首先对重要的信号或要求比较严格的信号进行走线，信号线的过孔尽量少，信号线与其回路构成的环面积要尽可能小，环面积越小，对外的辐射越少，接收外界的干扰也越小。</li></ul><p><img src="https://gitee.com/kayoungzhang/picgo_res/raw/master/img/image-20230524202049996.png" alt="image-20230524202049996" style="zoom:80%;" /></p><ul><li>输入/输出端导线尽量避免相邻平行，最好加地线隔离，以免发生耦合。</li><li>电源部分尽量采用铺铜方式，保证载流得当。</li><li>CHIP器件走线和焊盘连接要避免不对称走线。</li></ul><p><img src="https://gitee.com/kayoungzhang/picgo_res/raw/master/img/image-20230524214904856.png" alt="image-20230524214904856" style="zoom:80%;" /></p><ul><li>贴片焊盘上不要有过孔，走线避免出现直角或锐角。</li><li>对于密间距的IC，走线从焊盘出线时，宽度不能比焊盘宽。</li></ul><p><img src="https://gitee.com/kayoungzhang/picgo_res/raw/master/img/image-20230524214930539.png" alt="image-20230524214930539" style="zoom:80%;" /></p><p>以上是设计中常用的规则，应该还有其它常用的规则，后续遇到了再进行添加。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;PCB设计过程中，器件的整体布局和关键信号的layout至关重要，布局得当，信号线layout顺畅，就会在后续设计开发过程中，减少不必要的麻烦，相反，布局不当，layout失误，一是影响PCB整体的美观程度，二是在测试应用中带来诸多麻烦。为了减少不必要的设计麻烦，下面介绍一</summary>
      
    
    
    
    <category term="硬件" scheme="http://example.com/categories/%E7%A1%AC%E4%BB%B6/"/>
    
    
    <category term="pcb" scheme="http://example.com/tags/pcb/"/>
    
  </entry>
  
  <entry>
    <title>pcb设计之重要信号线layout注意事项</title>
    <link href="http://example.com/2023/05/20/pcb%E8%AE%BE%E8%AE%A1%E4%B9%8B%E9%87%8D%E8%A6%81%E4%BF%A1%E5%8F%B7%E7%BA%BFlayout%E6%B3%A8%E6%84%8F%E4%BA%8B%E9%A1%B9/"/>
    <id>http://example.com/2023/05/20/pcb%E8%AE%BE%E8%AE%A1%E4%B9%8B%E9%87%8D%E8%A6%81%E4%BF%A1%E5%8F%B7%E7%BA%BFlayout%E6%B3%A8%E6%84%8F%E4%BA%8B%E9%A1%B9/</id>
    <published>2023-05-20T09:46:27.000Z</published>
    <updated>2023-05-24T10:18:09.964Z</updated>
    
    <content type="html"><![CDATA[<p>这一篇主要看看pcb设计中重要信号线的layout注意事项：</p><ul><li><strong>差分信号线尽量在一起同一层走线</strong></li></ul><p><img src="https://gitee.com/kayoungzhang/picgo_res/raw/master/img/image-20230521104356728.png" alt="image-20230521104356728" style="zoom:80%;" /></p><p><img src="https://gitee.com/kayoungzhang/picgo_res/raw/master/img/image-20230521104659980.png" alt="image-20230521104659980" style="zoom:80%;" /></p><ul><li><strong>差分间距无法满足20mil，最好进行包地</strong></li></ul><figure><imgsrc="https://gitee.com/kayoungzhang/picgo_res/raw/master/img/image-20230521104926751%20-%20%E5%89%AF%E6%9C%AC.png"alt="image-20230521104926751 - 副本" /><figcaption aria-hidden="true">image-20230521104926751 -副本</figcaption></figure><ul><li><strong>usb按90欧姆差分阻抗进行走线，等长处理</strong></li></ul><p><img src="https://gitee.com/kayoungzhang/picgo_res/raw/master/img/image-20230520105039307.png" alt="image-20230520105039307" style="zoom:80%;" /></p><ul><li><strong>usb打孔换层应在旁边放置地过孔回流</strong></li></ul><p><img src="https://gitee.com/kayoungzhang/picgo_res/raw/master/img/image-20230521105612441%20-%20%E5%89%AF%E6%9C%AC.png" alt="image-20230521105612441 - 副本" style="zoom:80%;" /></p><ul><li><strong>网口按100欧姆差分阻抗走线，等长处理</strong></li></ul><p><img src="https://gitee.com/kayoungzhang/picgo_res/raw/master/img/image-20230521105139287%20-%20%E5%89%AF%E6%9C%AC.png" alt="image-20230521105139287 - 副本" style="zoom:80%;" /></p><ul><li><strong>LVDS差分信号包地处理</strong></li></ul><p><img src="https://gitee.com/kayoungzhang/picgo_res/raw/master/img/image-20230521105447526%20-%20%E5%89%AF%E6%9C%AC.png" alt="image-20230521105447526 - 副本" style="zoom:80%;" /></p><ul><li><strong>差分线等长处理不易幅度过大</strong></li></ul><p><img src="https://gitee.com/kayoungzhang/picgo_res/raw/master/img/image-20230521105746352%20-%20%E5%89%AF%E6%9C%AC.png" alt="image-20230521105746352 - 副本" style="zoom:80%;" /></p><ul><li><strong>DDR所有的走线都应该在ddr的电源分割区域内，且分割区域不能有其他信号线</strong></li></ul><p><imgsrc="https://gitee.com/kayoungzhang/picgo_res/raw/master/img/wps1%20-%20%E5%89%AF%E6%9C%AC.jpg" /></p><p><imgsrc="https://gitee.com/kayoungzhang/picgo_res/raw/master/img/wps2%20-%20%E5%89%AF%E6%9C%AC.jpg" /></p><ul><li><strong>DDR走线要保证同组同层，不要表层一部分，内层一部分</strong></li></ul><p><img src="https://gitee.com/kayoungzhang/picgo_res/raw/master/img/image-20230521110154465%20-%20%E5%89%AF%E6%9C%AC.png" alt="image-20230521110154465 - 副本" style="zoom:80%;" /></p><ul><li><strong>DDR布线要满足3W原则</strong></li></ul><p><img src="https://gitee.com/kayoungzhang/picgo_res/raw/master/img/image-20230521110323383%20-%20%E5%89%AF%E6%9C%AC.png" style="zoom:80%;" /></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;这一篇主要看看pcb设计中重要信号线的layout注意事项：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;差分信号线尽量在一起同一层走线&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&quot;https://gitee.com/kayoungzhang/p</summary>
      
    
    
    
    <category term="硬件" scheme="http://example.com/categories/%E7%A1%AC%E4%BB%B6/"/>
    
    
    <category term="pcb" scheme="http://example.com/tags/pcb/"/>
    
  </entry>
  
  <entry>
    <title>pcb设计之普通信号线layout注意事项</title>
    <link href="http://example.com/2023/05/20/pcb%E8%AE%BE%E8%AE%A1%E4%B9%8B%E6%99%AE%E9%80%9A%E4%BF%A1%E5%8F%B7%E7%BA%BFlayout%E6%B3%A8%E6%84%8F%E4%BA%8B%E9%A1%B9/"/>
    <id>http://example.com/2023/05/20/pcb%E8%AE%BE%E8%AE%A1%E4%B9%8B%E6%99%AE%E9%80%9A%E4%BF%A1%E5%8F%B7%E7%BA%BFlayout%E6%B3%A8%E6%84%8F%E4%BA%8B%E9%A1%B9/</id>
    <published>2023-05-20T09:45:57.000Z</published>
    <updated>2023-05-24T10:18:09.948Z</updated>
    
    <content type="html"><![CDATA[<p>这一篇主要看普通信号线的layout注意事项：</p><ul><li><strong>走线不要出现直角锐角</strong></li></ul><p><img src="https://gitee.com/kayoungzhang/picgo_res/raw/master/img/image-20230520215258665.png" alt="image-20230520215258665" style="zoom:80%;" /></p><p><img src="https://gitee.com/kayoungzhang/picgo_res/raw/master/img/image-20230520215440544.png" alt="image-20230520215440544" style="zoom:80%;" /></p><ul><li><strong>走线不要超过焊盘宽度，应以焊盘同宽出线，可出完焊盘后立即加粗</strong></li></ul><p><img src="https://gitee.com/kayoungzhang/picgo_res/raw/master/img/image-20230520215531104.png" alt="image-20230520215531104" style="zoom:80%;" /></p><ul><li><strong>尽量减少环路</strong></li></ul><p><img src="https://gitee.com/kayoungzhang/picgo_res/raw/master/img/image-20230520215751818.png" alt="image-20230520215751818" style="zoom:80%;" /></p><p><img src="https://gitee.com/kayoungzhang/picgo_res/raw/master/img/image-20230520215820652.png" alt="image-20230520215820652" style="zoom:80%;" /></p><p><img src="https://gitee.com/kayoungzhang/picgo_res/raw/master/img/image-20230520222742879.png" alt="image-20230520222742879" style="zoom:80%;" /></p><ul><li><strong>7个地焊盘只有两个地孔，最多最多三个焊盘一个过孔</strong></li></ul><p><img src="https://gitee.com/kayoungzhang/picgo_res/raw/master/img/image-20230520102020202.jpg" alt="img" style="zoom:80%;" /></p><ul><li><strong>所有层中间间距拉开一点，加到15mil~20mil</strong></li></ul><p><img src="https://gitee.com/kayoungzhang/picgo_res/raw/master/img/image-20230520215958770.png" alt="image-20230520215958770" style="zoom:80%;" /></p><ul><li><strong>走线不要压到电源内缩层</strong></li></ul><figure><imgsrc="https://gitee.com/kayoungzhang/picgo_res/raw/master/img/20230520102020203.jpg"alt="20230520102020203" /><figcaption aria-hidden="true">20230520102020203</figcaption></figure><ul><li><strong>走线优化，拉直。</strong></li></ul><p><img src="https://gitee.com/kayoungzhang/picgo_res/raw/master/img/image-20230520102541420.jpg" alt="img" style="zoom:80%;" /></p><ul><li><strong>不要从IC狭窄处走线，影响焊接</strong></li></ul><p><img src="https://gitee.com/kayoungzhang/picgo_res/raw/master/img/image-20230520220316490.png" alt="image-20230520220316490" style="zoom:80%;" /></p><figure><imgsrc="https://gitee.com/kayoungzhang/picgo_res/raw/master/img/image-20230520220340784.png"alt="image-20230520220340784" /><figcaption aria-hidden="true">image-20230520220340784</figcaption></figure><ul><li><strong>电源处有多少过孔，地焊盘周边也打同样数量过孔，便于回流</strong></li></ul><p><img src="https://gitee.com/kayoungzhang/picgo_res/raw/master/img/image-20230520220556496.png" alt="image-20230520220556496" style="zoom:80%;" /></p><ul><li><strong>走线间距太小容易串扰，需满足3W原则</strong></li></ul><p><img src="https://gitee.com/kayoungzhang/picgo_res/raw/master/img/image-20220520220712824.png" alt="image-20230520220712824" style="zoom:80%;" /></p><p><img src="https://gitee.com/kayoungzhang/picgo_res/raw/master/img/image-20220520221701707.png" alt="image-20230520221701707" style="zoom:80%;" /></p><ul><li><strong>预留地回流的通道</strong></li></ul><p><img src="https://gitee.com/kayoungzhang/picgo_res/raw/master/img/image-20220520220803115.png" alt="image-20230520220803115" style="zoom:80%;" /></p><p><img src="https://gitee.com/kayoungzhang/picgo_res/raw/master/img/image-20210520231118917.png" alt="image-20210520231118917" style="zoom:80%;" /></p><ul><li><strong>可以一同走的线，避免单独绕环线</strong></li></ul><p><img src="https://gitee.com/kayoungzhang/picgo_res/raw/master/img/image-20210520221029160.png" alt="image-20210520221029160" style="zoom:80%;" /></p><p><img src="https://gitee.com/kayoungzhang/picgo_res/raw/master/img/image-20210520221053269.png" alt="image-20210520221053269" style="zoom:80%;" /></p><p><img src="https://gitee.com/kayoungzhang/picgo_res/raw/master/img/image-20210520223724436.png" alt="image-20210520223724436" style="zoom:80%;" /></p><ul><li><strong>铺铜的地方就不要再走细线</strong></li></ul><p><img src="https://gitee.com/kayoungzhang/picgo_res/raw/master/img/image-20210520221230603.png" alt="image-20210520221230603" style="zoom:80%;" /></p><ul><li><strong>焊盘之间的窄小铜皮使用cutout进行去除，避免手动焊接短路风险</strong></li></ul><p><img src="https://gitee.com/kayoungzhang/picgo_res/raw/master/img/image-20210520221545131.png" alt="image-20210520221545131" style="zoom:80%;" /></p><ul><li><strong>相邻层走线不要重叠</strong></li></ul><p><img src="https://gitee.com/kayoungzhang/picgo_res/raw/master/img/image-20210520221806754.png" alt="image-20210520221806754" style="zoom:80%;" /></p><ul><li><strong>不要横向连接多个焊盘，容易造成不良焊接，可以先焊盘各自拉线出来，再两两相连</strong></li></ul><p><img src="https://gitee.com/kayoungzhang/picgo_res/raw/master/img/image-20210520222136579.png" alt="image-20210520222136579" style="zoom:80%;" /></p><ul><li><strong>走线能短则短</strong></li></ul><p><img src="https://gitee.com/kayoungzhang/picgo_res/raw/master/img/image-20210520222412740.png" alt="image-20210520222412740" style="zoom:80%;" /></p><p><img src="https://gitee.com/kayoungzhang/picgo_res/raw/master/img/image-20210520223011614.png" alt="image-20210520223011614" style="zoom:80%;" /></p><p><img src="https://gitee.com/kayoungzhang/picgo_res/raw/master/img/image-20210520225850852.png" alt="image-20210520225850852" style="zoom:80%;" /></p><ul><li><strong>走线不要太靠板边</strong></li></ul><p><img src="https://gitee.com/kayoungzhang/picgo_res/raw/master/img/image-20210520222521807.png" alt="image-20210520222521807" style="zoom:80%;" /></p><ul><li><strong>高压跟低压部分的间距最少保持5mm的间距</strong></li></ul><p><img src="https://gitee.com/kayoungzhang/picgo_res/raw/master/img/image-20210520222521890.jpg" alt="image-20210520222521890" style="zoom:80%;" /></p><ul><li><strong>合理布局</strong></li></ul><p><img src="https://gitee.com/kayoungzhang/picgo_res/raw/master/img/image-20210520223236635.png" alt="image-20210520223236635" style="zoom:80%;" /></p><p><img src="https://gitee.com/kayoungzhang/picgo_res/raw/master/img/image-20210520223544644.png" alt="image-20210520223544644" style="zoom:80%;" /></p><ul><li><strong>管脚之间阻焊层相连，需要修改Rule规则阻焊外扩距离</strong></li></ul><p><img src="https://gitee.com/kayoungzhang/picgo_res/raw/master/img/image-20210520225318763.png" alt="image-20210520225318763" style="zoom:80%;" /></p><ul><li><strong>走线不要太绕</strong></li></ul><p><img src="https://gitee.com/kayoungzhang/picgo_res/raw/master/img/image-20210520225618301.png" alt="image-20210520225618301" style="zoom:80%;" /></p><ul><li><p><strong>晶振采用Π型滤波模式，且对信号线进行包地处理，晶振下面不要走线</strong></p><p><img src="https://gitee.com/kayoungzhang/picgo_res/raw/master/img/image-20210520233516091.png" alt="image-20210520233516091" style="zoom:80%;" /></p></li></ul><p><img src="https://gitee.com/kayoungzhang/picgo_res/raw/master/img/image-20210520225725174.png" alt="image-20210520225725174" style="zoom:80%;" /></p><ul><li><strong>电感中间不要有铜皮，且不要走线</strong></li></ul><p><img src="https://gitee.com/kayoungzhang/picgo_res/raw/master/img/image-20210520230103302.png" alt="image-20210520230103302" style="zoom:80%;" /></p><p><img src="https://gitee.com/kayoungzhang/picgo_res/raw/master/img/image-20210520230711630.png" alt="image-20210520230711630" style="zoom:80%;" /></p><ul><li><strong>光耦所有层中间要挖空隔开，不要走线</strong></li></ul><p><img src="https://gitee.com/kayoungzhang/picgo_res/raw/master/img/image-20210520230201233.png" alt="image-20210520230201233" style="zoom:80%;" /></p><p><img src="https://gitee.com/kayoungzhang/picgo_res/raw/master/img/image-20210521102742621.png" alt="image-20210521102742621" style="zoom:80%;" /></p><ul><li><strong>GPRS模块下面需要打回流地过孔，一方面为了散热，一方面利于信号</strong></li></ul><p><img src="https://gitee.com/kayoungzhang/picgo_res/raw/master/img/image-20210520230429986.png" alt="image-20210520230429986" style="zoom:80%;" /></p><ul><li><strong>尽量减少打孔换层</strong></li></ul><p><img src="https://gitee.com/kayoungzhang/picgo_res/raw/master/img/image-20210520230555960.png" alt="image-20210520230555960" style="zoom:80%;" /></p><ul><li><strong>多排走线不要并排打孔，容易造成地平面隔离，影响完整性</strong></li></ul><p><img src="https://gitee.com/kayoungzhang/picgo_res/raw/master/img/image-20210520231520271.png" alt="image-20210520231520271" style="zoom:80%;" /></p><ul><li><strong>相同模块尽量保持一致，比较美观</strong></li></ul><p><img src="https://gitee.com/kayoungzhang/picgo_res/raw/master/img/image-20210520231649818.png" alt="image-20210520231649818" style="zoom:80%;" /></p><ul><li><strong>过孔需要盖油</strong></li></ul><p><strong>低版本：</strong></p><p><img src="https://gitee.com/kayoungzhang/picgo_res/raw/master/img/image-20210520232756374.png" alt="image-20210520232756374" style="zoom:80%;" /></p><p><strong>高版本：</strong></p><p><img src="https://gitee.com/kayoungzhang/picgo_res/raw/master/img/image-20210520232709864.png" alt="image-20210520232709864" style="zoom:80%;" /></p><ul><li><strong>不可将过孔打在焊盘上</strong></li></ul><p><img src="https://gitee.com/kayoungzhang/picgo_res/raw/master/img/image-20210520232908468.png" alt="image-20210520232908468" style="zoom:80%;" /></p><ul><li><strong>过孔焊盘直径应为孔径2倍(+/- 2mil)</strong></li></ul><p><img src="https://gitee.com/kayoungzhang/picgo_res/raw/master/img/image-20210520233133110.png" alt="image-20210520233133110" style="zoom:80%;" /></p><ul><li><strong>丝印文字常用字宽与字高比例：4/25mil 5/30mil 6/45mil,丝印不要放到阻焊层上</strong></li></ul><p><img src="https://gitee.com/kayoungzhang/picgo_res/raw/master/img/image-20210520233730194.png" alt="image-20210520233730194"  /></p><p><img src="https://gitee.com/kayoungzhang/picgo_res/raw/master/img/image-20210520233755149.png" alt="image-20210520233755149" style="zoom:80%;" /></p><ul><li><strong>继电器下面不要走线，且部分走线要加粗</strong></li></ul><p><img src="https://gitee.com/kayoungzhang/picgo_res/raw/master/img/image-20210521101637502.png" alt="image-20210521101637502" style="zoom:80%;" /></p><ul><li><strong>FM天线部分下面不要走线，且要包地处理</strong></li></ul><figure><imgsrc="https://gitee.com/kayoungzhang/picgo_res/raw/master/img/image-20210521101821828.png"alt="image-20210521101821828" /><figcaption aria-hidden="true">image-20210521101821828</figcaption></figure><ul><li><strong>WIFI模块下面要挖空处理</strong></li></ul><p><img src="https://gitee.com/kayoungzhang/picgo_res/raw/master/img/image-20210521102020202.png" alt="image-20210521102020202" style="zoom:80%;" /></p><ul><li><strong>喇叭走线需要包地处理</strong></li></ul><p><img src="https://gitee.com/kayoungzhang/picgo_res/raw/master/img/image-20210521102222760.png" alt="image-20210521102222760" style="zoom:80%;" /></p><ul><li><strong>天线模块下面要挖空，天线走线要控制50欧姆阻抗</strong></li></ul><p><img src="https://gitee.com/kayoungzhang/picgo_res/raw/master/img/image-20210521102541420.png" alt="image-20210521102541420" style="zoom:80%;" /></p><ul><li><strong>网口部分要挖空处理</strong></li></ul><p><img src="https://gitee.com/kayoungzhang/picgo_res/raw/master/img/image-20210521102851161.png" alt="image-20210521102851161" style="zoom:80%;" /></p><ul><li><strong>射频部分严格按照阻抗要求走线，转弯部分用圆弧走线，包地处理</strong></li></ul><p><img src="https://gitee.com/kayoungzhang/picgo_res/raw/master/img/Imge-16846362511801.jpg" alt="Imge-16846362511801" style="zoom:80%;" /></p><ul><li><strong>时钟信号不要离干扰源太近，距离普通信号线要大于20mil，最好做包地处理</strong></li></ul><figure><imgsrc="https://gitee.com/kayoungzhang/picgo_res/raw/master/img/image-16846364276462.jpg"alt="image-16846364276462" /><figcaption aria-hidden="true">image-16846364276462</figcaption></figure><figure><imgsrc="https://gitee.com/kayoungzhang/picgo_res/raw/master/img/image-16846364395533.jpg"alt="image-16846364395533" /><figcaption aria-hidden="true">image-16846364395533</figcaption></figure><ul><li><strong>MIC属于模拟信号，要类差分走线，包地处理</strong></li></ul><p><img src="https://gitee.com/kayoungzhang/picgo_res/raw/master/img/image-20210521103714413.png" alt="image-20210521103714413" style="zoom:80%;" /></p><ul><li><strong>模拟信号加粗处理，部分进行包地</strong></li></ul><p><img src="https://gitee.com/kayoungzhang/picgo_res/raw/master/img/image-20210521103853551.png" alt="image-20210521103853551" style="zoom:80%;" /></p><p><img src="https://gitee.com/kayoungzhang/picgo_res/raw/master/img/image-20210521103923788.png" alt="image-20210521103923788" style="zoom:80%;" /></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;这一篇主要看普通信号线的layout注意事项：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;走线不要出现直角锐角&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&quot;https://gitee.com/kayoungzhang/picgo_res/raw</summary>
      
    
    
    
    <category term="硬件" scheme="http://example.com/categories/%E7%A1%AC%E4%BB%B6/"/>
    
    
    <category term="pcb" scheme="http://example.com/tags/pcb/"/>
    
  </entry>
  
  <entry>
    <title>pcb设计之电源layout注意事项</title>
    <link href="http://example.com/2023/05/20/pcb%E8%AE%BE%E8%AE%A1%E4%B9%8B%E7%94%B5%E6%BA%90layout%E6%B3%A8%E6%84%8F%E4%BA%8B%E9%A1%B9/"/>
    <id>http://example.com/2023/05/20/pcb%E8%AE%BE%E8%AE%A1%E4%B9%8B%E7%94%B5%E6%BA%90layout%E6%B3%A8%E6%84%8F%E4%BA%8B%E9%A1%B9/</id>
    <published>2023-05-20T09:44:54.000Z</published>
    <updated>2023-05-24T10:18:09.964Z</updated>
    
    <content type="html"><![CDATA[<p>pcb设计中，在layout时需要遵循一定规范，才会避免设计出不合格的pcb板，下面几篇文章主要总结一下layout过程中常见的问题，本篇是关于电源layout，内容主要来源自pcb联盟网论坛。</p><ul><li><strong>电源滤波电容尽量靠近IC管脚放置。</strong></li></ul><p><img src="https://gitee.com/kayoungzhang/picgo_res/raw/master/img/image-20230520205025967.png" alt="image-20230520205025967" style="zoom:80%;" /></p><ul><li><strong>电源走线载流过小，加大铺铜宽度，保证载流量</strong></li></ul><p><img src="https://gitee.com/kayoungzhang/picgo_res/raw/master/img/image-20230520205236535.png" alt="image-20230520205236535" style="zoom:80%;" /></p><figure><imgsrc="https://gitee.com/kayoungzhang/picgo_res/raw/master/img/image-20230520205310933.png"alt="image-20230520205310933" /><figcaption aria-hidden="true">image-20230520205310933</figcaption></figure><ul><li><strong>电源分割线20mil以上，分割的区域尽量宽</strong></li></ul><p><img src="https://gitee.com/kayoungzhang/picgo_res/raw/master/img/image-20230520205632526.png" alt="image-20230520205632526" style="zoom:80%;" /></p><ul><li><strong>芯片电源输出口先经过去耦电容再给其他元件供电</strong></li></ul><p><img src="https://gitee.com/kayoungzhang/picgo_res/raw/master/img/image-20230520210452461.png" alt="image-20230520210452461" style="zoom:80%;" /></p><ul><li><strong>对于输入和输出，滤波电容遵循先大电容，后小电容放置</strong></li></ul><p><img src="https://gitee.com/kayoungzhang/picgo_res/raw/master/img/image-20230520210844679.png" alt="image-20230520210844679" style="zoom:80%;" /></p><ul><li><strong>电源的反馈信号要接到最后一个滤波电容之后</strong></li></ul><p><img src="https://gitee.com/kayoungzhang/picgo_res/raw/master/img/image-20230520211057631.png" alt="image-20230520211057631" style="zoom:80%;" /></p><ul><li><strong>多个滤波电容应该放置到一起，且先大后小摆放</strong></li></ul><p><img src="https://gitee.com/kayoungzhang/picgo_res/raw/master/img/image-20230520211345243.png" alt="image-20230520211345243" style="zoom:80%;" /></p><ul><li><strong>电源路径不能过细，需要满足过载量，一般20mil线宽通1A电流</strong></li></ul><p><img src="https://gitee.com/kayoungzhang/picgo_res/raw/master/img/image-20230520211653288.png" alt="image-20230520211653288" style="zoom:80%;" /></p><ul><li><strong>电源输入和输出尽量L型或一字型布局</strong></li></ul><p><img src="https://gitee.com/kayoungzhang/picgo_res/raw/master/img/image-20230520211931150.png" alt="image-20230520211931150" style="zoom:80%;" /></p><ul><li><strong>电源线不要绕成圈</strong></li></ul><p><img src= "https://gitee.com/kayoungzhang/picgo_res/raw/master/img/image-20230520212159692.png" alt="image-20230520212159692" style="zoom:80%;" /></p><ul><li><strong>高压部分走线要加粗，且不能从变压器中间穿</strong></li></ul><p><img src= "https://gitee.com/kayoungzhang/picgo_res/raw/master/img/image-20230520212345079.png" alt="image-20230520212345079" style="zoom:80%;" /></p><ul><li><strong>电源层铺铜尽量保证完整性</strong></li></ul><p><img src= "https://gitee.com/kayoungzhang/picgo_res/raw/master/img/image-20230520234104774.png" alt="image-20230520234104774" style="zoom:80%;" /></p><ul><li><strong>电源分割</strong></li></ul><p><img src="https://gitee.com/kayoungzhang/picgo_res/raw/master/img/image-20230521123010522.png" alt="image-20230521123010522" style="zoom:80%;" /></p><p><img src="https://gitee.com/kayoungzhang/picgo_res/raw/master/img/image-20230521123053217.png" alt="image-20230521123053217" style="zoom:80%;" /></p><p><img src="https://gitee.com/kayoungzhang/picgo_res/raw/master/img/image-20230521123123868.png" alt="image-20230521123123868" style="zoom:80%;" /></p><p><img src="https://gitee.com/kayoungzhang/picgo_res/raw/master/img/image-20230521123147836.png" alt="image-20230521123147836" style="zoom:80%;" /></p><p><img src="https://gitee.com/kayoungzhang/picgo_res/raw/master/img/image-20230521123209186.png" alt="image-20230521123209186" style="zoom:80%;" /></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;pcb设计中，在layout时需要遵循一定规范，才会避免设计出不合格的pcb板，下面几篇文章主要总结一下layout过程中常见的问题，本篇是关于电源layout，内容主要来源自pcb联盟网论坛。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;电源滤波电容尽量靠近IC管脚放置</summary>
      
    
    
    
    <category term="硬件" scheme="http://example.com/categories/%E7%A1%AC%E4%BB%B6/"/>
    
    
    <category term="pcb" scheme="http://example.com/tags/pcb/"/>
    
  </entry>
  
  <entry>
    <title>Altium Designer软件应用常见问题</title>
    <link href="http://example.com/2023/05/19/Altium-Designer%E8%BD%AF%E4%BB%B6%E5%BA%94%E7%94%A8%E5%B8%B8%E8%A7%81%E9%97%AE%E9%A2%98/"/>
    <id>http://example.com/2023/05/19/Altium-Designer%E8%BD%AF%E4%BB%B6%E5%BA%94%E7%94%A8%E5%B8%B8%E8%A7%81%E9%97%AE%E9%A2%98/</id>
    <published>2023-05-19T14:42:13.000Z</published>
    <updated>2023-05-24T10:18:09.948Z</updated>
    
    <content type="html"><![CDATA[<p>使用AltiumDesigner时，有时候会碰到一些不常见的问题，以下总结几个，后续发现了问题，再增加。</p><ul><li><strong>高版本AD无法寻找系统设置项</strong></li></ul><p>解决方法：</p><p>高版本在软件右上角有个设置图标即是设置项或 Tools -&gt;Preferences.</p><ul><li><strong>在低版本AD，PCB中拖动元件，元件不显示。</strong></li></ul><p>解决方法：</p><ol type="1"><li>Preferences -&gt; PCB Editor -&gt; Display -&gt; 去掉Use AlphaBlending对勾。</li><li>Preferences -&gt; PCB Editor -&gt; Display -&gt; 选中Use DirectX ifpossible。</li></ol><ul><li><strong>在PCB中元器件随时绿色报错，影响视觉。</strong></li></ul><p>解决方法：</p><ol type="1"><li>Tools -&gt; Design Rule Check -&gt;除了Electrical，其他项对勾都去掉。</li><li>Design-&gt;Rules -&gt; Electrical Clearance -&gt; 设置Minimumclearance 5mil.</li><li>快捷键T -&gt; M，复位报错。</li></ol><p><img src="https://gitee.com/kayoungzhang/picgo_res/raw/master/img/image-20230519231617128.png" alt="image-20230519231617128" style="zoom:80%;" /></p><ul><li><strong>原理图导入PCB中，总是有元件无法导入，可能是footprint的uniqueID相同。</strong></li></ul><p>解决方法：复位零件ID。</p><figure><imgsrc="https://gitee.com/kayoungzhang/picgo_res/raw/master/img/image-20230519230324234.png"alt="image-20230519230324234" /><figcaption aria-hidden="true">image-20230519230324234</figcaption></figure><ul><li><strong>低版本AD中，原理图导出pdf文件，中文字体不显示/乱码</strong></li></ul><p>解决方法：</p><p>打开Preference界面，System-&gt;General，将系统字体改为中文；如果还不显示，可能原理图之前的文字没有修正过来，需要手动修改。</p><ul><li><strong>PCB编辑界面左上角悬浮框怎么取消</strong></li></ul><p><img src="https://gitee.com/kayoungzhang/picgo_res/raw/master/img/image-20230519231723071.png" alt="image-20230519231723071" style="zoom: 80%;" /></p><p>解决方法：</p><p>按快捷键Shift+H，可以选择打开或者关闭抬头显示；</p><p>按快捷键Shift+G，抬头跟随鼠标移动，再次按下Shift+G即可固定。</p><ul><li><strong>原理图库引脚上面一横怎么添加的（表示低电平有效）</strong></li></ul><p>解决方法：</p><p><img src="https://gitee.com/kayoungzhang/picgo_res/raw/master/img/image-20230519232255161.png" alt="image-20230519232255161" style="zoom:80%;" /></p><ul><li><strong>pcb设计中某个零件需要铺铜，铺完后发现不理想，不想重新铺铜，怎么操作。</strong></li></ul><p>解决方法：</p><ol type="1"><li>低版本，使用快捷键 M + G进行修铜即可。</li><li>高版本，直接通过鼠标选择边框进行修改，然后重新铺铜。</li></ol><p><img src="https://gitee.com/kayoungzhang/picgo_res/raw/master/img/image-20230519234223510.png" alt="image-20230519234223510" style="zoom:80%;" /></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;使用Altium
Designer时，有时候会碰到一些不常见的问题，以下总结几个，后续发现了问题，再增加。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;高版本AD无法寻找系统设置项&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;解决方法：&lt;/p&gt;
&lt;p&gt;高版本在软</summary>
      
    
    
    
    <category term="硬件" scheme="http://example.com/categories/%E7%A1%AC%E4%BB%B6/"/>
    
    
    <category term="pcb" scheme="http://example.com/tags/pcb/"/>
    
  </entry>
  
  <entry>
    <title>Altium Designer Gerber Files 生成步骤</title>
    <link href="http://example.com/2023/05/18/Altium-Designer-Gerber-Files-%E7%94%9F%E6%88%90%E6%AD%A5%E9%AA%A4/"/>
    <id>http://example.com/2023/05/18/Altium-Designer-Gerber-Files-%E7%94%9F%E6%88%90%E6%AD%A5%E9%AA%A4/</id>
    <published>2023-05-18T13:35:48.000Z</published>
    <updated>2023-05-18T14:52:03.168Z</updated>
    
    <content type="html"><![CDATA[<p>pcblayout完成后，然后就可以发送到PCB板厂进行生产制造了，一般为了保密性质，发送给厂商的是GerberFiles文件，所以，就需要生成GerberFiles。以下说一下AltiumDesigner生成GerberFiles的具体的操作步骤：</p><p>生成Gerber文件前，需要设置PCB原点，工艺边，定位孔，钻孔描述(drill层放置'.legend')，尺寸标注(一般为mechanic1、2层)。但是对于普通PCB设计者来说，这些不是必须要设置的。</p><ol type="1"><li><p>打开Gerber Setup，Files -&gt; Fabrication Outputs -&gt; GerberFiles</p><p><img src="https://gitee.com/kayoungzhang/picgo_res/raw/master/img/wps1.jpg" alt="img"  /></p></li><li><p>勾选要生成Gerber文件层面，在右侧Mechanical列表中选择要加载到各个Gerber层的机械尺寸信息。勾选左侧的Mechanical1，则在光绘文件GM1单层显示，勾选右侧的Mechanical1则每层都会加入机械层信息，“Include unconnected mid-layerpads”项仅限于包含了中间层的PCB 文件输出Gerber 时使能。</p></li></ol><figure><imgsrc="https://gitee.com/kayoungzhang/picgo_res/raw/master/img/wps2.jpg"alt="img" /><figcaption aria-hidden="true">img</figcaption></figure><ol start="3" type="1"><li>勾选Drill层</li></ol><figure><imgsrc="https://gitee.com/kayoungzhang/picgo_res/raw/master/img/wps3.jpg"alt="img" /><figcaption aria-hidden="true">img</figcaption></figure><ol start="4" type="1"><li>勾选光圈</li></ol><figure><imgsrc="https://gitee.com/kayoungzhang/picgo_res/raw/master/img/wps4.jpg"alt="img" /><figcaption aria-hidden="true">img</figcaption></figure><ol start="5" type="1"><li>设置影像大小</li></ol><figure><imgsrc="https://gitee.com/kayoungzhang/picgo_res/raw/master/img/wps5.jpg"alt="img" /><figcaption aria-hidden="true">img</figcaption></figure><ol start="6" type="1"><li>生成钻孔文件，Files -&gt; Fabrication Outputs -&gt; NC Drillfiles</li></ol><figure><imgsrc="https://gitee.com/kayoungzhang/picgo_res/raw/master/img/wps6.jpg"alt="img" /><figcaption aria-hidden="true">img</figcaption></figure><ol start="7" type="1"><li>生成测试网表，Files -&gt; Fabrication Outputs -&gt; Test PointReport</li></ol><p><imgsrc="https://gitee.com/kayoungzhang/picgo_res/raw/master/img/wps7.jpg" /></p><ol start="8" type="1"><li>生成SMT贴片零件位置表，Files -&gt; Assembly Outputs -&gt; Generatespick and place files</li></ol><figure><imgsrc="https://gitee.com/kayoungzhang/picgo_res/raw/master/img/wps8.jpg"alt="img" /><figcaption aria-hidden="true">img</figcaption></figure><ol start="9" type="1"><li>生成SMT贴片零件PCB组装图，Files -&gt; Smart PDF</li></ol><figure><imgsrc="https://gitee.com/kayoungzhang/picgo_res/raw/master/img/wps9.jpg"alt="img" /><figcaption aria-hidden="true">img</figcaption></figure><figure><imgsrc="https://gitee.com/kayoungzhang/picgo_res/raw/master/img/wps10.jpg"alt="img" /><figcaption aria-hidden="true">img</figcaption></figure><figure><imgsrc="https://gitee.com/kayoungzhang/picgo_res/raw/master/img/wps11.jpg"alt="img" /><figcaption aria-hidden="true">img</figcaption></figure><p>将前面7个步骤生成的文件打包发送给pcb板厂就可以制造PCB了，如果还需要贴片，就需要第8步和第9步生成的组装文件了。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;pcb
layout完成后，然后就可以发送到PCB板厂进行生产制造了，一般为了保密性质，发送给厂商的是GerberFiles文件，所以，就需要生成GerberFiles。以下说一下Altium
Designer生成GerberFiles的具体的操作步骤：&lt;/p&gt;
&lt;p</summary>
      
    
    
    
    <category term="硬件" scheme="http://example.com/categories/%E7%A1%AC%E4%BB%B6/"/>
    
    
    <category term="pcb" scheme="http://example.com/tags/pcb/"/>
    
  </entry>
  
  <entry>
    <title>Altium Designer 快捷键汇总</title>
    <link href="http://example.com/2023/05/17/Altium-Designer-%E5%BF%AB%E6%8D%B7%E9%94%AE%E6%B1%87%E6%80%BB/"/>
    <id>http://example.com/2023/05/17/Altium-Designer-%E5%BF%AB%E6%8D%B7%E9%94%AE%E6%B1%87%E6%80%BB/</id>
    <published>2023-05-17T12:42:19.000Z</published>
    <updated>2023-05-17T13:56:51.907Z</updated>
    
    <content type="html"><![CDATA[<p>最近新项目需要设计电路和PCB，刚好结合之前整理的AltiumDesigner快捷键汇总一下：</p><ul><li><h4 id="对齐">对齐</h4></li></ul><table><thead><tr class="header"><th>快捷键</th><th>功能</th></tr></thead><tbody><tr class="odd"><td>A</td><td>弹出对齐对话框</td></tr><tr class="even"><td>A+L</td><td>向左对齐</td></tr><tr class="odd"><td>A+R</td><td>向右对齐</td></tr><tr class="even"><td>A+D</td><td>横向等间距</td></tr><tr class="odd"><td>A+T</td><td>向上对齐</td></tr><tr class="even"><td>A+B</td><td>向下对齐</td></tr><tr class="odd"><td>A+S</td><td>纵向等间距</td></tr></tbody></table><ul><li><h4 id="元件调整">元件调整</h4></li></ul><table><thead><tr class="header"><th>快捷键</th><th>功能</th></tr></thead><tbody><tr class="odd"><td>M</td><td>元件调整</td></tr><tr class="even"><td>N</td><td>飞线的显示与隐藏</td></tr><tr class="odd"><td>M+S</td><td>器件任意位置移动</td></tr><tr class="even"><td>A+P</td><td>调整位号位置</td></tr><tr class="odd"><td>F11</td><td>选中器件，按下F11</td></tr><tr class="even"><td>E+A</td><td>特殊粘贴</td></tr></tbody></table><ul><li><h4 id="选择">选择</h4></li></ul><table><thead><tr class="header"><th>快捷键</th><th>功能</th></tr></thead><tbody><tr class="odd"><td>S+I</td><td>框选</td></tr><tr class="even"><td>S+O</td><td>反选</td></tr><tr class="odd"><td>S+L</td><td>线选</td></tr><tr class="even"><td>S+N</td><td>选择网络</td></tr><tr class="odd"><td>S+C</td><td>选中直接相连的网络</td></tr><tr class="even"><td>J+C</td><td>查询与搜索器件</td></tr><tr class="odd"><td>J+N</td><td>查询与搜索网络</td></tr><tr class="even"><td>S+T</td><td>切换选择</td></tr></tbody></table><ul><li><h4 id="设置">设置</h4></li></ul><table><thead><tr class="header"><th>快捷键</th><th>功能</th></tr></thead><tbody><tr class="odd"><td>D+C</td><td>进入Class设置</td></tr><tr class="even"><td>D+R</td><td>PCB 规则设置</td></tr><tr class="odd"><td>T+D</td><td>DRC检查</td></tr><tr class="even"><td>T+M</td><td>复位DRC检查</td></tr><tr class="odd"><td>O+B</td><td>PCB板选项设置</td></tr><tr class="even"><td>G</td><td>设置栅格属性</td></tr><tr class="odd"><td>T+N</td><td>器件位号重新编排</td></tr><tr class="even"><td>T+P</td><td>进行系统设置</td></tr></tbody></table><ul><li><h4 id="显示">显示</h4></li></ul><table><thead><tr class="header"><th>快捷键</th><th>功能</th></tr></thead><tbody><tr class="odd"><td>shift+E</td><td>可捕获至中点</td></tr><tr class="even"><td>shift+H</td><td>坐标信息的隐藏与显示</td></tr><tr class="odd"><td>shift+D</td><td>切换悬浮的坐标显示风格</td></tr><tr class="even"><td>shift+S</td><td>单层切换显示</td></tr><tr class="odd"><td>shift+M</td><td>PCB的洞察力镜头</td></tr><tr class="even"><td>shift+空格</td><td>切换走线模式</td></tr><tr class="odd"><td>Ctrl+L</td><td>图层控制</td></tr><tr class="even"><td>Ctrl+D</td><td>Object的隐藏与显示</td></tr><tr class="odd"><td>Ctrl+G</td><td>栅格设置</td></tr><tr class="even"><td>*</td><td>层切换</td></tr><tr class="odd"><td>V+B</td><td>板子翻转</td></tr><tr class="even"><td>L</td><td>器件正反面放置</td></tr><tr class="odd"><td>O+G</td><td>背景和格点设置(PCB与原理图通用)</td></tr></tbody></table><ul><li><h4 id="走线">走线</h4></li></ul><table><thead><tr class="header"><th>快捷键</th><th>功能</th></tr></thead><tbody><tr class="odd"><td>shift+R</td><td>切换走线模式</td></tr><tr class="even"><td>shift+G</td><td>显示走线长度</td></tr><tr class="odd"><td>shift+E</td><td>切换捕获栅格模式</td></tr><tr class="even"><td>E+K</td><td>截断走线</td></tr><tr class="odd"><td>*或-或+</td><td>走线时切换到其他层(自动加过孔)</td></tr><tr class="even"><td>[</td><td>走线时可单独显示要连接的地方高亮</td></tr><tr class="odd"><td>E+D</td><td>连续删线</td></tr><tr class="even"><td>Shift+W</td><td>走线时，设置走线的线宽</td></tr><tr class="odd"><td>Shift+V</td><td>走线时，设置焊盘大小</td></tr><tr class="even"><td>U+M</td><td>AD17 多根相同间距走线，先选中，再U+M走线</td></tr><tr class="odd"><td>T+T+M</td><td>选中多根线，然后同时走线</td></tr><tr class="even"><td>Ctrl+点击焊盘</td><td>同一网络快速走线</td></tr><tr class="odd"><td>Ctrl+H</td><td>高显</td></tr><tr class="even"><td>Ctrl+W</td><td>可视化间距显示(AD16版本以上才有此功能)</td></tr></tbody></table><ul><li><h4 id="功能">功能</h4></li></ul><table><thead><tr class="header"><th>快捷键</th><th>功能</th></tr></thead><tbody><tr class="odd"><td>Alt+点击GND</td><td>全部与GND相连的线高亮（单个网络高亮）</td></tr><tr class="even"><td>T+E</td><td>泪滴增加与移除</td></tr><tr class="odd"><td>P+Y</td><td>分离铜皮（按Tab可以设置线宽）</td></tr><tr class="even"><td>D+S+D</td><td>快速定义板框</td></tr><tr class="odd"><td>Ctrl+M</td><td>测量尺寸</td></tr><tr class="even"><td>Ctrl+Q或Q</td><td>改变单位（mm/mil）</td></tr></tbody></table><p>另外，以前学习凡亿教育课程，因为在设计时常用的操作就那几个，所以可以将常用快捷键设置为单个按键，这样在设计时就可快速方便的进行操作，提高了效率，方法是：<strong>按住Ctrl键不放，点击软件各功能选择图标，然后就可设置惯用的快捷键</strong>，主要有以下几个：</p><table><thead><tr class="header"><th>快捷键</th><th>功能设置</th><th>快捷键</th><th>功能设置</th></tr></thead><tbody><tr class="odd"><td>F2</td><td><strong>电气走线</strong></td><td>Alt+F2</td><td>差分走线</td></tr><tr class="even"><td>F3</td><td><strong>放置过孔</strong></td><td>Alt+F3</td><td>放置fill</td></tr><tr class="odd"><td>F4</td><td><strong>敷铜</strong></td><td>Alt+F4</td><td><strong>重新敷铜</strong></td></tr><tr class="even"><td>F5</td><td>颜色开关</td><td></td><td></td></tr><tr class="odd"><td>F6</td><td><strong>矩形框放置器件</strong></td><td></td><td></td></tr><tr class="even"><td>F7</td><td>原理图与layout交互映射</td><td></td><td></td></tr></tbody></table><table><thead><tr class="header"><th>快捷键</th><th>功能设置</th><th>快捷键</th><th>功能设置</th></tr></thead><tbody><tr class="odd"><td>`</td><td><strong>删除</strong></td><td>Alt+`</td><td><strong>删除物理连接</strong></td></tr><tr class="even"><td>1</td><td>选择物理连接</td><td>Alt+1</td><td>显示长度</td></tr><tr class="odd"><td>2</td><td><strong>线选</strong></td><td>Alt+2</td><td>测量中心距</td></tr><tr class="even"><td>3</td><td><strong>框选</strong></td><td>Alt+3</td><td>移动选择</td></tr><tr class="odd"><td>4</td><td>单线等长(蛇形线)</td><td>Alt+4</td><td>差分等长</td></tr><tr class="even"><td>5</td><td><strong>保持原间距走线</strong></td><td>Alt+5</td><td>等间距走线</td></tr><tr class="odd"><td>6</td><td>坐标移动</td><td></td><td></td></tr><tr class="even"><td>7</td><td><strong>修铜</strong></td><td>Alt+7</td><td>M+G</td></tr></tbody></table><table><thead><tr class="header"><th>小键盘数字键</th><th>功能设置</th></tr></thead><tbody><tr class="odd"><td><strong>1</strong></td><td><strong>左对齐</strong></td></tr><tr class="even"><td><strong>2</strong></td><td><strong>下对齐</strong></td></tr><tr class="odd"><td><strong>3</strong></td><td><strong>右对齐</strong></td></tr><tr class="even"><td><strong>4</strong></td><td><strong>水平等间距</strong></td></tr><tr class="odd"><td><strong>5</strong></td><td><strong>上对齐</strong></td></tr><tr class="even"><td><strong>6</strong></td><td><strong>垂直等间距</strong></td></tr><tr class="odd"><td><strong>7</strong></td><td><strong>器件位号排列</strong></td></tr></tbody></table><p>以上加粗部分是常用功能，可根据自己的需要灵活更改。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;最近新项目需要设计电路和PCB，刚好结合之前整理的Altium
Designer快捷键汇总一下：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;h4 id=&quot;对齐&quot;&gt;对齐&lt;/h4&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr class=&quot;header&quot;&gt;
</summary>
      
    
    
    
    <category term="硬件" scheme="http://example.com/categories/%E7%A1%AC%E4%BB%B6/"/>
    
    
    <category term="pcb" scheme="http://example.com/tags/pcb/"/>
    
  </entry>
  
  <entry>
    <title>crc校验及其实现</title>
    <link href="http://example.com/2023/05/15/crc%E6%A0%A1%E9%AA%8C%E5%8F%8A%E5%85%B6%E5%AE%9E%E7%8E%B0/"/>
    <id>http://example.com/2023/05/15/crc%E6%A0%A1%E9%AA%8C%E5%8F%8A%E5%85%B6%E5%AE%9E%E7%8E%B0/</id>
    <published>2023-05-15T13:33:18.000Z</published>
    <updated>2023-05-24T10:18:09.948Z</updated>
    
    <content type="html"><![CDATA[<p>在通信领域传输数据时，为了避免接收到错误的数据，一般会对源数据和接收到的数据进行特定的校验处理，如果一致，则说明传输正确，否则传输发生了错误。常用的校验算法有奇偶校验、校验和、CRC等，这里主要看看CRC校验。</p><h3 id="crc简介">CRC简介</h3><p>循环冗余校验（Cyclic Redundancy Check，CRC），它是利用除法及余数的原理来作错误侦测的，对数据进行多项式计算，并将得到的结果附在帧的后面，接收设备也执行类似的算法，以保证数据传输的正确性和完整性。具体原理参考：</p><p><ahref="https://www.cnblogs.com/liushui-sky/p/9962123.html">CRC码计算及校验原理的最通俗诠释</a></p><h3 id="crc参数模型">CRC参数模型</h3><p>一个完整的CRC参数模型应该包含以下信息：WIDTH，POLY，INIT，REFIN，REFOUT，XOROUT。</p><ul><li>NAME：参数模型名称。</li><li>WIDTH：宽度，即生成的CRC数据位宽，如CRC-8，生成的CRC为8位</li><li>POLY：十六进制多项式，省略最高位1，如 x8 + x2 + x + 1，二进制为10000 0111，省略最高位1，转换为十六进制为0x07。</li><li>INIT：CRC初始值，和WIDTH位宽一致。</li><li>REFIN：true或false，在进行计算之前，原始数据是否翻转，如原始数据：0x34= 0011 0100，如果REFIN为true，进行翻转之后为0010 1100 = 0x2c</li><li>REFOUT：true或false，运算完成之后，得到的CRC值是否进行翻转，如计算得到的CRC值：0x97= 1001 0111，如果REFOUT为true，进行翻转之后为11101001 = 0xE9。</li><li>XOROUT：计算结果与此参数进行异或运算后得到最终的CRC值，和WIDTH位宽一致。</li></ul><p>通常如果只给了一个多项式，其他的没有说明则：INIT=0x00，REFIN=false，REFOUT=false，XOROUT=0x00。</p><p>常用的21个标准CRC参数模型：</p><p><img src="https://gitee.com/kayoungzhang/picgo_res/raw/master/img/image-20230515215944403.png" alt="image-20230515215944403" style="zoom:80%;" /></p><p>CRC校验在电子通信领域非常常用，可以说有通信存在的地方，就有CRC校验：</p><ul><li>美信(MAXIM)的芯片DS2401/DS18B20，都是使用的CRC-8/MAXIM模型</li><li>SD卡或MMC使用的是CRC-7/MMC模型</li><li>Modbus通信使用的是CRC-16/MODBUS参数模型</li><li>USB协议中使用的CRC-5/USB和CRC-16/USB模型</li><li>STM32自带的硬件CRC计算模块使用的是CRC-32模型</li></ul><h3 id="crc计算的程序实现">CRC计算的程序实现</h3><p>CRC的程序实现，网上有很多比较完备的开源CRC计算库，可以直接使用，没有必要重复造轮子。</p><ul><li>https://github.com/whik/crc-lib-c</li><li><a href="https://www.libcrc.org/">LibCRC – Open Source CRC Libraryin C</a></li></ul><h3 id="crc计算工具">CRC计算工具</h3><ul><li><ahref="http://www.geshe.com/zh-cn/products/gtoolbox">格西CRC计算器</a></li><li>http://www.ip33.com/crc.html</li><li>https://www.lammertbies.nl/comm/info/crc-calculation</li></ul><h3 id="参考链接">参考链接</h3><p><ahref="http://www.wangchaochao.top/2020/09/20/Principle-and-implementation-of-CRC/">CRC校验原理及其实现</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;在通信领域传输数据时，为了避免接收到错误的数据，一般会对源数据和接收到的数据进行特定的校验处理，如果一致，则说明传输正确，否则传输发生了错误。常用的校验算法有奇偶校验、校验和、CRC等，这里主要看看CRC校验。&lt;/p&gt;
&lt;h3 id=&quot;crc简介&quot;&gt;CRC简介&lt;/h3&gt;</summary>
      
    
    
    
    <category term="C语言" scheme="http://example.com/categories/C%E8%AF%AD%E8%A8%80/"/>
    
    
    <category term="crc" scheme="http://example.com/tags/crc/"/>
    
  </entry>
  
  <entry>
    <title>ssd3as压力传感器的开发设计</title>
    <link href="http://example.com/2023/05/14/ssd3as%E5%8E%8B%E5%8A%9B%E4%BC%A0%E6%84%9F%E5%99%A8%E7%9A%84%E5%BC%80%E5%8F%91%E8%AE%BE%E8%AE%A1/"/>
    <id>http://example.com/2023/05/14/ssd3as%E5%8E%8B%E5%8A%9B%E4%BC%A0%E6%84%9F%E5%99%A8%E7%9A%84%E5%BC%80%E5%8F%91%E8%AE%BE%E8%AE%A1/</id>
    <published>2023-05-14T12:58:59.000Z</published>
    <updated>2023-05-14T23:42:10.530Z</updated>
    
    <content type="html"><![CDATA[<p>spi通讯在开发过程中会经常用到，譬如下面介绍的数字压力传感器SSD系列，在传输压力值时就可以通过spi协议进行通讯。</p><h3 id="产品特点">产品特点</h3><ul><li>中压量程： 7Kpa ~ 1Mpa</li><li>供电：3.3V / 5V可选</li><li>输出：SPI / I2C，压力14位，温度，11位</li><li>温度补偿：-10 ~ 50℃</li></ul><h3 id="引脚定义">引脚定义</h3><p><img src="https://gitee.com/kayoungzhang/picgo_res/raw/master/img/image-20230514211435154.png" alt="image-20230514211435154" style="zoom:80%;" /></p><h3 id="压力类型">压力类型</h3><p><img src="https://gitee.com/kayoungzhang/picgo_res/raw/master/img/image-20230514211828407.png" alt="image-20230514211828407" style="zoom:80%;" /></p><h3 id="压力公式">压力公式</h3><p>此传感器可模拟输出和数字输出，这里只对数字输出进行处理。</p><p><img src="https://gitee.com/kayoungzhang/picgo_res/raw/master/img/image-20230514211610619.png" alt="image-20230514211610619" style="zoom:80%;" /></p><h3 id="输出百分比">输出百分比</h3><p><img src="https://gitee.com/kayoungzhang/picgo_res/raw/master/img/image-20230514212122812.png" alt="image-20230514212122812" style="zoom:80%;" /></p><h3 id="spi协议">SPI协议</h3><p>此传感器可以SPI传输，也可I2C传输，这里主要使用gpio模拟SPI进行传输。</p><p>网上关于SPI的讲解有很多，搜集了网上的资料，可参考<ahref="http://t.csdn.cn/Fv29I">SPI协议详解</a> 和 <ahref="http://t.csdn.cn/gF3lX">spi时序图怎么分析，怎么看懂spi时序图</a>，这两篇博客写的特别清楚，详细介绍了spi协议的具体内容。</p><ol type="1"><li>spi通过时钟极性（CPOL）和时钟相位（CPHA）控制两个spi设备进行数据传输，所以共有四种模式。</li><li>spi协议适用一主多从的工作场景，通过片选引脚可控制不同的从设备。</li><li>spi传输的实质是主从设备交换数据，也就是你发一个数据必然会收到一个数据，你要收一个数据也要发一个数据（一般是0x00）。</li><li>spi进行数据传输时是从最高位MSB到最低位LSB。</li></ol><h3 id="spi模式与时序">SPI模式与时序</h3><p>CPOL=0 表示SCLK在空闲时为低电平。</p><p>CPOL=1 表示SCLK在空闲时为高电平。</p><p>CPHA=0 数据是在第一个跳变沿的时候就会被采集。</p><p>CPHA=1 数据是在第二个跳变沿的时候才会被采集。</p><p><img src="https://gitee.com/kayoungzhang/picgo_res/raw/master/img/image-20230514215453741.png" alt="image-20230514215453741" style="zoom:80%;" /></p><p><img src="https://gitee.com/kayoungzhang/picgo_res/raw/master/img/image-20230514215552736.png" alt="image-20230514215552736" style="zoom:80%;" /></p><p><img src="https://gitee.com/kayoungzhang/picgo_res/raw/master/img/image-20230514215213595.png" alt="image-20230514215213595" style="zoom:80%;" /></p><p><img src="https://gitee.com/kayoungzhang/picgo_res/raw/master/img/image-20230514215320573.png" alt="image-20230514215320573" style="zoom:80%;" /></p><h3 id="程序实现">程序实现</h3><p>spi模块：</p><div class="code-wrapper"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">ifndef</span> SPI_H</span><span class="hljs-meta">#<span class="hljs-keyword">define</span> SPI_H</span><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;STC12C5A60S2.H&gt;</span></span><span class="hljs-keyword">typedef</span> <span class="hljs-type">unsigned</span> <span class="hljs-type">char</span> <span class="hljs-type">uint8_t</span>;<span class="hljs-keyword">typedef</span> <span class="hljs-type">unsigned</span> <span class="hljs-type">short</span> <span class="hljs-type">uint16_t</span>;<span class="hljs-comment">/* spi pin definition */</span><span class="hljs-meta">#<span class="hljs-keyword">define</span> SPI_SS      P10</span><span class="hljs-meta">#<span class="hljs-keyword">define</span> SPI_CLK     P12</span><span class="hljs-meta">#<span class="hljs-keyword">define</span> SPI_MISO    P11</span><span class="hljs-meta">#<span class="hljs-keyword">define</span> SPI_MOSI    P13</span><span class="hljs-keyword">extern</span> <span class="hljs-type">void</span> <span class="hljs-title function_">spi_init</span><span class="hljs-params">(<span class="hljs-type">void</span>)</span>;<span class="hljs-keyword">extern</span> <span class="hljs-type">uint8_t</span> <span class="hljs-title function_">soft_spi_rw_mode0</span><span class="hljs-params">(<span class="hljs-type">uint8_t</span> send_byte)</span>;<span class="hljs-keyword">extern</span> <span class="hljs-type">uint8_t</span> <span class="hljs-title function_">soft_spi_rw_mode1</span><span class="hljs-params">(<span class="hljs-type">uint8_t</span> send_byte)</span>;<span class="hljs-keyword">extern</span> <span class="hljs-type">uint8_t</span> <span class="hljs-title function_">soft_spi_rw_mode2</span><span class="hljs-params">(<span class="hljs-type">uint8_t</span> send_byte)</span>;<span class="hljs-keyword">extern</span> <span class="hljs-type">uint8_t</span> <span class="hljs-title function_">soft_spi_rw_mode3</span><span class="hljs-params">(<span class="hljs-type">uint8_t</span> send_byte)</span>;<span class="hljs-meta">#<span class="hljs-keyword">endif</span> </span></code></pre></div><div class="code-wrapper"><pre><code class="hljs c"><span class="hljs-comment">/**</span><span class="hljs-comment">******************************************************************************</span><span class="hljs-comment">* @file     spi.c</span><span class="hljs-comment">* @author   Kayoung</span><span class="hljs-comment">* @version  V1.1</span><span class="hljs-comment">* @date     20221015</span><span class="hljs-comment">* @brief    gpio模拟spi四种驱动函数.</span><span class="hljs-comment">******************************************************************************</span><span class="hljs-comment">* @attention spi原理：http://t.csdn.cn/gF3lX</span><span class="hljs-comment">******************************************************************************</span><span class="hljs-comment">*/</span><span class="hljs-comment">/**</span><span class="hljs-comment">  * =================================================</span><span class="hljs-comment">  * |    模式   | CPOL(时钟极性)  |CPHA（时钟相位）|</span><span class="hljs-comment">  * =================================================</span><span class="hljs-comment">  * |MODE0(常用) |       0   |        0       |</span><span class="hljs-comment">  * -------------------------------------------------</span><span class="hljs-comment">  * |MODE1  |       0    |        1       |</span><span class="hljs-comment">  *-------------------------------------------------</span><span class="hljs-comment">  * |MODE2  |       1    |        0       | </span><span class="hljs-comment">  *-------------------------------------------------</span><span class="hljs-comment">  * |MODE3(常用) |   1   |        1       |</span><span class="hljs-comment">  *=================================================</span><span class="hljs-comment">  * MODE0：SCK空闲时为低电平，数据在SCK上升沿被采样，下降沿输出</span><span class="hljs-comment">　* MODE1：SCK空闲时为低电平，数据在SCK下降沿被采样，上升沿输出</span><span class="hljs-comment">　* MODE2：SCK空闲时为高电平，数据在SCK下降沿被采样，上升沿输出</span><span class="hljs-comment">　* MODE3：SCK空闲时为高电平，数据在SCK上升沿被采样，下降沿输出</span><span class="hljs-comment">*/</span><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;spi.h&quot;</span></span><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;intrins.h&gt;</span></span><span class="hljs-type">void</span> <span class="hljs-title function_">Delay1us</span><span class="hljs-params">()</span><span class="hljs-comment">//@11.0592MHz</span>&#123;_nop_();&#125;<span class="hljs-comment">/**</span><span class="hljs-comment">  * @briefspi初始化</span><span class="hljs-comment">  * @paramNone</span><span class="hljs-comment">  * @retvalNone</span><span class="hljs-comment">  */</span><span class="hljs-type">void</span> <span class="hljs-title function_">spi_init</span><span class="hljs-params">(<span class="hljs-type">void</span>)</span>&#123;SPI_CLK = <span class="hljs-number">0</span>;SPI_SS = <span class="hljs-number">1</span>;&#125;<span class="hljs-comment">/**</span><span class="hljs-comment">  * @brief  gpio 模拟spi,SPI模式0,CPOL=0，CPHA=0, MSB first，上升沿采样</span><span class="hljs-comment">  * @param  send_byte: 发送的一字节数据</span><span class="hljs-comment">  * @retvalread_dat:读取的一字节数据</span><span class="hljs-comment">  */</span><span class="hljs-type">uint8_t</span> <span class="hljs-title function_">soft_spi_rw_mode0</span><span class="hljs-params">(<span class="hljs-type">uint8_t</span> send_byte)</span>&#123;<span class="hljs-type">uint8_t</span> i, read_dat = <span class="hljs-number">0</span>;SPI_SS = <span class="hljs-number">0</span>; <span class="hljs-comment">//选择从设备</span>SPI_CLK = <span class="hljs-number">0</span>; <span class="hljs-comment">//空闲SCLK为0</span>Delay1us();<span class="hljs-keyword">for</span>( i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">8</span>; i++ )&#123;<span class="hljs-comment">/* 接收数据 */</span>SPI_CLK = <span class="hljs-number">1</span>;   <span class="hljs-comment">//拉高时钟，上升沿采样</span>read_dat &lt;&lt;= <span class="hljs-number">1</span>;  <span class="hljs-keyword">if</span>(SPI_MISO) read_dat++; <span class="hljs-comment">//若从从机接收到高电平，数据自加一</span>Delay1us();<span class="hljs-comment">/* 发送数据 */</span>SPI_CLK = <span class="hljs-number">0</span>; <span class="hljs-keyword">if</span>(send_byte &amp; <span class="hljs-number">0x80</span>) <span class="hljs-comment">//下降沿输出数据</span>SPI_MOSI = <span class="hljs-number">1</span>;  <span class="hljs-keyword">else</span>                    SPI_MOSI = <span class="hljs-number">0</span>;  send_byte &lt;&lt;= <span class="hljs-number">1</span>;Delay1us();&#125;SPI_SS = <span class="hljs-number">1</span>; <span class="hljs-comment">//释放从设备</span><span class="hljs-keyword">return</span> read_dat;&#125;<span class="hljs-comment">/**</span><span class="hljs-comment">  * @brief  gpio 模拟spi,SPI模式1,CPOL=0，CPHA=1, MSB first，下降沿采样</span><span class="hljs-comment">  * @param  send_byte: 发送的一字节数据</span><span class="hljs-comment">  * @retvalread_dat:读取的一字节数据</span><span class="hljs-comment">  */</span><span class="hljs-type">uint8_t</span> <span class="hljs-title function_">soft_spi_rw_mode1</span><span class="hljs-params">(<span class="hljs-type">uint8_t</span> send_byte)</span> &#123;<span class="hljs-type">uint8_t</span> i, read_dat = <span class="hljs-number">0</span>;SPI_SS = <span class="hljs-number">0</span>; <span class="hljs-comment">//选择从设备</span>    SPI_CLK = <span class="hljs-number">0</span>; <span class="hljs-comment">//空闲状态SCLK为0</span>Delay1us();<span class="hljs-keyword">for</span>(i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">8</span>; i++)   &#123;<span class="hljs-comment">/* 发送数据 */</span>SPI_CLK = <span class="hljs-number">1</span>;     <span class="hljs-comment">//上升沿输出数据</span><span class="hljs-keyword">if</span>(send_byte &amp; <span class="hljs-number">0x80</span>)SPI_MOSI = <span class="hljs-number">1</span>;  <span class="hljs-keyword">else</span>      SPI_MOSI = <span class="hljs-number">0</span>;   send_byte &lt;&lt;= <span class="hljs-number">1</span>;    Delay1us();<span class="hljs-comment">/* 接收数据 */</span>SPI_CLK = <span class="hljs-number">0</span>;     <span class="hljs-comment">//拉低时钟，下降沿采样</span>read_dat &lt;&lt;= <span class="hljs-number">1</span>;     <span class="hljs-keyword">if</span>(SPI_MISO)read_dat++;     <span class="hljs-comment">//若从从机接收到高电平，数据自加一</span>Delay1us();&#125;SPI_SS = <span class="hljs-number">1</span>; <span class="hljs-comment">//释放从设备</span><span class="hljs-keyword">return</span> (read_dat);     &#125;<span class="hljs-comment">/**</span><span class="hljs-comment">  * @brief  gpio 模拟spi,SPI模式2,CPOL=1，CPHA=0, MSB first，下降沿采样</span><span class="hljs-comment">  * @param  send_byte: 发送的一字节数据</span><span class="hljs-comment">  * @retvalread_dat:读取的一字节数据</span><span class="hljs-comment">  */</span> <span class="hljs-type">uint8_t</span> <span class="hljs-title function_">soft_spi_rw_mode2</span><span class="hljs-params">(<span class="hljs-type">uint8_t</span> send_byte)</span> &#123;    <span class="hljs-type">uint8_t</span> i, read_dat = <span class="hljs-number">0</span>;SPI_SS = <span class="hljs-number">0</span>; <span class="hljs-comment">//选择从设备 </span>SPI_CLK = <span class="hljs-number">1</span>; <span class="hljs-comment">//空闲状态SCLK为1</span>Delay1us();<span class="hljs-keyword">for</span>(i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">8</span>; i++)     &#123;<span class="hljs-comment">/* 接收数据 */</span>SPI_CLK = <span class="hljs-number">0</span>;     <span class="hljs-comment">//拉低时钟采样</span>read_dat &lt;&lt;= <span class="hljs-number">1</span>;    <span class="hljs-keyword">if</span>(SPI_MISO)read_dat++;     <span class="hljs-comment">//若从从机接收到高电平，数据自加一</span>Delay1us();<span class="hljs-comment">/* 发送数据 */</span>SPI_CLK = <span class="hljs-number">1</span>;     <span class="hljs-comment">//拉高时钟</span><span class="hljs-keyword">if</span>(send_byte &amp; <span class="hljs-number">0x80</span>) <span class="hljs-comment">//上升沿输出数据</span>SPI_MOSI = <span class="hljs-number">1</span>;  <span class="hljs-keyword">else</span>      SPI_MOSI = <span class="hljs-number">0</span>;   send_byte &lt;&lt;= <span class="hljs-number">1</span>;     Delay1us();&#125;SPI_SS = <span class="hljs-number">1</span>; <span class="hljs-comment">//释放从设备</span><span class="hljs-keyword">return</span> (read_dat);     &#125;<span class="hljs-comment">/**</span><span class="hljs-comment">  * @brief  gpio 模拟spi,SPI模式3,CPOL=1，CPHA=1, MSB first，上升沿采样</span><span class="hljs-comment">  * @param  send_byte: 发送的一字节数据</span><span class="hljs-comment">  * @retvalread_dat:读取的一字节数据</span><span class="hljs-comment">  */</span> <span class="hljs-type">uint8_t</span> <span class="hljs-title function_">soft_spi_rw_mode3</span><span class="hljs-params">(<span class="hljs-type">uint8_t</span> send_byte)</span> &#123;<span class="hljs-type">uint8_t</span> i, read_dat = <span class="hljs-number">0</span>;SPI_SS = <span class="hljs-number">0</span>; <span class="hljs-comment">//选择从设备</span>SPI_CLK = <span class="hljs-number">1</span>;<span class="hljs-comment">//空闲状态SCLK为1</span>Delay1us();<span class="hljs-keyword">for</span>( i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">8</span>; i++ )&#123;<span class="hljs-comment">/* 发送数据 */</span>SPI_CLK = <span class="hljs-number">0</span>;    <span class="hljs-comment">//下降沿输出数据</span><span class="hljs-keyword">if</span>(send_byte &amp; <span class="hljs-number">0x80</span>)SPI_MOSI = <span class="hljs-number">1</span>;  <span class="hljs-keyword">else</span>                    SPI_MOSI = <span class="hljs-number">0</span>;  send_byte &lt;&lt;= <span class="hljs-number">1</span>;Delay1us();<span class="hljs-comment">/* 接收数据 */</span>SPI_CLK = <span class="hljs-number">1</span>;   <span class="hljs-comment">//拉高时钟采样</span>read_dat &lt;&lt;= <span class="hljs-number">1</span>;  <span class="hljs-keyword">if</span>(SPI_MISO) read_dat++; <span class="hljs-comment">//若从从机接收到高电平，数据自加一</span>Delay1us();&#125;SPI_SS = <span class="hljs-number">1</span>; <span class="hljs-comment">//释放从设备</span><span class="hljs-keyword">return</span> read_dat;&#125;</code></pre></div><p>传感器模块:</p><div class="code-wrapper"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">ifndef</span> SSD3AS_H</span><span class="hljs-meta">#<span class="hljs-keyword">define</span> SSD3AS_H</span><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;STC12C5A60S2.H&gt;</span></span><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;spi.h&quot;</span></span><span class="hljs-keyword">typedef</span> <span class="hljs-class"><span class="hljs-keyword">enum</span></span><span class="hljs-class">&#123;</span>SENSOR_AP = <span class="hljs-number">0</span>,   <span class="hljs-comment">//绝压</span>SENSOR_GP,       <span class="hljs-comment">//表压</span>SENSOR_DP        <span class="hljs-comment">//差压</span>&#125;sensor_type_e;<span class="hljs-comment">/*******BASE值默认情况下改为0，根据上电初始状态显示数值确定具体值*********/</span><span class="hljs-meta">#<span class="hljs-keyword">define</span> PRESSURE_DP_BASE  35</span><span class="hljs-meta">#<span class="hljs-keyword">define</span> PRESSURE_GP_BASE  2.42</span><span class="hljs-meta">#<span class="hljs-keyword">define</span> PRESSURE_AP_BASE  0</span><span class="hljs-meta">#<span class="hljs-keyword">define</span> PRESSURE_DP_MAX2500</span><span class="hljs-meta">#<span class="hljs-keyword">define</span> PRESSURE_DP_MIN-2500</span><span class="hljs-meta">#<span class="hljs-keyword">define</span> PRESSURE_GP_MAX1000</span><span class="hljs-meta">#<span class="hljs-keyword">define</span> PRESSURE_GP_MIN0</span><span class="hljs-meta">#<span class="hljs-keyword">define</span> PRESSURE_AP_MAX120000UL</span><span class="hljs-meta">#<span class="hljs-keyword">define</span> PRESSURE_AP_MIN0</span> <span class="hljs-keyword">extern</span> <span class="hljs-type">void</span> <span class="hljs-title function_">ssd_get_value</span><span class="hljs-params">(<span class="hljs-type">float</span>* pressure, <span class="hljs-type">float</span>* temperature, sensor_type_e sensor_type)</span>;<span class="hljs-meta">#<span class="hljs-keyword">endif</span></span><span class="hljs-comment">/************************* End of File ***************************/</span></code></pre></div><div class="code-wrapper"><pre><code class="hljs c"><span class="hljs-comment">/**</span><span class="hljs-comment">******************************************************************************</span><span class="hljs-comment">* @file     ssd3as.c</span><span class="hljs-comment">* @author   Kayoung</span><span class="hljs-comment">* @version  V1.0</span><span class="hljs-comment">* @date     20201015</span><span class="hljs-comment">* @brief    压力传感器SPI通讯函数.</span><span class="hljs-comment">******************************************************************************</span><span class="hljs-comment">* @attention </span><span class="hljs-comment">******************************************************************************</span><span class="hljs-comment">*/</span> <span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;ssd3as.h&quot;</span></span><span class="hljs-comment">/**</span><span class="hljs-comment">* @brief  读取传感器压力值和温度值。</span><span class="hljs-comment">* @param  pressure: 读取的压力值。</span><span class="hljs-comment">* @param  temperature: 读取的温度值。</span><span class="hljs-comment">* @param  sensor_type: 压力传感器类型</span><span class="hljs-comment">* @retval None</span><span class="hljs-comment">* @attention 传感器的温度读出来有问题，应该跟传感器有关。</span><span class="hljs-comment">*/</span><span class="hljs-type">void</span> <span class="hljs-title function_">ssd_get_value</span><span class="hljs-params">(<span class="hljs-type">float</span>* pressure, <span class="hljs-type">float</span>* temperature, sensor_type_e sensor_type)</span>&#123;<span class="hljs-type">uint16_t</span> buf[<span class="hljs-number">4</span>] = &#123;<span class="hljs-number">0</span>&#125;;   <span class="hljs-comment">//用于存放压力AD值和温度AD值</span><span class="hljs-type">uint16_t</span> pressure_data = <span class="hljs-number">0</span>, temprature_data = <span class="hljs-number">0</span>;<span class="hljs-type">uint8_t</span> i;  <span class="hljs-comment">/* readout value from sensor by spi */</span><span class="hljs-keyword">for</span>(i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">4</span>; i++)  &#123;buf[i] = soft_spi_rw_mode0(<span class="hljs-number">0x00</span>);&#125;pressure_data = (buf[<span class="hljs-number">0</span>]&lt;&lt;<span class="hljs-number">8</span> | buf[<span class="hljs-number">1</span>]) &amp; <span class="hljs-number">0x3fff</span>; <span class="hljs-comment">//14位压力值</span>temprature_data = (buf[<span class="hljs-number">2</span>]&lt;&lt;<span class="hljs-number">8</span> | buf[<span class="hljs-number">3</span>]) &amp; <span class="hljs-number">0x7ff</span>; <span class="hljs-comment">//11位温度值</span><span class="hljs-comment">/* 计算压力值 */</span><span class="hljs-comment">/* 1.A-type输出10%~90%    2.B-type输出5%~95%*/</span><span class="hljs-keyword">if</span>(pressure_data &gt; <span class="hljs-number">16383</span>*<span class="hljs-number">0.1</span> &amp;&amp; pressure_data &lt; <span class="hljs-number">16383</span>*<span class="hljs-number">0.9</span>) &#123;<span class="hljs-keyword">switch</span>(sensor_type)&#123;<span class="hljs-keyword">case</span>(SENSOR_AP):&#123;*pressure = (pressure_data - <span class="hljs-number">1638.3</span>) * (PRESSURE_AP_MAX - PRESSURE_AP_MIN) / <span class="hljs-number">13106.4</span> \+ PRESSURE_AP_MIN - PRESSURE_AP_BASE; <span class="hljs-keyword">break</span>;&#125;<span class="hljs-keyword">case</span>(SENSOR_GP):&#123;*pressure = (pressure_data - <span class="hljs-number">1638.3</span>) * (PRESSURE_GP_MAX - PRESSURE_GP_MIN) / <span class="hljs-number">13106.4</span> \+ PRESSURE_GP_MIN - PRESSURE_GP_BASE; <span class="hljs-keyword">break</span>;&#125;<span class="hljs-keyword">case</span>(SENSOR_DP):&#123;*pressure = (pressure_data - <span class="hljs-number">1638.3</span>) * (PRESSURE_DP_MAX - PRESSURE_DP_MIN) / <span class="hljs-number">13106.4</span> \+ PRESSURE_DP_MIN - PRESSURE_DP_BASE; <span class="hljs-keyword">break</span>;&#125;<span class="hljs-keyword">default</span>: <span class="hljs-keyword">break</span>;&#125;&#125;  <span class="hljs-comment">/* 计算温度值 */</span>*temperature = temprature_data * <span class="hljs-number">200.0</span> / <span class="hljs-number">2047.0</span> - <span class="hljs-number">50.0</span>;&#125;</code></pre></div><div class="code-wrapper"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;STC12C5A60S2.H&gt;</span></span><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;bsp_uart.h&quot;</span></span><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;ssd3as.h&quot;</span></span><span class="hljs-type">void</span> <span class="hljs-title function_">Delay500ms</span><span class="hljs-params">()</span><span class="hljs-comment">//@11.0592MHz</span>&#123;<span class="hljs-type">unsigned</span> <span class="hljs-type">char</span> i, j, k;i = <span class="hljs-number">22</span>;j = <span class="hljs-number">3</span>;k = <span class="hljs-number">227</span>;<span class="hljs-keyword">do</span>&#123;<span class="hljs-keyword">do</span>&#123;<span class="hljs-keyword">while</span> (--k);&#125; <span class="hljs-keyword">while</span> (--j);&#125; <span class="hljs-keyword">while</span> (--i);&#125;<span class="hljs-type">float</span> preesure = <span class="hljs-number">0.0f</span>, temperature = <span class="hljs-number">0.0f</span>;<span class="hljs-type">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(<span class="hljs-type">void</span>)</span>&#123;uart1_init();spi_init();<span class="hljs-keyword">while</span>(<span class="hljs-number">1</span>)&#123;<span class="hljs-comment">//ssd_get_value(&amp;preesure, &amp;temperature, SENSOR_AP);</span><span class="hljs-comment">//printf(&quot;pressure: %.2fkPa \r\n&quot;, preesure/1000.0);</span>ssd_get_value(&amp;preesure, &amp;temperature, SENSOR_GP);<span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;pressure: %.2fPa \r\n&quot;</span>, preesure);Delay500ms();&#125;&#125;</code></pre></div><p>连接大气压传感器效果如下：</p><figure><imgsrc="https://gitee.com/kayoungzhang/picgo_res/raw/master/img/2023-05-14_184805.png"alt="2023-05-14_184805" /><figcaption aria-hidden="true">2023-05-14_184805</figcaption></figure><p>连接表压传感器，改变压力，效果如下：</p><figure><imgsrc="https://gitee.com/kayoungzhang/picgo_res/raw/master/img/2023-05-14_185549.png"alt="2023-05-14_185549" /><figcaption aria-hidden="true">2023-05-14_185549</figcaption></figure><p>工程文件：<ahref="https://gitee.com/kayoungzhang/my_codehub/raw/master/pressure/pressureTest.zip">pressure</a></p><h3 id="参考链接">参考链接</h3><p><ahref="http://www.sensedz.com/product/html/?141.html">SSD系列数字压力传感器</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;spi通讯在开发过程中会经常用到，譬如下面介绍的数字压力传感器SSD系列，在传输压力值时就可以通过spi协议进行通讯。&lt;/p&gt;
&lt;h3 id=&quot;产品特点&quot;&gt;产品特点&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;中压量程： 7Kpa ~ 1Mpa&lt;/li&gt;
&lt;li&gt;供电：3.3V /</summary>
      
    
    
    
    <category term="单片机" scheme="http://example.com/categories/%E5%8D%95%E7%89%87%E6%9C%BA/"/>
    
    
    <category term="sensor" scheme="http://example.com/tags/sensor/"/>
    
  </entry>
  
  <entry>
    <title>ads1120温度传感器的开发设计</title>
    <link href="http://example.com/2023/05/09/ads1120%E6%B8%A9%E5%BA%A6%E4%BC%A0%E6%84%9F%E5%99%A8%E7%9A%84%E5%BC%80%E5%8F%91%E8%AE%BE%E8%AE%A1/"/>
    <id>http://example.com/2023/05/09/ads1120%E6%B8%A9%E5%BA%A6%E4%BC%A0%E6%84%9F%E5%99%A8%E7%9A%84%E5%BC%80%E5%8F%91%E8%AE%BE%E8%AE%A1/</id>
    <published>2023-05-09T13:52:01.000Z</published>
    <updated>2023-05-11T13:07:06.064Z</updated>
    
    <content type="html"><![CDATA[<p>前面介绍了ds18b20单总线测量温度，一般应用在环境温度的测量，但开发过程中，针对高低温，宽范围的温度测量，此时用到最多的传感器一般是热电阻(RTDs)和热电偶，如PT100系列热电阻，K-type热电偶。在电路上通过放大器将测量的小信号放大输出，就可以得到测量的温度数据，当然比较简单的做法是使用集成芯片进行处理，像MAX6675，ADS1120，ADS1220等等，之前项目我选用的是ads1120芯片，下面详细介绍一下它的具体情况。</p><h3 id="芯片特性">芯片特性</h3><ul><li>电压： 2.3 V ~ 5.5 V</li><li>SPI接口 (<strong>Mode 1： CPOL=0，CPHA=1</strong>）</li><li>PGA: 1 V/V ~ 128 V/V</li><li>采样率: 最大 2kSPS</li><li>输入：4个单端输入口或两个差分输入口</li><li>16 位无噪声分辨率（20SPS 时）</li><li>内部基准电压： 2.048-V，漂移：5 ppm/°C</li><li>功耗：1.4mW</li><li>采用单周期稳定数字滤波器，在 20SPS 时实现 50Hz 和 60Hz 谐波抑制</li><li>双匹配可编程电流源：50μA 至 1.5mA</li></ul><h3 id="功能框图">功能框图</h3><p><img src="https://gitee.com/kayoungzhang/picgo_res/raw/master/img/image-20230511191841945.png" alt="image-20230511191841945"  /></p><h3 id="pga共模电压要求">PGA共模电压要求</h3><p>为了始终处于 PGA的线性工作范围内，输入信号必须满足以下要求。可参考datasheet具体实例。</p><figure><imgsrc="https://gitee.com/kayoungzhang/picgo_res/raw/master/img/image-20230511202038516.png"alt="image-20230511202038516" /><figcaption aria-hidden="true">image-20230511202038516</figcaption></figure><h3 id="电压基准">电压基准</h3><p>该器件集成了 <strong>2.048V</strong>低漂移电压基准。提供两对差分基准输入（REFP0/REFN0 和 REFP1/REFN1）。基准源通过配置寄存器的两位 (VREF[1:0])进行选择。默认选择内部基准。上电后、退出掉电模式或由外部基准源切换至内部基准后，内部基准电压在25µs 内即可完全稳定。</p><p>差分基准输入支持自由选择共模基准电压。REFP0 和 REFN0为专用基准输入，而 REFP1 和 REFN1 分别与输入 AIN0 和 AIN3共享。所有基准输入均在内部进行缓冲，以提高输入阻抗。因此，使用外部基准时，通常无需额外使用基准缓冲器。</p><p>在多数情况下，转换结果与基准源稳定性成正比。转换结果将反映电压基准的所有噪声和漂移。</p><h3 id="激励电流源">激励电流源</h3><p>该器件为 RTD 应用提供两个匹配的可编程激励电流源(IDAC)。使用配置寄存器的相应位 (IDAC[2:0])可通过编程方式将电流源输出电流设定为10μA、50μA、100μA、250μA、500μA、1000μA 或1500μA。每个电流源均可与所有模拟输入 (AINx) 及所有专用基准输入（REFP0 和REFN0）相连。两电流源还可与同一引脚相连。IDAC的路由通过配置寄存器的位（I1MUX[2:0]，I2MUX[2:0]）进行配置。</p><h3 id="电路设计">电路设计</h3><p>参考芯片datasheet的应用电路，我采用如下兼容设计，可自由切换外接热电偶和3线制PT100。</p><figure><imgsrc="https://gitee.com/kayoungzhang/picgo_res/raw/master/img/image-20230511194947821.png"alt="image-20230511194947821" /><figcaption aria-hidden="true">image-20230511194947821</figcaption></figure><h3 id="pcb设计">PCB设计</h3><p>主要是模拟和数字地的隔离，电源引脚必须通过低 ESR陶瓷电容旁路至接地。旁路电容的最佳位置应尽可能靠近电源引脚。采用差分连接的模拟输入之间必须放置差分电容。适用于差分测量的最佳输入组合包括：AIN0、AIN1和 AIN2、AIN3，必须选择高品质差分电容。C0G (NPO)电容属性稳定且具备低噪声特性，这是最适用的陶瓷贴片电容。对热电偶输入连接周围的覆铜区域进行热隔离，以构建热性能稳定的冷端。</p><p><img src="https://gitee.com/kayoungzhang/picgo_res/raw/master/img/image-20230511203153776.png" alt="image-20230511203153776" style="zoom: 80%;" /></p><h3 id="温度传感器">温度传感器</h3><p>ADS1120 集成了一个精密温度传感器。通过将配置寄存器的 TS 位置 1可使能温度传感器模式。。温度数据以 <strong>14</strong> 位结果呈现，与 24位转换结果左对齐。负数以二进制补码形式表示。数字代码转换温度公式：如果MSB 为 0，将十进制代码乘以 0.03125°C 即可获得结果。如果 MSB =1，则将结果减 1 后对所有位取补码。之后将结果乘以 –0.03125°C。</p><p>示例：器件回读 0960h: 0960h 的 MSB = 0。</p><p>0960h · 0.03125°C = 2400 · 0.03125°C = 75°C</p><p>示例：器件回读 3CE0h: 3CE0h 的 MSB = 1。</p><p>减 1 后对结果取补码：3CE0h → 0320h （C320h &amp; 3FFFh）</p><p>0320h · (–0.03125°C) = 800 · (–0.03125°C) = –25°C</p><h3 id="数据格式">数据格式</h3><figure><imgsrc="https://gitee.com/kayoungzhang/picgo_res/raw/master/img/image-20230511203020170.png"alt="image-20230511203020170" /><figcaption aria-hidden="true">image-20230511203020170</figcaption></figure><h3 id="指令">指令</h3><p><img src="https://gitee.com/kayoungzhang/picgo_res/raw/master/img/image-20230511192136721.png" alt="image-20230511192136721"  /></p><h3 id="寄存器">寄存器</h3><figure><imgsrc="https://gitee.com/kayoungzhang/picgo_res/raw/master/img/image-20230511192406483.png"alt="image-20230511192406483" /><figcaption aria-hidden="true">image-20230511192406483</figcaption></figure><h3 id="程序实现">程序实现</h3><p>程序中只实现了基本的温度测量功能，可根据需求添加其他功能，另外，芯片的配置函数根据电路的不同也需要进行相应修改。</p><div class="code-wrapper"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">ifndef</span> ADS1120_H</span><span class="hljs-meta">#<span class="hljs-keyword">define</span> ADS1120_H</span><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;STC12C5A60S2.H&gt;</span></span><span class="hljs-keyword">typedef</span> <span class="hljs-type">unsigned</span> <span class="hljs-type">char</span> <span class="hljs-type">uint8_t</span>;<span class="hljs-comment">/* spi 引脚定义 */</span>sbit ADS1120_RDY = P1^<span class="hljs-number">1</span>;sbit ADS1120_CS  = P1^<span class="hljs-number">4</span>;sbit ADS1120_SDI = P1^<span class="hljs-number">5</span>;sbit ADS1120_SDO = P1^<span class="hljs-number">6</span>;sbit ADS1120_CLK = P1^<span class="hljs-number">7</span>;<span class="hljs-comment">/* 传感器类型 */</span><span class="hljs-keyword">typedef</span> <span class="hljs-class"><span class="hljs-keyword">enum</span></span><span class="hljs-class">&#123;</span>PT100 = <span class="hljs-number">0</span>, <span class="hljs-comment">//pt100</span>K_TYPE,   <span class="hljs-comment">//k-type</span>INTER     <span class="hljs-comment">//internal temperature sensor</span>&#125;sensor_e;<span class="hljs-comment">/********************ADS1120 Definitions**********************/</span><span class="hljs-comment">/* ADS1120 Command Definitions */</span><span class="hljs-meta">#<span class="hljs-keyword">define</span> ADS1120_RESET         0x06</span><span class="hljs-meta">#<span class="hljs-keyword">define</span> ADS1120_START         0x08</span><span class="hljs-meta">#<span class="hljs-keyword">define</span> ADS1120_POWERDOWN     0x02</span><span class="hljs-meta">#<span class="hljs-keyword">define</span> ADS1120_RDATA         0x10</span><span class="hljs-meta">#<span class="hljs-keyword">define</span> ADS1120_RREG          0x20</span><span class="hljs-meta">#<span class="hljs-keyword">define</span> ADS1120_WREG          0x40</span><span class="hljs-comment">/* ADS1120 Register Definitions */</span><span class="hljs-meta">#<span class="hljs-keyword">define</span> ADS1120_0_REGISTER    0x00</span><span class="hljs-meta">#<span class="hljs-keyword">define</span> ADS1120_1_REGISTER    0x01</span><span class="hljs-meta">#<span class="hljs-keyword">define</span> ADS1120_2_REGISTER    0x02</span><span class="hljs-meta">#<span class="hljs-keyword">define</span> ADS1120_3_REGISTER    0x03</span><span class="hljs-comment">/* ADS1120 Register 0 Definition */</span><span class="hljs-comment">/** ---------------------------------------------------------------</span><span class="hljs-comment">  * | Bit7 | Bit6 | Bit5 | Bit4 | Bit3 | Bit2 | Bit1 |    Bit0    |</span><span class="hljs-comment">  * ---------------------------------------------------------------</span><span class="hljs-comment">  * |         MUX[3:0]          |      GAIN[2:0]     | PGA_BYPASS |</span><span class="hljs-comment">  * ---------------------------------------------------------------</span><span class="hljs-comment">  */</span><span class="hljs-comment">/* Define MUX */</span><span class="hljs-meta">#<span class="hljs-keyword">define</span> ADS1120_MUX_0_1   0x00</span><span class="hljs-meta">#<span class="hljs-keyword">define</span> ADS1120_MUX_3_2   0x70</span><span class="hljs-comment">/* Define GAIN */</span><span class="hljs-meta">#<span class="hljs-keyword">define</span> ADS1120_GAIN_1      0x00</span><span class="hljs-meta">#<span class="hljs-keyword">define</span> ADS1120_GAIN_2      0x02</span><span class="hljs-meta">#<span class="hljs-keyword">define</span> ADS1120_GAIN_4      0x04</span><span class="hljs-meta">#<span class="hljs-keyword">define</span> ADS1120_GAIN_8      0x06</span><span class="hljs-meta">#<span class="hljs-keyword">define</span> ADS1120_GAIN_16     0x08</span><span class="hljs-meta">#<span class="hljs-keyword">define</span> ADS1120_GAIN_32     0x0a</span><span class="hljs-meta">#<span class="hljs-keyword">define</span> ADS1120_GAIN_64     0x0c</span><span class="hljs-meta">#<span class="hljs-keyword">define</span> ADS1120_GAIN_128    0x0e</span><span class="hljs-comment">/* Define PGA_BYPASS */</span><span class="hljs-meta">#<span class="hljs-keyword">define</span> ADS1120_PGA_ENABLE  0x00</span><span class="hljs-meta">#<span class="hljs-keyword">define</span> ADS1120_PGA_DISABLE 0x01</span><span class="hljs-comment">/* ADS1120 Register 1 Definition */</span><span class="hljs-comment">/** ---------------------------------------------------------</span><span class="hljs-comment">  * | Bit7 | Bit6 | Bit5 | Bit4 | Bit3 | Bit2 | Bit1 | Bit0 |</span><span class="hljs-comment">  * ---------------------------------------------------------</span><span class="hljs-comment">  * |       DR[2:0]      |  MODE[1:0]  |  CM  |  TS  |  BCS |</span><span class="hljs-comment">  * ---------------------------------------------------------</span><span class="hljs-comment">  */</span><span class="hljs-comment">/* Define DR (data rate) */</span><span class="hljs-meta">#<span class="hljs-keyword">define</span> ADS1120_DR_20       0x00</span><span class="hljs-meta">#<span class="hljs-keyword">define</span> ADS1120_DR_45       0x20</span><span class="hljs-meta">#<span class="hljs-keyword">define</span> ADS1120_DR_90       0x40</span><span class="hljs-meta">#<span class="hljs-keyword">define</span> ADS1120_DR_175      0x60</span><span class="hljs-meta">#<span class="hljs-keyword">define</span> ADS1120_DR_330      0x80</span><span class="hljs-meta">#<span class="hljs-keyword">define</span> ADS1120_DR_600      0xa0</span><span class="hljs-meta">#<span class="hljs-keyword">define</span> ADS1120_DR_1000     0xc0</span><span class="hljs-comment">/* Define MODE of Operation */</span><span class="hljs-meta">#<span class="hljs-keyword">define</span> ADS1120_MODE_NORMAL 0x00</span><span class="hljs-meta">#<span class="hljs-keyword">define</span> ADS1120_MODE_DUTY   0x08</span><span class="hljs-meta">#<span class="hljs-keyword">define</span> ADS1120_MODE_TURBO  0x10</span><span class="hljs-comment">/* Define CM (conversion mode) */</span><span class="hljs-meta">#<span class="hljs-keyword">define</span> ADS1120_SS          0x00</span><span class="hljs-meta">#<span class="hljs-keyword">define</span> ADS1120_CC          0x04</span><span class="hljs-comment">/* Define TS (internal temperature sensor) */</span><span class="hljs-meta">#<span class="hljs-keyword">define</span> ADS1120_TEMP_SENSOR 0x02</span><span class="hljs-comment">/* Define BCS (burnout current source) */</span><span class="hljs-meta">#<span class="hljs-keyword">define</span> ADS1120_BCS         0x01</span><span class="hljs-comment">/* ADS1120 Register 2 Definition */</span><span class="hljs-comment">/** ---------------------------------------------------------</span><span class="hljs-comment">  * | Bit7 | Bit6 | Bit5 | Bit4 | Bit3 | Bit2 | Bit1 | Bit0 |</span><span class="hljs-comment">  * ---------------------------------------------------------</span><span class="hljs-comment">  * |  VREF[1:0]  |  50/60[1:0] | PSW  |      IDAC[2:0]     |</span><span class="hljs-comment">  * ---------------------------------------------------------</span><span class="hljs-comment">  */</span><span class="hljs-comment">/* Define VREF */</span><span class="hljs-meta">#<span class="hljs-keyword">define</span> ADS1120_VREF_INT0x00</span><span class="hljs-meta">#<span class="hljs-keyword">define</span> ADS1120_VREF_00x40</span><span class="hljs-meta">#<span class="hljs-keyword">define</span> ADS1120_VREF_10x80</span><span class="hljs-meta">#<span class="hljs-keyword">define</span> ADS1120_VREF_SUPPLY0xc0</span><span class="hljs-comment">/* Define 50/60 (filter response) */</span><span class="hljs-meta">#<span class="hljs-keyword">define</span> ADS1120_REJECT_OFF0x00</span><span class="hljs-meta">#<span class="hljs-keyword">define</span> ADS1120_REJECT_BOTH0x10</span><span class="hljs-meta">#<span class="hljs-keyword">define</span> ADS1120_REJECT_500x20</span><span class="hljs-meta">#<span class="hljs-keyword">define</span> ADS1120_REJECT_600x30</span><span class="hljs-comment">/* Define PSW (low side power switch) */</span><span class="hljs-meta">#<span class="hljs-keyword">define</span> ADS1120_PSW_AUTO0x08</span><span class="hljs-comment">/* Define IDAC (IDAC current) */</span><span class="hljs-meta">#<span class="hljs-keyword">define</span> ADS1120_IDAC_OFF       0x00</span><span class="hljs-meta">#<span class="hljs-keyword">define</span> ADS1120_IDAC_50        0x02</span><span class="hljs-meta">#<span class="hljs-keyword">define</span> ADS1120_IDAC_100       0x03</span><span class="hljs-meta">#<span class="hljs-keyword">define</span> ADS1120_IDAC_250       0x04</span><span class="hljs-meta">#<span class="hljs-keyword">define</span> ADS1120_IDAC_500       0x05</span><span class="hljs-meta">#<span class="hljs-keyword">define</span> ADS1120_IDAC_1000      0x06</span><span class="hljs-meta">#<span class="hljs-keyword">define</span> ADS1120_IDAC_1500      0x07</span><span class="hljs-comment">/* ADS1120 Register 3 Definition */</span><span class="hljs-comment">/** ---------------------------------------------------------</span><span class="hljs-comment">  * | Bit7 | Bit6 | Bit5 | Bit4 | Bit3 | Bit2 | Bit1  | Bit0 |</span><span class="hljs-comment">  * ---------------------------------------------------------</span><span class="hljs-comment">  * |      I1MUX[2:0]    |      I2MUX[2:0]    | DRDYM |  0   |</span><span class="hljs-comment">  * ---------------------------------------------------------</span><span class="hljs-comment">  */</span><span class="hljs-comment">/* Define I1MUX (IDAC1 routing configuration) */</span><span class="hljs-meta">#<span class="hljs-keyword">define</span> ADS1120_IDAC1_OFF     0x00</span><span class="hljs-meta">#<span class="hljs-keyword">define</span> ADS1120_IDAC1_AIN0    0x20</span><span class="hljs-meta">#<span class="hljs-keyword">define</span> ADS1120_IDAC1_AIN1    0x40</span><span class="hljs-meta">#<span class="hljs-keyword">define</span> ADS1120_IDAC1_AIN2    0x60</span><span class="hljs-meta">#<span class="hljs-keyword">define</span> ADS1120_IDAC1_AIN3    0x80</span><span class="hljs-meta">#<span class="hljs-keyword">define</span> ADS1120_IDAC1_REFP0   0xa0</span><span class="hljs-meta">#<span class="hljs-keyword">define</span> ADS1120_IDAC1_REFN0   0xc0</span><span class="hljs-comment">/* Define I2MUX (IDAC2 routing configuration) */</span><span class="hljs-meta">#<span class="hljs-keyword">define</span> ADS1120_IDAC2_OFF     0x00</span><span class="hljs-meta">#<span class="hljs-keyword">define</span> ADS1120_IDAC2_AIN0    0x04</span><span class="hljs-meta">#<span class="hljs-keyword">define</span> ADS1120_IDAC2_AIN1    0x08</span><span class="hljs-meta">#<span class="hljs-keyword">define</span> ADS1120_IDAC2_AIN2    0x0c</span><span class="hljs-meta">#<span class="hljs-keyword">define</span> ADS1120_IDAC2_AIN3    0x10</span><span class="hljs-meta">#<span class="hljs-keyword">define</span> ADS1120_IDAC2_REFP0   0x14</span><span class="hljs-meta">#<span class="hljs-keyword">define</span> ADS1120_IDAC2_REFN0   0x18</span><span class="hljs-comment">/* define DRDYM (DRDY mode) */</span><span class="hljs-meta">#<span class="hljs-keyword">define</span> ADS1120_DRDY_MODE     0x02</span><span class="hljs-keyword">extern</span> <span class="hljs-type">int</span> cold_compensation;<span class="hljs-keyword">extern</span> <span class="hljs-type">void</span> <span class="hljs-title function_">spi_init</span><span class="hljs-params">(<span class="hljs-type">void</span>)</span>;<span class="hljs-keyword">extern</span> <span class="hljs-type">void</span> <span class="hljs-title function_">ads1120_confiuration</span><span class="hljs-params">(sensor_e sensor_type)</span>;<span class="hljs-keyword">extern</span> <span class="hljs-type">void</span> <span class="hljs-title function_">ads1120_get_average_temp</span><span class="hljs-params">(<span class="hljs-type">float</span>* temperature, sensor_e sensor_type)</span>;<span class="hljs-keyword">extern</span> <span class="hljs-type">void</span> <span class="hljs-title function_">ads1120_thermocouple_compensation</span><span class="hljs-params">(<span class="hljs-type">int</span>* voltage)</span>;<span class="hljs-meta">#<span class="hljs-keyword">endif</span></span></code></pre></div><div class="code-wrapper"><pre><code class="hljs c"><span class="hljs-comment">/**</span><span class="hljs-comment">  ******************************************************************************</span><span class="hljs-comment">  * @file    ads1120.c </span><span class="hljs-comment">  * @version V1.0.0</span><span class="hljs-comment">  * @date    2023.03.08</span><span class="hljs-comment">  * @author  Kayoung</span><span class="hljs-comment">  * @brief   PT100或K型热电偶SPI传输温度</span><span class="hljs-comment">  * @details  </span><span class="hljs-comment">  ******************************************************************************</span><span class="hljs-comment">  * @attention </span><span class="hljs-comment">  ******************************************************************************</span><span class="hljs-comment">  */</span><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;ads1120.h&quot;</span></span><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;intrins.h&gt;</span></span><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;bsp_uart.h&quot;</span></span><span class="hljs-type">int</span> cold_compensation = <span class="hljs-number">0</span>;<span class="hljs-comment">//热电偶冷端补偿值</span><span class="hljs-comment">/* 函数申明 */</span><span class="hljs-type">uint8_t</span> <span class="hljs-title function_">soft_spi_rw_mode1</span><span class="hljs-params">(<span class="hljs-type">uint8_t</span> byte)</span>;<span class="hljs-type">void</span> <span class="hljs-title function_">ads1120_wr_reg</span><span class="hljs-params">(<span class="hljs-type">uint8_t</span> addr, <span class="hljs-type">uint8_t</span> num, <span class="hljs-type">uint8_t</span>* p_data)</span>;<span class="hljs-type">void</span> <span class="hljs-title function_">Delay1us</span><span class="hljs-params">()</span><span class="hljs-comment">//@11.0592MHz</span>&#123;_nop_();&#125;<span class="hljs-type">void</span> <span class="hljs-title function_">Delay100ms</span><span class="hljs-params">()</span><span class="hljs-comment">//@11.0592MHz</span>&#123;<span class="hljs-type">unsigned</span> <span class="hljs-type">char</span> i, j, k;i = <span class="hljs-number">5</span>;j = <span class="hljs-number">52</span>;k = <span class="hljs-number">195</span>;<span class="hljs-keyword">do</span>&#123;<span class="hljs-keyword">do</span>&#123;<span class="hljs-keyword">while</span> (--k);&#125; <span class="hljs-keyword">while</span> (--j);&#125; <span class="hljs-keyword">while</span> (--i);&#125;<span class="hljs-comment">/**</span><span class="hljs-comment">  * @brief  MCU SPI initial</span><span class="hljs-comment">  * @param  None</span><span class="hljs-comment">  * @retval None</span><span class="hljs-comment">  */</span><span class="hljs-type">void</span> <span class="hljs-title function_">spi_init</span><span class="hljs-params">(<span class="hljs-type">void</span>)</span>&#123;ADS1120_RDY = <span class="hljs-number">1</span>;ADS1120_CS  = <span class="hljs-number">1</span>;ADS1120_SDI = <span class="hljs-number">0</span>;ADS1120_SDO = <span class="hljs-number">0</span>;ADS1120_CLK = <span class="hljs-number">0</span>;&#125;<span class="hljs-comment">/**</span><span class="hljs-comment">  * @brief  ads1120 initial config</span><span class="hljs-comment">  * @param  sensor_type: 传感器类型</span><span class="hljs-comment">  * @retval None</span><span class="hljs-comment">  */</span><span class="hljs-type">void</span> <span class="hljs-title function_">ads1120_confiuration</span><span class="hljs-params">(sensor_e sensor_type)</span>&#123;<span class="hljs-comment">/* ads1120 register configuration */</span><span class="hljs-type">uint8_t</span> config[<span class="hljs-number">4</span>] =&#123;<span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>&#125;;<span class="hljs-keyword">switch</span> (sensor_type)&#123;<span class="hljs-keyword">case</span> PT100:&#123;<span class="hljs-comment">/* PT100 configuration */</span>config[<span class="hljs-number">0</span>] = ADS1120_MUX_0_1 | ADS1120_GAIN_8; <span class="hljs-comment">/* register 0 configuration */</span>config[<span class="hljs-number">1</span>] = ADS1120_DR_20 | ADS1120_CC; <span class="hljs-comment">/* register 1 configuration */</span>config[<span class="hljs-number">2</span>] = ADS1120_VREF_0 | ADS1120_REJECT_BOTH | ADS1120_IDAC_500; <span class="hljs-comment">/* register 2 configuration */</span>config[<span class="hljs-number">3</span>] = ADS1120_IDAC1_AIN2 | ADS1120_IDAC2_AIN3; <span class="hljs-comment">/* register 3 configuration */</span><span class="hljs-keyword">break</span>;&#125;<span class="hljs-keyword">case</span> K_TYPE:&#123;<span class="hljs-comment">/* K-type Thermocouple configuration */</span>config[<span class="hljs-number">0</span>] = ADS1120_MUX_0_1 | ADS1120_GAIN_32; <span class="hljs-comment">/* register 0 configuration */</span>config[<span class="hljs-number">1</span>] = ADS1120_DR_20 | ADS1120_CC; <span class="hljs-comment">/* register 1 configuration */</span>config[<span class="hljs-number">2</span>] = ADS1120_VREF_INT | ADS1120_REJECT_BOTH | ADS1120_IDAC_OFF; <span class="hljs-comment">/* register 2 configuration */</span>config[<span class="hljs-number">3</span>] = ADS1120_IDAC1_OFF | ADS1120_IDAC2_OFF; <span class="hljs-comment">/* register 3 configuration */</span><span class="hljs-keyword">break</span>;&#125;<span class="hljs-keyword">case</span> INTER:&#123;<span class="hljs-comment">/* ads1120 internal temperature sensor configuration */</span>config[<span class="hljs-number">0</span>] = <span class="hljs-number">0</span>; <span class="hljs-comment">/* register 0 configuration */</span>config[<span class="hljs-number">1</span>] = ADS1120_CC | ADS1120_TEMP_SENSOR; <span class="hljs-comment">/* register 1 configuration */</span>config[<span class="hljs-number">2</span>] = <span class="hljs-number">0</span>; <span class="hljs-comment">/* register 2 configuration */</span>config[<span class="hljs-number">3</span>] = <span class="hljs-number">0</span>; <span class="hljs-comment">/* register 3 configuration */</span><span class="hljs-keyword">break</span>;&#125;<span class="hljs-keyword">default</span>: <span class="hljs-keyword">break</span>;&#125;ADS1120_CS = <span class="hljs-number">0</span>;soft_spi_rw_mode1(ADS1120_RESET); <span class="hljs-comment">// reset ads1120</span>Delay100ms();ads1120_wr_reg(ADS1120_0_REGISTER, <span class="hljs-number">0x04</span>, config); <span class="hljs-comment">//config ads1120 register</span>Delay100ms();soft_spi_rw_mode1(ADS1120_START); <span class="hljs-comment">//start conversation</span>ADS1120_CS = <span class="hljs-number">1</span>;&#125;<span class="hljs-comment">/**</span><span class="hljs-comment">  * @brief  gpio 模拟spi，只支持SPI模式1,CPOL=0，CPHA=1, MSB first下降沿采样</span><span class="hljs-comment">  * @param  byte: 发送的一字节数据</span><span class="hljs-comment">  * @paramread_dat:读取的一字节数据</span><span class="hljs-comment">  * @retval None</span><span class="hljs-comment">  */</span><span class="hljs-type">uint8_t</span> <span class="hljs-title function_">soft_spi_rw_mode1</span><span class="hljs-params">(<span class="hljs-type">uint8_t</span> byte)</span> &#123;<span class="hljs-type">uint8_t</span> i,read_dat=<span class="hljs-number">0</span>; <span class="hljs-keyword">for</span>(i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">8</span>; i++)     <span class="hljs-comment">// 循环8次</span>&#123;<span class="hljs-comment">/* 发送数据 */</span>ADS1120_CLK = <span class="hljs-number">1</span>;     <span class="hljs-comment">//拉高时钟</span><span class="hljs-keyword">if</span>(byte &amp; <span class="hljs-number">0x80</span>)ADS1120_SDI = <span class="hljs-number">1</span>;  <span class="hljs-comment">//若最到位为高，则输出高</span><span class="hljs-keyword">else</span>      ADS1120_SDI = <span class="hljs-number">0</span>;   <span class="hljs-comment">//若最到位为低，则输出低</span>byte &lt;&lt;= <span class="hljs-number">1</span>;     <span class="hljs-comment">// 低一位移位到最高位</span>Delay1us();<span class="hljs-comment">/* 接收数据 */</span>ADS1120_CLK = <span class="hljs-number">0</span>;     <span class="hljs-comment">//拉低时钟</span>read_dat &lt;&lt;= <span class="hljs-number">1</span>;     <span class="hljs-comment">//数据左移</span><span class="hljs-keyword">if</span>(ADS1120_SDO)read_dat++;     <span class="hljs-comment">//若从从机接收到高电平，数据自加一</span>Delay1us();&#125;<span class="hljs-keyword">return</span> (read_dat);     <span class="hljs-comment">//返回数据</span>&#125;<span class="hljs-comment">/**</span><span class="hljs-comment">  * @brief  ads1120读寄存器</span><span class="hljs-comment">  * @param  addr：寄存器开始地址</span><span class="hljs-comment">  *@paramnum：读取的字节数</span><span class="hljs-comment">  *@paramp_data：读取的数据指针</span><span class="hljs-comment">  * @retval None</span><span class="hljs-comment">  */</span><span class="hljs-type">void</span> <span class="hljs-title function_">ads1120_rd_reg</span><span class="hljs-params">(<span class="hljs-type">uint8_t</span> addr, <span class="hljs-type">uint8_t</span> num, <span class="hljs-type">uint8_t</span>* p_data)</span>&#123;<span class="hljs-type">uint8_t</span> i; <span class="hljs-comment">/* send the command byte */</span>soft_spi_rw_mode1(ADS1120_RREG | (((addr &lt;&lt; <span class="hljs-number">2</span>) &amp; <span class="hljs-number">0x0c</span>) |((num - <span class="hljs-number">1</span>) &amp; <span class="hljs-number">0x03</span>)));  <span class="hljs-comment">/* get the register content */</span><span class="hljs-keyword">for</span> (i = <span class="hljs-number">0</span>; i &lt; num; i++)&#123;*p_data++ = soft_spi_rw_mode1(<span class="hljs-number">0x00</span>);&#125;<span class="hljs-keyword">return</span>;&#125;<span class="hljs-comment">/**</span><span class="hljs-comment">  * @brief  ads1120写寄存器</span><span class="hljs-comment">  * @param  addr：寄存器开始地址</span><span class="hljs-comment">  *@paramnum：写入的字节数</span><span class="hljs-comment">  *@paramp_data：写入数据的指针</span><span class="hljs-comment">  * @retval None</span><span class="hljs-comment">  */</span><span class="hljs-type">void</span> <span class="hljs-title function_">ads1120_wr_reg</span><span class="hljs-params">(<span class="hljs-type">uint8_t</span> addr, <span class="hljs-type">uint8_t</span> num, <span class="hljs-type">uint8_t</span>* p_data)</span>&#123;<span class="hljs-type">uint8_t</span> i; <span class="hljs-comment">/* send the command byte */</span>soft_spi_rw_mode1(ADS1120_WREG | (((addr &lt;&lt; <span class="hljs-number">2</span>) &amp; <span class="hljs-number">0x0c</span>) |((num - <span class="hljs-number">1</span>) &amp; <span class="hljs-number">0x03</span>)));  <span class="hljs-comment">/* send the register content */</span><span class="hljs-keyword">for</span> (i = <span class="hljs-number">0</span>; i &lt; num; i++)&#123;soft_spi_rw_mode1(*p_data++);&#125;<span class="hljs-keyword">return</span>;&#125;<span class="hljs-comment">/**</span><span class="hljs-comment">  * @brief  ads1120读取转换数据</span><span class="hljs-comment">  * @param  None</span><span class="hljs-comment">  * @retval result：读取到的两字节数据</span><span class="hljs-comment">  */</span><span class="hljs-type">long</span> <span class="hljs-title function_">ads1120_rd_data</span><span class="hljs-params">(<span class="hljs-type">void</span>)</span>&#123;<span class="hljs-type">long</span> result = <span class="hljs-number">0</span>;  <span class="hljs-comment">/* assert CS to start transfer */</span>ADS1120_CS = <span class="hljs-number">0</span>;Delay1us();  <span class="hljs-comment">/* send the command byte */</span>  soft_spi_rw_mode1(ADS1120_RDATA);<span class="hljs-comment">//read conversation data</span><span class="hljs-comment">//while(ADS1120_RDY); //等待数据到来</span>result = soft_spi_rw_mode1(<span class="hljs-number">0x00</span>);result = (result &lt;&lt; <span class="hljs-number">8</span>) | soft_spi_rw_mode1(<span class="hljs-number">0x00</span>);<span class="hljs-comment">/* sign extend data */</span>  <span class="hljs-keyword">if</span> (result &amp; <span class="hljs-number">0x8000</span>)result |= <span class="hljs-number">0xffff0000</span>;<span class="hljs-comment">//result = (~result) &amp; 0x7fff;</span><span class="hljs-comment">//uart1_send_byte(result &gt;&gt; 8);</span><span class="hljs-comment">//uart1_send_byte(result);</span>Delay1us();ADS1120_CS = <span class="hljs-number">1</span>;  <span class="hljs-keyword">return</span> result;&#125;<span class="hljs-comment">/**</span><span class="hljs-comment">  * @brief  ads1120获取温度</span><span class="hljs-comment">  * @param  temperature：获取的温度值</span><span class="hljs-comment">  * @param  sensor_type: 传感器类型</span><span class="hljs-comment">  * @retval None</span><span class="hljs-comment">  */</span><span class="hljs-type">void</span> <span class="hljs-title function_">ads1120_get_temperature</span><span class="hljs-params">(<span class="hljs-type">float</span>* temperature, sensor_e sensor_type)</span>&#123;<span class="hljs-type">long</span> value = <span class="hljs-number">0</span>;<span class="hljs-type">float</span> voltage = <span class="hljs-number">0.0f</span>;value = ads1120_rd_data();<span class="hljs-keyword">switch</span> (sensor_type)&#123;<span class="hljs-keyword">case</span> PT100:&#123;<span class="hljs-comment">/* PT100 */</span>voltage = (<span class="hljs-type">float</span>)(value * <span class="hljs-number">1.65f</span> / <span class="hljs-number">8</span> / <span class="hljs-number">32768</span>);*temperature = (voltage * <span class="hljs-number">2000</span> - <span class="hljs-number">100</span>)/<span class="hljs-number">0.385f</span>;<span class="hljs-comment">//IDAC_500uA, PT100每升高1℃，阻值增加0.385 ohm</span><span class="hljs-keyword">break</span>;&#125;<span class="hljs-keyword">case</span> K_TYPE:&#123;<span class="hljs-comment">/* K-type thermocouple */</span><span class="hljs-comment">//uart1_send_byte(calibration_value &gt;&gt; 8);</span><span class="hljs-comment">//uart1_send_byte(calibration_value);</span>voltage = (<span class="hljs-type">float</span>)(value * <span class="hljs-number">62.5</span> / <span class="hljs-number">32</span>  + cold_compensation); <span class="hljs-comment">//voltage=value*2.048f/32/32768*1000000;转换为uV</span>*temperature = (<span class="hljs-type">float</span>)(voltage / <span class="hljs-number">41.0</span>);<span class="hljs-comment">//K-type赛贝克系数：41℃/uV</span><span class="hljs-keyword">break</span>;&#125;<span class="hljs-keyword">case</span> INTER:&#123;<span class="hljs-comment">/* ads1120 internal temperature sensor 14bit left-data */</span>value = (value &gt;&gt; <span class="hljs-number">2</span>) &amp; <span class="hljs-number">0x3fff</span>;<span class="hljs-keyword">if</span>(value &amp; <span class="hljs-number">0x2000</span>) <span class="hljs-comment">//negative temp</span>&#123;value = (~(value - <span class="hljs-number">1</span>))&amp;<span class="hljs-number">0x1fff</span>;*temperature =(<span class="hljs-type">float</span>)(value * (<span class="hljs-number">-0.03125f</span>));&#125;<span class="hljs-keyword">else</span>&#123;*temperature =(<span class="hljs-type">float</span>)(value * <span class="hljs-number">0.03125f</span>);<span class="hljs-comment">//postive temp</span>&#125;<span class="hljs-keyword">break</span>;&#125;<span class="hljs-keyword">default</span>: <span class="hljs-keyword">break</span>;&#125;<span class="hljs-keyword">return</span>;&#125;<span class="hljs-comment">/**</span><span class="hljs-comment">  * @brief  ads1120平均温度</span><span class="hljs-comment">  * @param  temperature：温度平均值</span><span class="hljs-comment">  * @param  sensor_type: 传感器类型</span><span class="hljs-comment">  * @retval None</span><span class="hljs-comment">  */</span><span class="hljs-type">void</span> <span class="hljs-title function_">ads1120_get_average_temp</span><span class="hljs-params">(<span class="hljs-type">float</span>* temperature, sensor_e sensor_type)</span>&#123;<span class="hljs-type">uint8_t</span> i;<span class="hljs-type">float</span> sum = <span class="hljs-number">0.0</span>; <span class="hljs-comment">//温度和</span><span class="hljs-keyword">for</span>(i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">8</span>; i++)&#123;ads1120_get_temperature(temperature, sensor_type);sum += *temperature;&#125;*temperature = (<span class="hljs-type">float</span>)(sum / <span class="hljs-number">8.0</span>);sum = <span class="hljs-number">0.0</span>;&#125;<span class="hljs-comment">/**</span><span class="hljs-comment">  * @brief  ads1120 K型热电偶冷端补偿</span><span class="hljs-comment">  * @param  voltage：获取冷端电压值的指针（单位：uV）</span><span class="hljs-comment">  * @retval None</span><span class="hljs-comment">  */</span><span class="hljs-type">void</span> <span class="hljs-title function_">ads1120_thermocouple_compensation</span><span class="hljs-params">(<span class="hljs-type">int</span>* voltage)</span>&#123;<span class="hljs-comment">/* ads1120 register configuration */</span><span class="hljs-type">uint8_t</span> config[<span class="hljs-number">4</span>] =&#123;<span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>&#125;; <span class="hljs-type">long</span> result = <span class="hljs-number">0</span>;<span class="hljs-type">float</span> temp = <span class="hljs-number">0</span>;<span class="hljs-comment">/* ads1120 internal temperature sensor configuration */</span>config[<span class="hljs-number">0</span>] = <span class="hljs-number">0</span>; <span class="hljs-comment">/* register 0 configuration */</span>config[<span class="hljs-number">1</span>] = ADS1120_TEMP_SENSOR; <span class="hljs-comment">/* register 1 configuration */</span>config[<span class="hljs-number">2</span>] = <span class="hljs-number">0</span>; <span class="hljs-comment">/* register 2 configuration */</span>config[<span class="hljs-number">3</span>] = <span class="hljs-number">0</span>; <span class="hljs-comment">/* register 3 configuration */</span>ADS1120_CS = <span class="hljs-number">0</span>;soft_spi_rw_mode1(ADS1120_RESET); <span class="hljs-comment">// reset ads1120</span>Delay100ms();ads1120_wr_reg(ADS1120_0_REGISTER, <span class="hljs-number">0x04</span>, config); <span class="hljs-comment">//config ads1120 register</span>Delay100ms();soft_spi_rw_mode1(ADS1120_START); <span class="hljs-comment">//start conversation</span><span class="hljs-comment">//  soft_spi_rw_mode1(ADS1120_RDATA);//read conversation data</span><span class="hljs-keyword">while</span>(ADS1120_RDY); <span class="hljs-comment">//等待数据到来</span>result = soft_spi_rw_mode1(<span class="hljs-number">0x00</span>);result = (result &lt;&lt; <span class="hljs-number">8</span>) | soft_spi_rw_mode1(<span class="hljs-number">0x00</span>);ADS1120_CS = <span class="hljs-number">1</span>;result = (result &gt;&gt; <span class="hljs-number">2</span>) &amp; <span class="hljs-number">0x3fff</span>; <span class="hljs-comment">//14bit postive temp</span><span class="hljs-keyword">if</span>(result &amp; <span class="hljs-number">0x2000</span>) <span class="hljs-comment">//negative temp</span>&#123;result = (~(result - <span class="hljs-number">1</span>))&amp;<span class="hljs-number">0x1fff</span>;temp =(<span class="hljs-type">float</span>)(result * (<span class="hljs-number">-0.03125f</span>));&#125;<span class="hljs-keyword">else</span> <span class="hljs-comment">//postive temp</span>&#123;temp =(<span class="hljs-type">float</span>)(result * <span class="hljs-number">0.03125f</span>);&#125;<span class="hljs-comment">/* 根据表格数据得出电压与温度关系式：https://srdata.nist.gov/its90/main/its90_main_page.html */</span>*voltage = (<span class="hljs-type">int</span>)(<span class="hljs-number">40.309</span> * temp - <span class="hljs-number">5.3031</span>); <span class="hljs-comment">//NIST- its90 温度与电压关系式（单位：uV）</span><span class="hljs-keyword">return</span>;&#125;</code></pre></div><div class="code-wrapper"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;STC12C5A60S2.H&gt;</span></span><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;ads1120.h&quot;</span></span><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;bsp_uart.h&quot;</span></span><span class="hljs-type">float</span> temperature = <span class="hljs-number">0.0f</span>;<span class="hljs-type">void</span> <span class="hljs-title function_">gpio_init</span><span class="hljs-params">(<span class="hljs-type">void</span>)</span>&#123;<span class="hljs-comment">//M1  M0</span><span class="hljs-comment">//0   0     准双向口</span><span class="hljs-comment">//0   1     推挽输出</span><span class="hljs-comment">//1   0     高阻输入</span><span class="hljs-comment">//1   1     开漏</span><span class="hljs-comment">/* SPI引脚设置 */</span>P1M1 = <span class="hljs-number">0x42</span>;<span class="hljs-comment">//M1 0100 0010</span>P1M0 = <span class="hljs-number">0xb0</span>;<span class="hljs-comment">//M0 1011 0000</span>&#125;<span class="hljs-type">void</span> <span class="hljs-title function_">Delay1000ms</span><span class="hljs-params">()</span><span class="hljs-comment">//@11.0592MHz</span>&#123;<span class="hljs-type">unsigned</span> <span class="hljs-type">char</span> i, j, k;i = <span class="hljs-number">43</span>;j = <span class="hljs-number">6</span>;k = <span class="hljs-number">203</span>;<span class="hljs-keyword">do</span>&#123;<span class="hljs-keyword">do</span>&#123;<span class="hljs-keyword">while</span> (--k);&#125; <span class="hljs-keyword">while</span> (--j);&#125; <span class="hljs-keyword">while</span> (--i);&#125;<span class="hljs-type">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(<span class="hljs-type">void</span>)</span>&#123;uart1_init();gpio_init();    spi_init();<span class="hljs-comment">//ads1120_confiuration(INTER); //芯片内部温度</span>ads1120_confiuration(PT100); <span class="hljs-comment">//PT100</span><span class="hljs-comment">//ads1120_confiuration(K_TYPE); //K-type热电偶</span><span class="hljs-comment">//ads1120_thermocouple_compensation(&amp;cold_compensation);//热电偶冷端补偿</span><span class="hljs-keyword">while</span>(<span class="hljs-number">1</span>)&#123;<span class="hljs-comment">//ads1120_get_average_temp(&amp;temperature, INTER);</span>ads1120_get_average_temp(&amp;temperature, PT100);<span class="hljs-comment">//ads1120_get_average_temp(&amp;temperature, K_TYPE);</span><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;temperature is %.3f℃\r\n&quot;</span>, temperature);Delay1000ms();&#125;&#125;</code></pre></div><p>效果：</p><p>内部温度传感器测量效果：</p><figure><imgsrc="https://gitee.com/kayoungzhang/picgo_res/raw/master/img/image-20230511200919371.png"alt="image-20230511200919371" /><figcaption aria-hidden="true">image-20230511200919371</figcaption></figure><p>外接PT100传感器测量的温度效果：</p><figure><imgsrc="https://gitee.com/kayoungzhang/picgo_res/raw/master/img/image-20230511201148501.png"alt="image-20230511201148501" /><figcaption aria-hidden="true">image-20230511201148501</figcaption></figure><p>工程代码：https://gitee.com/kayoungzhang/my_codehub/raw/master/ads1120/ads1120.zip</p><h3 id="参考链接">参考链接</h3><p><ahref="https://www.ti.com/product/ADS1120?keyMatch=ADS1120&amp;tisearch=search-everything&amp;usecase=GPN#hardware-development">ads1120datasheet</a></p><p>https://www.ti.com/lit/zip/sbac227</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;前面介绍了ds18b20单总线测量温度，一般应用在环境温度的测量，但开发过程中，针对高低温，宽范围的温度测量，此时用到最多的传感器一般是热电阻(RTDs)和热电偶，如PT100系列热电阻，K-type热电偶。在电路上通过放大器将测量的小信号放大输出，就可以得到测量的温度数据</summary>
      
    
    
    
    <category term="单片机" scheme="http://example.com/categories/%E5%8D%95%E7%89%87%E6%9C%BA/"/>
    
    
    <category term="RTD" scheme="http://example.com/tags/RTD/"/>
    
    <category term="热电偶" scheme="http://example.com/tags/%E7%83%AD%E7%94%B5%E5%81%B6/"/>
    
  </entry>
  
  <entry>
    <title>ds1302实时时钟芯片的开发</title>
    <link href="http://example.com/2023/05/05/ds1302%E5%AE%9E%E6%97%B6%E6%97%B6%E9%92%9F%E8%8A%AF%E7%89%87%E7%9A%84%E5%BC%80%E5%8F%91/"/>
    <id>http://example.com/2023/05/05/ds1302%E5%AE%9E%E6%97%B6%E6%97%B6%E9%92%9F%E8%8A%AF%E7%89%87%E7%9A%84%E5%BC%80%E5%8F%91/</id>
    <published>2023-05-05T10:02:28.000Z</published>
    <updated>2023-05-24T10:18:09.948Z</updated>
    
    <content type="html"><![CDATA[<p>DS1302芯片作为实时时钟使用，在开发过程中，使用比较频繁，时钟芯片PCF8563也有使用，这里主要写写DS1302这款芯片的开发设计。</p><h3 id="特点">特点</h3><ul><li>电压：2.0V ~ 5.5V</li><li>提供年、月、日、时、分、秒、星期等信息</li><li>31 字节数据静态RAM</li><li>通过简单的串行口与单片机进行通信</li></ul><h3 id="应用电路">应用电路</h3><p><img src="https://gitee.com/kayoungzhang/picgo_res/raw/master/img/image-20230505182519782.png" alt="image-20230505182519782" style="zoom:67%;" /></p><table><thead><tr class="header"><th>引脚</th><th>功能</th></tr></thead><tbody><tr class="odd"><td>Vcc2</td><td>主电源</td></tr><tr class="even"><td>Vcc1</td><td>备用电源，如纽扣电池CR2032</td></tr><tr class="odd"><td>X1、X2</td><td>外接32.768khz晶振</td></tr><tr class="even"><td>CE</td><td>控制信号</td></tr><tr class="odd"><td>I/O</td><td>串行接口数据线</td></tr><tr class="even"><td>SCLK</td><td>串行接口时钟线</td></tr></tbody></table><h3 id="指令寄存器">指令寄存器</h3><p><img src="https://gitee.com/kayoungzhang/picgo_res/raw/master/img/image-20230505184339517.png" alt="image-20230505184339517" style="zoom: 67%;" /></p><p><img src="https://gitee.com/kayoungzhang/picgo_res/raw/master/img/image-20230505185956240.png" alt="image-20230505185956240" style="zoom:67%;" /></p><h2 id="bcd码">BCD码</h2><p>BCD码（Binary CodedDecimal‎），用4位二进制数来表示1位十进制数，所以4位二进制表示的数字最大到<strong>9</strong> 。例：0001 0011表示13，1000 0101表示85，00011010不合法。在十六进制中的体现：0x13表示13，0x85表示85，0x1A不合法</p><p><code>BCD码转十进制：DEC=BCD/16*10+BCD%16; （2位BCD）</code></p><p><code>十进制转BCD码：BCD=DEC/10*16+DEC%10; （2位BCD）</code></p><p>DS1302写数据时需要将十进制数据转为BCD码的形式，读数据时需要将BCD码转为十进制数据形式。</p><h2 id="通信时序">通信时序</h2><p><img src="https://gitee.com/kayoungzhang/picgo_res/raw/master/img/image-20230505194024970.png" alt="image-20230505194024970" style="zoom:67%;" /></p><p><strong>注意：</strong>读时序时，发送完命令字的MSB位后，马上就读出数据，所以每个脉冲提前半拍。</p><h3 id="程序实现">程序实现</h3><div class="code-wrapper"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">ifndef</span> DS1302_H</span><span class="hljs-meta">#<span class="hljs-keyword">define</span> DS1302_H</span><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;STC12C5A60S2.H&gt;</span></span><span class="hljs-keyword">typedef</span> <span class="hljs-type">unsigned</span> <span class="hljs-type">char</span> <span class="hljs-type">uint8_t</span>;<span class="hljs-comment">/* pin definition */</span><span class="hljs-meta">#<span class="hljs-keyword">define</span> DS1302_IO  P34</span><span class="hljs-meta">#<span class="hljs-keyword">define</span> DS1302_SCLKP36</span><span class="hljs-meta">#<span class="hljs-keyword">define</span> DS1302_CE  P35</span><span class="hljs-comment">/* register of rtc read address command */</span><span class="hljs-meta">#<span class="hljs-keyword">define</span> REG_SECOND_READ   0x81</span><span class="hljs-meta">#<span class="hljs-keyword">define</span> REG_MINUTE_READ   0x83</span><span class="hljs-meta">#<span class="hljs-keyword">define</span> REG_HOUR_READ     0x85</span><span class="hljs-meta">#<span class="hljs-keyword">define</span> REG_DATE_READ     0x87</span><span class="hljs-meta">#<span class="hljs-keyword">define</span> REG_MONTH_READ    0x89</span><span class="hljs-meta">#<span class="hljs-keyword">define</span> REG_DAY_READ      0x8b  <span class="hljs-comment">//week</span></span><span class="hljs-meta">#<span class="hljs-keyword">define</span> REG_YEAR_READ     0x8d</span><span class="hljs-comment">/* register of rtc write address command */</span><span class="hljs-meta">#<span class="hljs-keyword">define</span> REG_SECOND_WRITE   0x80</span><span class="hljs-meta">#<span class="hljs-keyword">define</span> REG_MINUTE_WRITE   0x82</span><span class="hljs-meta">#<span class="hljs-keyword">define</span> REG_HOUR_WRITE     0x84</span><span class="hljs-meta">#<span class="hljs-keyword">define</span> REG_DATE_WRITE     0x86</span><span class="hljs-meta">#<span class="hljs-keyword">define</span> REG_MONTH_WRITE    0x88</span><span class="hljs-meta">#<span class="hljs-keyword">define</span> REG_DAY_WRITE      0x8a</span><span class="hljs-meta">#<span class="hljs-keyword">define</span> REG_YEAR_WRITE     0x8c</span><span class="hljs-comment">/* write protect */</span><span class="hljs-meta">#<span class="hljs-keyword">define</span> REG_WR_PROTECT_READ    0x8f</span><span class="hljs-meta">#<span class="hljs-keyword">define</span> REG_WR_PROTECT_WRITE   0x8e</span><span class="hljs-meta">#<span class="hljs-keyword">define</span> WRITE_PROTECT_ENABLE   0x80</span><span class="hljs-meta">#<span class="hljs-keyword">define</span> WRITE_PROTECT_DISABLE  0x00</span><span class="hljs-comment">/* 年 月 日 时 分 秒 周 */</span><span class="hljs-keyword">typedef</span> <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">tm</span></span><span class="hljs-class">&#123;</span><span class="hljs-type">unsigned</span> <span class="hljs-type">int</span> year; <span class="hljs-comment">//0~99</span><span class="hljs-type">unsigned</span> <span class="hljs-type">int</span> month;<span class="hljs-type">unsigned</span> <span class="hljs-type">int</span> date;<span class="hljs-type">unsigned</span> <span class="hljs-type">int</span> hour;<span class="hljs-type">unsigned</span> <span class="hljs-type">int</span> minute;<span class="hljs-type">unsigned</span> <span class="hljs-type">int</span> second;<span class="hljs-type">unsigned</span> <span class="hljs-type">int</span> day;&#125;<span class="hljs-type">tm_t</span>;<span class="hljs-keyword">extern</span> <span class="hljs-type">void</span> <span class="hljs-title function_">ds1302_init</span><span class="hljs-params">(<span class="hljs-type">void</span>)</span>;<span class="hljs-keyword">extern</span> <span class="hljs-type">void</span> <span class="hljs-title function_">ds1302_read_time</span><span class="hljs-params">(<span class="hljs-type">tm_t</span>* p_tm)</span>;<span class="hljs-keyword">extern</span> <span class="hljs-type">void</span> <span class="hljs-title function_">ds1302_write_time</span><span class="hljs-params">(<span class="hljs-type">tm_t</span>* p_tm)</span>;<span class="hljs-meta">#<span class="hljs-keyword">endif</span></span></code></pre></div><div class="code-wrapper"><pre><code class="hljs c"><span class="hljs-comment">/**</span><span class="hljs-comment">  ************************************************</span><span class="hljs-comment">  * @file     ds1302.c</span><span class="hljs-comment">  * @author  Kayoung</span><span class="hljs-comment">  * @version  V1.0</span><span class="hljs-comment">  * @date     20220327</span><span class="hljs-comment">  * @brief    ds1302时钟driver</span><span class="hljs-comment">  **********************************************</span><span class="hljs-comment">  */</span> <span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;ds1302.h&quot;</span></span><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;bsp_uart.h&quot;</span></span><span class="hljs-comment">/* BCD转十进制DEC： DEC = BCD/16*10 + BCD%16;(2位BCD)</span><span class="hljs-comment">   十进制DEC转BCD： BCD = DEC/10*16 + DEC%10;(2位BCD)</span><span class="hljs-comment">*/</span><span class="hljs-comment">/**</span><span class="hljs-comment">  * @brief   ds1302初始化</span><span class="hljs-comment">  * @param   None</span><span class="hljs-comment">  * @retval  None</span><span class="hljs-comment">  */</span><span class="hljs-type">void</span> <span class="hljs-title function_">ds1302_init</span><span class="hljs-params">(<span class="hljs-type">void</span>)</span>&#123;DS1302_SCLK = <span class="hljs-number">0</span>;DS1302_CE = <span class="hljs-number">0</span>;&#125;<span class="hljs-comment">/**</span><span class="hljs-comment">  * @brief 向ds1302写入一个字节</span><span class="hljs-comment">  * @param command: 命令字</span><span class="hljs-comment">  * @param   wr_data: 待写入的字节</span><span class="hljs-comment">  * @retval  None</span><span class="hljs-comment">  */</span><span class="hljs-type">static</span> <span class="hljs-type">void</span> <span class="hljs-title function_">ds1302_wrbyte</span><span class="hljs-params">(<span class="hljs-type">uint8_t</span> command, <span class="hljs-type">uint8_t</span> wr_data)</span>&#123;<span class="hljs-type">uint8_t</span> i; <span class="hljs-comment">//循环变量</span>DS1302_CE = <span class="hljs-number">1</span>;<span class="hljs-comment">/* 先写入command */</span><span class="hljs-keyword">for</span>(i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">8</span>; i++)<span class="hljs-comment">//LSB to MSB</span>&#123;DS1302_IO = command &amp; (<span class="hljs-number">0x01</span>&lt;&lt;i);DS1302_SCLK = <span class="hljs-number">1</span>; <span class="hljs-comment">//51单片机速率慢，此处不需要延时，上升沿写入命令</span>DS1302_SCLK = <span class="hljs-number">0</span>;&#125;<span class="hljs-comment">/* 再写入data */</span><span class="hljs-keyword">for</span>(i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">8</span>; i++)<span class="hljs-comment">//LSB to MSB</span>&#123;DS1302_IO = wr_data &amp; (<span class="hljs-number">0x01</span>&lt;&lt;i);DS1302_SCLK = <span class="hljs-number">1</span>; <span class="hljs-comment">//51单片机速率慢，此处不需要延时,上升沿写入数据</span>DS1302_SCLK = <span class="hljs-number">0</span>;&#125;DS1302_CE = <span class="hljs-number">0</span>;&#125;<span class="hljs-comment">/**</span><span class="hljs-comment">  * @brief ds1302读出一个字节</span><span class="hljs-comment">  * @param command: 命令字</span><span class="hljs-comment">  * @retval  recv_byte: 接收的字节</span><span class="hljs-comment">  */</span><span class="hljs-type">static</span> <span class="hljs-type">uint8_t</span> <span class="hljs-title function_">ds1302_rdbyte</span><span class="hljs-params">(<span class="hljs-type">uint8_t</span> command)</span>&#123;<span class="hljs-type">uint8_t</span> recv_byte = <span class="hljs-number">0</span>;<span class="hljs-type">uint8_t</span> i;<span class="hljs-comment">//循环变量</span>DS1302_CE = <span class="hljs-number">1</span>;<span class="hljs-comment">/* 先发送命令 */</span><span class="hljs-keyword">for</span>(i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">8</span>; i++)<span class="hljs-comment">//LSB to MSB</span>&#123;DS1302_IO = command &amp; (<span class="hljs-number">0x01</span> &lt;&lt; i);DS1302_SCLK = <span class="hljs-number">0</span>;DS1302_SCLK = <span class="hljs-number">1</span>;<span class="hljs-comment">//上升沿写入命令</span>&#125;<span class="hljs-keyword">for</span>(i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">7</span>; i++)<span class="hljs-comment">//LSB to MSB</span>&#123;DS1302_SCLK = <span class="hljs-number">1</span>;<span class="hljs-comment">//下降沿读出数据</span>DS1302_SCLK = <span class="hljs-number">0</span>;<span class="hljs-keyword">if</span>(DS1302_IO)&#123;recv_byte |= (<span class="hljs-number">0x01</span> &lt;&lt; i);&#125;&#125;DS1302_CE = <span class="hljs-number">0</span>;DS1302_IO = <span class="hljs-number">0</span>;  <span class="hljs-comment">//解决读取时间是ff的问题</span><span class="hljs-keyword">return</span> recv_byte;&#125;<span class="hljs-comment">/**</span><span class="hljs-comment">  * @brief ds1302设置时间</span><span class="hljs-comment">  * @param p_tm: 时间结构体指针</span><span class="hljs-comment">  * @retval  None</span><span class="hljs-comment">  */</span><span class="hljs-type">void</span> <span class="hljs-title function_">ds1302_write_time</span><span class="hljs-params">(<span class="hljs-type">tm_t</span>* p_tm)</span>&#123;ds1302_wrbyte(REG_WR_PROTECT_WRITE, WRITE_PROTECT_DISABLE);<span class="hljs-comment">//关闭写保护</span><span class="hljs-comment">/* 十进制转BCD码 */</span>ds1302_wrbyte(REG_YEAR_WRITE, (p_tm-&gt;year / <span class="hljs-number">10</span> * <span class="hljs-number">16</span> + p_tm-&gt;year % <span class="hljs-number">10</span>));ds1302_wrbyte(REG_MONTH_WRITE, (p_tm-&gt;month / <span class="hljs-number">10</span> * <span class="hljs-number">16</span> + p_tm-&gt;month % <span class="hljs-number">10</span>));ds1302_wrbyte(REG_DATE_WRITE, (p_tm-&gt;date / <span class="hljs-number">10</span> * <span class="hljs-number">16</span> + p_tm-&gt;date % <span class="hljs-number">10</span>));ds1302_wrbyte(REG_HOUR_WRITE, (p_tm-&gt;hour / <span class="hljs-number">10</span> * <span class="hljs-number">16</span> + p_tm-&gt;hour % <span class="hljs-number">10</span>));ds1302_wrbyte(REG_MINUTE_WRITE, (p_tm-&gt;minute / <span class="hljs-number">10</span> * <span class="hljs-number">16</span> + p_tm-&gt;minute % <span class="hljs-number">10</span>));ds1302_wrbyte(REG_SECOND_WRITE, (p_tm-&gt;second / <span class="hljs-number">10</span> * <span class="hljs-number">16</span> + p_tm-&gt;second % <span class="hljs-number">10</span>));ds1302_wrbyte(REG_DAY_WRITE, (p_tm-&gt;day / <span class="hljs-number">10</span> * <span class="hljs-number">16</span> + p_tm-&gt;day % <span class="hljs-number">10</span>));ds1302_wrbyte(REG_WR_PROTECT_WRITE, WRITE_PROTECT_ENABLE);<span class="hljs-comment">//打开写保护</span>&#125;<span class="hljs-comment">/**</span><span class="hljs-comment">  * @brief ds1302读取时间</span><span class="hljs-comment">  * @param p_tm: 时间结构体指针</span><span class="hljs-comment">  * @retval  None</span><span class="hljs-comment">  */</span><span class="hljs-type">void</span> <span class="hljs-title function_">ds1302_read_time</span><span class="hljs-params">(<span class="hljs-type">tm_t</span>* p_tm)</span>&#123;<span class="hljs-type">unsigned</span> <span class="hljs-type">int</span> temp;<span class="hljs-comment">/* BCD码转十进制 */</span>temp = ds1302_rdbyte(REG_YEAR_READ);p_tm-&gt;year = temp / <span class="hljs-number">16</span> * <span class="hljs-number">10</span> + temp % <span class="hljs-number">16</span>;temp = ds1302_rdbyte(REG_MONTH_READ);p_tm-&gt;month = temp / <span class="hljs-number">16</span> * <span class="hljs-number">10</span> + temp % <span class="hljs-number">16</span>;temp = ds1302_rdbyte(REG_DATE_READ);p_tm-&gt;date = temp / <span class="hljs-number">16</span> * <span class="hljs-number">10</span> + temp % <span class="hljs-number">16</span>;temp = ds1302_rdbyte(REG_HOUR_READ);p_tm-&gt;hour = temp / <span class="hljs-number">16</span> * <span class="hljs-number">10</span> + temp % <span class="hljs-number">16</span>;temp = ds1302_rdbyte(REG_MINUTE_READ);p_tm-&gt;minute = temp / <span class="hljs-number">16</span> * <span class="hljs-number">10</span> + temp % <span class="hljs-number">16</span>;temp = ds1302_rdbyte(REG_SECOND_READ);p_tm-&gt;second = temp / <span class="hljs-number">16</span> * <span class="hljs-number">10</span> + temp % <span class="hljs-number">16</span>;temp = ds1302_rdbyte(REG_DAY_READ);p_tm-&gt;day = temp / <span class="hljs-number">16</span> * <span class="hljs-number">10</span> + temp % <span class="hljs-number">16</span>;<span class="hljs-comment">//printf(&quot;%#x&quot;, temp);</span>&#125;</code></pre></div><div class="code-wrapper"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;STC12C5A60S2.H&gt;</span></span><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;bsp_uart.h&quot;</span></span><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;ds1302.h&quot;</span></span><span class="hljs-comment">/* 初始化时间：2022年03月27日17时20分50秒周七，存储格式是用BCD码 */</span><span class="hljs-type">tm_t</span> default_time = &#123;<span class="hljs-number">22</span>,<span class="hljs-number">3</span>,<span class="hljs-number">27</span>,<span class="hljs-number">17</span>,<span class="hljs-number">20</span>,<span class="hljs-number">50</span>,<span class="hljs-number">7</span>&#125;;<span class="hljs-type">tm_t</span> tm; <span class="hljs-comment">//存储读取的时间</span><span class="hljs-type">void</span> <span class="hljs-title function_">Delay1000ms</span><span class="hljs-params">()</span><span class="hljs-comment">//@11.0592MHz</span>&#123;<span class="hljs-type">unsigned</span> <span class="hljs-type">char</span> i, j, k;i = <span class="hljs-number">43</span>;j = <span class="hljs-number">6</span>;k = <span class="hljs-number">203</span>;<span class="hljs-keyword">do</span>&#123;<span class="hljs-keyword">do</span>&#123;<span class="hljs-keyword">while</span> (--k);&#125; <span class="hljs-keyword">while</span> (--j);&#125; <span class="hljs-keyword">while</span> (--i);&#125;<span class="hljs-type">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(<span class="hljs-type">void</span>)</span>&#123;uart1_init();ds1302_init();<span class="hljs-comment">/* 设置时间 */</span>ds1302_write_time(&amp;default_time);<span class="hljs-keyword">while</span>(<span class="hljs-number">1</span>)&#123;<span class="hljs-comment">/* 读取时间 */</span>ds1302_read_time(&amp;tm);<span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d-%d-%d &quot;</span>, (tm.year + <span class="hljs-number">2000</span>), tm.month, tm.date);<span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d:%d:%d 周%d&quot;</span>,tm.hour, tm.minute, tm.second, tm.day);<span class="hljs-comment">//不能放到同一个printf中，否则周期乱码</span>Delay1000ms();&#125;&#125;</code></pre></div><p>效果图：</p><p><img src="https://gitee.com/kayoungzhang/picgo_res/raw/master/img/image-20230508203331455.png" alt="image-20230508203331455" style="zoom:80%;" /></p><p>工程代码：<ahref="https://gitee.com/kayoungzhang/my_codehub.git">ds1302</a></p><h3 id="参考链接">参考链接</h3><p>https://wendy.blog.csdn.net/article/details/124249444</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;DS1302芯片作为实时时钟使用，在开发过程中，使用比较频繁，时钟芯片PCF8563也有使用，这里主要写写DS1302这款芯片的开发设计。&lt;/p&gt;
&lt;h3 id=&quot;特点&quot;&gt;特点&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;电压：2.0V ~ 5.5V&lt;/li&gt;
&lt;li&gt;提供年、月、</summary>
      
    
    
    
    <category term="单片机" scheme="http://example.com/categories/%E5%8D%95%E7%89%87%E6%9C%BA/"/>
    
    
    <category term="ds1302" scheme="http://example.com/tags/ds1302/"/>
    
  </entry>
  
  <entry>
    <title>sht3x温湿度传感器的开发设计</title>
    <link href="http://example.com/2023/04/30/sht3x%E6%B8%A9%E6%B9%BF%E5%BA%A6%E4%BC%A0%E6%84%9F%E5%99%A8%E7%9A%84%E5%BC%80%E5%8F%91%E8%AE%BE%E8%AE%A1/"/>
    <id>http://example.com/2023/04/30/sht3x%E6%B8%A9%E6%B9%BF%E5%BA%A6%E4%BC%A0%E6%84%9F%E5%99%A8%E7%9A%84%E5%BC%80%E5%8F%91%E8%AE%BE%E8%AE%A1/</id>
    <published>2023-04-30T10:32:38.000Z</published>
    <updated>2023-05-11T10:10:43.752Z</updated>
    
    <content type="html"><![CDATA[<p>国内市场碰到的温湿度传感器一般都采用的是瑞士公司Sensirion生产的，像SHT2x 和 SHT3x和 SHTCx和SHT4x等系列温湿度传感器。下面介绍一下其经典的数字温湿度传感器<ahref="https://sensirion.com/cn/products/product-catalog/SHT31-DIS-B">SHT31-DIS-B</a>。</p><h3 id="特点">特点</h3><ul><li><p>电源电压：2.4 - 5.5V</p></li><li><p>相对湿度范围：0 - 100%RH 相对湿度精度：2%RH</p></li><li><p>工作温度范围：-40 - 125°C 温度精度：0.2°C</p></li><li><p>接口：I²C</p></li><li><p>尺寸 (长x宽x高)：2.5 x 2.5 x 0.9 mm³</p></li></ul><h3 id="引脚定义及其典型线路应用">引脚定义及其典型线路应用</h3><p><img src="https://gitee.com/kayoungzhang/picgo_res/raw/master/img/image-20230429191808155.png" alt="image-20230429191808155" style="zoom: 67%;" /><img src="https://gitee.com/kayoungzhang/picgo_res/raw/master/img/image-20230430092336215.png" alt="image-20230430092336215" style="zoom:67%;" /></p><h3 id="获取芯片序列号">获取芯片序列号</h3><p><img src="https://gitee.com/kayoungzhang/picgo_res/raw/master/img/image-20230429195521345.png" alt="image-20230429195521345" style="zoom: 67%;" /></p><h3 id="单次采集模式时序">单次采集模式时序</h3><p><img src="https://gitee.com/kayoungzhang/picgo_res/raw/master/img/image-20230429194522708.png" alt="image-20230429194522708" style="zoom: 80%;" /></p><h3 id="周期性采集模式时序">周期性采集模式时序</h3><p><img src="https://gitee.com/kayoungzhang/picgo_res/raw/master/img/image-20230430185828051.png" alt="image-20230430185828051" style="zoom:67%;" /></p><p><strong>注意</strong>：灰色块是传感器发送。</p><h3 id="计算公式">计算公式</h3><p><img src="https://gitee.com/kayoungzhang/picgo_res/raw/master/img/image-20230429235908382.png" alt="image-20230429235908382" style="zoom:67%;" /></p><h3 id="代码实现">代码实现</h3><ul><li>I2C代码部分：</li></ul><div class="code-wrapper"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">ifndef</span> __BSP_I2C_H__</span><span class="hljs-meta">#<span class="hljs-keyword">define</span> __BSP_I2C_H__</span><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;STC12C5A60S2.H&gt;</span></span><span class="hljs-keyword">typedef</span> <span class="hljs-type">unsigned</span> <span class="hljs-type">char</span> <span class="hljs-type">uint8_t</span>;<span class="hljs-keyword">typedef</span> <span class="hljs-type">unsigned</span> <span class="hljs-type">short</span> <span class="hljs-type">uint16_t</span>;<span class="hljs-comment">/* 引脚定义 */</span><span class="hljs-meta">#<span class="hljs-keyword">define</span> I2C_SCLP23</span><span class="hljs-meta">#<span class="hljs-keyword">define</span> I2C_SDAP24</span><span class="hljs-comment">/* I2C acknowledge status */</span><span class="hljs-keyword">typedef</span> <span class="hljs-class"><span class="hljs-keyword">enum</span>&#123;</span>  ACK  = <span class="hljs-number">0</span>,  NACK = <span class="hljs-number">1</span>,&#125;ack_e;<span class="hljs-comment">/* 函数声明 */</span><span class="hljs-keyword">extern</span> <span class="hljs-type">void</span> <span class="hljs-title function_">i2c_init</span><span class="hljs-params">(<span class="hljs-type">void</span>)</span>;<span class="hljs-keyword">extern</span> <span class="hljs-type">void</span> <span class="hljs-title function_">i2c_start</span><span class="hljs-params">(<span class="hljs-type">void</span>)</span>;<span class="hljs-keyword">extern</span> <span class="hljs-type">void</span> <span class="hljs-title function_">i2c_stop</span><span class="hljs-params">(<span class="hljs-type">void</span>)</span>;<span class="hljs-keyword">extern</span> <span class="hljs-type">void</span> <span class="hljs-title function_">i2c_delay</span> <span class="hljs-params">(<span class="hljs-type">uint8_t</span> t)</span>;<span class="hljs-keyword">extern</span> <span class="hljs-type">void</span> <span class="hljs-title function_">i2c_rd_byte</span><span class="hljs-params">(<span class="hljs-type">uint8_t</span>* recv_byte, ack_e ack_status)</span>;<span class="hljs-keyword">extern</span> ack_e <span class="hljs-title function_">i2c_wr_byte</span><span class="hljs-params">(<span class="hljs-type">uint8_t</span> write_byte)</span>;<span class="hljs-keyword">extern</span> <span class="hljs-type">uint8_t</span> <span class="hljs-title function_">crc8_calc</span><span class="hljs-params">(<span class="hljs-type">uint8_t</span> *crcdata, <span class="hljs-type">uint8_t</span> size)</span>;<span class="hljs-meta">#<span class="hljs-keyword">endif</span>  <span class="hljs-comment">/*END OF FILE*/</span></span></code></pre></div><div class="code-wrapper"><pre><code class="hljs c"><span class="hljs-comment">/**</span><span class="hljs-comment"> ******************************************************************************</span><span class="hljs-comment"> * @file    bsp_i2c.c</span><span class="hljs-comment"> * @author  Kayoung</span><span class="hljs-comment"> * @version V1.1</span><span class="hljs-comment"> * @date    20201106</span><span class="hljs-comment"> * @brief   gpio软件模拟i2c</span><span class="hljs-comment"> ******************************************************************************</span><span class="hljs-comment"> * @attention </span><span class="hljs-comment"> ******************************************************************************</span><span class="hljs-comment"> */</span> <span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;bsp_i2c.h&quot;</span></span><span class="hljs-comment">/* Generator polynomial for CRC8 */</span><span class="hljs-meta">#<span class="hljs-keyword">define</span> POLYNOMIAL  0x31 <span class="hljs-comment">// P(x) = x^8 + x^5 + x^4 + 1 = 00110001 ，省略了最高位1</span></span><span class="hljs-comment">/**</span><span class="hljs-comment">  * @briefcrc8计算</span><span class="hljs-comment">  * @paramcrcdata：数据指针</span><span class="hljs-comment">  * @param  size：数据长度</span><span class="hljs-comment">  * @retvalNone</span><span class="hljs-comment">  */</span><span class="hljs-type">uint8_t</span> <span class="hljs-title function_">crc8_calc</span><span class="hljs-params">(<span class="hljs-type">uint8_t</span> *crcdata, <span class="hljs-type">uint8_t</span> size)</span>&#123;<span class="hljs-type">uint8_t</span> Bit;        <span class="hljs-comment">// bit mask</span><span class="hljs-type">uint8_t</span> crc = <span class="hljs-number">0xFF</span>; <span class="hljs-comment">// calculated checksum</span><span class="hljs-type">uint8_t</span> byteCtr;    <span class="hljs-comment">// byte counter</span>    <span class="hljs-comment">// calculates 8-Bit checksum with given polynomial </span>  <span class="hljs-keyword">for</span>(byteCtr = <span class="hljs-number">0</span>; byteCtr &lt; size; byteCtr++)  &#123;    crc ^= (crcdata[byteCtr]);    <span class="hljs-keyword">for</span>(Bit = <span class="hljs-number">8</span>; Bit &gt; <span class="hljs-number">0</span>; --Bit)    &#123;      <span class="hljs-keyword">if</span>(crc &amp; <span class="hljs-number">0x80</span>) crc = (crc &lt;&lt; <span class="hljs-number">1</span>) ^ POLYNOMIAL;      <span class="hljs-keyword">else</span>           crc = (crc &lt;&lt; <span class="hljs-number">1</span>);    &#125;  &#125;<span class="hljs-keyword">return</span> crc;&#125;<span class="hljs-type">void</span> <span class="hljs-title function_">i2c_delay</span> <span class="hljs-params">(<span class="hljs-type">uint8_t</span> t)</span>&#123;<span class="hljs-keyword">while</span>(t--);&#125;<span class="hljs-comment">/**</span><span class="hljs-comment"> * @brief  i2c start.</span><span class="hljs-comment"> * @param  None.</span><span class="hljs-comment"> * @retval None.</span><span class="hljs-comment"> */</span><span class="hljs-type">void</span> <span class="hljs-title function_">i2c_init</span><span class="hljs-params">(<span class="hljs-type">void</span>)</span> &#123;I2C_SDA = <span class="hljs-number">1</span>; I2C_SCL = <span class="hljs-number">1</span>;&#125;<span class="hljs-comment">/**</span><span class="hljs-comment"> * @brief  i2c start. I2C_SCL、I2C_SDA同为高，I2C_SDA跳变成低之后，I2C_SCL跳变成低</span><span class="hljs-comment"> * @param  None.</span><span class="hljs-comment"> * @retval None.</span><span class="hljs-comment"> */</span><span class="hljs-type">void</span> <span class="hljs-title function_">i2c_start</span><span class="hljs-params">(<span class="hljs-type">void</span>)</span>&#123;  I2C_SDA = <span class="hljs-number">1</span>;  I2C_SCL = <span class="hljs-number">1</span>;  i2c_delay(<span class="hljs-number">10</span>);  I2C_SDA = <span class="hljs-number">0</span>;  i2c_delay(<span class="hljs-number">10</span>);  I2C_SCL = <span class="hljs-number">0</span>;  i2c_delay(<span class="hljs-number">10</span>);&#125;<span class="hljs-comment">/**</span><span class="hljs-comment"> * @brief  i2c stop.I2C_SCL、I2C_SDA同为低，I2C_SCL跳变成高之后，I2C_SDA跳变成高</span><span class="hljs-comment"> * @param  None.</span><span class="hljs-comment"> * @retval None.</span><span class="hljs-comment"> */</span><span class="hljs-type">void</span> <span class="hljs-title function_">i2c_stop</span><span class="hljs-params">(<span class="hljs-type">void</span>)</span>&#123;  I2C_SDA = <span class="hljs-number">0</span>;  I2C_SCL = <span class="hljs-number">0</span>;i2c_delay(<span class="hljs-number">10</span>);  I2C_SCL = <span class="hljs-number">1</span>;  i2c_delay(<span class="hljs-number">10</span>);  I2C_SDA = <span class="hljs-number">1</span>;  i2c_delay(<span class="hljs-number">10</span>);&#125;<span class="hljs-comment">/**</span><span class="hljs-comment"> * @brief  CPU从I2C总线设备发送8bit数据</span><span class="hljs-comment"> * @param  write_byte: 待写入的1字节数据</span><span class="hljs-comment"> * @retval res：(获取从机ack)ACK: 0, NACK：1.</span><span class="hljs-comment"> */</span>ack_e <span class="hljs-title function_">i2c_wr_byte</span><span class="hljs-params">(<span class="hljs-type">uint8_t</span> write_byte)</span>&#123;<span class="hljs-type">uint8_t</span> i;ack_e ack_status;I2C_SCL = <span class="hljs-number">0</span>;<span class="hljs-keyword">for</span> (i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">8</span>; i++)&#123;<span class="hljs-comment">//要发送8位，从最高位开始</span><span class="hljs-keyword">if</span> (write_byte &amp; <span class="hljs-number">0x80</span>) <span class="hljs-comment">// I2C_SDA = (write_byte &amp; 0x80) &gt;&gt; 7;</span>&#123;I2C_SDA = <span class="hljs-number">1</span>;&#125;<span class="hljs-keyword">else</span>&#123;I2C_SDA = <span class="hljs-number">0</span>;&#125;i2c_delay(<span class="hljs-number">10</span>);I2C_SCL = <span class="hljs-number">1</span>;<span class="hljs-comment">//输出I2C_SDA稳定后，拉高I2C_SCL给出上升沿，从机检测到后进行数据采样</span>i2c_delay(<span class="hljs-number">50</span>);I2C_SCL = <span class="hljs-number">0</span>;i2c_delay(<span class="hljs-number">10</span>);write_byte &lt;&lt;= <span class="hljs-number">1</span>;&#125;I2C_SDA = <span class="hljs-number">1</span>; <span class="hljs-comment">//释放总线</span>I2C_SCL = <span class="hljs-number">1</span>;i2c_delay(<span class="hljs-number">50</span>);ack_status = I2C_SDA;I2C_SCL=<span class="hljs-number">0</span>;<span class="hljs-keyword">return</span> ack_status;&#125;<span class="hljs-comment">/**</span><span class="hljs-comment"> * @brief  CPU从I2C总线设备读取8bit数据</span><span class="hljs-comment"> * @param  recv_byte : 读取的1字节数据指针.</span><span class="hljs-comment"> * @param  ack_status：主机发送ack（ACK: 0, NACK：1.）</span><span class="hljs-comment"> * @retval None.</span><span class="hljs-comment"> */</span><span class="hljs-type">void</span> <span class="hljs-title function_">i2c_rd_byte</span><span class="hljs-params">(<span class="hljs-type">uint8_t</span>* recv_byte, ack_e ack_status)</span>&#123;<span class="hljs-type">uint8_t</span> i;<span class="hljs-keyword">for</span> (i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">8</span>; i++) <span class="hljs-comment">//from MSB to LSB</span>&#123;*recv_byte &lt;&lt;= <span class="hljs-number">1</span>;I2C_SCL = <span class="hljs-number">1</span>;i2c_delay(<span class="hljs-number">30</span>);<span class="hljs-comment">//延时等待信号稳定</span><span class="hljs-keyword">if</span>(I2C_SDA == <span class="hljs-number">1</span>)(*recv_byte)++;I2C_SCL = <span class="hljs-number">0</span>; <span class="hljs-comment">//fall edge for next value</span>i2c_delay(<span class="hljs-number">10</span>);&#125;I2C_SDA = ack_status; i2c_delay(<span class="hljs-number">10</span>);I2C_SCL = <span class="hljs-number">1</span>;<span class="hljs-comment">//产生一个时钟</span>i2c_delay(<span class="hljs-number">50</span>);I2C_SCL = <span class="hljs-number">0</span>;i2c_delay(<span class="hljs-number">10</span>);I2C_SDA = <span class="hljs-number">1</span>;<span class="hljs-comment">//释放总线</span>&#125;</code></pre></div><ul><li>SHT31代码部分：</li></ul><div class="code-wrapper"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">ifndef</span> __SHT3X_H_</span><span class="hljs-meta">#<span class="hljs-keyword">define</span> __SHT3X_H_</span><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;STC12C5A60S2.H&gt;</span></span><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;bsp_i2c.h&quot;</span></span><span class="hljs-comment">/* only the 7 MSBs of the I2C Read/Write header constitute the I2C Address. */</span><span class="hljs-meta">#<span class="hljs-keyword">define</span> SHT3XADDR 0x44    <span class="hljs-comment">//default address             </span></span><span class="hljs-meta">#<span class="hljs-keyword">define</span> SHT3XWriteHeader SHT3XADDR&lt;&lt;1   <span class="hljs-comment">//7 MSBs + write bit 0</span></span><span class="hljs-meta">#<span class="hljs-keyword">define</span> SHT3XReadHeader  SHT3XWriteHeader|0x01   <span class="hljs-comment">//7 MSBs + read bit 1</span></span><span class="hljs-comment">/* Error codes */</span><span class="hljs-keyword">typedef</span> <span class="hljs-class"><span class="hljs-keyword">enum</span>&#123;</span>  NO_ERROR       = <span class="hljs-number">0x00</span>, <span class="hljs-comment">// no error</span>  ACK_ERROR      = <span class="hljs-number">0x01</span>, <span class="hljs-comment">// no acknowledgment error</span>  CHECKSUM_ERROR = <span class="hljs-number">0x02</span>, <span class="hljs-comment">// checksum mismatch error</span>  TIMEOUT_ERROR  = <span class="hljs-number">0x04</span>, <span class="hljs-comment">// timeout error</span>  PARM_ERROR     = <span class="hljs-number">0x80</span>, <span class="hljs-comment">// parameter out of range error</span>&#125;etError;<span class="hljs-comment">/* Sensor Commands */</span><span class="hljs-keyword">typedef</span> <span class="hljs-class"><span class="hljs-keyword">enum</span>&#123;</span>  CMD_READ_SERIALNBR  = <span class="hljs-number">0x3780</span>, <span class="hljs-comment">// read serial number</span>  CMD_READ_STATUS     = <span class="hljs-number">0xF32D</span>, <span class="hljs-comment">// read status register</span>  CMD_CLEAR_STATUS    = <span class="hljs-number">0x3041</span>, <span class="hljs-comment">// clear status register</span>  CMD_HEATER_ENABLE   = <span class="hljs-number">0x306D</span>, <span class="hljs-comment">// enabled heater</span>  CMD_HEATER_DISABLE  = <span class="hljs-number">0x3066</span>, <span class="hljs-comment">// disable heater</span>  CMD_SOFT_RESET      = <span class="hljs-number">0x30A2</span>, <span class="hljs-comment">// soft reset</span>  CMD_MEAS_CLOCKSTR_H = <span class="hljs-number">0x2C06</span>, <span class="hljs-comment">// measurement: clock stretching, high repeatability</span>  CMD_MEAS_CLOCKSTR_M = <span class="hljs-number">0x2C0D</span>, <span class="hljs-comment">// measurement: clock stretching, medium repeatability</span>  CMD_MEAS_CLOCKSTR_L = <span class="hljs-number">0x2C10</span>, <span class="hljs-comment">// measurement: clock stretching, low repeatability</span>  CMD_MEAS_POLLING_H  = <span class="hljs-number">0x2400</span>, <span class="hljs-comment">// measurement: polling, high repeatability</span>  CMD_MEAS_POLLING_M  = <span class="hljs-number">0x240B</span>, <span class="hljs-comment">// measurement: polling, medium repeatability</span>  CMD_MEAS_POLLING_L  = <span class="hljs-number">0x2416</span>, <span class="hljs-comment">// measurement: polling, low repeatability</span>  CMD_MEAS_PERI_05_H  = <span class="hljs-number">0x2032</span>, <span class="hljs-comment">// measurement: periodic 0.5 mps, high repeatability</span><span class="hljs-comment">//  CMD_MEAS_PERI_05_M  = 0x2024, // measurement: periodic 0.5 mps, medium repeatability</span>  CMD_MEAS_PERI_05_L  = <span class="hljs-number">0x202F</span>, <span class="hljs-comment">// measurement: periodic 0.5 mps, low repeatability</span>  CMD_MEAS_PERI_1_H   = <span class="hljs-number">0x2130</span>, <span class="hljs-comment">// measurement: periodic 1 mps, high repeatability</span><span class="hljs-comment">//  CMD_MEAS_PERI_1_M   = 0x2126, // measurement: periodic 1 mps, medium repeatability</span>  CMD_MEAS_PERI_1_L   = <span class="hljs-number">0x212D</span>, <span class="hljs-comment">// measurement: periodic 1 mps, low repeatability</span>  CMD_MEAS_PERI_2_H   = <span class="hljs-number">0x2236</span>, <span class="hljs-comment">// measurement: periodic 2 mps, high repeatability</span><span class="hljs-comment">//  CMD_MEAS_PERI_2_M   = 0x2220, // measurement: periodic 2 mps, medium repeatability</span>  CMD_MEAS_PERI_2_L   = <span class="hljs-number">0x222B</span>, <span class="hljs-comment">// measurement: periodic 2 mps, low repeatability</span>  CMD_MEAS_PERI_4_H   = <span class="hljs-number">0x2334</span>, <span class="hljs-comment">// measurement: periodic 4 mps, high repeatability</span><span class="hljs-comment">//  CMD_MEAS_PERI_4_M   = 0x2322, // measurement: periodic 4 mps, medium repeatability</span>  CMD_MEAS_PERI_4_L   = <span class="hljs-number">0x2329</span>, <span class="hljs-comment">// measurement: periodic 4 mps, low repeatability</span>  CMD_MEAS_PERI_10_H  = <span class="hljs-number">0x2737</span>, <span class="hljs-comment">// measurement: periodic 10 mps, high repeatability</span><span class="hljs-comment">//  CMD_MEAS_PERI_10_M  = 0x2721, // measurement: periodic 10 mps, medium repeatability</span>  CMD_MEAS_PERI_10_L  = <span class="hljs-number">0x272A</span>, <span class="hljs-comment">// measurement: periodic 10 mps, low repeatability</span>  CMD_FETCH_DATA      = <span class="hljs-number">0xE000</span>, <span class="hljs-comment">// readout measurements for periodic mode</span>  CMD_R_AL_LIM_LS     = <span class="hljs-number">0xE102</span>, <span class="hljs-comment">// read alert limits, low set</span>  CMD_R_AL_LIM_LC     = <span class="hljs-number">0xE109</span>, <span class="hljs-comment">// read alert limits, low clear</span>  CMD_R_AL_LIM_HS     = <span class="hljs-number">0xE11F</span>, <span class="hljs-comment">// read alert limits, high set</span>  CMD_R_AL_LIM_HC     = <span class="hljs-number">0xE114</span>, <span class="hljs-comment">// read alert limits, high clear</span>  CMD_W_AL_LIM_HS     = <span class="hljs-number">0x611D</span>, <span class="hljs-comment">// write alert limits, high set</span>  CMD_W_AL_LIM_HC     = <span class="hljs-number">0x6116</span>, <span class="hljs-comment">// write alert limits, high clear</span>  CMD_W_AL_LIM_LC     = <span class="hljs-number">0x610B</span>, <span class="hljs-comment">// write alert limits, low clear</span>  CMD_W_AL_LIM_LS     = <span class="hljs-number">0x6100</span>, <span class="hljs-comment">// write alert limits, low set</span>  CMD_NO_SLEEP        = <span class="hljs-number">0x303E</span>,&#125;etCommands;<span class="hljs-keyword">extern</span> <span class="hljs-type">void</span> <span class="hljs-title function_">sht3x_init</span><span class="hljs-params">(<span class="hljs-type">void</span>)</span>;<span class="hljs-keyword">extern</span> etError <span class="hljs-title function_">sht3x_rd_serial_num</span><span class="hljs-params">(<span class="hljs-type">unsigned</span> <span class="hljs-type">long</span>* serialNumber)</span>; <span class="hljs-keyword">extern</span> etError <span class="hljs-title function_">sht3x_single_polling</span><span class="hljs-params">(<span class="hljs-type">float</span>* temperature, <span class="hljs-type">float</span>* humidity, etCommands cmd, <span class="hljs-type">uint8_t</span> timeout)</span>;<span class="hljs-keyword">extern</span> etError <span class="hljs-title function_">sht3x_single_clkStretch</span><span class="hljs-params">(<span class="hljs-type">float</span>* temperature, <span class="hljs-type">float</span>* humidity, etCommands cmd, <span class="hljs-type">uint8_t</span> timeout)</span>;<span class="hljs-keyword">extern</span> etError <span class="hljs-title function_">sht3x_periodic_mode</span><span class="hljs-params">(<span class="hljs-type">float</span>* temperature, <span class="hljs-type">float</span>* humidity, etCommands cmd)</span>;<span class="hljs-meta">#<span class="hljs-keyword">endif</span></span></code></pre></div><div class="code-wrapper"><pre><code class="hljs c"><span class="hljs-comment">/**</span><span class="hljs-comment">  ************************************************</span><span class="hljs-comment">  * @filesht31.c</span><span class="hljs-comment">  * @authorKayoung</span><span class="hljs-comment">  * @versionV1.0.0</span><span class="hljs-comment">  * @date2023.04.30</span><span class="hljs-comment">  * @briefsht3x温湿度传感器驱动函数</span><span class="hljs-comment">  ************************************************</span><span class="hljs-comment">  */</span> <span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;sht31.h&quot;</span></span><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;intrins.h&gt;</span></span><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;bsp_uart.h&quot;</span></span><span class="hljs-type">void</span> <span class="hljs-title function_">Delay1ms</span><span class="hljs-params">()</span><span class="hljs-comment">//@11.0592MHz</span>&#123;<span class="hljs-type">unsigned</span> <span class="hljs-type">char</span> i, j;_nop_();i = <span class="hljs-number">11</span>;j = <span class="hljs-number">190</span>;<span class="hljs-keyword">do</span>&#123;<span class="hljs-keyword">while</span> (--j);&#125; <span class="hljs-keyword">while</span> (--i);&#125;<span class="hljs-comment">/**</span><span class="hljs-comment">  * @brief向sht3x传感器写指令</span><span class="hljs-comment">  * @paramcommand：指令</span><span class="hljs-comment">  * @retvalerror（ack：0 or nack：1）</span><span class="hljs-comment">  */</span><span class="hljs-type">static</span> ack_e <span class="hljs-title function_">sht3x_wr_cmd</span><span class="hljs-params">(etCommands command)</span>&#123;  ack_e error; <span class="hljs-comment">// ack or nack</span>  error  = i2c_wr_byte(command &gt;&gt; <span class="hljs-number">8</span>); <span class="hljs-comment">//upper 8 bits</span>  error |= i2c_wr_byte(command &amp; <span class="hljs-number">0xFF</span>); <span class="hljs-comment">//lower 8 bits</span>  <span class="hljs-keyword">return</span> error;&#125;<span class="hljs-comment">/**</span><span class="hljs-comment">  * @briefsht3x初始化</span><span class="hljs-comment">  * @paramNone</span><span class="hljs-comment">  * @retvalNone</span><span class="hljs-comment">  */</span><span class="hljs-type">void</span> <span class="hljs-title function_">sht3x_init</span><span class="hljs-params">(<span class="hljs-type">void</span>)</span>&#123;i2c_init();<span class="hljs-comment">//I2C初始化</span>&#125;<span class="hljs-comment">/**</span><span class="hljs-comment">  * @brief读取sht3x序列号</span><span class="hljs-comment">  * @paramserialNumber: sht3x序列号指针</span><span class="hljs-comment">  * @retvalerror</span><span class="hljs-comment">  */</span>etError <span class="hljs-title function_">sht3x_rd_serial_num</span><span class="hljs-params">(<span class="hljs-type">unsigned</span> <span class="hljs-type">long</span>* serialNumber)</span>&#123;etError error = NO_ERROR;           <span class="hljs-comment">// error code</span><span class="hljs-type">uint8_t</span> serialNumWords[<span class="hljs-number">6</span>] = &#123;<span class="hljs-number">0</span>&#125;;      <span class="hljs-comment">//serial number raw value and checksum value</span>  <span class="hljs-type">uint8_t</span> i;i2c_start();  error = i2c_wr_byte(SHT3XWriteHeader);<span class="hljs-keyword">if</span>(error == NO_ERROR)  error = sht3x_wr_cmd(CMD_READ_SERIALNBR); <span class="hljs-comment">// write &quot;read serial number&quot; command</span>Delay1ms();<span class="hljs-keyword">if</span>(error == NO_ERROR)&#123;i2c_start();error = i2c_wr_byte(SHT3XReadHeader);&#125;<span class="hljs-comment">/* read temperature and humidity raw values */</span>  <span class="hljs-keyword">if</span>(error == NO_ERROR)  &#123;<span class="hljs-keyword">for</span>(i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">5</span>; i++)&#123; i2c_rd_byte(&amp;serialNumWords[i], ACK);&#125;    i2c_rd_byte(&amp;serialNumWords[i], NACK);<span class="hljs-comment">//i = 5</span><span class="hljs-comment">//serialNumWords[6] = &#x27;\0&#x27;;</span>i2c_stop();<span class="hljs-keyword">if</span>(serialNumWords[<span class="hljs-number">2</span>] != crc8_calc(serialNumWords,<span class="hljs-number">2</span>))     error = CHECKSUM_ERROR;  <span class="hljs-keyword">if</span>(serialNumWords[<span class="hljs-number">5</span>] != crc8_calc(&amp;serialNumWords[<span class="hljs-number">3</span>],<span class="hljs-number">2</span>)) error = CHECKSUM_ERROR;  &#125;  <span class="hljs-comment">/* calc serial number as 32-bit integer */</span>  <span class="hljs-keyword">if</span>(error == NO_ERROR)  &#123;<span class="hljs-comment">/* print serialNumber */</span><span class="hljs-comment">//printf(&quot;serialNumber: 0x%02x%02x\r\n&quot;, serialNumWords[0], serialNumWords[1], serialNumWords[3], serialNumWords[4]);</span>*serialNumber = serialNumWords[<span class="hljs-number">0</span>] &lt;&lt; <span class="hljs-number">8</span> | serialNumWords[<span class="hljs-number">1</span>];*serialNumber &lt;&lt;= <span class="hljs-number">16</span>;*serialNumber |= serialNumWords[<span class="hljs-number">3</span>] &lt;&lt; <span class="hljs-number">8</span> | serialNumWords[<span class="hljs-number">4</span>];&#125;  <span class="hljs-keyword">return</span> error;&#125;<span class="hljs-comment">/**</span><span class="hljs-comment">  * @briefsht3x单次轮询模式获取温湿度数据</span><span class="hljs-comment">  * @paramtemperature : 温度指针</span><span class="hljs-comment">  * @paramhumidity: 湿度指针</span><span class="hljs-comment">  * @param  cmd：指令</span><span class="hljs-comment">  * @param  timeout：超时（ms）</span><span class="hljs-comment">  * @retvalerror（ack：0 or nack：1）</span><span class="hljs-comment">  */</span>etError <span class="hljs-title function_">sht3x_single_polling</span><span class="hljs-params">(<span class="hljs-type">float</span>* temperature, <span class="hljs-type">float</span>* humidity, etCommands cmd, <span class="hljs-type">uint8_t</span> timeout)</span>&#123;    etError error = NO_ERROR;           <span class="hljs-comment">// error code</span>    <span class="hljs-type">uint16_t</span> rawValueTemp, rawValueHumi;    <span class="hljs-comment">// temperature and humidity raw value from sensor</span>    <span class="hljs-type">uint8_t</span> Rdata[<span class="hljs-number">6</span>] = &#123;<span class="hljs-number">0</span>&#125;;      <span class="hljs-comment">//temperature and humidity raw value and checksum value</span>    <span class="hljs-type">uint8_t</span> i;    <span class="hljs-comment">/* Start Measurement*/</span>    i2c_start();    error = i2c_wr_byte(SHT3XWriteHeader);    <span class="hljs-keyword">if</span>(error == NO_ERROR)    &#123;        error = sht3x_wr_cmd(cmd);    &#125;    i2c_stop();    <span class="hljs-keyword">if</span>(error == NO_ERROR)    &#123;        i2c_start();        error = i2c_wr_byte(SHT3XReadHeader);    &#125;    <span class="hljs-keyword">while</span>(timeout--)    &#123;        i2c_stop();        i2c_start();        error = i2c_wr_byte(SHT3XReadHeader);<span class="hljs-comment">// check if the measurement has finished</span>        <span class="hljs-keyword">if</span>(error == NO_ERROR) <span class="hljs-keyword">break</span>; <span class="hljs-comment">// if measurement has finished -&gt; exit loop</span>        Delay1ms();    &#125;    <span class="hljs-keyword">if</span>(timeout == <span class="hljs-number">0</span>) error = TIMEOUT_ERROR;    <span class="hljs-comment">// check for timeout error</span>    <span class="hljs-comment">/* read temperature and humidity raw values */</span>    <span class="hljs-keyword">if</span>(error == NO_ERROR)    &#123;        <span class="hljs-keyword">for</span>(i=<span class="hljs-number">0</span>; i&lt;<span class="hljs-number">5</span>; i++)        &#123;            i2c_rd_byte(&amp;Rdata[i], ACK);        &#125;        i2c_rd_byte(&amp;Rdata[i], NACK);        i2c_stop();        <span class="hljs-keyword">if</span>(Rdata[<span class="hljs-number">2</span>] != crc8_calc(Rdata,<span class="hljs-number">2</span>))     error = CHECKSUM_ERROR;        <span class="hljs-keyword">if</span>(Rdata[<span class="hljs-number">5</span>] != crc8_calc(&amp;Rdata[<span class="hljs-number">3</span>],<span class="hljs-number">2</span>)) error = CHECKSUM_ERROR;    &#125;    <span class="hljs-comment">/* calculate temperature in  and humidity in %RH */</span>    <span class="hljs-keyword">if</span>(error == NO_ERROR)    &#123;        rawValueTemp = (Rdata[<span class="hljs-number">0</span>] &lt;&lt; <span class="hljs-number">8</span>) | Rdata[<span class="hljs-number">1</span>];        rawValueHumi = (Rdata[<span class="hljs-number">3</span>] &lt;&lt; <span class="hljs-number">8</span>) | Rdata[<span class="hljs-number">4</span>];        *temperature = <span class="hljs-number">175.0f</span> * (<span class="hljs-type">float</span>)rawValueTemp / <span class="hljs-number">65535.0f</span> - <span class="hljs-number">45.0f</span>;        *humidity = <span class="hljs-number">100.0f</span> * (<span class="hljs-type">float</span>)rawValueHumi / <span class="hljs-number">65535.0f</span>;    &#125;    <span class="hljs-keyword">return</span> error;&#125;<span class="hljs-comment">/**</span><span class="hljs-comment">  * @briefsht3x单次时钟扩展模式获取温湿度数据</span><span class="hljs-comment">  * @paramtemperature : 温度指针</span><span class="hljs-comment">  * @paramhumidity: 湿度指针</span><span class="hljs-comment">  * @param  cmd：指令</span><span class="hljs-comment">  * @param  timeout：超时（ms）</span><span class="hljs-comment">  * @retvalerror（ack：0 or nack：1）</span><span class="hljs-comment">  */</span>etError <span class="hljs-title function_">sht3x_single_clkStretch</span><span class="hljs-params">(<span class="hljs-type">float</span>* temperature, <span class="hljs-type">float</span>* humidity, etCommands cmd, <span class="hljs-type">uint8_t</span> timeout)</span>&#123;    etError error = NO_ERROR;           <span class="hljs-comment">// error code</span>    <span class="hljs-type">uint16_t</span> rawValueTemp, rawValueHumi;    <span class="hljs-comment">// temperature and humidity raw value from sensor</span>    <span class="hljs-type">uint8_t</span> Rdata[<span class="hljs-number">6</span>] = &#123;<span class="hljs-number">0</span>&#125;;      <span class="hljs-comment">//temperature and humidity raw value and checksum value</span>    <span class="hljs-type">uint8_t</span> i;    <span class="hljs-comment">/* Start Measurement*/</span>    i2c_start();    error = i2c_wr_byte(SHT3XWriteHeader);    <span class="hljs-keyword">if</span>(error == NO_ERROR)    &#123;        error = sht3x_wr_cmd(cmd);    &#125;    i2c_stop();    <span class="hljs-keyword">if</span>(error == NO_ERROR)    &#123;        i2c_start();        error = i2c_wr_byte(SHT3XReadHeader);    &#125;    <span class="hljs-keyword">while</span>(timeout--)    &#123;        Delay1ms();    &#125;    <span class="hljs-keyword">if</span>(timeout == <span class="hljs-number">0</span>) error = TIMEOUT_ERROR;    <span class="hljs-comment">// check for timeout error</span>    <span class="hljs-comment">/* read temperature and humidity raw values */</span>    <span class="hljs-keyword">if</span>(error == NO_ERROR)    &#123;        <span class="hljs-keyword">for</span>(i=<span class="hljs-number">0</span>; i&lt;<span class="hljs-number">5</span>; i++)        &#123;            i2c_rd_byte(&amp;Rdata[i], ACK);        &#125;        i2c_rd_byte(&amp;Rdata[i], NACK);        i2c_stop();        <span class="hljs-keyword">if</span>(Rdata[<span class="hljs-number">2</span>] != crc8_calc(Rdata,<span class="hljs-number">2</span>))     error = CHECKSUM_ERROR;        <span class="hljs-keyword">if</span>(Rdata[<span class="hljs-number">5</span>] != crc8_calc(&amp;Rdata[<span class="hljs-number">3</span>],<span class="hljs-number">2</span>)) error = CHECKSUM_ERROR;    &#125;    <span class="hljs-comment">/* calculate temperature in  and humidity in %RH */</span>    <span class="hljs-keyword">if</span>(error == NO_ERROR)    &#123;        rawValueTemp = (Rdata[<span class="hljs-number">0</span>] &lt;&lt; <span class="hljs-number">8</span>) | Rdata[<span class="hljs-number">1</span>];        rawValueHumi = (Rdata[<span class="hljs-number">3</span>] &lt;&lt; <span class="hljs-number">8</span>) | Rdata[<span class="hljs-number">4</span>];        *temperature = <span class="hljs-number">175.0f</span> * (<span class="hljs-type">float</span>)rawValueTemp / <span class="hljs-number">65535.0f</span> - <span class="hljs-number">45.0f</span>;        *humidity = <span class="hljs-number">100.0f</span> * (<span class="hljs-type">float</span>)rawValueHumi / <span class="hljs-number">65535.0f</span>;    &#125;    <span class="hljs-keyword">return</span> error;&#125;<span class="hljs-comment">/**</span><span class="hljs-comment">  * @briefsht3x 周期性获取温湿度数据</span><span class="hljs-comment">  * @paramtemperature : 温度指针</span><span class="hljs-comment">  * @paramhumidity: 湿度指针</span><span class="hljs-comment">  * @param  cmd：指令</span><span class="hljs-comment">  * @retvalerror（ack：0 or nack：1）</span><span class="hljs-comment">  */</span>etError <span class="hljs-title function_">sht3x_periodic_mode</span><span class="hljs-params">(<span class="hljs-type">float</span>* temperature, <span class="hljs-type">float</span>* humidity, etCommands cmd)</span>&#123;    etError error = NO_ERROR;           <span class="hljs-comment">// error code</span>    <span class="hljs-type">uint16_t</span> rawValueTemp, rawValueHumi;    <span class="hljs-comment">// temperature and humidity raw value from sensor</span>    <span class="hljs-type">uint8_t</span> Rdata[<span class="hljs-number">6</span>] = &#123;<span class="hljs-number">0</span>&#125;;      <span class="hljs-comment">//temperature and humidity raw value and checksum value</span>    <span class="hljs-type">uint8_t</span> i;    <span class="hljs-comment">/* start measurement */</span>    i2c_start();    error  = i2c_wr_byte(SHT3XWriteHeader);    <span class="hljs-keyword">if</span>(error == NO_ERROR) error = sht3x_wr_cmd(cmd);    <span class="hljs-comment">/* Readout of Measurement Results */</span>    <span class="hljs-keyword">if</span>(error == NO_ERROR)    &#123;        i2c_start();        error  = i2c_wr_byte(SHT3XWriteHeader);    &#125;    <span class="hljs-keyword">if</span>(error == NO_ERROR) error = sht3x_wr_cmd(CMD_FETCH_DATA);    <span class="hljs-keyword">if</span>(error == NO_ERROR)     &#123;        i2c_start();        error = i2c_wr_byte(SHT3XReadHeader);    &#125;    <span class="hljs-comment">/* read temperature and humidity raw values */</span>    <span class="hljs-keyword">if</span>(error == NO_ERROR)    &#123;        <span class="hljs-keyword">for</span>(i=<span class="hljs-number">0</span>; i&lt;<span class="hljs-number">5</span>; i++)        &#123;            i2c_rd_byte(&amp;Rdata[i], ACK);        &#125;        i2c_rd_byte(&amp;Rdata[i], NACK);        i2c_stop();        <span class="hljs-keyword">if</span>(Rdata[<span class="hljs-number">2</span>] != crc8_calc(Rdata,<span class="hljs-number">2</span>))     error = CHECKSUM_ERROR;        <span class="hljs-keyword">if</span>(Rdata[<span class="hljs-number">5</span>] != crc8_calc(&amp;Rdata[<span class="hljs-number">3</span>],<span class="hljs-number">2</span>)) error = CHECKSUM_ERROR;    &#125;    <span class="hljs-comment">/* calculate temperature in  and humidity in %RH */</span>    <span class="hljs-keyword">if</span>(error == NO_ERROR)    &#123;        rawValueTemp = (Rdata[<span class="hljs-number">0</span>] &lt;&lt; <span class="hljs-number">8</span>) | Rdata[<span class="hljs-number">1</span>];        rawValueHumi = (Rdata[<span class="hljs-number">3</span>] &lt;&lt; <span class="hljs-number">8</span>) | Rdata[<span class="hljs-number">4</span>];        *temperature = <span class="hljs-number">175.0f</span> * (<span class="hljs-type">float</span>)rawValueTemp / <span class="hljs-number">65535.0f</span> - <span class="hljs-number">45.0f</span>;        *humidity = <span class="hljs-number">100.0f</span> * (<span class="hljs-type">float</span>)rawValueHumi / <span class="hljs-number">65535.0f</span>;    &#125;    <span class="hljs-keyword">return</span> error;&#125;</code></pre></div><p>main.c</p><div class="code-wrapper"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;STC12C5A60S2.H&gt;</span></span><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;bsp_uart.h&quot;</span></span><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;sht31.h&quot;</span></span><span class="hljs-type">unsigned</span> <span class="hljs-type">long</span> serialNumber;<span class="hljs-type">float</span> temperature = <span class="hljs-number">0.0f</span>, humidity = <span class="hljs-number">0.0f</span>;<span class="hljs-type">void</span> <span class="hljs-title function_">Delay500ms</span><span class="hljs-params">()</span><span class="hljs-comment">//@11.0592MHz</span>&#123;<span class="hljs-type">unsigned</span> <span class="hljs-type">char</span> i, j, k;i = <span class="hljs-number">22</span>;j = <span class="hljs-number">3</span>;k = <span class="hljs-number">227</span>;<span class="hljs-keyword">do</span>&#123;<span class="hljs-keyword">do</span>&#123;<span class="hljs-keyword">while</span> (--k);&#125; <span class="hljs-keyword">while</span> (--j);&#125; <span class="hljs-keyword">while</span> (--i);&#125;<span class="hljs-type">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(<span class="hljs-type">void</span>)</span>&#123;uart1_init();sht3x_init();<span class="hljs-keyword">while</span>(<span class="hljs-number">1</span>)&#123;<span class="hljs-comment">/* get the serial number */</span>sht3x_rd_serial_num(&amp;serialNumber); <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;serial number: %#lx\r\n&quot;</span>, serialNumber);sht3x_periodic_mode(&amp;temperature, &amp;humidity, CMD_MEAS_PERI_1_H); <span class="hljs-comment">//周期性获取温湿度</span><span class="hljs-comment">//sht3x_single_polling(&amp;temperature, &amp;humidity, CMD_MEAS_POLLING_L, 50); //单次轮询模式获取温湿度</span><span class="hljs-comment">//sht3x_single_clkStretch(&amp;temperature, &amp;humidity, CMD_MEAS_CLOCKSTR_H, 50);//单次时钟扩展模式获取温湿度</span><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;temperature = %.3f℃ humidity = %.3f%%\r\n&quot;</span>, temperature, humidity);Delay500ms();&#125;&#125;</code></pre></div><p>串口输出：</p><p><img src="https://gitee.com/kayoungzhang/picgo_res/raw/master/img/image-20230507195015130.png" alt="image-20230507195015130" style="zoom: 80%;" /></p><p>工程代码Gitee ：<ahref="https://gitee.com/kayoungzhang/my_codehub.git">sht3x</a></p><h3 id="参考链接">参考链接</h3><p><ahref="https://sensirion.com/media/documents/213E6A3B/63A5A569/Datasheet_SHT3x_DIS.pdf">DatasheetSHT3x-DIS</a></p><p>https://sensirion.com/resource/software/code/sht3x</p><p><ahref="https://blog.csdn.net/weixin_45607920/article/details/109526396">SHT3X温湿度模块 C51驱动 ——简单调用获取温湿度信息</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;国内市场碰到的温湿度传感器一般都采用的是瑞士公司Sensirion
生产的，像SHT2x 和 SHT3x和 SHTCx和
SHT4x等系列温湿度传感器。下面介绍一下其经典的数字温湿度传感器&lt;a
href=&quot;https://sensirion.com/cn/produc</summary>
      
    
    
    
    <category term="单片机" scheme="http://example.com/categories/%E5%8D%95%E7%89%87%E6%9C%BA/"/>
    
    
    <category term="温湿度" scheme="http://example.com/tags/%E6%B8%A9%E6%B9%BF%E5%BA%A6/"/>
    
  </entry>
  
  <entry>
    <title>温度传感器DS18B20的应用</title>
    <link href="http://example.com/2023/04/28/%E6%B8%A9%E5%BA%A6%E4%BC%A0%E6%84%9F%E5%99%A8DS18B20%E7%9A%84%E5%BA%94%E7%94%A8/"/>
    <id>http://example.com/2023/04/28/%E6%B8%A9%E5%BA%A6%E4%BC%A0%E6%84%9F%E5%99%A8DS18B20%E7%9A%84%E5%BA%94%E7%94%A8/</id>
    <published>2023-04-28T05:41:35.000Z</published>
    <updated>2023-05-11T10:10:43.767Z</updated>
    
    <content type="html"><![CDATA[<p>DS18B20温度传感器在日常应用中，使用比较广泛，以下简单介绍一下：</p><h3 id="特点">特点：</h3><ul><li>单总线传输（1-Wire interface）</li><li>供电范围： 3.0V ~ 5.5V</li><li>测量温度范围：-55°C ~ +125°C</li><li>精度：-10°C ~ +85°C（±0.5°C）</li><li>分辨率： 9 ~ 12 bits</li><li>每一个 DS1820 有唯一的系列号，因此多个 DS1820可以存在于同一条单线总线上。</li></ul><h3 id="存储器图">存储器图</h3><figure><imgsrc="https://gitee.com/kayoungzhang/picgo_res/raw/master/img/image-20230428152810011.png"alt="image-20230428152810011" /><figcaption aria-hidden="true">image-20230428152810011</figcaption></figure><h3 id="单总线接口访问ds1820的协议">单总线接口访问DS1820的协议</h3><p>1.初始化 2.进行ROM功能操作 3.进行RAM功能操作 4.传输数据</p><h3 id="rom功能指令">ROM功能指令</h3><table><thead><tr class="header"><th>ROM指令</th><th>功能</th><th>备注</th></tr></thead><tbody><tr class="odd"><td>Read ROM [33h]</td><td>读取DS18B20内部信息</td><td>总线存在多个DS18B20无法使用此命令</td></tr><tr class="even"><td>Match ROM [55h]</td><td>根据64位ROM信息匹配对应的DS18B20</td><td></td></tr><tr class="odd"><td>Skip ROM [CCh]</td><td>跳过DS18B20</td><td>总线上只有一个DS18B20</td></tr><tr class="even"><td>Search ROM [F0h]</td><td>搜索DS18B20</td><td></td></tr><tr class="odd"><td>Alarm Search [ECh]</td><td>搜索DS18B20</td><td>上一次碰到警报才搜索DS18B20</td></tr></tbody></table><h3 id="ram功能指令">RAM功能指令</h3><table><thead><tr class="header"><th>RAM命令</th><th>功能</th></tr></thead><tbody><tr class="odd"><td>Write Scratchpad [4Eh]</td><td>向暂存存储器写内容</td></tr><tr class="even"><td>Read Scratchpad [BEh]</td><td>读暂存存储器的内容</td></tr><tr class="odd"><td>Copy Scratchpad [48h]</td><td>复制暂存存储器内容到非易失存储器 <strong>E2 RAM</strong></td></tr><tr class="even"><td>Convert T [44h]</td><td>转换温度</td></tr><tr class="odd"><td>Recall E2 [B8h]</td><td>重新调出 <strong>E2 RAM</strong> 存储到暂存存储器</td></tr><tr class="even"><td>Read Power Supply [B4h]</td><td>读供电方式</td></tr></tbody></table><h3 id="初始化时序">初始化时序</h3><p><img src="https://gitee.com/kayoungzhang/picgo_res/raw/master/img/image-20230428144010335.png" alt="image-20230428144010335" style="zoom: 67%;" /></p><h3 id="写时序">写时序</h3><p><img src="https://gitee.com/kayoungzhang/picgo_res/raw/master/img/image-20230428144206875.png" alt="image-20230428144206875" style="zoom: 67%;" /></p><h3 id="读时序">读时序</h3><p><img src="https://gitee.com/kayoungzhang/picgo_res/raw/master/img/image-20230428144418569.png" alt="image-20230428144418569" style="zoom:67%;" /></p><h3 id="程序实现">程序实现</h3><div class="code-wrapper"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">ifndef</span> DEV_DS18B20_H</span><span class="hljs-meta">#<span class="hljs-keyword">define</span> DEV_DS18B20_H</span><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stc15.h&gt;</span></span><span class="hljs-keyword">typedef</span> <span class="hljs-type">unsigned</span> <span class="hljs-type">char</span> <span class="hljs-type">uint8_t</span>;<span class="hljs-meta">#<span class="hljs-keyword">define</span> DQ P37   <span class="hljs-comment">//ds18b20接口定义</span></span><span class="hljs-comment">/******* ROM function command ****************/</span><span class="hljs-meta">#<span class="hljs-keyword">define</span>READ_ROM(0x33)</span><span class="hljs-meta">#<span class="hljs-keyword">define</span>MATCH_ROM(0x55)</span><span class="hljs-meta">#<span class="hljs-keyword">define</span>SKIP_ROM(0xCC)</span><span class="hljs-meta">#<span class="hljs-keyword">define</span>SEARCH_ROM(0xF0)</span><span class="hljs-meta">#<span class="hljs-keyword">define</span>ALARM_SEARCH(0XEC)</span><span class="hljs-comment">/******* RAM function command ****************/</span><span class="hljs-meta">#<span class="hljs-keyword">define</span>WRITE_SCRATCHPAD(0x4E)</span><span class="hljs-meta">#<span class="hljs-keyword">define</span>READ_SCRATCHPAD(0xBE)</span><span class="hljs-meta">#<span class="hljs-keyword">define</span>COPY_SCRATCHPAD(0x48) <span class="hljs-comment">//把暂存器RAM中的数据复制到EEPROM中</span></span><span class="hljs-meta">#<span class="hljs-keyword">define</span>CONVERT_T(0x44)</span><span class="hljs-meta">#<span class="hljs-keyword">define</span>RECALL_EE(0xB8) <span class="hljs-comment">//把EEPROM中的数据恢复到RAM中</span></span><span class="hljs-meta">#<span class="hljs-keyword">define</span>READ_POWER(0xB4)</span><span class="hljs-meta">#<span class="hljs-keyword">define</span> TH_LIMIT(0x78)<span class="hljs-comment">//120℃</span></span><span class="hljs-meta">#<span class="hljs-keyword">define</span> TL_LIMIT(0x05)<span class="hljs-comment">//5℃</span></span><span class="hljs-meta">#<span class="hljs-keyword">define</span> RESOLUTION_9(0x1F)<span class="hljs-comment">//Thermometer Resolution Configuration</span></span><span class="hljs-meta">#<span class="hljs-keyword">define</span> RESOLUTION_10(0x3F)</span><span class="hljs-meta">#<span class="hljs-keyword">define</span> RESOLUTION_11(0x5F)</span><span class="hljs-meta">#<span class="hljs-keyword">define</span> RESOLUTION_12(0x7F)</span><span class="hljs-keyword">extern</span> <span class="hljs-type">uint8_t</span> <span class="hljs-title function_">ds18b20_init</span><span class="hljs-params">(<span class="hljs-type">void</span>)</span>;<span class="hljs-keyword">extern</span> <span class="hljs-type">void</span> <span class="hljs-title function_">ds18b20_convert_temp</span><span class="hljs-params">(<span class="hljs-type">void</span>)</span>;<span class="hljs-keyword">extern</span> <span class="hljs-type">float</span> <span class="hljs-title function_">ds18b20_get_temp</span><span class="hljs-params">(<span class="hljs-type">void</span>)</span>;<span class="hljs-meta">#<span class="hljs-keyword">endif</span></span></code></pre></div><div class="code-wrapper"><pre><code class="hljs c"><span class="hljs-comment">/**</span><span class="hljs-comment">  ************************************************</span><span class="hljs-comment">  * @filedev_ds18b20.c</span><span class="hljs-comment">  * @authorKayoung</span><span class="hljs-comment">  * @versionV1.0</span><span class="hljs-comment">  * @date20220324</span><span class="hljs-comment">  * @briefds18b20测温度</span><span class="hljs-comment">  **********************************************</span><span class="hljs-comment">  */</span> <span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;dev_ds18b20.h&quot;</span></span><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;intrins.h&gt;</span></span><span class="hljs-comment">/**</span><span class="hljs-comment">  * @brief检测温度传感器是否正常</span><span class="hljs-comment">  * @paramNone </span><span class="hljs-comment">  * @retval1:失败 0：成功</span><span class="hljs-comment">*/</span><span class="hljs-type">uint8_t</span> <span class="hljs-title function_">ds18b20_init</span><span class="hljs-params">(<span class="hljs-type">void</span>)</span>&#123;<span class="hljs-type">uint8_t</span> i; <span class="hljs-comment">//延时循环变量</span><span class="hljs-type">uint8_t</span> ack;<span class="hljs-comment">//存储检测设备是否成功标志</span>DQ = <span class="hljs-number">1</span>;DQ = <span class="hljs-number">0</span>;i = <span class="hljs-number">227</span>;<span class="hljs-comment">//将总线拉低480us~960us，这里延时500us</span><span class="hljs-keyword">while</span> (--i);DQ = <span class="hljs-number">1</span>;<span class="hljs-comment">//然后拉高总线，延时70us</span>i = <span class="hljs-number">29</span>;<span class="hljs-keyword">while</span> (--i);ack = DQ; <span class="hljs-comment">//读取总线电平</span>i = <span class="hljs-number">227</span>;<span class="hljs-comment">//延时500us</span><span class="hljs-keyword">while</span>(i--);<span class="hljs-keyword">return</span> ack;&#125;<span class="hljs-comment">/**</span><span class="hljs-comment">  * @briefds18b20发送一个位</span><span class="hljs-comment">  * @paramsendbit：待发送的位</span><span class="hljs-comment">  * @retvalNone</span><span class="hljs-comment">  */</span><span class="hljs-type">void</span> <span class="hljs-title function_">ds18b20_sendbit</span><span class="hljs-params">(<span class="hljs-type">uint8_t</span> sendbit)</span>&#123;<span class="hljs-type">uint8_t</span> i; <span class="hljs-comment">//延时时间循环变量</span>DQ = <span class="hljs-number">0</span>; <span class="hljs-comment">//主机拉低延时10us</span>i = <span class="hljs-number">2</span>;<span class="hljs-keyword">while</span> (--i); DQ = sendbit; <span class="hljs-comment">//发送位，延时50us</span>i = <span class="hljs-number">20</span>;<span class="hljs-keyword">while</span> (--i); DQ = <span class="hljs-number">1</span>; <span class="hljs-comment">//释放总线</span>&#125;<span class="hljs-comment">/**</span><span class="hljs-comment">  * @briefds18b20接收到一位</span><span class="hljs-comment">  * @paramNone</span><span class="hljs-comment">  * @retvalBit: 从总线上接收到的一位</span><span class="hljs-comment">  */</span><span class="hljs-type">uint8_t</span> <span class="hljs-title function_">ds18b20_recvbit</span><span class="hljs-params">(<span class="hljs-type">void</span>)</span>&#123;<span class="hljs-type">uint8_t</span> i;<span class="hljs-type">uint8_t</span> Bit; <span class="hljs-comment">//存储接收到的一位</span>DQ = <span class="hljs-number">0</span>; <span class="hljs-comment">//主机拉低，延时8us</span>i = <span class="hljs-number">1</span>;<span class="hljs-keyword">while</span> (--i);DQ = <span class="hljs-number">1</span>; <span class="hljs-comment">//主机释放总线，延时8us</span>i = <span class="hljs-number">1</span>;<span class="hljs-keyword">while</span> (--i);Bit = DQ; <span class="hljs-comment">//读取总线数据，延时50us</span>i = <span class="hljs-number">20</span>;<span class="hljs-keyword">while</span> (--i);<span class="hljs-keyword">return</span> Bit;&#125;<span class="hljs-comment">/**</span><span class="hljs-comment">  * @brief向温度传感器写一个字节</span><span class="hljs-comment">  * @paramwr_data：待写入的数据</span><span class="hljs-comment">  * @retvalNone</span><span class="hljs-comment">*/</span><span class="hljs-type">static</span> <span class="hljs-type">void</span> <span class="hljs-title function_">ds18b20_wr_byte</span><span class="hljs-params">(<span class="hljs-type">uint8_t</span> wr_data)</span>&#123;<span class="hljs-type">uint8_t</span> j;<span class="hljs-keyword">for</span> (j = <span class="hljs-number">0</span>; j &lt; <span class="hljs-number">8</span>; j++)   <span class="hljs-comment">//From LSB to MSB</span>&#123;ds18b20_sendbit(wr_data &amp; (<span class="hljs-number">0x01</span> &lt;&lt; j));&#125;&#125;<span class="hljs-comment">/**</span><span class="hljs-comment">  * @brief读取温度传感器一个字节</span><span class="hljs-comment">  * @paramNone</span><span class="hljs-comment">  * @retvalrecv_byte：读取的一个字节</span><span class="hljs-comment">*/</span><span class="hljs-type">static</span> <span class="hljs-type">uint8_t</span> <span class="hljs-title function_">ds18b20_rd_byte</span><span class="hljs-params">(<span class="hljs-type">void</span>)</span>&#123;<span class="hljs-type">uint8_t</span> recv_byte = <span class="hljs-number">0</span>; <span class="hljs-comment">//存储接收到的数据</span><span class="hljs-type">uint8_t</span> j;<span class="hljs-keyword">for</span> (j = <span class="hljs-number">0</span>; j &lt; <span class="hljs-number">8</span>; j++)<span class="hljs-comment">//from LSB to MSB</span>&#123;<span class="hljs-keyword">if</span>(ds18b20_recvbit())&#123;recv_byte |= (<span class="hljs-number">0x01</span> &lt;&lt; j);&#125;&#125;<span class="hljs-keyword">return</span> recv_byte;&#125;<span class="hljs-comment">/**</span><span class="hljs-comment">  * @brief转换温度</span><span class="hljs-comment">  * @paramNone</span><span class="hljs-comment">  * @retvalNone</span><span class="hljs-comment">  */</span><span class="hljs-type">void</span> <span class="hljs-title function_">ds18b20_convert_temp</span><span class="hljs-params">(<span class="hljs-type">void</span>)</span>&#123;ds18b20_init();ds18b20_wr_byte(SKIP_ROM);  <span class="hljs-comment">//跳过ROM</span>ds18b20_wr_byte(CONVERT_T); <span class="hljs-comment">//转换命令</span>&#125;<span class="hljs-comment">/**</span><span class="hljs-comment">  * @brief获取正负温度</span><span class="hljs-comment">  * @paramNone</span><span class="hljs-comment">  * @retvalftemp：温度值</span><span class="hljs-comment">  */</span><span class="hljs-type">float</span> <span class="hljs-title function_">ds18b20_get_temp</span><span class="hljs-params">(<span class="hljs-type">void</span>)</span>&#123;<span class="hljs-type">uint8_t</span> TLSB, TMSB;<span class="hljs-comment">//存储温度的两个字节</span><span class="hljs-type">int</span> temp; <span class="hljs-comment">//存储温度的整形</span><span class="hljs-type">float</span> ftemp; <span class="hljs-comment">//温度</span>ds18b20_init();ds18b20_wr_byte(SKIP_ROM);ds18b20_wr_byte(READ_SCRATCHPAD);TLSB = ds18b20_rd_byte();TMSB = ds18b20_rd_byte();temp = (TMSB &lt;&lt; <span class="hljs-number">8</span>) | TLSB; ftemp = temp * <span class="hljs-number">0.0625</span>; <span class="hljs-comment">//分辨率是0.0625</span><span class="hljs-keyword">return</span> ftemp;<span class="hljs-comment">//负数是以其补码形式存储的，所以此函数可以表示负温度</span>&#125;</code></pre></div><p>注意事项：</p><p>单总线传输过程中，有严格的延时时序要求，对于不同的MCU，延时时间会跟此程序不一致，需要根据其时序图进行相应的调整。此程序已上传Gitee：<ahref="https://gitee.com/kayoungzhang/my_codehub.git">ds18b20</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;DS18B20温度传感器在日常应用中，使用比较广泛，以下简单介绍一下：&lt;/p&gt;
&lt;h3 id=&quot;特点&quot;&gt;特点：&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;单总线传输（1-Wire interface）&lt;/li&gt;
&lt;li&gt;供电范围： 3.0V ~ 5.5V&lt;/li&gt;
&lt;li&gt;测量</summary>
      
    
    
    
    <category term="单片机" scheme="http://example.com/categories/%E5%8D%95%E7%89%87%E6%9C%BA/"/>
    
    
    <category term="温度传感器" scheme="http://example.com/tags/%E6%B8%A9%E5%BA%A6%E4%BC%A0%E6%84%9F%E5%99%A8/"/>
    
  </entry>
  
  <entry>
    <title>传感器的三种常用算法处理</title>
    <link href="http://example.com/2023/04/27/%E4%BC%A0%E6%84%9F%E5%99%A8%E7%9A%84%E4%B8%89%E7%A7%8D%E5%B8%B8%E7%94%A8%E7%AE%97%E6%B3%95%E5%A4%84%E7%90%86/"/>
    <id>http://example.com/2023/04/27/%E4%BC%A0%E6%84%9F%E5%99%A8%E7%9A%84%E4%B8%89%E7%A7%8D%E5%B8%B8%E7%94%A8%E7%AE%97%E6%B3%95%E5%A4%84%E7%90%86/</id>
    <published>2023-04-27T11:57:46.000Z</published>
    <updated>2023-04-27T06:46:28.677Z</updated>
    
    <content type="html"><![CDATA[<ul><li>加权平滑：平滑和均衡传感器数据，减小偶然数据突变的影响。</li><li>抽取突变：去除静态和缓慢变化的数据背景，强调瞬间变化。</li><li>简单移动平均线：保留数据流最近的K个数据，取平均值。</li></ul><hr /><p><strong>加权平滑</strong>，使用算法如下：</p><p>新值 = 旧值<em>(1 - a) + X </em>a；其中a为设置的权值，X为最新数据，程序实现如下：</p><div class="code-wrapper"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">define</span> filter_coe 0.00001  <span class="hljs-comment">//滤波系数 小于1</span></span><span class="hljs-type">static</span> <span class="hljs-type">long</span> AD_Res_Last=<span class="hljs-number">0</span>;<span class="hljs-comment">//上一轮的ADC数值保存</span><span class="hljs-type">long</span> <span class="hljs-title function_">Read_18Bit_AD</span><span class="hljs-params">(<span class="hljs-type">void</span>)</span>&#123;<span class="hljs-type">float</span> out,c;out = AD_Res_Last;c = Read_CS1237();<span class="hljs-keyword">if</span>(c!=<span class="hljs-number">0</span>) <span class="hljs-comment">// 读到正确数据</span>&#123;out = out*filter_coe + c*(<span class="hljs-number">1</span>-filter_coe);AD_Res_Last = out;<span class="hljs-comment">//把这次的计算结果放到全局变量里面保护</span>&#125;<span class="hljs-keyword">return</span> AD_Res_Last;&#125;</code></pre></div><p><strong>抽取突变</strong>采用上面加权平滑的逆算法<strong>，</strong>实现代码如下：</p><div class="code-wrapper"><pre><code class="hljs c++"><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-type">void</span> <span class="hljs-title">onSensorChanged</span><span class="hljs-params">(SensorEvent event)</span></span><span class="hljs-function"></span>&#123;<span class="hljs-keyword">final</span> <span class="hljs-type">float</span> ALPHA = <span class="hljs-number">0.8</span>;    gravity[<span class="hljs-number">0</span>] = ALPHA * gravity[<span class="hljs-number">0</span>] + (<span class="hljs-number">1</span>-ALPHA) * event.values[<span class="hljs-number">0</span>];    gravity[<span class="hljs-number">1</span>] = ALPHA * gravity[<span class="hljs-number">1</span>] + (<span class="hljs-number">1</span>-ALPHA) * event.values[<span class="hljs-number">1</span>];    gravity[<span class="hljs-number">2</span>] = ALPHA * gravity[<span class="hljs-number">2</span>] + (<span class="hljs-number">1</span>-ALPHA) * event.values[<span class="hljs-number">2</span>];    filteredValues[<span class="hljs-number">0</span>] = event.values[<span class="hljs-number">0</span>] - gravity[<span class="hljs-number">0</span>];    filteredValues[<span class="hljs-number">1</span>] = event.values[<span class="hljs-number">1</span>] - gravity[<span class="hljs-number">1</span>];    filteredValues[<span class="hljs-number">2</span>] = event.values[<span class="hljs-number">2</span>] - gravity[<span class="hljs-number">2</span>];&#125;</code></pre></div><p><strong>简单移动平均线，</strong>保留传感器数据流中最近的K个数据，返回它们的平均值。k表示平均“窗口”的大小，实现代码如下：</p><div class="code-wrapper"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">define</span> N 12</span><span class="hljs-type">char</span> <span class="hljs-title function_">filter</span><span class="hljs-params">()</span>&#123;    <span class="hljs-type">int</span> sum = <span class="hljs-number">0</span>;    <span class="hljs-type">char</span> count;    <span class="hljs-keyword">for</span>(count = <span class="hljs-number">0</span>; count &lt; N; count++)    &#123;        sum += get_ad();        delay();&#125;<span class="hljs-keyword">return</span> (<span class="hljs-type">char</span>)(sum/N);&#125;</code></pre></div>]]></content>
    
    
      
      
    <summary type="html">&lt;ul&gt;
&lt;li&gt;加权平滑：平滑和均衡传感器数据，减小偶然数据突变的影响。&lt;/li&gt;
&lt;li&gt;抽取突变：去除静态和缓慢变化的数据背景，强调瞬间变化。&lt;/li&gt;
&lt;li&gt;简单移动平均线：保留数据流最近的K个数据，取平均值。&lt;/li&gt;
&lt;/ul&gt;
&lt;hr /&gt;
&lt;p&gt;&lt;s</summary>
      
    
    
    
    <category term="单片机" scheme="http://example.com/categories/%E5%8D%95%E7%89%87%E6%9C%BA/"/>
    
    
    <category term="sensor" scheme="http://example.com/tags/sensor/"/>
    
  </entry>
  
  <entry>
    <title>STC芯片内部EEPROM的程序设计</title>
    <link href="http://example.com/2023/04/27/STC%E8%8A%AF%E7%89%87%E5%86%85%E9%83%A8EEPROM%E7%9A%84%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1/"/>
    <id>http://example.com/2023/04/27/STC%E8%8A%AF%E7%89%87%E5%86%85%E9%83%A8EEPROM%E7%9A%84%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1/</id>
    <published>2023-04-27T09:15:17.000Z</published>
    <updated>2023-05-11T10:10:43.747Z</updated>
    
    <content type="html"><![CDATA[<p>STC单片机内部集成了的EEPROM是与程序空间是分开的，利用ISP/IAP技术可将内部DataFlash当EEPROM，擦写次数在10万次以上。以下根据datasheet简单介绍一下单片机内部EEPROM的编程方式。</p><h3id="iap及eeprom特殊功能寄存器介绍">IAP及EEPROM特殊功能寄存器介绍</h3><ul><li>ISP/IAP数据寄存器IAP_DATA</li><li>ISP/IAP地址寄存器IAP_ADDRH和IAP_ADDRL</li><li>ISP/IAP命令寄存器IAP_CMD</li><li>ISP/IAP命令触发寄存器IAP_TRIG</li><li>ISP/IAP控制寄存器IAP_CONTR</li></ul><h3 id="注意事项">注意事项</h3><p>1.<strong>写数据</strong>：如果该字节不是0xFF，则须先将整个扇区擦除，因为只有扇区擦除才可以将<strong>0</strong> 变为 <strong>1</strong> 。</p><p>2.<strong>扇区擦除</strong>：将扇区内各字节变为 <strong>0xFF</strong>。</p><p>3.同一次修改的数据放在同一扇区中，不是同一次修改的数据放在另外的扇区。</p><p>4.IAP指令完成后，地址不会自动增减，需要手动处理。</p><h3 id="eeprom程序实现">EEPROM程序实现</h3><div class="code-wrapper"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">define</span>IAP_EEPROM__H</span><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;stc15.h&quot;</span></span><span class="hljs-keyword">typedef</span> <span class="hljs-type">unsigned</span> <span class="hljs-type">char</span> <span class="hljs-type">uint8_t</span>;<span class="hljs-keyword">typedef</span> <span class="hljs-type">unsigned</span> <span class="hljs-type">short</span> <span class="hljs-type">uint16_t</span>;<span class="hljs-keyword">typedef</span> <span class="hljs-type">unsigned</span> <span class="hljs-type">int</span> <span class="hljs-type">uint32_t</span>;<span class="hljs-meta">#<span class="hljs-keyword">define</span> TOTAL_ITEM (20) <span class="hljs-comment">//存储数据的数量</span></span><span class="hljs-comment">/** STC12C5A60S2</span><span class="hljs-comment">  *eeprom 扇区地址</span><span class="hljs-comment">  * 0x0000 ~ 0x3fff</span><span class="hljs-comment">  */</span><span class="hljs-meta">#<span class="hljs-keyword">define</span> IAP_ADDR_SECTOR_00x0000  <span class="hljs-comment">//第一扇区基地址</span></span><span class="hljs-meta">#<span class="hljs-keyword">define</span> IAP_ADDR_SECTOR_10x0200  <span class="hljs-comment">//第二扇区基地址</span></span><span class="hljs-comment">/* IAP_CMD register */</span><span class="hljs-meta">#<span class="hljs-keyword">define</span> IAP_CMD_STANDBY0x00  <span class="hljs-comment">//待机模式</span></span><span class="hljs-meta">#<span class="hljs-keyword">define</span> IAP_CMD_BYTE_RD0x01  <span class="hljs-comment">//字节读</span></span><span class="hljs-meta">#<span class="hljs-keyword">define</span> IAP_CMD_BYTE_WR0x02  <span class="hljs-comment">//字节写</span></span><span class="hljs-meta">#<span class="hljs-keyword">define</span> IAP_CMD_SECTOR_ERASE0x03  <span class="hljs-comment">//扇区擦除</span></span><span class="hljs-comment">/* IAP_TRIG register */</span><span class="hljs-meta">#<span class="hljs-keyword">define</span> IAP_TRIG_FIRST0x5a</span><span class="hljs-meta">#<span class="hljs-keyword">define</span> IAP_TRIG_SECOND0xa5</span><span class="hljs-comment">/* IAP_CONTR register */</span><span class="hljs-meta">#<span class="hljs-keyword">define</span> IAP_EN0x80<span class="hljs-comment">//IAP使能</span></span><span class="hljs-meta">#<span class="hljs-keyword">define</span> IAP_ISP0x60<span class="hljs-comment">//复位后从系统ISP监控程序区启动</span></span><span class="hljs-meta">#<span class="hljs-keyword">define</span> IAP_TIMEOUT_1M0x07<span class="hljs-comment">//设置系统时钟小于或等于1MHZ</span></span><span class="hljs-meta">#<span class="hljs-keyword">define</span> IAP_TIMEOUT_2M0x06<span class="hljs-comment">//设置系统时钟小于或等于2MHZ</span></span><span class="hljs-meta">#<span class="hljs-keyword">define</span> IAP_TIMEOUT_3M0x05<span class="hljs-comment">//设置系统时钟小于或等于3MHZ</span></span><span class="hljs-meta">#<span class="hljs-keyword">define</span> IAP_TIMEOUT_6M0x04<span class="hljs-comment">//设置系统时钟小于或等于6MHZ</span></span><span class="hljs-meta">#<span class="hljs-keyword">define</span> IAP_TIMEOUT_12M0x03<span class="hljs-comment">//设置系统时钟小于或等于12MHZ</span></span><span class="hljs-meta">#<span class="hljs-keyword">define</span> IAP_TIMEOUT_20M0x02<span class="hljs-comment">//设置系统时钟小于或等于20MHZ</span></span><span class="hljs-meta">#<span class="hljs-keyword">define</span> IAP_TIMEOUT_24M0x01<span class="hljs-comment">//设置系统时钟小于或等于24MHZ</span></span><span class="hljs-meta">#<span class="hljs-keyword">define</span> IAP_TIMEOUT_30M0x00<span class="hljs-comment">//设置系统时钟小于或等于30MHZ</span></span><span class="hljs-keyword">extern</span> <span class="hljs-type">uint16_t</span> eeprom_save[TOTAL_ITEM];<span class="hljs-keyword">extern</span> <span class="hljs-type">void</span> <span class="hljs-title function_">iap_erase</span><span class="hljs-params">(<span class="hljs-type">unsigned</span> <span class="hljs-type">int</span> addr)</span>;<span class="hljs-keyword">extern</span> <span class="hljs-type">void</span> <span class="hljs-title function_">iap_rd_byte</span><span class="hljs-params">(<span class="hljs-type">unsigned</span> <span class="hljs-type">int</span> addr, <span class="hljs-type">unsigned</span> <span class="hljs-type">char</span>* dat)</span>;<span class="hljs-keyword">extern</span> <span class="hljs-type">void</span> <span class="hljs-title function_">iap_wr_byte</span><span class="hljs-params">(<span class="hljs-type">unsigned</span> <span class="hljs-type">int</span> addr,<span class="hljs-type">unsigned</span> <span class="hljs-type">char</span>* dat)</span>;<span class="hljs-keyword">extern</span> <span class="hljs-type">void</span> <span class="hljs-title function_">iap_rd_data</span><span class="hljs-params">(<span class="hljs-type">void</span>)</span>;<span class="hljs-keyword">extern</span> <span class="hljs-type">void</span> <span class="hljs-title function_">iap_wr_data</span><span class="hljs-params">(<span class="hljs-type">void</span>)</span>;<span class="hljs-meta">#<span class="hljs-keyword">endif</span></span></code></pre></div><div class="code-wrapper"><pre><code class="hljs c"><span class="hljs-comment">/**</span><span class="hljs-comment">  ******************************************************************************</span><span class="hljs-comment">  * @file    eeprom.c </span><span class="hljs-comment">  * @version V1.0.0</span><span class="hljs-comment">  * @date    2023.03.16</span><span class="hljs-comment">  * @author  Kayoung</span><span class="hljs-comment">  * @brief   IAP EEPROM 相关功能</span><span class="hljs-comment">  * @details  </span><span class="hljs-comment">  ******************************************************************************</span><span class="hljs-comment">  * @attention </span><span class="hljs-comment">  ******************************************************************************</span><span class="hljs-comment">  */</span><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;eeprom.h&quot;</span></span><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;intrins.h&quot;</span></span><span class="hljs-comment">/* 定义一个存储数据数组 */</span><span class="hljs-type">uint16_t</span> eeprom_save[TOTAL_ITEM] = &#123;<span class="hljs-number">0</span>&#125;; <span class="hljs-comment">//注意：每个数据两字节</span><span class="hljs-comment">/**</span><span class="hljs-comment">  * @brief  关闭IAP功能</span><span class="hljs-comment">  * @param  None</span><span class="hljs-comment">  * @retval None</span><span class="hljs-comment">  */</span><span class="hljs-type">void</span> <span class="hljs-title function_">iap_disable</span><span class="hljs-params">(<span class="hljs-type">void</span>)</span>&#123;IAP_CONTR = <span class="hljs-number">0</span>;IAP_CMD = <span class="hljs-number">0</span>;IAP_TRIG = <span class="hljs-number">0</span>;IAP_ADDRH = <span class="hljs-number">0xff</span>;IAP_ADDRL = <span class="hljs-number">0xff</span>;&#125;<span class="hljs-comment">/**</span><span class="hljs-comment">  * @brief  擦除某地址所在的扇区</span><span class="hljs-comment">  * @param  addr：待擦除扇区地址</span><span class="hljs-comment">  * @retval None</span><span class="hljs-comment">  */</span><span class="hljs-type">void</span> <span class="hljs-title function_">iap_erase</span><span class="hljs-params">(<span class="hljs-type">uint32_t</span> addr)</span>&#123;IAP_CONTR = IAP_EN | IAP_TIMEOUT_12M;<span class="hljs-comment">//允许IAP操作，设置IAP操作速度         </span>IAP_CMD = IAP_CMD_SECTOR_ERASE;<span class="hljs-comment">//扇区擦除命令            </span>IAP_ADDRL = addr;              IAP_ADDRH = addr &gt;&gt; <span class="hljs-number">8</span>;<span class="hljs-comment">//地址赋值          </span>IAP_TRIG = IAP_TRIG_FIRST;                IAP_TRIG = IAP_TRIG_SECOND;<span class="hljs-comment">//触发命令               </span>_nop_();_nop_();         iap_disable();<span class="hljs-comment">//清空IAP操作寄存器等</span>&#125;<span class="hljs-comment">/**</span><span class="hljs-comment">  * @brief  在某地址写入一个字节</span><span class="hljs-comment">  * @param  addr: 地址</span><span class="hljs-comment">  * @paramdat： 待写入的一字节数据指针</span><span class="hljs-comment">  * @retval None</span><span class="hljs-comment">  */</span><span class="hljs-type">void</span> <span class="hljs-title function_">iap_wr_byte</span><span class="hljs-params">(<span class="hljs-type">uint32_t</span> addr,<span class="hljs-type">uint8_t</span>* dat)</span>&#123;IAP_CONTR = IAP_EN | IAP_TIMEOUT_12M;<span class="hljs-comment">//允许IAP操作，设置IAP操作速度   </span>IAP_CMD = IAP_CMD_BYTE_WR;<span class="hljs-comment">//IAP写命令</span>IAP_ADDRL = addr;IAP_ADDRH = addr &gt;&gt; <span class="hljs-number">8</span>;<span class="hljs-comment">//地址赋值</span>IAP_DATA = *dat;<span class="hljs-comment">//更新写寄存器</span>IAP_TRIG = IAP_TRIG_FIRST;IAP_TRIG = IAP_TRIG_SECOND;<span class="hljs-comment">//触发</span>_nop_();iap_disable();<span class="hljs-comment">//清空IAP操作寄存器等</span>&#125;<span class="hljs-comment">/**</span><span class="hljs-comment">  * @brief  读取某地址一个字节</span><span class="hljs-comment">  * @param  addr: 地址</span><span class="hljs-comment">  * @param  dat： 待读取的一字节数据指针</span><span class="hljs-comment">  * @retval None</span><span class="hljs-comment">  */</span><span class="hljs-type">void</span> <span class="hljs-title function_">iap_rd_byte</span><span class="hljs-params">(<span class="hljs-type">uint32_t</span> addr, <span class="hljs-type">uint8_t</span>* dat)</span>&#123;IAP_CONTR = IAP_EN | IAP_TIMEOUT_12M;<span class="hljs-comment">//允许IAP</span>IAP_CMD = IAP_CMD_BYTE_RD;<span class="hljs-comment">//IAP读命令</span>IAP_ADDRL = addr;IAP_ADDRH = addr &gt;&gt; <span class="hljs-number">8</span>;<span class="hljs-comment">//地址赋值</span>IAP_TRIG = IAP_TRIG_FIRST;IAP_TRIG = IAP_TRIG_SECOND;<span class="hljs-comment">//触发</span>_nop_();_nop_();*dat = IAP_DATA;iap_disable();<span class="hljs-comment">//清空IAP操作寄存器等</span>&#125;<span class="hljs-comment">/**</span><span class="hljs-comment">  * @brief  读取eeprom存储的参数</span><span class="hljs-comment">  * @param  None</span><span class="hljs-comment">  * @retval None</span><span class="hljs-comment">  */</span><span class="hljs-type">void</span> <span class="hljs-title function_">iap_rd_data</span><span class="hljs-params">(<span class="hljs-type">void</span>)</span>&#123;<span class="hljs-type">uint8_t</span> tmp_h = <span class="hljs-number">0</span>, tmp_l = <span class="hljs-number">0</span>; <span class="hljs-comment">//临时变量</span><span class="hljs-type">uint8_t</span> i;<span class="hljs-keyword">for</span>(i = <span class="hljs-number">0</span>; i &lt; TOTAL_ITEM; i++)&#123;iap_rd_byte(IAP_ADDR_SECTOR_0 + <span class="hljs-number">2</span>*i, &amp;tmp_l);iap_rd_byte(IAP_ADDR_SECTOR_0 + <span class="hljs-number">2</span>*i+<span class="hljs-number">1</span>, &amp;tmp_h);eeprom_save[i] = tmp_h &lt;&lt; <span class="hljs-number">8</span> | tmp_l; <span class="hljs-comment">//EEPROM中每两个字节组成一个数据</span>&#125;&#125;<span class="hljs-comment">/**</span><span class="hljs-comment">  * @brief  存储数据到eeprom</span><span class="hljs-comment">  * @param  void</span><span class="hljs-comment">  * @retval None</span><span class="hljs-comment">  */</span><span class="hljs-type">void</span> <span class="hljs-title function_">iap_wr_data</span><span class="hljs-params">(<span class="hljs-type">void</span>)</span>&#123;<span class="hljs-type">uint8_t</span> tmp_h = <span class="hljs-number">0</span>, tmp_l = <span class="hljs-number">0</span>; <span class="hljs-comment">//临时变量</span><span class="hljs-type">uint8_t</span> i;<span class="hljs-comment">/* 保存之前，擦除当前需要保存数据的扇区 */</span><span class="hljs-keyword">for</span>(i = <span class="hljs-number">0</span>; i &lt; TOTAL_ITEM; i++)&#123;<span class="hljs-keyword">if</span>(eeprom_save[i] != <span class="hljs-number">0xffff</span>)&#123;iap_erase(IAP_ADDR_SECTOR_0);<span class="hljs-comment">//擦除eeprom 1st sector</span><span class="hljs-keyword">break</span>;&#125;&#125;<span class="hljs-comment">/* 存储数据到eeprom */</span><span class="hljs-keyword">for</span>(i = <span class="hljs-number">0</span>; i &lt; TOTAL_ITEM; i++)&#123;        <span class="hljs-comment">/* 擦除完EEPROM，每个字节数据都是0xff*/</span><span class="hljs-keyword">if</span>(eeprom_save[i] == <span class="hljs-number">0xffff</span>)eeprom_save[i] = <span class="hljs-number">0</span>;tmp_h = eeprom_save[i] / <span class="hljs-number">256</span>;tmp_l = eeprom_save[i] % <span class="hljs-number">256</span>;iap_wr_byte(IAP_ADDR_SECTOR_0 + <span class="hljs-number">2</span>*i, &amp;tmp_l);iap_wr_byte(IAP_ADDR_SECTOR_0 + <span class="hljs-number">2</span>*i+<span class="hljs-number">1</span>, &amp;tmp_h);&#125;&#125;</code></pre></div><p>程序附件 <ahref="https://gitee.com/kayoungzhang/my_codehub.git">iap_eeprom</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;STC单片机内部集成了的EEPROM是与程序空间是分开的，利用ISP/IAP技术可将内部Data
Flash当EEPROM，擦写次数在10万次以上。以下根据datasheet简单介绍一下单片机内部EEPROM的编程方式。&lt;/p&gt;
&lt;h3
id=&quot;iap及eeprom特</summary>
      
    
    
    
    <category term="单片机" scheme="http://example.com/categories/%E5%8D%95%E7%89%87%E6%9C%BA/"/>
    
    
    <category term="stc" scheme="http://example.com/tags/stc/"/>
    
  </entry>
  
  <entry>
    <title>关于LCD1602的程序开发</title>
    <link href="http://example.com/2023/04/26/%E5%85%B3%E4%BA%8ELCD1602%E7%9A%84%E7%A8%8B%E5%BA%8F%E5%BC%80%E5%8F%91/"/>
    <id>http://example.com/2023/04/26/%E5%85%B3%E4%BA%8ELCD1602%E7%9A%84%E7%A8%8B%E5%BA%8F%E5%BC%80%E5%8F%91/</id>
    <published>2023-04-26T08:39:37.000Z</published>
    <updated>2023-05-11T10:10:43.766Z</updated>
    
    <content type="html"><![CDATA[<p>LCD1602字符型显示屏在单片机程序开发中作为显示输出的器件，因为简单，成本低，被大量应用。在我们平时开发调试过程中，除了串口printf可以输出信息外，其实，LCD1602一样可以作为调试工具，用来输出一些重要信息。下面详细介绍一下它的程序设计。</p><h3 id="lcd1602引脚信号">1. LCD1602引脚信号</h3><p><img src="https://gitee.com/kayoungzhang/picgo_res/raw/master/img/image-20230426170209080.png" alt="image-20230426170209080" style="zoom: 67%;" /></p><h3 id="基本操作时序">2. 基本操作时序</h3><ul><li>读状态：RS = L，RW = H， E = H</li><li>写指令：RS = L，RW = L， D0~D7 = 指令码， E = 下降沿</li><li>读数据：RS = H，RW = H， E = H</li><li>写数据：RS = H，RW = L， D0~D7 = 数据， E = 下降沿</li></ul><p>（H：高电平，L：低电平）</p><p><img src="https://gitee.com/kayoungzhang/picgo_res/raw/master/img/image-20230426172246464.png" alt="image-20230426172246464" style="zoom: 67%;" /></p><p><img src="https://gitee.com/kayoungzhang/picgo_res/raw/master/img/image-20230426172326018.png" alt="image-20230426172326018" style="zoom:67%;" /></p><p><img src="https://gitee.com/kayoungzhang/picgo_res/raw/master/img/image-20230426172355403.png" alt="image-20230426172355403" style="zoom:67%;" /></p><h3 id="内部地址ram映射表">3. 内部地址RAM映射表</h3><p><img src="https://gitee.com/kayoungzhang/picgo_res/raw/master/img/image-20230426171931946.png" alt="image-20230426171931946"  /></p><h3 id="lcd1602指令码">4. LCD1602指令码</h3><figure><imgsrc="https://gitee.com/kayoungzhang/picgo_res/raw/master/img/image-20230426184139175.png"alt="image-20230426184139175" /><figcaption aria-hidden="true">image-20230426184139175</figcaption></figure><h3 id="程序实现">5.程序实现</h3><div class="code-wrapper"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">ifndef</span> LCD1602_H</span><span class="hljs-meta">#<span class="hljs-keyword">define</span> LCD1602_H</span><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;STC15.H&gt;</span></span><span class="hljs-keyword">typedef</span> <span class="hljs-type">unsigned</span> <span class="hljs-type">char</span> <span class="hljs-type">uint8_t</span>;<span class="hljs-keyword">typedef</span> <span class="hljs-type">unsigned</span> <span class="hljs-type">int</span>  <span class="hljs-type">uint32_t</span>;<span class="hljs-comment">/* 引脚定义 */</span><span class="hljs-meta">#<span class="hljs-keyword">define</span> LCD1602_RSP26</span><span class="hljs-meta">#<span class="hljs-keyword">define</span> LCD1602_ENP27</span><span class="hljs-meta">#<span class="hljs-keyword">define</span> LCD1602_WRP25</span><span class="hljs-meta">#<span class="hljs-keyword">define</span> LCD1602_DATAP0</span><span class="hljs-comment">/* LCD1602指令码 */</span><span class="hljs-comment">/* 1. Clear Display */</span>  <span class="hljs-meta">#<span class="hljs-keyword">define</span>  DISP_CLEAR0x01</span><span class="hljs-comment">/* 2. Return Home */</span><span class="hljs-meta">#<span class="hljs-keyword">define</span>  CURSOR_RETURN0x02</span><span class="hljs-comment">/* 3. Entry Mode Set */</span><span class="hljs-meta">#<span class="hljs-keyword">define</span>  AC_INCREMENT0x06</span><span class="hljs-meta">#<span class="hljs-keyword">define</span>  AC_DECREMENT       0x04</span><span class="hljs-meta">#<span class="hljs-keyword">define</span>  DISP_SHIFT_ON    0x05</span><span class="hljs-meta">#<span class="hljs-keyword">define</span>  DISP_SHIFT_OFF    0x04</span><span class="hljs-comment">/* 4. Display On/Off Control */</span><span class="hljs-meta">#<span class="hljs-keyword">define</span>  DISP_ON0x0c</span><span class="hljs-meta">#<span class="hljs-keyword">define</span>  CURSOR_ON    0x0a</span><span class="hljs-meta">#<span class="hljs-keyword">define</span>  CURSOR_BLINK0x09</span><span class="hljs-meta">#<span class="hljs-keyword">define</span> DISP_OFF0x08</span><span class="hljs-comment">/* 5. Cursor or Display Shift */</span><span class="hljs-meta">#<span class="hljs-keyword">define</span>  CURSOR_SHIFT_LEFT   0x10</span><span class="hljs-meta">#<span class="hljs-keyword">define</span>  CURSOR_SHIFT_RIGHT 0x14</span><span class="hljs-meta">#<span class="hljs-keyword">define</span>  DISP_SHIFT_LEFT 0x18</span><span class="hljs-meta">#<span class="hljs-keyword">define</span>  DISP_SHIFT_RIGHT 0x1c</span><span class="hljs-comment">/* 6. Function Set */</span><span class="hljs-meta">#<span class="hljs-keyword">define</span>  DATA_LENGTH_4   0x20</span><span class="hljs-meta">#<span class="hljs-keyword">define</span>  DATA_LENGTH_8   0x30</span><span class="hljs-meta">#<span class="hljs-keyword">define</span>  DISP_ONE_LINE 0x20  </span><span class="hljs-meta">#<span class="hljs-keyword">define</span>  DISP_TWO_LINE 0x28</span><span class="hljs-meta">#<span class="hljs-keyword">define</span>  DOT_FONT_5X8    0x20</span><span class="hljs-meta">#<span class="hljs-keyword">define</span>  DOT_FONT_5X10   0x24</span><span class="hljs-comment">/* 数据地址AC */</span><span class="hljs-meta">#<span class="hljs-keyword">define</span> DATA_ADDR_ROW_ONE  0x80</span><span class="hljs-meta">#<span class="hljs-keyword">define</span> DATA_ADDR_ROW_TWO  0xc0</span><span class="hljs-comment">/* 函数声明 */</span><span class="hljs-keyword">extern</span> <span class="hljs-type">void</span> <span class="hljs-title function_">lcd1602_init</span><span class="hljs-params">(<span class="hljs-type">void</span>)</span>;<span class="hljs-keyword">extern</span> <span class="hljs-type">void</span> <span class="hljs-title function_">lcd1602_showchar</span><span class="hljs-params">(<span class="hljs-type">uint8_t</span> row, <span class="hljs-type">uint8_t</span> column, <span class="hljs-type">uint8_t</span> wr_char)</span>;<span class="hljs-keyword">extern</span> <span class="hljs-type">void</span> <span class="hljs-title function_">lcd1602_showstring</span><span class="hljs-params">(<span class="hljs-type">uint8_t</span> row, <span class="hljs-type">uint8_t</span> column, <span class="hljs-type">uint8_t</span>* p_wr_string)</span>;<span class="hljs-keyword">extern</span> <span class="hljs-type">void</span> <span class="hljs-title function_">lcd1602_shownum</span><span class="hljs-params">(<span class="hljs-type">uint8_t</span> row, <span class="hljs-type">uint8_t</span> column, <span class="hljs-type">uint32_t</span> num, <span class="hljs-type">uint8_t</span> num_length)</span>;<span class="hljs-keyword">extern</span> <span class="hljs-type">void</span> <span class="hljs-title function_">lcd1602_show_signednum</span><span class="hljs-params">(<span class="hljs-type">uint8_t</span> row, <span class="hljs-type">uint8_t</span> column, <span class="hljs-type">int</span> num, <span class="hljs-type">uint8_t</span> num_length)</span>;<span class="hljs-keyword">extern</span> <span class="hljs-type">void</span> <span class="hljs-title function_">lcd1602_showhex</span><span class="hljs-params">(<span class="hljs-type">uint8_t</span> row, <span class="hljs-type">uint8_t</span> column, <span class="hljs-type">uint32_t</span> num, <span class="hljs-type">uint8_t</span> num_length)</span>;<span class="hljs-keyword">extern</span> <span class="hljs-type">void</span> <span class="hljs-title function_">lcd1602_showbin</span><span class="hljs-params">(<span class="hljs-type">uint8_t</span> row, <span class="hljs-type">uint8_t</span> column, <span class="hljs-type">uint32_t</span> num, <span class="hljs-type">uint8_t</span> num_length)</span>;<span class="hljs-keyword">extern</span> <span class="hljs-type">void</span> <span class="hljs-title function_">lcd1602_dip_shift</span><span class="hljs-params">(<span class="hljs-type">void</span>)</span>;<span class="hljs-keyword">extern</span> <span class="hljs-type">void</span> <span class="hljs-title function_">lcd1602_clear</span><span class="hljs-params">(<span class="hljs-type">void</span>)</span>;<span class="hljs-meta">#<span class="hljs-keyword">endif</span></span></code></pre></div><div class="code-wrapper"><pre><code class="hljs c"><span class="hljs-comment">/**</span><span class="hljs-comment">  ************************************************</span><span class="hljs-comment">  * @file    lcd1602.c</span><span class="hljs-comment">  * @authorKayoung</span><span class="hljs-comment">  * @versionV1.0</span><span class="hljs-comment">  * @date20220326</span><span class="hljs-comment">  * @briefLCD1602显示驱动</span><span class="hljs-comment">  **********************************************</span><span class="hljs-comment">  */</span> <span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;lcd1602.h&quot;</span></span><span class="hljs-type">static</span> <span class="hljs-type">void</span> <span class="hljs-title function_">delay1ms</span><span class="hljs-params">()</span><span class="hljs-comment">//@11.0592MHz</span>&#123;<span class="hljs-type">unsigned</span> <span class="hljs-type">char</span> i, j;i = <span class="hljs-number">2</span>;j = <span class="hljs-number">199</span>;<span class="hljs-keyword">do</span>&#123;<span class="hljs-keyword">while</span> (--j);&#125; <span class="hljs-keyword">while</span> (--i);&#125;<span class="hljs-type">static</span> <span class="hljs-type">void</span> <span class="hljs-title function_">delay300ms</span><span class="hljs-params">()</span><span class="hljs-comment">//@11.0592MHz</span>&#123;<span class="hljs-type">unsigned</span> <span class="hljs-type">char</span> i, j, k;i = <span class="hljs-number">13</span>;j = <span class="hljs-number">156</span>;k = <span class="hljs-number">83</span>;<span class="hljs-keyword">do</span>&#123;<span class="hljs-keyword">do</span>&#123;<span class="hljs-keyword">while</span> (--k);&#125; <span class="hljs-keyword">while</span> (--j);&#125; <span class="hljs-keyword">while</span> (--i);&#125;<span class="hljs-comment">/**</span><span class="hljs-comment">  * @brieflcd1602写命令</span><span class="hljs-comment">  * @paramcommand：命令</span><span class="hljs-comment">  * @retvalNone</span><span class="hljs-comment">  */</span><span class="hljs-type">static</span> <span class="hljs-type">void</span> <span class="hljs-title function_">lcd1602_wr_com</span><span class="hljs-params">(<span class="hljs-type">uint8_t</span> command)</span>&#123;LCD1602_RS = <span class="hljs-number">0</span>;LCD1602_WR = <span class="hljs-number">0</span>;LCD1602_DATA = command;LCD1602_EN = <span class="hljs-number">1</span>;delay1ms();<span class="hljs-comment">//根据timing，延时1ms，确保命令写到命令端口上</span>LCD1602_EN = <span class="hljs-number">0</span>;delay1ms();&#125;<span class="hljs-comment">/**</span><span class="hljs-comment">  * @brieflcd1602写数据</span><span class="hljs-comment">  * @paramwr_data: 待写入的数据</span><span class="hljs-comment">  * @retvalNone</span><span class="hljs-comment">  */</span><span class="hljs-type">static</span> <span class="hljs-type">void</span> <span class="hljs-title function_">lcd1602_wr_data</span><span class="hljs-params">(<span class="hljs-type">uint8_t</span> wr_data)</span>&#123;LCD1602_RS = <span class="hljs-number">1</span>;LCD1602_WR = <span class="hljs-number">0</span>;LCD1602_DATA = wr_data;LCD1602_EN = <span class="hljs-number">1</span>;delay1ms();LCD1602_EN = <span class="hljs-number">0</span>;delay1ms();&#125;<span class="hljs-comment">/**</span><span class="hljs-comment">  * @brieflcd1602初始化</span><span class="hljs-comment">  * @paramNone</span><span class="hljs-comment">  * @retvalNone</span><span class="hljs-comment">  */</span><span class="hljs-type">void</span> <span class="hljs-title function_">lcd1602_init</span><span class="hljs-params">(<span class="hljs-type">void</span>)</span>&#123;lcd1602_wr_com(DATA_LENGTH_8 | DISP_TWO_LINE); <span class="hljs-comment">//16x2显示模式，5x7点阵，8位数据接口</span>lcd1602_wr_com(DISP_ON); <span class="hljs-comment">//开显示，不显示光标</span>lcd1602_wr_com(AC_INCREMENT); <span class="hljs-comment">//写一个字符后，AC加1</span>lcd1602_wr_com(DISP_CLEAR); <span class="hljs-comment">//显示清零</span>&#125;<span class="hljs-comment">/**</span><span class="hljs-comment">  * @brief确定光标位置</span><span class="hljs-comment">  * @paramrow: 行（1~2）</span><span class="hljs-comment">  * @param  column：列（1~16）</span><span class="hljs-comment">  * @retvalNone</span><span class="hljs-comment">  */</span><span class="hljs-type">void</span> <span class="hljs-title function_">lcd1602_set_cursor</span><span class="hljs-params">(<span class="hljs-type">uint8_t</span> row, <span class="hljs-type">uint8_t</span> column)</span>&#123;<span class="hljs-comment">/* 确定位置 */</span><span class="hljs-keyword">if</span>(row == <span class="hljs-number">1</span>)&#123;lcd1602_wr_com(DATA_ADDR_ROW_ONE | (column - <span class="hljs-number">1</span>)); &#125;<span class="hljs-keyword">else</span>&#123;lcd1602_wr_com(DATA_ADDR_ROW_TWO | (column - <span class="hljs-number">1</span>));&#125;&#125;<span class="hljs-comment">/**</span><span class="hljs-comment">  * @brief显示一个字符</span><span class="hljs-comment">  * @paramrow: 行（1~2）</span><span class="hljs-comment">  * @param  column：列（1~16）</span><span class="hljs-comment">  * @param  wr_char：待写入的字符</span><span class="hljs-comment">  * @retvalNone</span><span class="hljs-comment">  */</span><span class="hljs-type">void</span> <span class="hljs-title function_">lcd1602_showchar</span><span class="hljs-params">(<span class="hljs-type">uint8_t</span> row, <span class="hljs-type">uint8_t</span> column, <span class="hljs-type">uint8_t</span> wr_char)</span>&#123;lcd1602_set_cursor(row, column);<span class="hljs-comment">/* 写入数据 */</span>lcd1602_wr_data(wr_char);&#125;<span class="hljs-comment">/**</span><span class="hljs-comment">  * @brief显示字符串</span><span class="hljs-comment">  * @paramrow: 行（1~2）</span><span class="hljs-comment">  * @param  column：列（1~16）</span><span class="hljs-comment">  * @param  p_wr_string：待写入的字符串指针</span><span class="hljs-comment">  * @retvalNone</span><span class="hljs-comment">  */</span><span class="hljs-type">void</span> <span class="hljs-title function_">lcd1602_showstring</span><span class="hljs-params">(<span class="hljs-type">uint8_t</span> row, <span class="hljs-type">uint8_t</span> column, <span class="hljs-type">uint8_t</span>* p_wr_string)</span>&#123;lcd1602_set_cursor(row, column);<span class="hljs-keyword">while</span>((*p_wr_string) != <span class="hljs-string">&#x27;\0&#x27;</span>)&#123;lcd1602_wr_data(*p_wr_string++);&#125;&#125;<span class="hljs-comment">/**</span><span class="hljs-comment">  * @brief指数函数</span><span class="hljs-comment">  * @parambase: 底数</span><span class="hljs-comment">  * @paramindex：幂指数</span><span class="hljs-comment">  * @retvalresult：结果</span><span class="hljs-comment">  */</span><span class="hljs-type">int</span> <span class="hljs-title function_">lcd_pow</span><span class="hljs-params">(base, index)</span>&#123;<span class="hljs-type">uint8_t</span> i;<span class="hljs-comment">//循环变量</span><span class="hljs-type">int</span> result = <span class="hljs-number">1</span>;<span class="hljs-keyword">for</span>(i = <span class="hljs-number">0</span>; i &lt; index; i++)&#123;result *= base;&#125;<span class="hljs-keyword">return</span> result;&#125;<span class="hljs-comment">/**</span><span class="hljs-comment">  * @brief显示一个数字</span><span class="hljs-comment">  * @paramrow: 行（1~2）</span><span class="hljs-comment">  * @param  column：列（1~16）</span><span class="hljs-comment">  * @param  num：待写入的数(0~65535)</span><span class="hljs-comment">  * @param  num_length: 数的位数</span><span class="hljs-comment">  * @retvalNone</span><span class="hljs-comment">  */</span><span class="hljs-type">void</span> <span class="hljs-title function_">lcd1602_shownum</span><span class="hljs-params">(<span class="hljs-type">uint8_t</span> row, <span class="hljs-type">uint8_t</span> column, <span class="hljs-type">uint32_t</span> num, <span class="hljs-type">uint8_t</span> num_length)</span>&#123;<span class="hljs-type">uint8_t</span> i; <span class="hljs-comment">//循环变量</span>lcd1602_set_cursor(row, column);<span class="hljs-comment">/* 显示各位数字字符 */</span><span class="hljs-keyword">for</span>(i = num_length; i &gt; <span class="hljs-number">0</span>; i--)&#123;<span class="hljs-comment">/* 根据规律，每次循环，得出其中的一位 */</span>lcd1602_wr_data((num / lcd_pow(<span class="hljs-number">10</span>, (i<span class="hljs-number">-1</span>)) % <span class="hljs-number">10</span>) + <span class="hljs-string">&#x27;0&#x27;</span>); <span class="hljs-comment">//转换成数字字符</span>&#125;&#125;<span class="hljs-comment">/**</span><span class="hljs-comment">  * @brief显示一个带符号数字</span><span class="hljs-comment">  * @paramrow: 行（1~2）</span><span class="hljs-comment">  * @param  column：列（1~16）</span><span class="hljs-comment">  * @param  num：待写入的数</span><span class="hljs-comment">  * @param  num_length: 数的位数</span><span class="hljs-comment">  * @retvalNone</span><span class="hljs-comment">  */</span><span class="hljs-type">void</span> <span class="hljs-title function_">lcd1602_show_signednum</span><span class="hljs-params">(<span class="hljs-type">uint8_t</span> row, <span class="hljs-type">uint8_t</span> column, <span class="hljs-type">int</span> num, <span class="hljs-type">uint8_t</span> num_length)</span>&#123;<span class="hljs-type">uint8_t</span> i; <span class="hljs-comment">//循环变量</span><span class="hljs-type">uint32_t</span> num_temp;<span class="hljs-comment">//无符号临时变量，存储有符号数字</span>lcd1602_set_cursor(row, column);<span class="hljs-comment">/* 判断是否是带符号数字 */</span><span class="hljs-keyword">if</span>(num &gt;= <span class="hljs-number">0</span>)&#123;lcd1602_wr_data(<span class="hljs-string">&#x27;+&#x27;</span>);num_temp = num;&#125;<span class="hljs-keyword">else</span>&#123;lcd1602_wr_data(<span class="hljs-string">&#x27;-&#x27;</span>);num_temp = -num;&#125;<span class="hljs-comment">/* 显示各位数字字符 */</span><span class="hljs-keyword">for</span>(i = num_length; i &gt; <span class="hljs-number">0</span>; i--)&#123;<span class="hljs-comment">/* 根据规律，每次循环，得出其中的一位 */</span>lcd1602_wr_data((num_temp / lcd_pow(<span class="hljs-number">10</span>, (i<span class="hljs-number">-1</span>)) % <span class="hljs-number">10</span>) + <span class="hljs-string">&#x27;0&#x27;</span>); <span class="hljs-comment">//转换成数字字符</span>&#125;&#125;<span class="hljs-comment">/**</span><span class="hljs-comment">  * @brief显示十六进制数</span><span class="hljs-comment">  * @paramrow: 行（1~2）</span><span class="hljs-comment">  * @param  column：列（1~16）</span><span class="hljs-comment">  * @param  num：待写入的数</span><span class="hljs-comment">  * @param  num_length: 数的位数</span><span class="hljs-comment">  * @retvalNone</span><span class="hljs-comment">  */</span><span class="hljs-type">void</span> <span class="hljs-title function_">lcd1602_showhex</span><span class="hljs-params">(<span class="hljs-type">uint8_t</span> row, <span class="hljs-type">uint8_t</span> column, <span class="hljs-type">uint32_t</span> num, <span class="hljs-type">uint8_t</span> num_length)</span>&#123;<span class="hljs-type">uint8_t</span> i;<span class="hljs-comment">//循环变量</span><span class="hljs-type">uint8_t</span> single_num; <span class="hljs-comment">//存储单个位数</span>lcd1602_set_cursor(row, column);<span class="hljs-comment">/* 显示各位数字字符 */</span><span class="hljs-keyword">for</span>(i = num_length; i &gt; <span class="hljs-number">0</span>; i--)&#123;<span class="hljs-comment">/* 根据规律，每次循环，得出其中的一位 */</span>single_num = num / lcd_pow(<span class="hljs-number">16</span>, (i<span class="hljs-number">-1</span>)) % <span class="hljs-number">16</span>;<span class="hljs-keyword">if</span>(single_num &lt; <span class="hljs-number">10</span>)<span class="hljs-comment">//0~9</span>&#123;lcd1602_wr_data(single_num + <span class="hljs-string">&#x27;0&#x27;</span>); <span class="hljs-comment">//转换成数字字符</span>&#125;<span class="hljs-keyword">else</span>  <span class="hljs-comment">//A~F</span>&#123;lcd1602_wr_data(single_num + <span class="hljs-string">&#x27;A&#x27;</span> - <span class="hljs-number">10</span>); <span class="hljs-comment">//转换成数字字符</span>&#125;&#125;&#125;<span class="hljs-comment">/**</span><span class="hljs-comment">  * @brief显示一个数的二进制</span><span class="hljs-comment">  * @paramrow: 行（1~2）</span><span class="hljs-comment">  * @param  column：列（1~16）</span><span class="hljs-comment">  * @param  num：待写入的数(0~65535)</span><span class="hljs-comment">  * @param  num_length: 数的位数（8或16）</span><span class="hljs-comment">  * @retvalNone</span><span class="hljs-comment">  */</span><span class="hljs-type">void</span> <span class="hljs-title function_">lcd1602_showbin</span><span class="hljs-params">(<span class="hljs-type">uint8_t</span> row, <span class="hljs-type">uint8_t</span> column, <span class="hljs-type">uint32_t</span> num, <span class="hljs-type">uint8_t</span> num_length)</span>&#123;<span class="hljs-type">uint8_t</span> i; <span class="hljs-comment">//循环变量</span>lcd1602_set_cursor(row, column);<span class="hljs-comment">/* 显示各位数字字符 */</span><span class="hljs-keyword">for</span>(i = num_length; i &gt; <span class="hljs-number">0</span>; i--)&#123;<span class="hljs-comment">/* 根据规律，每次循环，得出其中的一位 */</span>lcd1602_wr_data((num / lcd_pow(<span class="hljs-number">2</span>, (i<span class="hljs-number">-1</span>)) % <span class="hljs-number">2</span>) + <span class="hljs-string">&#x27;0&#x27;</span>); <span class="hljs-comment">//转换成数字字符</span>&#125;&#125;<span class="hljs-comment">/**</span><span class="hljs-comment">  * @brief lcd1602屏幕移动</span><span class="hljs-comment">  * @param None</span><span class="hljs-comment">  * @retval  None</span><span class="hljs-comment">  */</span><span class="hljs-type">void</span> <span class="hljs-title function_">lcd1602_dip_shift</span><span class="hljs-params">(<span class="hljs-type">void</span>)</span>&#123;lcd1602_wr_com(DISP_SHIFT_LEFT);delay300ms();&#125;<span class="hljs-comment">/**</span><span class="hljs-comment">  * @brieflcd1602清屏</span><span class="hljs-comment">  * @paramNone</span><span class="hljs-comment">  * @retvalNone</span><span class="hljs-comment">  */</span><span class="hljs-type">void</span> <span class="hljs-title function_">lcd1602_clear</span><span class="hljs-params">(<span class="hljs-type">void</span>)</span>&#123;lcd1602_wr_com(DISP_CLEAR);&#125;</code></pre></div><p>在 main函数中，根据需要调用这些接口函数，即可完成相应的功能。</p><p>代码已上传码云： <ahref="https://gitee.com/kayoungzhang/my_codehub.git">lcd1602</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;LCD1602字符型显示屏在单片机程序开发中作为显示输出的器件，因为简单，成本低，被大量应用。在我们平时开发调试过程中，除了串口printf可以输出信息外，其实，LCD1602一样可以作为调试工具，用来输出一些重要信息。下面详细介绍一下它的程序设计。&lt;/p&gt;
&lt;h3 id</summary>
      
    
    
    
    <category term="单片机" scheme="http://example.com/categories/%E5%8D%95%E7%89%87%E6%9C%BA/"/>
    
    
    <category term="lcd" scheme="http://example.com/tags/lcd/"/>
    
  </entry>
  
  <entry>
    <title>Typora数学公式格式编辑汇总</title>
    <link href="http://example.com/2023/04/24/Typora%E6%95%B0%E5%AD%A6%E5%85%AC%E5%BC%8F%E6%A0%BC%E5%BC%8F%E7%BC%96%E8%BE%91%E6%B1%87%E6%80%BB/"/>
    <id>http://example.com/2023/04/24/Typora%E6%95%B0%E5%AD%A6%E5%85%AC%E5%BC%8F%E6%A0%BC%E5%BC%8F%E7%BC%96%E8%BE%91%E6%B1%87%E6%80%BB/</id>
    <published>2023-04-24T09:03:33.000Z</published>
    <updated>2023-04-26T08:27:58.867Z</updated>
    
    <content type="html"><![CDATA[<p>在Typora编辑中，会经常使用到数学公式，以下总结常用的公式编辑语法。</p><h4 id="常用符号">常用符号</h4><table><thead><tr class="header"><th>类型及语法</th><th>显示</th><th>类型及语法</th><th>显示</th></tr></thead><tbody><tr class="odd"><td>上标 a^2</td><td><span class="math inline">\(a^2\)</span></td><td>下标 A_2</td><td><span class="math inline">\(A_2\)</span></td></tr><tr class="even"><td>正负号 2 \pm 3</td><td><span class="math inline">\(2 \pm 3\)</span></td><td>分式 \frac{1}{2}</td><td><span class="math inline">\(\frac{1}{2}\)</span></td></tr><tr class="odd"><td>根号 \sqrt[6]{2}</td><td><span class="math inline">\(\sqrt[6]{2}\)</span></td><td>水平线 \overline{a+b}=\underline{b+c}</td><td><spanclass="math inline">\(\overline{a+b}=\underline{b+c}\)</span></td></tr><tr class="even"><td>对数 \log_28</td><td><span class="math inline">\(log_28\)</span></td><td>矢量 \vec{a}</td><td><span class="math inline">\(\vec{a}\)</span></td></tr><tr class="odd"><td>上方箭头 \overleftarrow{x}</td><td><span class="math inline">\(\overleftarrow{x}\)</span></td><td>三角函数 \sin{\theta}</td><td><span class="math inline">\(\sin{\theta}\)</span></td></tr><tr class="even"><td>并集 A \bigcup B</td><td><span class="math inline">\(A \bigcup B\)</span></td><td>交集 A \bigcap B</td><td><span class="math inline">\(A \bigcap B\)</span></td></tr><tr class="odd"><td>属于 A \in B</td><td><span class="math inline">\(A \in B\)</span></td><td>异或 A \oplus B</td><td><span class="math inline">\(A \oplus B\)</span></td></tr><tr class="even"><td>同或 A \odot B</td><td><span class="math inline">\(A \odot B\)</span></td><td>存在 \exists</td><td><span class="math inline">\(\exists\)</span></td></tr><tr class="odd"><td>任意 \forall</td><td><span class="math inline">\(\forall\)</span></td><td>分隔符 \vert-2 \vert</td><td><span class="math inline">\(\vert-2 \vert\)</span></td></tr><tr class="even"><td>单空格 A \ B</td><td><span class="math inline">\(A \ B\)</span></td><td>Tab空格 A \quad B</td><td><span class="math inline">\(A \quad B\)</span></td></tr><tr class="odd"><td>多空格 A \qquad B</td><td><span class="math inline">\(A \qquad B\)</span></td><td>换行 A <code>\\</code> B</td><td>A<br />B</td></tr><tr class="even"><td>不定积分 \int{x}dx</td><td><span class="math inline">\(\int{x}dx\)</span></td><td>不等号 2 \neq 3</td><td><span class="math inline">\(2 \neq 3\)</span></td></tr><tr class="odd"><td>小于或等于 3 \leq 6</td><td><span class="math inline">\(3 \leq 6\)</span></td><td>大于或等于 8 \geq 3</td><td><span class="math inline">\(8 \geq 3\)</span></td></tr><tr class="even"><td>约等于 2.1 \approx 2</td><td><span class="math inline">\(2.1 \approx 2\)</span></td><td>水平双向箭头 \Longleftrightarrow</td><td><span class="math inline">\(\Longleftrightarrow\)</span></td></tr><tr class="odd"><td>水平单箭头 \longrightarrow</td><td><span class="math inline">\(\longrightarrow\)</span></td><td>水平双箭头 \Longleftarrow</td><td><span class="math inline">\(\Longleftarrow\)</span></td></tr><tr class="even"><td>箭头带字 A \xrightarrow{加热} B</td><td><span class="math inline">\(A \xrightarrow{加热} B\)</span></td><td>大号的括号 \left( \right)</td><td>$( ) $</td></tr><tr class="odd"><td>角度 \angle</td><td><span class="math inline">\(\angle\)</span></td><td>因为符 \because</td><td><span class="math inline">\(\because\)</span></td></tr><tr class="even"><td>所以符 \therefore</td><td><span class="math inline">\(\therefore\)</span></td><td>垂直符 \bot</td><td><span class="math inline">\(\bot\)</span></td></tr><tr class="odd"><td>字体大小\large A \small A</td><td><span class="math inline">\(\large A \small A\)</span></td><td>转义符 \ \</td><td>\</td></tr></tbody></table><p><strong>注意：如果上下标级联，需要{}括起来</strong></p><h4 id="希腊字母">希腊字母</h4><table><thead><tr class="header"><th>大写</th><th>Typora语法</th><th>小写</th><th>Typora语法</th><th>大写</th><th>Typora语法</th><th>小写</th><th>Typora语法</th></tr></thead><tbody><tr class="odd"><td>A</td><td>A</td><td>α</td><td>\alpha</td><td>Ω</td><td>\Omega</td><td>ω</td><td>\omega</td></tr><tr class="even"><td>B</td><td>B</td><td>β</td><td>\beta</td><td>Ψ</td><td>\Psi</td><td>ψ</td><td>\psi</td></tr><tr class="odd"><td>Γ</td><td>\Gamma</td><td>γ</td><td>\gamma</td><td>X</td><td>X</td><td>χ</td><td>\chi</td></tr><tr class="even"><td>Δ</td><td>\Delta</td><td>δ</td><td>\delta</td><td>φ</td><td>\varphi</td><td></td><td></td></tr><tr class="odd"><td>E</td><td>E</td><td>ϵ</td><td>\epsilon</td><td>Φ</td><td>\Phi</td><td>ϕ</td><td>\phi</td></tr><tr class="even"><td>ε</td><td>\varepsilon</td><td></td><td></td><td>Υ</td><td>\Upsilon</td><td>υ</td><td>\upsilon</td></tr><tr class="odd"><td>Z</td><td>Z</td><td>ζ</td><td>\zeta</td><td>T</td><td>T</td><td>τ</td><td>\tau</td></tr><tr class="even"><td>H</td><td>H</td><td>η</td><td>\eta</td><td>Σ</td><td>\Sigma</td><td>σ</td><td>\sigma</td></tr><tr class="odd"><td>Θ</td><td>\Theta</td><td>θ</td><td>\theta</td><td>P</td><td>P</td><td>ρ</td><td>\rho</td></tr><tr class="even"><td>I</td><td>I</td><td>ι</td><td>\iota</td><td>Π</td><td>\Pi</td><td>π</td><td>\pi</td></tr><tr class="odd"><td>K</td><td>K</td><td>κ</td><td>\kappa</td><td>O</td><td>O</td><td>ο</td><td>\omicron</td></tr><tr class="even"><td>Λ</td><td>\Lambda</td><td>λ</td><td>\lambda</td><td>Ξ</td><td>\Xi</td><td>ξ</td><td>\xi</td></tr><tr class="odd"><td>M</td><td>M</td><td>μ</td><td>\mu</td><td>N</td><td>N</td><td>ν</td><td>\nu</td></tr></tbody></table><h4 id="复杂表达式">复杂表达式</h4><p><strong>求和</strong> \sum_{n=1}^{100} {a_n}<br /><span class="math display">\[\sum_{n=1}^{100} {a_n}\]</span> <strong>累乘</strong> \prod_{n=1}^{199} {x_n} <spanclass="math display">\[\prod_{n=1}^{199} {x_n}\]</span> <strong>定积分</strong> \int_{1}^{2}xdx<br /><span class="math display">\[\int_{1}^{2}xdx\]</span> <strong>极限</strong> \lim_{n\rightarrow + \infty}{(a+b)}<br /><span class="math display">\[\lim_{n\rightarrow + \infty}{(a+b)}\]</span></p><p><strong>矩阵</strong></p><div class="code-wrapper"><pre><code class="hljs livescript">a = <span class="hljs-string">\left[\matrix&#123;\alpha_1</span> &amp; test1<span class="hljs-string">\\</span> <span class="hljs-string">\alpha_2</span> &amp; test2<span class="hljs-string">\\</span> <span class="hljs-string">\alpha_3</span> &amp; test3 &#125;<span class="hljs-string">\right]</span></code></pre></div><p><span class="math display">\[a = \left[\matrix{\alpha_1 &amp; test1\\ \alpha_2 &amp; test2\\ \alpha_3&amp; test3 }\right]\]</span> <strong>行列式</strong></p><div class="code-wrapper"><pre><code class="hljs livescript">X=<span class="hljs-string">\left|</span><span class="hljs-string">\begin&#123;matrix&#125;</span>x_&#123;<span class="hljs-number">11</span>&#125; &amp; x_&#123;<span class="hljs-number">12</span>&#125; &amp; <span class="hljs-string">\cdots</span> &amp; x_&#123;<span class="hljs-number">1d</span>&#125;<span class="hljs-string">\\</span>x_&#123;<span class="hljs-number">21</span>&#125; &amp; x_&#123;<span class="hljs-number">22</span>&#125; &amp; <span class="hljs-string">\cdots</span> &amp; x_&#123;<span class="hljs-number">2d</span>&#125;<span class="hljs-string">\\</span><span class="hljs-string">\vdots</span> &amp; <span class="hljs-string">\vdots</span> &amp; <span class="hljs-string">\ddots</span> &amp; <span class="hljs-string">\vdots</span> <span class="hljs-string">\\</span>x_&#123;<span class="hljs-number">11</span>&#125; &amp; x_&#123;<span class="hljs-number">12</span>&#125; &amp; <span class="hljs-string">\cdots</span> &amp; x_&#123;<span class="hljs-number">1d</span>&#125;<span class="hljs-string">\\</span><span class="hljs-string">\end&#123;matrix&#125;</span><span class="hljs-string">\right|</span> <span class="hljs-string">\tag&#123;2-3&#125;</span></code></pre></div><p><span class="math display">\[X=\left|    \begin{matrix}        x_{11} &amp; x_{12} &amp; \cdots &amp; x_{1d}\\        x_{21} &amp; x_{22} &amp; \cdots &amp; x_{2d}\\        \vdots &amp; \vdots &amp; \ddots &amp; \vdots \\        x_{11} &amp; x_{12} &amp; \cdots &amp; x_{1d}\\    \end{matrix}\right| \tag{2-3}\]</span> <strong>分段函数</strong></p><div class="code-wrapper"><pre><code class="hljs excel">f(<span class="hljs-built_in">n</span>)=\begin&#123;cases&#125;<span class="hljs-built_in">n</span>/<span class="hljs-number">2</span>, &amp; \text&#123;<span class="hljs-built_in">if</span> $<span class="hljs-built_in">n</span>$ is <span class="hljs-built_in">even</span>&#125;\\<span class="hljs-number">3</span><span class="hljs-built_in">n</span>+<span class="hljs-number">1</span>,&amp; \text&#123;<span class="hljs-built_in">if</span> $<span class="hljs-built_in">n</span>$ is <span class="hljs-built_in">odd</span>&#125;\end&#123;cases&#125;</code></pre></div><p><span class="math display">\[f(n)=    \begin{cases}        n/2, &amp; \text{if $n$ is even}\\        3n+1,&amp; \text{if $n$ is odd}    \end{cases}\]</span> <strong>方程组</strong></p><div class="code-wrapper"><pre><code class="hljs livescript"><span class="hljs-string">\left\&#123;</span><span class="hljs-string">\begin&#123;array&#125;&#123;c&#125;</span>a_1x+b_1y+c_1z=d_1<span class="hljs-string">\\</span>a_2x+b_2y+c_2z=d_2<span class="hljs-string">\\</span>a_3x+b_3y+c_3z=d_3<span class="hljs-string">\end&#123;array&#125;</span><span class="hljs-string">\right.</span> <span class="hljs-string">\tag&#123;1-1&#125;</span></code></pre></div><p><span class="math display">\[\left\{    \begin{array}{c}        a_1x+b_1y+c_1z=d_1\\        a_2x+b_2y+c_2z=d_2\\        a_3x+b_3y+c_3z=d_3    \end{array}\right. \tag{1-1}\]</span> 其它复杂的数学公式可直接在线编辑。</p><h4 id="在线编辑器">在线编辑器</h4><p><a href="https://www.latexlive.com/home">LaTeX公式编辑器</a></p><p><a href="http://www.hostmath.com/">The Equation Editor</a></p><h4 id="参考链接">参考链接</h4><p><ahref="https://blog.csdn.net/alwaysrun/article/details/115830269">Typora使用简介与插入数学公式</a></p><p><ahref="https://zhuanlan.zhihu.com/p/261750408">Typora数学公式汇总（Markdown）</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;在Typora编辑中，会经常使用到数学公式，以下总结常用的公式编辑语法。&lt;/p&gt;
&lt;h4 id=&quot;常用符号&quot;&gt;常用符号&lt;/h4&gt;
&lt;table&gt;

&lt;thead&gt;
&lt;tr class=&quot;header&quot;&gt;
&lt;th&gt;类型及语法&lt;/th&gt;
&lt;th&gt;显示&lt;/th&gt;
</summary>
      
    
    
    
    <category term="教程" scheme="http://example.com/categories/%E6%95%99%E7%A8%8B/"/>
    
    
    <category term="typora" scheme="http://example.com/tags/typora/"/>
    
  </entry>
  
  <entry>
    <title>PID理论及程序实现</title>
    <link href="http://example.com/2023/04/24/PID%E7%90%86%E8%AE%BA%E5%8F%8A%E7%A8%8B%E5%BA%8F%E5%AE%9E%E7%8E%B0/"/>
    <id>http://example.com/2023/04/24/PID%E7%90%86%E8%AE%BA%E5%8F%8A%E7%A8%8B%E5%BA%8F%E5%AE%9E%E7%8E%B0/</id>
    <published>2023-04-24T07:24:16.000Z</published>
    <updated>2023-04-25T03:14:11.659Z</updated>
    
    <content type="html"><![CDATA[<h3 id="pid控制的概念">PID控制的概念</h3><hr /><p>PID 控制的整体框图：</p><p><img src="https://gitee.com/kayoungzhang/picgo_res/raw/master/img/image-20230424111806125.png" alt="image-20230424111806125" style="zoom:80%;" /></p><p>PID是 <strong>P</strong>roportion <strong>I</strong>ntegration<strong>D</strong>ifferentiation 的缩写，由<strong>比例项（Proportion）</strong>，<strong>积分项（Integration）</strong>，<strong>微分项（Differentiation）</strong>三个部分组成，具体形式就是下面的公式： <span class="math display">\[U(t) = Kp \{ err(t) + \frac{1}{Ti}*\int_0^t err(t)dt +Td*\frac{derr(t)}{dt} \}\]</span> 其中： <strong>U(t)</strong>是调节器的输出信号，<strong>err(t)</strong> 是当前值和目标值的偏差，<strong>Kp</strong> 是比例增益， <strong>Ti</strong> 是积分时间，<strong>Td</strong> 是微分时间。</p><p>PID控制其实就是对偏差的控制过程；如果偏差为 0,则比例环节不起作用，只有存在偏差时，比例环节才起作用；积分环节主要是用来消除静差，所谓静差，就是系统稳定后输出值和设定值之间的差值，积分环节实际上就是偏差累计的过程，把累计的误差加到原有系统上以抵消系统造成的静差；而微分信号则反应了偏差信号的变化规律，也可以说是变化趋势，根据偏差信号的变化趋势来进行超前调节，从而增加了系统的预知性。</p><p><strong>比例项</strong>：某时刻误差值,代表着现在,表明现在预设值与实际的偏差。<strong>积分项</strong>：所有时刻误差和,代表着过去，是过去Ti时间内的偏差积累，可以减少震荡。<strong>微分项</strong>：某时刻误差变化率,代表着未来，可以超前预测并提出控制。</p><h3 id="pid的离散化公式">PID的离散化公式</h3><hr /><p>在数字系统中进行PID算法控制，需要对上述公式进行离散化，然后才好进行程序设计，从而得到：<span class="math display">\[U(k) = Kp*e(k) + \frac{Kp*T}{Ti}\sum_{n=0}^k e(n)+\frac{Kp*Td}{T}(e(k)-e(k-1))\]</span> 其中：<strong>e(k)</strong> 是当前值和目标值的偏差，<strong>Kp</strong> 是比例增益， <strong>T</strong>是控制周期，<strong>Ti</strong> 是积分时间， <strong>Td</strong>是微分时间。</p><p>为了方便起见，将这些系数进行统一: <span class="math display">\[比例系数Kp= Kp;\ 积分系数Ki = \frac{Kp*T}{Ti};\ 微分系数Kd =\frac{Kp*Td}{T}\]</span> 则得到 <strong>位置式PID</strong> 公式： <spanclass="math display">\[U(k) = Kp*e(k) + Ki\sum_{n=0}^k e(n)+ Kd*(e(k)-e(k-1))\]</span> 因为 <code>△U(k) = U(k) - U(k-1)</code>，这样得到<strong>增量式PID</strong> 公式： <span class="math display">\[△U(k) = Kp*(e(k)-e(k-1)) + Ki*e(k) + Kd*(e(k)-2*e(k-1)+e(k-2))\]</span></p><p><span class="math display">\[U(k) = △U(k)+U(k-1)\]</span></p><h3 id="pid算法的c语言实现">PID算法的C语言实现</h3><hr /><p>经过pid算法后得到的输出值，进行处理加工送到执行结构进行系统控制。在温度控制场景中，对于制冷控制，只需要将pid的输出值进行反向处理即可。</p><div class="code-wrapper"><pre><code class="hljs c"><span class="hljs-comment">/* 位置式pid和增量式pid的选择 */</span><span class="hljs-meta">#<span class="hljs-keyword">define</span> POSITION_PID</span><span class="hljs-comment">//#define INCREMENT_PID</span><span class="hljs-comment">/* pid 参数结构体定义 */</span><span class="hljs-keyword">typedef</span> <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">pid</span></span><span class="hljs-class">&#123;</span><span class="hljs-type">float</span> target;  <span class="hljs-comment">//target value 目标值</span><span class="hljs-type">float</span> curr;    <span class="hljs-comment">//current value 当前值</span><span class="hljs-type">float</span> err;     <span class="hljs-comment">//err=tag-cur 偏差值</span><span class="hljs-type">float</span> sum_err; <span class="hljs-comment">//偏差积分和</span><span class="hljs-type">float</span> last_err; <span class="hljs-comment">//上一个偏差值</span><span class="hljs-type">float</span> prev_last_err; <span class="hljs-comment">//上上个偏差值</span><span class="hljs-type">float</span> kp; <span class="hljs-comment">//proportion</span><span class="hljs-type">float</span> ki; <span class="hljs-comment">//integral</span><span class="hljs-type">float</span> kd; <span class="hljs-comment">//differential</span><span class="hljs-type">float</span> limit_integral; <span class="hljs-comment">//积分限幅</span><span class="hljs-type">float</span> limit_output; <span class="hljs-comment">//输出限幅</span><span class="hljs-type">float</span> output;<span class="hljs-comment">//控制输出值</span>&#125;<span class="hljs-type">pid_t</span>;<span class="hljs-comment">/* 限幅处理的宏定义 */</span><span class="hljs-meta">#<span class="hljs-keyword">define</span> LIMIT_MAX(value, max) \</span><span class="hljs-meta">    &#123;                        \</span><span class="hljs-meta"><span class="hljs-keyword">if</span> (value &gt; max)       \</span><span class="hljs-meta">value = max;       \</span><span class="hljs-meta"><span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (value &lt; -max) \</span><span class="hljs-meta">value = -max;      \</span><span class="hljs-meta">    &#125;</span><span class="hljs-comment">/**</span><span class="hljs-comment">  * @brief  pid初始化</span><span class="hljs-comment">  * @param  pid：pid结构体指针</span><span class="hljs-comment">  * @retval None</span><span class="hljs-comment">  */</span><span class="hljs-type">void</span> <span class="hljs-title function_">pid_init</span><span class="hljs-params">(<span class="hljs-type">pid_t</span>* pid)</span>&#123;pid-&gt;target = <span class="hljs-number">0</span>;pid-&gt;curr = <span class="hljs-number">0</span>;pid-&gt;kp = <span class="hljs-number">2.3</span>;pid-&gt;ki = <span class="hljs-number">0.5</span>;pid-&gt;kd = <span class="hljs-number">5.6</span>;pid-&gt;err = <span class="hljs-number">0</span>;pid-&gt;last_err = <span class="hljs-number">0</span>;pid-&gt;prev_last_err = <span class="hljs-number">0</span>;pid-&gt;sum_err = <span class="hljs-number">0</span>;pid-&gt;output = <span class="hljs-number">0</span>;pid-&gt;limit_integral = <span class="hljs-number">255</span>;<span class="hljs-comment">//根据pwm输出范围进行设置</span>pid-&gt;limit_output = <span class="hljs-number">255</span>; <span class="hljs-comment">//根据pwm输出范围进行设置</span>&#125;<span class="hljs-comment">/**</span><span class="hljs-comment">  * @brief  pid的运算</span><span class="hljs-comment">  * @param  pid：pid指针</span><span class="hljs-comment">  * @paramcurrent_value：当前值</span><span class="hljs-comment">  * @retval None</span><span class="hljs-comment">  */</span><span class="hljs-type">static</span> <span class="hljs-type">float</span> <span class="hljs-title function_">pid_calc</span><span class="hljs-params">(<span class="hljs-type">pid_t</span>* pid, <span class="hljs-type">float</span> current_value)</span>&#123;<span class="hljs-type">float</span> increment = <span class="hljs-number">0</span>;pid-&gt;curr = current_value;pid-&gt;err = pid-&gt;target - pid-&gt;curr;<span class="hljs-meta">#<span class="hljs-keyword">ifdef</span> POSITION_PID</span><span class="hljs-comment">/* 位置式公式：u(t)=Kp*E(t)+Ki*[E(1)+...+E(t)]+Kd*[E(t)-E(t-1)] */</span>pid-&gt;sum_err += pid-&gt;err;LIMIT_MAX(pid-&gt;sum_err, pid-&gt;limit_integral);<span class="hljs-comment">//积分限幅</span>pid-&gt;output = pid-&gt;kp * pid-&gt;err + pid-&gt;ki * pid-&gt;sum_err + \pid-&gt;kd * (pid-&gt;err - pid-&gt;last_err);<span class="hljs-meta">#<span class="hljs-keyword">endif</span></span><span class="hljs-meta">#<span class="hljs-keyword">ifdef</span> INCREMENT_PID</span><span class="hljs-comment">/* 增量式公式：△u(t)=Kp*[E(t)-E(t-1)]+Ki*E(t)+Kd*[E(t)-2*E(t-1)+E(t-2)] */</span>increment = pid-&gt;kp * (pid-&gt;err - pid-&gt;last_err) + pid-&gt;ki * pid-&gt;err + \pid-&gt;kd * (pid-&gt;err - <span class="hljs-number">2</span> * pid-&gt;last_err + pid-&gt;prev_last_err);pid-&gt;output += increment;<span class="hljs-meta">#<span class="hljs-keyword">endif</span></span>LIMIT_MAX(pid-&gt;output, pid-&gt;limit_output);<span class="hljs-comment">//输出限幅</span>pid-&gt;last_err = pid-&gt;err;pid-&gt;prev_last_err = pid-&gt;last_err;<span class="hljs-keyword">return</span> pid-&gt;output;&#125;</code></pre></div><h3 id="pid调试">PID调试</h3><hr /><p>借助<ahref="https://serialplot.ozderya.net/downloads/serialplot-0.12.0-win32.exe">SerialPlot工具</a>使用printf函数将目标值和实时值图形显示处理，调节不同的Kp，Ki和Kd，可以很方便的进行调试。</p><h4 id="位置式pid调节">位置式PID调节</h4><p>位置型PID的参数整定过程一般是，先整定KP，然后整定KI，最后整定KD；</p><p>参数整定找最佳，从小到大顺序查 先是比例后积分，最后再把微分加曲线振荡很频繁，比例度盘要放大(Kp减小)曲线漂浮绕大湾，比例度盘往小扳(Kp增大)曲线偏离回复慢，积分时间往下降(Ki增大)曲线波动周期长，积分时间再加长(Ki减小)曲线振荡频率快，先把微分降下来(Kd增大)动差大来波动慢。微分时间应加长(Kd减小) 理想曲线两个波，前高后低4比1一看二调多分析，调节质量不会低</p><h4 id="增量式pid调节">增量式pid调节</h4><p>增量型PID应该先整定Ki，然后整定Kd，最后整定Kp。这一点需要特别注意，弄错顺序的话会发现整定规律完全不适用的。<strong>网上大多数资料把增量式跟位置式混为一谈</strong></p><h3 id="参考链接">参考链接</h3><p><ahref="https://blog.csdn.net/qq_25352981/article/details/81007075?ops_request_misc=%257B%2522request%255Fid%2522%253A%2522168231970816800192213769%2522%252C%2522scm%2522%253A%252220140713.130102334..%2522%257D&amp;request_id=168231970816800192213769&amp;biz_id=0&amp;utm_medium=distribute.pc_search_result.none-task-blog-2~all~top_positive~default-2-81007075-null-null.142%5Ev86%5Ekoosearch_v1,239%5Ev2%5Einsert_chatgpt&amp;utm_term=pid&amp;spm=1018.2226.3001.4187">一文读懂PID控制算法（抛弃公式，从原理上真正理解PID控制）</a></p><p><ahref="https://blog.csdn.net/skythinker616/article/details/123019829?ops_request_misc=%257B%2522request%255Fid%2522%253A%2522168231970816800192213769%2522%252C%2522scm%2522%253A%252220140713.130102334..%2522%257D&amp;request_id=168231970816800192213769&amp;biz_id=0&amp;utm_medium=distribute.pc_search_result.none-task-blog-2~all~top_positive~default-1-123019829-null-null.142%5Ev86%5Ekoosearch_v1,239%5Ev2%5Einsert_chatgpt&amp;utm_term=pid&amp;spm=1018.2226.3001.4187">PID超详细教程——PID原理+串级PID+C代码+在线仿真调参</a></p><p><ahref="https://blog.csdn.net/qq_45396672/article/details/118057838?ops_request_misc=%257B%2522request%255Fid%2522%253A%2522168231970816800192213769%2522%252C%2522scm%2522%253A%252220140713.130102334..%2522%257D&amp;request_id=168231970816800192213769&amp;biz_id=0&amp;utm_medium=distribute.pc_search_result.none-task-blog-2~all~top_click~default-8-118057838-null-null.142%5Ev86%5Ekoosearch_v1,239%5Ev2%5Einsert_chatgpt&amp;utm_term=pid&amp;spm=1018.2226.3001.4187">图文详解PID调参</a></p><p><ahref="https://blog.csdn.net/u010312937/article/details/53363831">PID控制算法的C语言实现</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;pid控制的概念&quot;&gt;PID控制的概念&lt;/h3&gt;
&lt;hr /&gt;
&lt;p&gt;PID 控制的整体框图：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://gitee.com/kayoungzhang/picgo_res/raw/master/img/image-202</summary>
      
    
    
    
    <category term="单片机" scheme="http://example.com/categories/%E5%8D%95%E7%89%87%E6%9C%BA/"/>
    
    
    <category term="pid" scheme="http://example.com/tags/pid/"/>
    
  </entry>
  
  <entry>
    <title>PID参数的自整定</title>
    <link href="http://example.com/2023/04/24/PID%E5%8F%82%E6%95%B0%E7%9A%84%E8%87%AA%E6%95%B4%E5%AE%9A/"/>
    <id>http://example.com/2023/04/24/PID%E5%8F%82%E6%95%B0%E7%9A%84%E8%87%AA%E6%95%B4%E5%AE%9A/</id>
    <published>2023-04-24T07:21:27.000Z</published>
    <updated>2023-05-08T02:53:25.038Z</updated>
    
    <content type="html"><![CDATA[<p>在某些PID应用场合，不同的对象就得采用不同的参数值，所以需要进行参数自整定。实质就是在首次使用时，通过N次测量得到一套PID参数。具体的整定方法有三种：临界比例度法、衰减曲线法、经验法。三种方法共同点都是通过试验，然后按照工程经验公式对控制器参数进行整定。现在一般采用比较多的是临界比例度法。</p><h4id="临界比例度法ziegler-nichols">1、临界比例度法（Ziegler-Nichols）</h4><h5 id="操作方法">1.1 操作方法</h5><p>（1）将纯比例控制器接入到闭环控制系统中（设置控制器参数积分时间常数Ti=∞，实际微分时间常数Td=0）。</p><p>（2）由小到大改变比例增益K，直到闭环系统出现持续等幅振荡。此时的增益为临界增益（Ku），振荡周期（波峰间的时间）为临界周期（Tu）。然后根据下表得出PID控制器参数。</p><table><thead><tr class="header"><th>调节规律</th><th>K</th><th>Ti</th><th>Td</th></tr></thead><tbody><tr class="odd"><td><strong>P</strong></td><td>0.5Ku</td><td>-</td><td>-</td></tr><tr class="even"><td><strong>PI</strong></td><td>0.45Ku</td><td>0.85Tu</td><td>-</td></tr><tr class="odd"><td><strong>PD</strong></td><td>0.65Ku</td><td>-</td><td>0.15Tu</td></tr><tr class="even"><td><strong>PID</strong></td><td>0.6Ku</td><td>0.5Tu</td><td>0.125Tu</td></tr></tbody></table><h5 id="计算pid的三个参数值">1.2 计算PID的三个参数值：</h5><p><strong>Kp = K；</strong></p><p>**Ki = Kp*(T/Ti)；**</p><p>**Kd = Kp*(Td/T)；**</p><p>其中： <strong>T</strong>是采样周期，也叫控制周期，每隔T时间段进行一次PID计算。</p><h5 id="注意事项">1.3 注意事项：</h5><p>（1）应使控制系统工作在线性区，不要使控制阀出现开、关的极端状态，否则得到的持续振荡曲线可能是“极限循环”，从线性系统概念上说系统早已处于发散振荡了。</p><p>（2）由于被控对象特性的不同，应针对具体系统在实际运行过程中对上述求得的控制器参数进行在线校正。</p><p>（3）适用于临界振幅不大、振荡周期较长的过程控制系统，但有些系统用纯比例控制时始终是稳定的，是无法用临界比例度法来进行参数整定的。</p><p>（4）只适用于二阶以上的高阶对象，或一阶加纯滞后的对象，否则，在纯比例控制情况下，系统不会出现等幅振荡。</p><h4 id="衰减曲线法">2、衰减曲线法</h4><h5 id="整定步骤">2.1 整定步骤</h5><p>（1）在纯比例控制器下，置比例增益K为较小值。系统稳定后，作设定值阶跃扰动，观察系统的响应。若系统响应衰减太快，则减小比例增益K；反之，应增大比例增益K。</p><p>（2）直到系统出现如下图（a）所示的4:1衰减振荡过程，记下此时的比例增益Ks及和振荡周期Ts数值。同理，10：1衰减曲线如下图（b）所示。</p><figure><imgsrc="https://gitee.com/kayoungzhang/picgo_res/raw/master/img/v2-68670d44361ce32e7d24f695bd61c62c_720w.webp"alt="img" /><figcaption aria-hidden="true">img</figcaption></figure><p>（3）利用Ks和Ts值，Tr值，按下表给出的经验公式，计算出控制器的参数整定值。</p><table><thead><tr class="header"><th>衰减率</th><th>调节规律</th><th>K</th><th>Ti</th><th>Td</th></tr></thead><tbody><tr class="odd"><td><strong>0.75（0.9）</strong></td><td><strong>P</strong></td><td>Ks</td><td>-</td><td>-</td></tr><tr class="even"><td><strong>0.75（0.9）</strong></td><td><strong>PI</strong></td><td>0.83Ks</td><td>0.5Ts（2Tr）</td><td>-</td></tr><tr class="odd"><td><strong>0.75（0.9）</strong></td><td><strong>PID</strong></td><td>1.25Ks</td><td>0.3TS（1.2Tr）</td><td>0.1Ts（0.4Tr</td></tr></tbody></table><h5 id="注意事项-1">2.2 注意事项</h5><p>（1）加给定干扰不能太大，要根据生产操作要求来定，一般在5%左右，也有例外的情况。</p><p>（2）必须在工艺参数稳定的情况下才能加给定干扰，否则得不到正确的整定参数。</p><p>（3）对于反应快的系统，如流量、管道压力和小容量的液位调节等，要得到严格的4：1衰减曲线较困难，一般以被调参数来回波动两次达到稳定，就近似地认为达到4：1衰减过程了。</p><p>（4）投运时，先将K放在较小的数值，把Ti减少到整定值，把Td逐步放大到整定值，然后把K拉到整定值（如果在K=整定值的条件下很快地把Td放到整定值，控制器的输出会剧烈变化）。</p><h4 id="经验整定法">3、经验整定法</h4><h5 id="方法一">3.1方法一</h5><p>（1）确定比例增益</p><p>使PID为纯比例调节,输入设定为系统允许最大值的60%~70%，由0逐渐加大比例增益至系统出现振荡；再逐渐减小比例增益至系统振荡消失，记录此时的比例增益，则设定PID的比例增益P为当前值的60%~70%。</p><p>（2）确定积分时间常数Ti</p><p>比例增益P确定后，设定一个较大的积分时间常数Ti的初值，逐渐减小Ti至系统出现振荡，之后逐渐加大Ti至振荡消失。记录此时的Ti，则设定PID的积分时间常数Ti为当前值的150%~180%。</p><p>（3）确定积分时间常数Td</p><p>积分时间常数Td一般不用设定，为0即可。若要设定，与确定P和Ti的方法相同，取不振荡时的30%。</p><p>（4）系统带载联调，再对PID参数进行微调，直至满足要求。</p><h5 id="方法二">3.2 方法二</h5><p>（1）在实际调试中，也可以先大致设定一个经验值，然后根据调节效果修改。</p><p>　　流量系统：P（%）40~100，Ti（分）0.1~1</p><p>　　压力系统：P（%）30~70， Ti（分）0.4~3</p><p>　　液位系统：P（%）20~80， Ti（分）1~5</p><p>　　温度系统：P（%）20~60， Ti（分）3~10，Td（分）0.5~3</p><p>（2）以下整定的口诀：</p><p>阶跃扰动投闭环，参数整定看曲线；先投比例后积分，最后再把微分加；</p><p>理想曲线两个波，振幅衰减4比1；曲线震荡动作繁，微分时间要加长；</p><p>曲线震荡很频繁，比例刻度要放大；曲线漂浮波动大，比例刻度要拉小；</p><p>曲线波动周期长，积分时间要加长；偏离定值回复慢，积分时间往小降。</p><h3 id="参考链接">参考链接</h3><p><ahref="https://zhuanlan.zhihu.com/p/82344845">详细讲解PID控制</a></p><p><ahref="https://www.cnblogs.com/luckytimor/p/6881569.html">PID公式参数</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;在某些PID应用场合，不同的对象就得采用不同的参数值，所以需要进行参数自整定。实质就是在首次使用时，通过N次测量得到一套PID参数。具体的整定方法有三种：临界比例度法、衰减曲线法、经验法。三种方法共同点都是通过试验，然后按照工程经验公式对控制器参数进行整定。现在一般采用比较</summary>
      
    
    
    
    <category term="单片机" scheme="http://example.com/categories/%E5%8D%95%E7%89%87%E6%9C%BA/"/>
    
    
    <category term="pid" scheme="http://example.com/tags/pid/"/>
    
  </entry>
  
  <entry>
    <title>stc单片机存储器</title>
    <link href="http://example.com/2023/04/23/stc%E5%8D%95%E7%89%87%E6%9C%BA%E5%AD%98%E5%82%A8%E5%99%A8/"/>
    <id>http://example.com/2023/04/23/stc%E5%8D%95%E7%89%87%E6%9C%BA%E5%AD%98%E5%82%A8%E5%99%A8/</id>
    <published>2023-04-23T11:46:01.000Z</published>
    <updated>2023-04-23T14:18:50.361Z</updated>
    
    <content type="html"><![CDATA[<p>stc单片机存储器结构的主要特点是 <strong>程序存储器</strong> 和<strong>数据存储器</strong>是各自独立编址的。单片机内部在物理和逻辑上有三个独立的地址空间：flashROM(内部集成EEPROM)，片内基本RAM(256字节)和片内扩展RAM(1024字节)。</p><h3 id="程序存储器flash-rom">程序存储器flash ROM：</h3><p>程序存储器用于存放用户程序、数据和表格等信息。内部集成了的EEPROM是与程序空间是分开的，利用ISP/IAP技术可将内部DataFlash当EEPROM。</p><p><img src="https://gitee.com/kayoungzhang/picgo_res/raw/master/img/image-20230423212147712.png" alt="image-20230423212147712" style="zoom:67%;" /></p><h3 id="片内基本ram">片内基本RAM：</h3><p>片内基本RAM分低128字节和高128字节。</p><p>低128字节分为三个区：工作寄存器组区、可位寻址区、通用RAM区。</p><p><img src="https://gitee.com/kayoungzhang/picgo_res/raw/master/img/image-20230423212429407.png" alt="image-20230423212429407" style="zoom:80%;" /></p><p>高128字节RAM与特殊功能寄存器区貌似共用相同的地址范围，都使用80H~FFH,地址空间虽然貌似重叠，但物理上是独立的，使用时通过不同的寻址方式加以区分。高128字节RAM只能间接寻址，特殊功能寄存器区只可直接寻址。</p><p><img src="https://gitee.com/kayoungzhang/picgo_res/raw/master/img/image-20230423212649092.png" alt="image-20230423212649092" style="zoom: 80%;" /></p><h3 id="片内扩展ram">片内扩展RAM：</h3><p>在C语言中，可使用 <strong>xdata</strong> 声明扩展RAM变量存储类型，如<code>unsigned  char  xdata  i=0;</code>。默认情况下，选择的是片内扩展RAM，当需要访问片外RAM时，EXTRAM必须为1.</p><p><img src="https://gitee.com/kayoungzhang/picgo_res/raw/master/img/image-20230423213425262.png" alt="image-20230423213425262" style="zoom:67%;" /></p><p><img src="https://gitee.com/kayoungzhang/picgo_res/raw/master/img/image-20230423213920633.png" alt="image-20230423213920633" style="zoom: 80%;" /></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;stc单片机存储器结构的主要特点是 &lt;strong&gt;程序存储器&lt;/strong&gt; 和
&lt;strong&gt;数据存储器&lt;/strong&gt;
是各自独立编址的。单片机内部在物理和逻辑上有三个独立的地址空间：flash
ROM(内部集成EEPROM)，片内基本RAM(256字节)</summary>
      
    
    
    
    <category term="单片机" scheme="http://example.com/categories/%E5%8D%95%E7%89%87%E6%9C%BA/"/>
    
    
    <category term="stc" scheme="http://example.com/tags/stc/"/>
    
    <category term="存储器" scheme="http://example.com/tags/%E5%AD%98%E5%82%A8%E5%99%A8/"/>
    
  </entry>
  
</feed>
