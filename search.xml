<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>温湿度传感器SHT3x的开发设计</title>
      <link href="/2023/05/04/%E6%B8%A9%E6%B9%BF%E5%BA%A6%E4%BC%A0%E6%84%9F%E5%99%A8SHT3x%E7%9A%84%E5%BC%80%E5%8F%91%E8%AE%BE%E8%AE%A1/"/>
      <url>/2023/05/04/%E6%B8%A9%E6%B9%BF%E5%BA%A6%E4%BC%A0%E6%84%9F%E5%99%A8SHT3x%E7%9A%84%E5%BC%80%E5%8F%91%E8%AE%BE%E8%AE%A1/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>温度传感器DS18B20的应用</title>
      <link href="/2023/04/28/%E6%B8%A9%E5%BA%A6%E4%BC%A0%E6%84%9F%E5%99%A8DS18B20%E7%9A%84%E5%BA%94%E7%94%A8/"/>
      <url>/2023/04/28/%E6%B8%A9%E5%BA%A6%E4%BC%A0%E6%84%9F%E5%99%A8DS18B20%E7%9A%84%E5%BA%94%E7%94%A8/</url>
      
        <content type="html"><![CDATA[<p>DS18B20温度传感器在日常应用中，使用比较广泛，以下简单介绍一下：</p><h3 id="特点">特点：</h3><ul><li>单总线传输（1-Wire interface）</li><li>供电范围： 3.0V ~ 5.5V</li><li>测量温度范围：-55°C ~ +125°C</li><li>精度：-10°C ~ +85°C（±0.5°C）</li><li>分辨率： 9 ~ 12 bits</li><li>每一个 DS1820 有唯一的系列号，因此多个 DS1820可以存在于同一条单线总线上。</li></ul><h3 id="存储器图">存储器图</h3><figure><imgsrc="https://gitee.com/kayoungzhang/picgo_res/raw/master/img/image-20230428152810011.png"alt="image-20230428152810011" /><figcaption aria-hidden="true">image-20230428152810011</figcaption></figure><h3 id="单总线接口访问ds1820的协议">单总线接口访问DS1820的协议</h3><p>1.初始化 2.进行ROM功能操作 3.进行RAM功能操作 4.传输数据</p><h3 id="rom功能指令">ROM功能指令</h3><table><thead><tr class="header"><th>ROM指令</th><th>功能</th><th>备注</th></tr></thead><tbody><tr class="odd"><td>Read ROM [33h]</td><td>读取DS18B20内部信息</td><td>总线存在多个DS18B20无法使用此命令</td></tr><tr class="even"><td>Match ROM [55h]</td><td>根据64位ROM信息匹配对应的DS18B20</td><td></td></tr><tr class="odd"><td>Skip ROM [CCh]</td><td>跳过DS18B20</td><td>总线上只有一个DS18B20</td></tr><tr class="even"><td>Search ROM [F0h]</td><td>搜索DS18B20</td><td></td></tr><tr class="odd"><td>Alarm Search [ECh]</td><td>搜索DS18B20</td><td>上一次碰到警报才搜索DS18B20</td></tr></tbody></table><h3 id="ram功能指令">RAM功能指令</h3><table><thead><tr class="header"><th>RAM命令</th><th>功能</th></tr></thead><tbody><tr class="odd"><td>Write Scratchpad [4Eh]</td><td>向暂存存储器写内容</td></tr><tr class="even"><td>Read Scratchpad [BEh]</td><td>读暂存存储器的内容</td></tr><tr class="odd"><td>Copy Scratchpad [48h]</td><td>复制暂存存储器内容到非易失存储器 <strong>E2 RAM</strong></td></tr><tr class="even"><td>Convert T [44h]</td><td>转换温度</td></tr><tr class="odd"><td>Recall E2 [B8h]</td><td>重新调出 <strong>E2 RAM</strong> 存储到暂存存储器</td></tr><tr class="even"><td>Read Power Supply [B4h]</td><td>读供电方式</td></tr></tbody></table><h3 id="初始化时序">初始化时序</h3><p><img src="https://gitee.com/kayoungzhang/picgo_res/raw/master/img/image-20230428144010335.png" alt="image-20230428144010335" style="zoom: 67%;" /></p><h3 id="写时序">写时序</h3><p><img src="https://gitee.com/kayoungzhang/picgo_res/raw/master/img/image-20230428144206875.png" alt="image-20230428144206875" style="zoom: 67%;" /></p><h3 id="读时序">读时序</h3><p><img src="https://gitee.com/kayoungzhang/picgo_res/raw/master/img/image-20230428144418569.png" alt="image-20230428144418569" style="zoom:67%;" /></p><h3 id="程序实现">程序实现</h3><div class="code-wrapper"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">ifndef</span> DEV_DS18B20_H</span><span class="hljs-meta">#<span class="hljs-keyword">define</span> DEV_DS18B20_H</span><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stc15.h&gt;</span></span><span class="hljs-keyword">typedef</span> <span class="hljs-type">unsigned</span> <span class="hljs-type">char</span> <span class="hljs-type">uint8_t</span>;<span class="hljs-meta">#<span class="hljs-keyword">define</span> DQ P37   <span class="hljs-comment">//ds18b20接口定义</span></span><span class="hljs-comment">/******* ROM function command ****************/</span><span class="hljs-meta">#<span class="hljs-keyword">define</span>READ_ROM(0x33)</span><span class="hljs-meta">#<span class="hljs-keyword">define</span>MATCH_ROM(0x55)</span><span class="hljs-meta">#<span class="hljs-keyword">define</span>SKIP_ROM(0xCC)</span><span class="hljs-meta">#<span class="hljs-keyword">define</span>SEARCH_ROM(0xF0)</span><span class="hljs-meta">#<span class="hljs-keyword">define</span>ALARM_SEARCH(0XEC)</span><span class="hljs-comment">/******* RAM function command ****************/</span><span class="hljs-meta">#<span class="hljs-keyword">define</span>WRITE_SCRATCHPAD(0x4E)</span><span class="hljs-meta">#<span class="hljs-keyword">define</span>READ_SCRATCHPAD(0xBE)</span><span class="hljs-meta">#<span class="hljs-keyword">define</span>COPY_SCRATCHPAD(0x48) <span class="hljs-comment">//把暂存器RAM中的数据复制到EEPROM中</span></span><span class="hljs-meta">#<span class="hljs-keyword">define</span>CONVERT_T(0x44)</span><span class="hljs-meta">#<span class="hljs-keyword">define</span>RECALL_EE(0xB8) <span class="hljs-comment">//把EEPROM中的数据恢复到RAM中</span></span><span class="hljs-meta">#<span class="hljs-keyword">define</span>READ_POWER(0xB4)</span><span class="hljs-meta">#<span class="hljs-keyword">define</span> TH_LIMIT(0x78)<span class="hljs-comment">//120℃</span></span><span class="hljs-meta">#<span class="hljs-keyword">define</span> TL_LIMIT(0x05)<span class="hljs-comment">//5℃</span></span><span class="hljs-meta">#<span class="hljs-keyword">define</span> RESOLUTION_9(0x1F)<span class="hljs-comment">//Thermometer Resolution Configuration</span></span><span class="hljs-meta">#<span class="hljs-keyword">define</span> RESOLUTION_10(0x3F)</span><span class="hljs-meta">#<span class="hljs-keyword">define</span> RESOLUTION_11(0x5F)</span><span class="hljs-meta">#<span class="hljs-keyword">define</span> RESOLUTION_12(0x7F)</span><span class="hljs-keyword">extern</span> <span class="hljs-type">uint8_t</span> <span class="hljs-title function_">ds18b20_init</span><span class="hljs-params">(<span class="hljs-type">void</span>)</span>;<span class="hljs-keyword">extern</span> <span class="hljs-type">void</span> <span class="hljs-title function_">ds18b20_convert_temp</span><span class="hljs-params">(<span class="hljs-type">void</span>)</span>;<span class="hljs-keyword">extern</span> <span class="hljs-type">float</span> <span class="hljs-title function_">ds18b20_get_temp</span><span class="hljs-params">(<span class="hljs-type">void</span>)</span>;<span class="hljs-meta">#<span class="hljs-keyword">endif</span></span></code></pre></div><div class="code-wrapper"><pre><code class="hljs c"><span class="hljs-comment">/**</span><span class="hljs-comment">  ************************************************</span><span class="hljs-comment">  * @filedev_ds18b20.c</span><span class="hljs-comment">  * @authorKayoung</span><span class="hljs-comment">  * @versionV1.0</span><span class="hljs-comment">  * @date20220324</span><span class="hljs-comment">  * @briefds18b20测温度</span><span class="hljs-comment">  **********************************************</span><span class="hljs-comment">  */</span> <span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;dev_ds18b20.h&quot;</span></span><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;intrins.h&gt;</span></span><span class="hljs-comment">/**</span><span class="hljs-comment">  * @brief检测温度传感器是否正常</span><span class="hljs-comment">  * @paramNone </span><span class="hljs-comment">  * @retval1:失败 0：成功</span><span class="hljs-comment">*/</span><span class="hljs-type">uint8_t</span> <span class="hljs-title function_">ds18b20_init</span><span class="hljs-params">(<span class="hljs-type">void</span>)</span>&#123;<span class="hljs-type">uint8_t</span> i; <span class="hljs-comment">//延时循环变量</span><span class="hljs-type">uint8_t</span> ack;<span class="hljs-comment">//存储检测设备是否成功标志</span>DQ = <span class="hljs-number">1</span>;DQ = <span class="hljs-number">0</span>;i = <span class="hljs-number">227</span>;<span class="hljs-comment">//将总线拉低480us~960us，这里延时500us</span><span class="hljs-keyword">while</span> (--i);DQ = <span class="hljs-number">1</span>;<span class="hljs-comment">//然后拉高总线，延时70us</span>i = <span class="hljs-number">29</span>;<span class="hljs-keyword">while</span> (--i);ack = DQ; <span class="hljs-comment">//读取总线电平</span>i = <span class="hljs-number">227</span>;<span class="hljs-comment">//延时500us</span><span class="hljs-keyword">while</span>(i--);<span class="hljs-keyword">return</span> ack;&#125;<span class="hljs-comment">/**</span><span class="hljs-comment">  * @briefds18b20发送一个位</span><span class="hljs-comment">  * @paramsendbit：待发送的位</span><span class="hljs-comment">  * @retvalNone</span><span class="hljs-comment">  */</span><span class="hljs-type">void</span> <span class="hljs-title function_">ds18b20_sendbit</span><span class="hljs-params">(<span class="hljs-type">uint8_t</span> sendbit)</span>&#123;<span class="hljs-type">uint8_t</span> i; <span class="hljs-comment">//延时时间循环变量</span>DQ = <span class="hljs-number">0</span>; <span class="hljs-comment">//主机拉低延时10us</span>i = <span class="hljs-number">2</span>;<span class="hljs-keyword">while</span> (--i); DQ = sendbit; <span class="hljs-comment">//发送位，延时50us</span>i = <span class="hljs-number">20</span>;<span class="hljs-keyword">while</span> (--i); DQ = <span class="hljs-number">1</span>; <span class="hljs-comment">//释放总线</span>&#125;<span class="hljs-comment">/**</span><span class="hljs-comment">  * @briefds18b20接收到一位</span><span class="hljs-comment">  * @paramNone</span><span class="hljs-comment">  * @retvalBit: 从总线上接收到的一位</span><span class="hljs-comment">  */</span><span class="hljs-type">uint8_t</span> <span class="hljs-title function_">ds18b20_recvbit</span><span class="hljs-params">(<span class="hljs-type">void</span>)</span>&#123;<span class="hljs-type">uint8_t</span> i;<span class="hljs-type">uint8_t</span> Bit; <span class="hljs-comment">//存储接收到的一位</span>DQ = <span class="hljs-number">0</span>; <span class="hljs-comment">//主机拉低，延时8us</span>i = <span class="hljs-number">1</span>;<span class="hljs-keyword">while</span> (--i);DQ = <span class="hljs-number">1</span>; <span class="hljs-comment">//主机释放总线，延时8us</span>i = <span class="hljs-number">1</span>;<span class="hljs-keyword">while</span> (--i);Bit = DQ; <span class="hljs-comment">//读取总线数据，延时50us</span>i = <span class="hljs-number">20</span>;<span class="hljs-keyword">while</span> (--i);<span class="hljs-keyword">return</span> Bit;&#125;<span class="hljs-comment">/**</span><span class="hljs-comment">  * @brief向温度传感器写一个字节</span><span class="hljs-comment">  * @paramwr_data：待写入的数据</span><span class="hljs-comment">  * @retvalNone</span><span class="hljs-comment">*/</span><span class="hljs-type">static</span> <span class="hljs-type">void</span> <span class="hljs-title function_">ds18b20_wr_byte</span><span class="hljs-params">(<span class="hljs-type">uint8_t</span> wr_data)</span>&#123;<span class="hljs-type">uint8_t</span> j;<span class="hljs-keyword">for</span> (j = <span class="hljs-number">0</span>; j &lt; <span class="hljs-number">8</span>; j++)   <span class="hljs-comment">//From LSB to MSB</span>&#123;ds18b20_sendbit(wr_data &amp; (<span class="hljs-number">0x01</span> &lt;&lt; j));&#125;&#125;<span class="hljs-comment">/**</span><span class="hljs-comment">  * @brief读取温度传感器一个字节</span><span class="hljs-comment">  * @paramNone</span><span class="hljs-comment">  * @retvalrecv_byte：读取的一个字节</span><span class="hljs-comment">*/</span><span class="hljs-type">static</span> <span class="hljs-type">uint8_t</span> <span class="hljs-title function_">ds18b20_rd_byte</span><span class="hljs-params">(<span class="hljs-type">void</span>)</span>&#123;<span class="hljs-type">uint8_t</span> recv_byte = <span class="hljs-number">0</span>; <span class="hljs-comment">//存储接收到的数据</span><span class="hljs-type">uint8_t</span> j;<span class="hljs-keyword">for</span> (j = <span class="hljs-number">0</span>; j &lt; <span class="hljs-number">8</span>; j++)<span class="hljs-comment">//from LSB to MSB</span>&#123;<span class="hljs-keyword">if</span>(ds18b20_recvbit())&#123;recv_byte |= (<span class="hljs-number">0x01</span> &lt;&lt; j);&#125;&#125;<span class="hljs-keyword">return</span> recv_byte;&#125;<span class="hljs-comment">/**</span><span class="hljs-comment">  * @brief转换温度</span><span class="hljs-comment">  * @paramNone</span><span class="hljs-comment">  * @retvalNone</span><span class="hljs-comment">  */</span><span class="hljs-type">void</span> <span class="hljs-title function_">ds18b20_convert_temp</span><span class="hljs-params">(<span class="hljs-type">void</span>)</span>&#123;ds18b20_init();ds18b20_wr_byte(SKIP_ROM);  <span class="hljs-comment">//跳过ROM</span>ds18b20_wr_byte(CONVERT_T); <span class="hljs-comment">//转换命令</span>&#125;<span class="hljs-comment">/**</span><span class="hljs-comment">  * @brief获取正负温度</span><span class="hljs-comment">  * @paramNone</span><span class="hljs-comment">  * @retvalftemp：温度值</span><span class="hljs-comment">  */</span><span class="hljs-type">float</span> <span class="hljs-title function_">ds18b20_get_temp</span><span class="hljs-params">(<span class="hljs-type">void</span>)</span>&#123;<span class="hljs-type">uint8_t</span> TLSB, TMSB;<span class="hljs-comment">//存储温度的两个字节</span><span class="hljs-type">int</span> temp; <span class="hljs-comment">//存储温度的整形</span><span class="hljs-type">float</span> ftemp; <span class="hljs-comment">//温度</span>ds18b20_init();ds18b20_wr_byte(SKIP_ROM);ds18b20_wr_byte(READ_SCRATCHPAD);TLSB = ds18b20_rd_byte();TMSB = ds18b20_rd_byte();temp = (TMSB &lt;&lt; <span class="hljs-number">8</span>) | TLSB; ftemp = temp * <span class="hljs-number">0.0625</span>; <span class="hljs-comment">//分辨率是0.0625</span><span class="hljs-keyword">return</span> ftemp;<span class="hljs-comment">//负数是以其补码形式存储的，所以此函数可以表示负温度</span>&#125;</code></pre></div><p>注意事项：</p><p>单总线传输过程中，有严格的延时时序要求，对于不同的MCU，延时时间会跟此程序不一致，需要根据其时序图进行相应的调整。此程序已上传Gitee：<ahref="https://gitee.com/kayoungzhang/my_codehubm.git">ds18b20</a></p>]]></content>
      
      
      <categories>
          
          <category> 单片机 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 温度传感器 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>传感器的三种常用算法处理</title>
      <link href="/2023/04/27/%E4%BC%A0%E6%84%9F%E5%99%A8%E7%9A%84%E4%B8%89%E7%A7%8D%E5%B8%B8%E7%94%A8%E7%AE%97%E6%B3%95%E5%A4%84%E7%90%86/"/>
      <url>/2023/04/27/%E4%BC%A0%E6%84%9F%E5%99%A8%E7%9A%84%E4%B8%89%E7%A7%8D%E5%B8%B8%E7%94%A8%E7%AE%97%E6%B3%95%E5%A4%84%E7%90%86/</url>
      
        <content type="html"><![CDATA[<ul><li>加权平滑：平滑和均衡传感器数据，减小偶然数据突变的影响。</li><li>抽取突变：去除静态和缓慢变化的数据背景，强调瞬间变化。</li><li>简单移动平均线：保留数据流最近的K个数据，取平均值。</li></ul><hr /><p><strong>加权平滑</strong>，使用算法如下：</p><p>新值 = 旧值<em>(1 - a) + X </em>a；其中a为设置的权值，X为最新数据，程序实现如下：</p><div class="code-wrapper"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">define</span> filter_coe 0.00001  <span class="hljs-comment">//滤波系数 小于1</span></span><span class="hljs-type">static</span> <span class="hljs-type">long</span> AD_Res_Last=<span class="hljs-number">0</span>;<span class="hljs-comment">//上一轮的ADC数值保存</span><span class="hljs-type">long</span> <span class="hljs-title function_">Read_18Bit_AD</span><span class="hljs-params">(<span class="hljs-type">void</span>)</span>&#123;<span class="hljs-type">float</span> out,c;out = AD_Res_Last;c = Read_CS1237();<span class="hljs-keyword">if</span>(c!=<span class="hljs-number">0</span>) <span class="hljs-comment">// 读到正确数据</span>&#123;out = out*filter_coe + c*(<span class="hljs-number">1</span>-filter_coe);AD_Res_Last = out;<span class="hljs-comment">//把这次的计算结果放到全局变量里面保护</span>&#125;<span class="hljs-keyword">return</span> AD_Res_Last;&#125;</code></pre></div><p><strong>抽取突变</strong>采用上面加权平滑的逆算法<strong>，</strong>实现代码如下：</p><div class="code-wrapper"><pre><code class="hljs c++"><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-type">void</span> <span class="hljs-title">onSensorChanged</span><span class="hljs-params">(SensorEvent event)</span></span><span class="hljs-function"></span>&#123;<span class="hljs-keyword">final</span> <span class="hljs-type">float</span> ALPHA = <span class="hljs-number">0.8</span>;    gravity[<span class="hljs-number">0</span>] = ALPHA * gravity[<span class="hljs-number">0</span>] + (<span class="hljs-number">1</span>-ALPHA) * event.values[<span class="hljs-number">0</span>];    gravity[<span class="hljs-number">1</span>] = ALPHA * gravity[<span class="hljs-number">1</span>] + (<span class="hljs-number">1</span>-ALPHA) * event.values[<span class="hljs-number">1</span>];    gravity[<span class="hljs-number">2</span>] = ALPHA * gravity[<span class="hljs-number">2</span>] + (<span class="hljs-number">1</span>-ALPHA) * event.values[<span class="hljs-number">2</span>];    filteredValues[<span class="hljs-number">0</span>] = event.values[<span class="hljs-number">0</span>] - gravity[<span class="hljs-number">0</span>];    filteredValues[<span class="hljs-number">1</span>] = event.values[<span class="hljs-number">1</span>] - gravity[<span class="hljs-number">1</span>];    filteredValues[<span class="hljs-number">2</span>] = event.values[<span class="hljs-number">2</span>] - gravity[<span class="hljs-number">2</span>];&#125;</code></pre></div><p><strong>简单移动平均线，</strong>保留传感器数据流中最近的K个数据，返回它们的平均值。k表示平均“窗口”的大小，实现代码如下：</p><div class="code-wrapper"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">define</span> N 12</span><span class="hljs-type">char</span> <span class="hljs-title function_">filter</span><span class="hljs-params">()</span>&#123;    <span class="hljs-type">int</span> sum = <span class="hljs-number">0</span>;    <span class="hljs-type">char</span> count;    <span class="hljs-keyword">for</span>(count = <span class="hljs-number">0</span>; count &lt; N; count++)    &#123;        sum += get_ad();        delay();&#125;<span class="hljs-keyword">return</span> (<span class="hljs-type">char</span>)(sum/N);&#125;</code></pre></div>]]></content>
      
      
      <categories>
          
          <category> 单片机 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> sensor </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>STC芯片内部EEPROM的程序设计</title>
      <link href="/2023/04/27/STC%E8%8A%AF%E7%89%87%E5%86%85%E9%83%A8EEPROM%E7%9A%84%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1/"/>
      <url>/2023/04/27/STC%E8%8A%AF%E7%89%87%E5%86%85%E9%83%A8EEPROM%E7%9A%84%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1/</url>
      
        <content type="html"><![CDATA[<p>STC单片机内部集成了的EEPROM是与程序空间是分开的，利用ISP/IAP技术可将内部DataFlash当EEPROM，擦写次数在10万次以上。以下根据datasheet简单介绍一下单片机内部EEPROM的编程方式。</p><h3id="iap及eeprom特殊功能寄存器介绍">IAP及EEPROM特殊功能寄存器介绍</h3><ul><li>ISP/IAP数据寄存器IAP_DATA</li><li>ISP/IAP地址寄存器IAP_ADDRH和IAP_ADDRL</li><li>ISP/IAP命令寄存器IAP_CMD</li><li>ISP/IAP命令触发寄存器IAP_TRIG</li><li>ISP/IAP控制寄存器IAP_CONTR</li></ul><h3 id="注意事项">注意事项</h3><p>1.<strong>写数据</strong>：如果该字节不是0xFF，则须先将整个扇区擦除，因为只有扇区擦除才可以将<strong>0</strong> 变为 <strong>1</strong> 。</p><p>2.<strong>扇区擦除</strong>：将扇区内各字节变为 <strong>0xFF</strong>。</p><p>3.同一次修改的数据放在同一扇区中，不是同一次修改的数据放在另外的扇区。</p><p>4.IAP指令完成后，地址不会自动增减，需要手动处理。</p><h3 id="eeprom程序实现">EEPROM程序实现</h3><div class="code-wrapper"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">define</span>IAP_EEPROM__H</span><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;stc15.h&quot;</span></span><span class="hljs-keyword">typedef</span> <span class="hljs-type">unsigned</span> <span class="hljs-type">char</span> <span class="hljs-type">uint8_t</span>;<span class="hljs-keyword">typedef</span> <span class="hljs-type">unsigned</span> <span class="hljs-type">short</span> <span class="hljs-type">uint16_t</span>;<span class="hljs-keyword">typedef</span> <span class="hljs-type">unsigned</span> <span class="hljs-type">int</span> <span class="hljs-type">uint32_t</span>;<span class="hljs-meta">#<span class="hljs-keyword">define</span> TOTAL_ITEM (20) <span class="hljs-comment">//存储数据的数量</span></span><span class="hljs-comment">/** STC12C5A60S2</span><span class="hljs-comment">  *eeprom 扇区地址</span><span class="hljs-comment">  * 0x0000 ~ 0x3fff</span><span class="hljs-comment">  */</span><span class="hljs-meta">#<span class="hljs-keyword">define</span> IAP_ADDR_SECTOR_00x0000  <span class="hljs-comment">//第一扇区基地址</span></span><span class="hljs-meta">#<span class="hljs-keyword">define</span> IAP_ADDR_SECTOR_10x0200  <span class="hljs-comment">//第二扇区基地址</span></span><span class="hljs-comment">/* IAP_CMD register */</span><span class="hljs-meta">#<span class="hljs-keyword">define</span> IAP_CMD_STANDBY0x00  <span class="hljs-comment">//待机模式</span></span><span class="hljs-meta">#<span class="hljs-keyword">define</span> IAP_CMD_BYTE_RD0x01  <span class="hljs-comment">//字节读</span></span><span class="hljs-meta">#<span class="hljs-keyword">define</span> IAP_CMD_BYTE_WR0x02  <span class="hljs-comment">//字节写</span></span><span class="hljs-meta">#<span class="hljs-keyword">define</span> IAP_CMD_SECTOR_ERASE0x03  <span class="hljs-comment">//扇区擦除</span></span><span class="hljs-comment">/* IAP_TRIG register */</span><span class="hljs-meta">#<span class="hljs-keyword">define</span> IAP_TRIG_FIRST0x5a</span><span class="hljs-meta">#<span class="hljs-keyword">define</span> IAP_TRIG_SECOND0xa5</span><span class="hljs-comment">/* IAP_CONTR register */</span><span class="hljs-meta">#<span class="hljs-keyword">define</span> IAP_EN0x80<span class="hljs-comment">//IAP使能</span></span><span class="hljs-meta">#<span class="hljs-keyword">define</span> IAP_ISP0x60<span class="hljs-comment">//复位后从系统ISP监控程序区启动</span></span><span class="hljs-meta">#<span class="hljs-keyword">define</span> IAP_TIMEOUT_1M0x07<span class="hljs-comment">//设置系统时钟小于或等于1MHZ</span></span><span class="hljs-meta">#<span class="hljs-keyword">define</span> IAP_TIMEOUT_2M0x06<span class="hljs-comment">//设置系统时钟小于或等于2MHZ</span></span><span class="hljs-meta">#<span class="hljs-keyword">define</span> IAP_TIMEOUT_3M0x05<span class="hljs-comment">//设置系统时钟小于或等于3MHZ</span></span><span class="hljs-meta">#<span class="hljs-keyword">define</span> IAP_TIMEOUT_6M0x04<span class="hljs-comment">//设置系统时钟小于或等于6MHZ</span></span><span class="hljs-meta">#<span class="hljs-keyword">define</span> IAP_TIMEOUT_12M0x03<span class="hljs-comment">//设置系统时钟小于或等于12MHZ</span></span><span class="hljs-meta">#<span class="hljs-keyword">define</span> IAP_TIMEOUT_20M0x02<span class="hljs-comment">//设置系统时钟小于或等于20MHZ</span></span><span class="hljs-meta">#<span class="hljs-keyword">define</span> IAP_TIMEOUT_24M0x01<span class="hljs-comment">//设置系统时钟小于或等于24MHZ</span></span><span class="hljs-meta">#<span class="hljs-keyword">define</span> IAP_TIMEOUT_30M0x00<span class="hljs-comment">//设置系统时钟小于或等于30MHZ</span></span><span class="hljs-keyword">extern</span> <span class="hljs-type">uint16_t</span> eeprom_save[TOTAL_ITEM];<span class="hljs-keyword">extern</span> <span class="hljs-type">void</span> <span class="hljs-title function_">iap_erase</span><span class="hljs-params">(<span class="hljs-type">unsigned</span> <span class="hljs-type">int</span> addr)</span>;<span class="hljs-keyword">extern</span> <span class="hljs-type">void</span> <span class="hljs-title function_">iap_rd_byte</span><span class="hljs-params">(<span class="hljs-type">unsigned</span> <span class="hljs-type">int</span> addr, <span class="hljs-type">unsigned</span> <span class="hljs-type">char</span>* dat)</span>;<span class="hljs-keyword">extern</span> <span class="hljs-type">void</span> <span class="hljs-title function_">iap_wr_byte</span><span class="hljs-params">(<span class="hljs-type">unsigned</span> <span class="hljs-type">int</span> addr,<span class="hljs-type">unsigned</span> <span class="hljs-type">char</span>* dat)</span>;<span class="hljs-keyword">extern</span> <span class="hljs-type">void</span> <span class="hljs-title function_">iap_rd_data</span><span class="hljs-params">(<span class="hljs-type">void</span>)</span>;<span class="hljs-keyword">extern</span> <span class="hljs-type">void</span> <span class="hljs-title function_">iap_wr_data</span><span class="hljs-params">(<span class="hljs-type">void</span>)</span>;<span class="hljs-meta">#<span class="hljs-keyword">endif</span></span></code></pre></div><div class="code-wrapper"><pre><code class="hljs c"><span class="hljs-comment">/**</span><span class="hljs-comment">  ******************************************************************************</span><span class="hljs-comment">  * @file    eeprom.c </span><span class="hljs-comment">  * @version V1.0.0</span><span class="hljs-comment">  * @date    2023.03.16</span><span class="hljs-comment">  * @author  Kayoung</span><span class="hljs-comment">  * @brief   IAP EEPROM 相关功能</span><span class="hljs-comment">  * @details  </span><span class="hljs-comment">  ******************************************************************************</span><span class="hljs-comment">  * @attention </span><span class="hljs-comment">  ******************************************************************************</span><span class="hljs-comment">  */</span><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;eeprom.h&quot;</span></span><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;intrins.h&quot;</span></span><span class="hljs-comment">/* 定义一个存储数据数组 */</span><span class="hljs-type">uint16_t</span> eeprom_save[TOTAL_ITEM] = &#123;<span class="hljs-number">0</span>&#125;; <span class="hljs-comment">//注意：每个数据两字节</span><span class="hljs-comment">/**</span><span class="hljs-comment">  * @brief  关闭IAP功能</span><span class="hljs-comment">  * @param  None</span><span class="hljs-comment">  * @retval None</span><span class="hljs-comment">  */</span><span class="hljs-type">void</span> <span class="hljs-title function_">iap_disable</span><span class="hljs-params">(<span class="hljs-type">void</span>)</span>&#123;IAP_CONTR = <span class="hljs-number">0</span>;IAP_CMD = <span class="hljs-number">0</span>;IAP_TRIG = <span class="hljs-number">0</span>;IAP_ADDRH = <span class="hljs-number">0xff</span>;IAP_ADDRL = <span class="hljs-number">0xff</span>;&#125;<span class="hljs-comment">/**</span><span class="hljs-comment">  * @brief  擦除某地址所在的扇区</span><span class="hljs-comment">  * @param  addr：待擦除扇区地址</span><span class="hljs-comment">  * @retval None</span><span class="hljs-comment">  */</span><span class="hljs-type">void</span> <span class="hljs-title function_">iap_erase</span><span class="hljs-params">(<span class="hljs-type">uint32_t</span> addr)</span>&#123;IAP_CONTR = IAP_EN | IAP_TIMEOUT_12M;<span class="hljs-comment">//允许IAP操作，设置IAP操作速度         </span>IAP_CMD = IAP_CMD_SECTOR_ERASE;<span class="hljs-comment">//扇区擦除命令            </span>IAP_ADDRL = addr;              IAP_ADDRH = addr &gt;&gt; <span class="hljs-number">8</span>;<span class="hljs-comment">//地址赋值          </span>IAP_TRIG = IAP_TRIG_FIRST;                IAP_TRIG = IAP_TRIG_SECOND;<span class="hljs-comment">//触发命令               </span>_nop_();_nop_();         iap_disable();<span class="hljs-comment">//清空IAP操作寄存器等</span>&#125;<span class="hljs-comment">/**</span><span class="hljs-comment">  * @brief  在某地址写入一个字节</span><span class="hljs-comment">  * @param  addr: 地址</span><span class="hljs-comment">  * @paramdat： 待写入的一字节数据指针</span><span class="hljs-comment">  * @retval None</span><span class="hljs-comment">  */</span><span class="hljs-type">void</span> <span class="hljs-title function_">iap_wr_byte</span><span class="hljs-params">(<span class="hljs-type">uint32_t</span> addr,<span class="hljs-type">uint8_t</span>* dat)</span>&#123;IAP_CONTR = IAP_EN | IAP_TIMEOUT_12M;<span class="hljs-comment">//允许IAP操作，设置IAP操作速度   </span>IAP_CMD = IAP_CMD_BYTE_WR;<span class="hljs-comment">//IAP写命令</span>IAP_ADDRL = addr;IAP_ADDRH = addr &gt;&gt; <span class="hljs-number">8</span>;<span class="hljs-comment">//地址赋值</span>IAP_DATA = *dat;<span class="hljs-comment">//更新写寄存器</span>IAP_TRIG = IAP_TRIG_FIRST;IAP_TRIG = IAP_TRIG_SECOND;<span class="hljs-comment">//触发</span>_nop_();iap_disable();<span class="hljs-comment">//清空IAP操作寄存器等</span>&#125;<span class="hljs-comment">/**</span><span class="hljs-comment">  * @brief  读取某地址一个字节</span><span class="hljs-comment">  * @param  addr: 地址</span><span class="hljs-comment">  * @param  dat： 待读取的一字节数据指针</span><span class="hljs-comment">  * @retval None</span><span class="hljs-comment">  */</span><span class="hljs-type">void</span> <span class="hljs-title function_">iap_rd_byte</span><span class="hljs-params">(<span class="hljs-type">uint32_t</span> addr, <span class="hljs-type">uint8_t</span>* dat)</span>&#123;IAP_CONTR = IAP_EN | IAP_TIMEOUT_12M;<span class="hljs-comment">//允许IAP</span>IAP_CMD = IAP_CMD_BYTE_RD;<span class="hljs-comment">//IAP读命令</span>IAP_ADDRL = addr;IAP_ADDRH = addr &gt;&gt; <span class="hljs-number">8</span>;<span class="hljs-comment">//地址赋值</span>IAP_TRIG = IAP_TRIG_FIRST;IAP_TRIG = IAP_TRIG_SECOND;<span class="hljs-comment">//触发</span>_nop_();_nop_();*dat = IAP_DATA;iap_disable();<span class="hljs-comment">//清空IAP操作寄存器等</span>&#125;<span class="hljs-comment">/**</span><span class="hljs-comment">  * @brief  读取eeprom存储的参数</span><span class="hljs-comment">  * @param  None</span><span class="hljs-comment">  * @retval None</span><span class="hljs-comment">  */</span><span class="hljs-type">void</span> <span class="hljs-title function_">iap_rd_data</span><span class="hljs-params">(<span class="hljs-type">void</span>)</span>&#123;<span class="hljs-type">uint8_t</span> tmp_h = <span class="hljs-number">0</span>, tmp_l = <span class="hljs-number">0</span>; <span class="hljs-comment">//临时变量</span><span class="hljs-type">uint8_t</span> i;<span class="hljs-keyword">for</span>(i = <span class="hljs-number">0</span>; i &lt; TOTAL_ITEM; i++)&#123;iap_rd_byte(IAP_ADDR_SECTOR_0 + <span class="hljs-number">2</span>*i, &amp;tmp_l);iap_rd_byte(IAP_ADDR_SECTOR_0 + <span class="hljs-number">2</span>*i+<span class="hljs-number">1</span>, &amp;tmp_h);eeprom_save[i] = tmp_h &lt;&lt; <span class="hljs-number">8</span> | tmp_l; <span class="hljs-comment">//EEPROM中每两个字节组成一个数据</span>&#125;&#125;<span class="hljs-comment">/**</span><span class="hljs-comment">  * @brief  存储数据到eeprom</span><span class="hljs-comment">  * @param  void</span><span class="hljs-comment">  * @retval None</span><span class="hljs-comment">  */</span><span class="hljs-type">void</span> <span class="hljs-title function_">iap_wr_data</span><span class="hljs-params">(<span class="hljs-type">void</span>)</span>&#123;<span class="hljs-type">uint8_t</span> tmp_h = <span class="hljs-number">0</span>, tmp_l = <span class="hljs-number">0</span>; <span class="hljs-comment">//临时变量</span><span class="hljs-type">uint8_t</span> i;<span class="hljs-comment">/* 保存之前，擦除当前需要保存数据的扇区 */</span><span class="hljs-keyword">for</span>(i = <span class="hljs-number">0</span>; i &lt; TOTAL_ITEM; i++)&#123;<span class="hljs-keyword">if</span>(eeprom_save[i] != <span class="hljs-number">0xffff</span>)&#123;iap_erase(IAP_ADDR_SECTOR_0);<span class="hljs-comment">//擦除eeprom 1st sector</span><span class="hljs-keyword">break</span>;&#125;&#125;<span class="hljs-comment">/* 存储数据到eeprom */</span><span class="hljs-keyword">for</span>(i = <span class="hljs-number">0</span>; i &lt; TOTAL_ITEM; i++)&#123;        <span class="hljs-comment">/* 擦除完EEPROM，每个字节数据都是0xff*/</span><span class="hljs-keyword">if</span>(eeprom_save[i] == <span class="hljs-number">0xffff</span>)eeprom_save[i] = <span class="hljs-number">0</span>;tmp_h = eeprom_save[i] / <span class="hljs-number">256</span>;tmp_l = eeprom_save[i] % <span class="hljs-number">256</span>;iap_wr_byte(IAP_ADDR_SECTOR_0 + <span class="hljs-number">2</span>*i, &amp;tmp_l);iap_wr_byte(IAP_ADDR_SECTOR_0 + <span class="hljs-number">2</span>*i+<span class="hljs-number">1</span>, &amp;tmp_h);&#125;&#125;</code></pre></div><p>程序附件 <ahref="https://gitee.com/kayoungzhang/my_codehubm.git">iap_eeprom</a></p>]]></content>
      
      
      <categories>
          
          <category> 单片机 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> stc </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>关于LCD1602的程序开发</title>
      <link href="/2023/04/26/%E5%85%B3%E4%BA%8ELCD1602%E7%9A%84%E7%A8%8B%E5%BA%8F%E5%BC%80%E5%8F%91/"/>
      <url>/2023/04/26/%E5%85%B3%E4%BA%8ELCD1602%E7%9A%84%E7%A8%8B%E5%BA%8F%E5%BC%80%E5%8F%91/</url>
      
        <content type="html"><![CDATA[<p>LCD1602字符型显示屏在单片机程序开发中作为显示输出的器件，因为简单，成本低，被大量应用。在我们平时开发调试过程中，除了串口printf可以输出信息外，其实，LCD1602一样可以作为调试工具，用来输出一些重要信息。下面详细介绍一下它的程序设计。</p><h3 id="lcd1602引脚信号">1. LCD1602引脚信号</h3><p><img src="https://gitee.com/kayoungzhang/picgo_res/raw/master/img/image-20230426170209080.png" alt="image-20230426170209080" style="zoom: 67%;" /></p><h3 id="基本操作时序">2. 基本操作时序</h3><ul><li>读状态：RS = L，RW = H， E = H</li><li>写指令：RS = L，RW = L， D0~D7 = 指令码， E = 下降沿</li><li>读数据：RS = H，RW = H， E = H</li><li>写数据：RS = H，RW = L， D0~D7 = 数据， E = 下降沿</li></ul><p>（H：高电平，L：低电平）</p><p><img src="https://gitee.com/kayoungzhang/picgo_res/raw/master/img/image-20230426172246464.png" alt="image-20230426172246464" style="zoom: 67%;" /></p><p><img src="https://gitee.com/kayoungzhang/picgo_res/raw/master/img/image-20230426172326018.png" alt="image-20230426172326018" style="zoom:67%;" /></p><p><img src="https://gitee.com/kayoungzhang/picgo_res/raw/master/img/image-20230426172355403.png" alt="image-20230426172355403" style="zoom:67%;" /></p><h3 id="内部地址ram映射表">3. 内部地址RAM映射表</h3><p><img src="https://gitee.com/kayoungzhang/picgo_res/raw/master/img/image-20230426171931946.png" alt="image-20230426171931946"  /></p><h3 id="lcd1602指令码">4. LCD1602指令码</h3><figure><imgsrc="https://gitee.com/kayoungzhang/picgo_res/raw/master/img/image-20230426184139175.png"alt="image-20230426184139175" /><figcaption aria-hidden="true">image-20230426184139175</figcaption></figure><h3 id="程序实现">5.程序实现</h3><div class="code-wrapper"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">ifndef</span> LCD1602_H</span><span class="hljs-meta">#<span class="hljs-keyword">define</span> LCD1602_H</span><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;STC15.H&gt;</span></span><span class="hljs-keyword">typedef</span> <span class="hljs-type">unsigned</span> <span class="hljs-type">char</span> <span class="hljs-type">uint8_t</span>;<span class="hljs-keyword">typedef</span> <span class="hljs-type">unsigned</span> <span class="hljs-type">int</span>  <span class="hljs-type">uint32_t</span>;<span class="hljs-comment">/* 引脚定义 */</span><span class="hljs-meta">#<span class="hljs-keyword">define</span> LCD1602_RSP26</span><span class="hljs-meta">#<span class="hljs-keyword">define</span> LCD1602_ENP27</span><span class="hljs-meta">#<span class="hljs-keyword">define</span> LCD1602_WRP25</span><span class="hljs-meta">#<span class="hljs-keyword">define</span> LCD1602_DATAP0</span><span class="hljs-comment">/* LCD1602指令码 */</span><span class="hljs-comment">/* 1. Clear Display */</span>  <span class="hljs-meta">#<span class="hljs-keyword">define</span>  DISP_CLEAR0x01</span><span class="hljs-comment">/* 2. Return Home */</span><span class="hljs-meta">#<span class="hljs-keyword">define</span>  CURSOR_RETURN0x02</span><span class="hljs-comment">/* 3. Entry Mode Set */</span><span class="hljs-meta">#<span class="hljs-keyword">define</span>  AC_INCREMENT0x06</span><span class="hljs-meta">#<span class="hljs-keyword">define</span>  AC_DECREMENT       0x04</span><span class="hljs-meta">#<span class="hljs-keyword">define</span>  DISP_SHIFT_ON    0x05</span><span class="hljs-meta">#<span class="hljs-keyword">define</span>  DISP_SHIFT_OFF    0x04</span><span class="hljs-comment">/* 4. Display On/Off Control */</span><span class="hljs-meta">#<span class="hljs-keyword">define</span>  DISP_ON0x0c</span><span class="hljs-meta">#<span class="hljs-keyword">define</span>  CURSOR_ON    0x0a</span><span class="hljs-meta">#<span class="hljs-keyword">define</span>  CURSOR_BLINK0x09</span><span class="hljs-meta">#<span class="hljs-keyword">define</span> DISP_OFF0x08</span><span class="hljs-comment">/* 5. Cursor or Display Shift */</span><span class="hljs-meta">#<span class="hljs-keyword">define</span>  CURSOR_SHIFT_LEFT   0x10</span><span class="hljs-meta">#<span class="hljs-keyword">define</span>  CURSOR_SHIFT_RIGHT 0x14</span><span class="hljs-meta">#<span class="hljs-keyword">define</span>  DISP_SHIFT_LEFT 0x18</span><span class="hljs-meta">#<span class="hljs-keyword">define</span>  DISP_SHIFT_RIGHT 0x1c</span><span class="hljs-comment">/* 6. Function Set */</span><span class="hljs-meta">#<span class="hljs-keyword">define</span>  DATA_LENGTH_4   0x20</span><span class="hljs-meta">#<span class="hljs-keyword">define</span>  DATA_LENGTH_8   0x30</span><span class="hljs-meta">#<span class="hljs-keyword">define</span>  DISP_ONE_LINE 0x20  </span><span class="hljs-meta">#<span class="hljs-keyword">define</span>  DISP_TWO_LINE 0x28</span><span class="hljs-meta">#<span class="hljs-keyword">define</span>  DOT_FONT_5X8    0x20</span><span class="hljs-meta">#<span class="hljs-keyword">define</span>  DOT_FONT_5X10   0x24</span><span class="hljs-comment">/* 数据地址AC */</span><span class="hljs-meta">#<span class="hljs-keyword">define</span> DATA_ADDR_ROW_ONE  0x80</span><span class="hljs-meta">#<span class="hljs-keyword">define</span> DATA_ADDR_ROW_TWO  0xc0</span><span class="hljs-comment">/* 函数声明 */</span><span class="hljs-keyword">extern</span> <span class="hljs-type">void</span> <span class="hljs-title function_">lcd1602_init</span><span class="hljs-params">(<span class="hljs-type">void</span>)</span>;<span class="hljs-keyword">extern</span> <span class="hljs-type">void</span> <span class="hljs-title function_">lcd1602_showchar</span><span class="hljs-params">(<span class="hljs-type">uint8_t</span> row, <span class="hljs-type">uint8_t</span> column, <span class="hljs-type">uint8_t</span> wr_char)</span>;<span class="hljs-keyword">extern</span> <span class="hljs-type">void</span> <span class="hljs-title function_">lcd1602_showstring</span><span class="hljs-params">(<span class="hljs-type">uint8_t</span> row, <span class="hljs-type">uint8_t</span> column, <span class="hljs-type">uint8_t</span>* p_wr_string)</span>;<span class="hljs-keyword">extern</span> <span class="hljs-type">void</span> <span class="hljs-title function_">lcd1602_shownum</span><span class="hljs-params">(<span class="hljs-type">uint8_t</span> row, <span class="hljs-type">uint8_t</span> column, <span class="hljs-type">uint32_t</span> num, <span class="hljs-type">uint8_t</span> num_length)</span>;<span class="hljs-keyword">extern</span> <span class="hljs-type">void</span> <span class="hljs-title function_">lcd1602_show_signednum</span><span class="hljs-params">(<span class="hljs-type">uint8_t</span> row, <span class="hljs-type">uint8_t</span> column, <span class="hljs-type">int</span> num, <span class="hljs-type">uint8_t</span> num_length)</span>;<span class="hljs-keyword">extern</span> <span class="hljs-type">void</span> <span class="hljs-title function_">lcd1602_showhex</span><span class="hljs-params">(<span class="hljs-type">uint8_t</span> row, <span class="hljs-type">uint8_t</span> column, <span class="hljs-type">uint32_t</span> num, <span class="hljs-type">uint8_t</span> num_length)</span>;<span class="hljs-keyword">extern</span> <span class="hljs-type">void</span> <span class="hljs-title function_">lcd1602_showbin</span><span class="hljs-params">(<span class="hljs-type">uint8_t</span> row, <span class="hljs-type">uint8_t</span> column, <span class="hljs-type">uint32_t</span> num, <span class="hljs-type">uint8_t</span> num_length)</span>;<span class="hljs-keyword">extern</span> <span class="hljs-type">void</span> <span class="hljs-title function_">lcd1602_dip_shift</span><span class="hljs-params">(<span class="hljs-type">void</span>)</span>;<span class="hljs-keyword">extern</span> <span class="hljs-type">void</span> <span class="hljs-title function_">lcd1602_clear</span><span class="hljs-params">(<span class="hljs-type">void</span>)</span>;<span class="hljs-meta">#<span class="hljs-keyword">endif</span></span></code></pre></div><div class="code-wrapper"><pre><code class="hljs c"><span class="hljs-comment">/**</span><span class="hljs-comment">  ************************************************</span><span class="hljs-comment">  * @file    lcd1602.c</span><span class="hljs-comment">  * @authorKayoung</span><span class="hljs-comment">  * @versionV1.0</span><span class="hljs-comment">  * @date20220326</span><span class="hljs-comment">  * @briefLCD1602显示驱动</span><span class="hljs-comment">  **********************************************</span><span class="hljs-comment">  */</span> <span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;lcd1602.h&quot;</span></span><span class="hljs-type">static</span> <span class="hljs-type">void</span> <span class="hljs-title function_">delay1ms</span><span class="hljs-params">()</span><span class="hljs-comment">//@11.0592MHz</span>&#123;<span class="hljs-type">unsigned</span> <span class="hljs-type">char</span> i, j;i = <span class="hljs-number">2</span>;j = <span class="hljs-number">199</span>;<span class="hljs-keyword">do</span>&#123;<span class="hljs-keyword">while</span> (--j);&#125; <span class="hljs-keyword">while</span> (--i);&#125;<span class="hljs-type">static</span> <span class="hljs-type">void</span> <span class="hljs-title function_">delay300ms</span><span class="hljs-params">()</span><span class="hljs-comment">//@11.0592MHz</span>&#123;<span class="hljs-type">unsigned</span> <span class="hljs-type">char</span> i, j, k;i = <span class="hljs-number">13</span>;j = <span class="hljs-number">156</span>;k = <span class="hljs-number">83</span>;<span class="hljs-keyword">do</span>&#123;<span class="hljs-keyword">do</span>&#123;<span class="hljs-keyword">while</span> (--k);&#125; <span class="hljs-keyword">while</span> (--j);&#125; <span class="hljs-keyword">while</span> (--i);&#125;<span class="hljs-comment">/**</span><span class="hljs-comment">  * @brieflcd1602写命令</span><span class="hljs-comment">  * @paramcommand：命令</span><span class="hljs-comment">  * @retvalNone</span><span class="hljs-comment">  */</span><span class="hljs-type">static</span> <span class="hljs-type">void</span> <span class="hljs-title function_">lcd1602_wr_com</span><span class="hljs-params">(<span class="hljs-type">uint8_t</span> command)</span>&#123;LCD1602_RS = <span class="hljs-number">0</span>;LCD1602_WR = <span class="hljs-number">0</span>;LCD1602_DATA = command;LCD1602_EN = <span class="hljs-number">1</span>;delay1ms();<span class="hljs-comment">//根据timing，延时1ms，确保命令写到命令端口上</span>LCD1602_EN = <span class="hljs-number">0</span>;delay1ms();&#125;<span class="hljs-comment">/**</span><span class="hljs-comment">  * @brieflcd1602写数据</span><span class="hljs-comment">  * @paramwr_data: 待写入的数据</span><span class="hljs-comment">  * @retvalNone</span><span class="hljs-comment">  */</span><span class="hljs-type">static</span> <span class="hljs-type">void</span> <span class="hljs-title function_">lcd1602_wr_data</span><span class="hljs-params">(<span class="hljs-type">uint8_t</span> wr_data)</span>&#123;LCD1602_RS = <span class="hljs-number">1</span>;LCD1602_WR = <span class="hljs-number">0</span>;LCD1602_DATA = wr_data;LCD1602_EN = <span class="hljs-number">1</span>;delay1ms();LCD1602_EN = <span class="hljs-number">0</span>;delay1ms();&#125;<span class="hljs-comment">/**</span><span class="hljs-comment">  * @brieflcd1602初始化</span><span class="hljs-comment">  * @paramNone</span><span class="hljs-comment">  * @retvalNone</span><span class="hljs-comment">  */</span><span class="hljs-type">void</span> <span class="hljs-title function_">lcd1602_init</span><span class="hljs-params">(<span class="hljs-type">void</span>)</span>&#123;lcd1602_wr_com(DATA_LENGTH_8 | DISP_TWO_LINE); <span class="hljs-comment">//16x2显示模式，5x7点阵，8位数据接口</span>lcd1602_wr_com(DISP_ON); <span class="hljs-comment">//开显示，不显示光标</span>lcd1602_wr_com(AC_INCREMENT); <span class="hljs-comment">//写一个字符后，AC加1</span>lcd1602_wr_com(DISP_CLEAR); <span class="hljs-comment">//显示清零</span>&#125;<span class="hljs-comment">/**</span><span class="hljs-comment">  * @brief确定光标位置</span><span class="hljs-comment">  * @paramrow: 行（1~2）</span><span class="hljs-comment">  * @param  column：列（1~16）</span><span class="hljs-comment">  * @retvalNone</span><span class="hljs-comment">  */</span><span class="hljs-type">void</span> <span class="hljs-title function_">lcd1602_set_cursor</span><span class="hljs-params">(<span class="hljs-type">uint8_t</span> row, <span class="hljs-type">uint8_t</span> column)</span>&#123;<span class="hljs-comment">/* 确定位置 */</span><span class="hljs-keyword">if</span>(row == <span class="hljs-number">1</span>)&#123;lcd1602_wr_com(DATA_ADDR_ROW_ONE | (column - <span class="hljs-number">1</span>)); &#125;<span class="hljs-keyword">else</span>&#123;lcd1602_wr_com(DATA_ADDR_ROW_TWO | (column - <span class="hljs-number">1</span>));&#125;&#125;<span class="hljs-comment">/**</span><span class="hljs-comment">  * @brief显示一个字符</span><span class="hljs-comment">  * @paramrow: 行（1~2）</span><span class="hljs-comment">  * @param  column：列（1~16）</span><span class="hljs-comment">  * @param  wr_char：待写入的字符</span><span class="hljs-comment">  * @retvalNone</span><span class="hljs-comment">  */</span><span class="hljs-type">void</span> <span class="hljs-title function_">lcd1602_showchar</span><span class="hljs-params">(<span class="hljs-type">uint8_t</span> row, <span class="hljs-type">uint8_t</span> column, <span class="hljs-type">uint8_t</span> wr_char)</span>&#123;lcd1602_set_cursor(row, column);<span class="hljs-comment">/* 写入数据 */</span>lcd1602_wr_data(wr_char);&#125;<span class="hljs-comment">/**</span><span class="hljs-comment">  * @brief显示字符串</span><span class="hljs-comment">  * @paramrow: 行（1~2）</span><span class="hljs-comment">  * @param  column：列（1~16）</span><span class="hljs-comment">  * @param  p_wr_string：待写入的字符串指针</span><span class="hljs-comment">  * @retvalNone</span><span class="hljs-comment">  */</span><span class="hljs-type">void</span> <span class="hljs-title function_">lcd1602_showstring</span><span class="hljs-params">(<span class="hljs-type">uint8_t</span> row, <span class="hljs-type">uint8_t</span> column, <span class="hljs-type">uint8_t</span>* p_wr_string)</span>&#123;lcd1602_set_cursor(row, column);<span class="hljs-keyword">while</span>((*p_wr_string) != <span class="hljs-string">&#x27;\0&#x27;</span>)&#123;lcd1602_wr_data(*p_wr_string++);&#125;&#125;<span class="hljs-comment">/**</span><span class="hljs-comment">  * @brief指数函数</span><span class="hljs-comment">  * @parambase: 底数</span><span class="hljs-comment">  * @paramindex：幂指数</span><span class="hljs-comment">  * @retvalresult：结果</span><span class="hljs-comment">  */</span><span class="hljs-type">int</span> <span class="hljs-title function_">lcd_pow</span><span class="hljs-params">(base, index)</span>&#123;<span class="hljs-type">uint8_t</span> i;<span class="hljs-comment">//循环变量</span><span class="hljs-type">int</span> result = <span class="hljs-number">1</span>;<span class="hljs-keyword">for</span>(i = <span class="hljs-number">0</span>; i &lt; index; i++)&#123;result *= base;&#125;<span class="hljs-keyword">return</span> result;&#125;<span class="hljs-comment">/**</span><span class="hljs-comment">  * @brief显示一个数字</span><span class="hljs-comment">  * @paramrow: 行（1~2）</span><span class="hljs-comment">  * @param  column：列（1~16）</span><span class="hljs-comment">  * @param  num：待写入的数(0~65535)</span><span class="hljs-comment">  * @param  num_length: 数的位数</span><span class="hljs-comment">  * @retvalNone</span><span class="hljs-comment">  */</span><span class="hljs-type">void</span> <span class="hljs-title function_">lcd1602_shownum</span><span class="hljs-params">(<span class="hljs-type">uint8_t</span> row, <span class="hljs-type">uint8_t</span> column, <span class="hljs-type">uint32_t</span> num, <span class="hljs-type">uint8_t</span> num_length)</span>&#123;<span class="hljs-type">uint8_t</span> i; <span class="hljs-comment">//循环变量</span>lcd1602_set_cursor(row, column);<span class="hljs-comment">/* 显示各位数字字符 */</span><span class="hljs-keyword">for</span>(i = num_length; i &gt; <span class="hljs-number">0</span>; i--)&#123;<span class="hljs-comment">/* 根据规律，每次循环，得出其中的一位 */</span>lcd1602_wr_data((num / lcd_pow(<span class="hljs-number">10</span>, (i<span class="hljs-number">-1</span>)) % <span class="hljs-number">10</span>) + <span class="hljs-string">&#x27;0&#x27;</span>); <span class="hljs-comment">//转换成数字字符</span>&#125;&#125;<span class="hljs-comment">/**</span><span class="hljs-comment">  * @brief显示一个带符号数字</span><span class="hljs-comment">  * @paramrow: 行（1~2）</span><span class="hljs-comment">  * @param  column：列（1~16）</span><span class="hljs-comment">  * @param  num：待写入的数</span><span class="hljs-comment">  * @param  num_length: 数的位数</span><span class="hljs-comment">  * @retvalNone</span><span class="hljs-comment">  */</span><span class="hljs-type">void</span> <span class="hljs-title function_">lcd1602_show_signednum</span><span class="hljs-params">(<span class="hljs-type">uint8_t</span> row, <span class="hljs-type">uint8_t</span> column, <span class="hljs-type">int</span> num, <span class="hljs-type">uint8_t</span> num_length)</span>&#123;<span class="hljs-type">uint8_t</span> i; <span class="hljs-comment">//循环变量</span><span class="hljs-type">uint32_t</span> num_temp;<span class="hljs-comment">//无符号临时变量，存储有符号数字</span>lcd1602_set_cursor(row, column);<span class="hljs-comment">/* 判断是否是带符号数字 */</span><span class="hljs-keyword">if</span>(num &gt;= <span class="hljs-number">0</span>)&#123;lcd1602_wr_data(<span class="hljs-string">&#x27;+&#x27;</span>);num_temp = num;&#125;<span class="hljs-keyword">else</span>&#123;lcd1602_wr_data(<span class="hljs-string">&#x27;-&#x27;</span>);num_temp = -num;&#125;<span class="hljs-comment">/* 显示各位数字字符 */</span><span class="hljs-keyword">for</span>(i = num_length; i &gt; <span class="hljs-number">0</span>; i--)&#123;<span class="hljs-comment">/* 根据规律，每次循环，得出其中的一位 */</span>lcd1602_wr_data((num_temp / lcd_pow(<span class="hljs-number">10</span>, (i<span class="hljs-number">-1</span>)) % <span class="hljs-number">10</span>) + <span class="hljs-string">&#x27;0&#x27;</span>); <span class="hljs-comment">//转换成数字字符</span>&#125;&#125;<span class="hljs-comment">/**</span><span class="hljs-comment">  * @brief显示十六进制数</span><span class="hljs-comment">  * @paramrow: 行（1~2）</span><span class="hljs-comment">  * @param  column：列（1~16）</span><span class="hljs-comment">  * @param  num：待写入的数</span><span class="hljs-comment">  * @param  num_length: 数的位数</span><span class="hljs-comment">  * @retvalNone</span><span class="hljs-comment">  */</span><span class="hljs-type">void</span> <span class="hljs-title function_">lcd1602_showhex</span><span class="hljs-params">(<span class="hljs-type">uint8_t</span> row, <span class="hljs-type">uint8_t</span> column, <span class="hljs-type">uint32_t</span> num, <span class="hljs-type">uint8_t</span> num_length)</span>&#123;<span class="hljs-type">uint8_t</span> i;<span class="hljs-comment">//循环变量</span><span class="hljs-type">uint8_t</span> single_num; <span class="hljs-comment">//存储单个位数</span>lcd1602_set_cursor(row, column);<span class="hljs-comment">/* 显示各位数字字符 */</span><span class="hljs-keyword">for</span>(i = num_length; i &gt; <span class="hljs-number">0</span>; i--)&#123;<span class="hljs-comment">/* 根据规律，每次循环，得出其中的一位 */</span>single_num = num / lcd_pow(<span class="hljs-number">16</span>, (i<span class="hljs-number">-1</span>)) % <span class="hljs-number">16</span>;<span class="hljs-keyword">if</span>(single_num &lt; <span class="hljs-number">10</span>)<span class="hljs-comment">//0~9</span>&#123;lcd1602_wr_data(single_num + <span class="hljs-string">&#x27;0&#x27;</span>); <span class="hljs-comment">//转换成数字字符</span>&#125;<span class="hljs-keyword">else</span>  <span class="hljs-comment">//A~F</span>&#123;lcd1602_wr_data(single_num + <span class="hljs-string">&#x27;A&#x27;</span> - <span class="hljs-number">10</span>); <span class="hljs-comment">//转换成数字字符</span>&#125;&#125;&#125;<span class="hljs-comment">/**</span><span class="hljs-comment">  * @brief显示一个数的二进制</span><span class="hljs-comment">  * @paramrow: 行（1~2）</span><span class="hljs-comment">  * @param  column：列（1~16）</span><span class="hljs-comment">  * @param  num：待写入的数(0~65535)</span><span class="hljs-comment">  * @param  num_length: 数的位数（8或16）</span><span class="hljs-comment">  * @retvalNone</span><span class="hljs-comment">  */</span><span class="hljs-type">void</span> <span class="hljs-title function_">lcd1602_showbin</span><span class="hljs-params">(<span class="hljs-type">uint8_t</span> row, <span class="hljs-type">uint8_t</span> column, <span class="hljs-type">uint32_t</span> num, <span class="hljs-type">uint8_t</span> num_length)</span>&#123;<span class="hljs-type">uint8_t</span> i; <span class="hljs-comment">//循环变量</span>lcd1602_set_cursor(row, column);<span class="hljs-comment">/* 显示各位数字字符 */</span><span class="hljs-keyword">for</span>(i = num_length; i &gt; <span class="hljs-number">0</span>; i--)&#123;<span class="hljs-comment">/* 根据规律，每次循环，得出其中的一位 */</span>lcd1602_wr_data((num / lcd_pow(<span class="hljs-number">2</span>, (i<span class="hljs-number">-1</span>)) % <span class="hljs-number">2</span>) + <span class="hljs-string">&#x27;0&#x27;</span>); <span class="hljs-comment">//转换成数字字符</span>&#125;&#125;<span class="hljs-comment">/**</span><span class="hljs-comment">  * @brief lcd1602屏幕移动</span><span class="hljs-comment">  * @param None</span><span class="hljs-comment">  * @retval  None</span><span class="hljs-comment">  */</span><span class="hljs-type">void</span> <span class="hljs-title function_">lcd1602_dip_shift</span><span class="hljs-params">(<span class="hljs-type">void</span>)</span>&#123;lcd1602_wr_com(DISP_SHIFT_LEFT);delay300ms();&#125;<span class="hljs-comment">/**</span><span class="hljs-comment">  * @brieflcd1602清屏</span><span class="hljs-comment">  * @paramNone</span><span class="hljs-comment">  * @retvalNone</span><span class="hljs-comment">  */</span><span class="hljs-type">void</span> <span class="hljs-title function_">lcd1602_clear</span><span class="hljs-params">(<span class="hljs-type">void</span>)</span>&#123;lcd1602_wr_com(DISP_CLEAR);&#125;</code></pre></div><p>在 main函数中，根据需要调用这些接口函数，即可完成相应的功能。</p><p>代码已上传码云： <ahref="https://gitee.com/kayoungzhang/my_codehubm.git">lcd1602</a>。</p>]]></content>
      
      
      <categories>
          
          <category> 单片机 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> lcd </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Typora数学公式格式编辑汇总</title>
      <link href="/2023/04/24/Typora%E6%95%B0%E5%AD%A6%E5%85%AC%E5%BC%8F%E6%A0%BC%E5%BC%8F%E7%BC%96%E8%BE%91%E6%B1%87%E6%80%BB/"/>
      <url>/2023/04/24/Typora%E6%95%B0%E5%AD%A6%E5%85%AC%E5%BC%8F%E6%A0%BC%E5%BC%8F%E7%BC%96%E8%BE%91%E6%B1%87%E6%80%BB/</url>
      
        <content type="html"><![CDATA[<p>在Typora编辑中，会经常使用到数学公式，以下总结常用的公式编辑语法。</p><h4 id="常用符号">常用符号</h4><table><thead><tr class="header"><th>类型及语法</th><th>显示</th><th>类型及语法</th><th>显示</th></tr></thead><tbody><tr class="odd"><td>上标 a^2</td><td><span class="math inline">\(a^2\)</span></td><td>下标 A_2</td><td><span class="math inline">\(A_2\)</span></td></tr><tr class="even"><td>正负号 2 \pm 3</td><td><span class="math inline">\(2 \pm 3\)</span></td><td>分式 \frac{1}{2}</td><td><span class="math inline">\(\frac{1}{2}\)</span></td></tr><tr class="odd"><td>根号 \sqrt[6]{2}</td><td><span class="math inline">\(\sqrt[6]{2}\)</span></td><td>水平线 \overline{a+b}=\underline{b+c}</td><td><spanclass="math inline">\(\overline{a+b}=\underline{b+c}\)</span></td></tr><tr class="even"><td>对数 \log_28</td><td><span class="math inline">\(log_28\)</span></td><td>矢量 \vec{a}</td><td><span class="math inline">\(\vec{a}\)</span></td></tr><tr class="odd"><td>上方箭头 \overleftarrow{x}</td><td><span class="math inline">\(\overleftarrow{x}\)</span></td><td>三角函数 \sin{\theta}</td><td><span class="math inline">\(\sin{\theta}\)</span></td></tr><tr class="even"><td>并集 A \bigcup B</td><td><span class="math inline">\(A \bigcup B\)</span></td><td>交集 A \bigcap B</td><td><span class="math inline">\(A \bigcap B\)</span></td></tr><tr class="odd"><td>属于 A \in B</td><td><span class="math inline">\(A \in B\)</span></td><td>异或 A \oplus B</td><td><span class="math inline">\(A \oplus B\)</span></td></tr><tr class="even"><td>同或 A \odot B</td><td><span class="math inline">\(A \odot B\)</span></td><td>存在 \exists</td><td><span class="math inline">\(\exists\)</span></td></tr><tr class="odd"><td>任意 \forall</td><td><span class="math inline">\(\forall\)</span></td><td>分隔符 \vert-2 \vert</td><td><span class="math inline">\(\vert-2 \vert\)</span></td></tr><tr class="even"><td>单空格 A \ B</td><td><span class="math inline">\(A \ B\)</span></td><td>Tab空格 A \quad B</td><td><span class="math inline">\(A \quad B\)</span></td></tr><tr class="odd"><td>多空格 A \qquad B</td><td><span class="math inline">\(A \qquad B\)</span></td><td>换行 A <code>\\</code> B</td><td>A<br />B</td></tr><tr class="even"><td>不定积分 \int{x}dx</td><td><span class="math inline">\(\int{x}dx\)</span></td><td>不等号 2 \neq 3</td><td><span class="math inline">\(2 \neq 3\)</span></td></tr><tr class="odd"><td>小于或等于 3 \leq 6</td><td><span class="math inline">\(3 \leq 6\)</span></td><td>大于或等于 8 \geq 3</td><td><span class="math inline">\(8 \geq 3\)</span></td></tr><tr class="even"><td>约等于 2.1 \approx 2</td><td><span class="math inline">\(2.1 \approx 2\)</span></td><td>水平双向箭头 \Longleftrightarrow</td><td><span class="math inline">\(\Longleftrightarrow\)</span></td></tr><tr class="odd"><td>水平单箭头 \longrightarrow</td><td><span class="math inline">\(\longrightarrow\)</span></td><td>水平双箭头 \Longleftarrow</td><td><span class="math inline">\(\Longleftarrow\)</span></td></tr><tr class="even"><td>箭头带字 A \xrightarrow{加热} B</td><td><span class="math inline">\(A \xrightarrow{加热} B\)</span></td><td>大号的括号 \left( \right)</td><td>$( ) $</td></tr><tr class="odd"><td>角度 \angle</td><td><span class="math inline">\(\angle\)</span></td><td>因为符 \because</td><td><span class="math inline">\(\because\)</span></td></tr><tr class="even"><td>所以符 \therefore</td><td><span class="math inline">\(\therefore\)</span></td><td>垂直符 \bot</td><td><span class="math inline">\(\bot\)</span></td></tr><tr class="odd"><td>字体大小\large A \small A</td><td><span class="math inline">\(\large A \small A\)</span></td><td>转义符 \ \</td><td>\</td></tr></tbody></table><p><strong>注意：如果上下标级联，需要{}括起来</strong></p><h4 id="希腊字母">希腊字母</h4><table><thead><tr class="header"><th>大写</th><th>Typora语法</th><th>小写</th><th>Typora语法</th><th>大写</th><th>Typora语法</th><th>小写</th><th>Typora语法</th></tr></thead><tbody><tr class="odd"><td>A</td><td>A</td><td>α</td><td>\alpha</td><td>Ω</td><td>\Omega</td><td>ω</td><td>\omega</td></tr><tr class="even"><td>B</td><td>B</td><td>β</td><td>\beta</td><td>Ψ</td><td>\Psi</td><td>ψ</td><td>\psi</td></tr><tr class="odd"><td>Γ</td><td>\Gamma</td><td>γ</td><td>\gamma</td><td>X</td><td>X</td><td>χ</td><td>\chi</td></tr><tr class="even"><td>Δ</td><td>\Delta</td><td>δ</td><td>\delta</td><td>φ</td><td>\varphi</td><td></td><td></td></tr><tr class="odd"><td>E</td><td>E</td><td>ϵ</td><td>\epsilon</td><td>Φ</td><td>\Phi</td><td>ϕ</td><td>\phi</td></tr><tr class="even"><td>ε</td><td>\varepsilon</td><td></td><td></td><td>Υ</td><td>\Upsilon</td><td>υ</td><td>\upsilon</td></tr><tr class="odd"><td>Z</td><td>Z</td><td>ζ</td><td>\zeta</td><td>T</td><td>T</td><td>τ</td><td>\tau</td></tr><tr class="even"><td>H</td><td>H</td><td>η</td><td>\eta</td><td>Σ</td><td>\Sigma</td><td>σ</td><td>\sigma</td></tr><tr class="odd"><td>Θ</td><td>\Theta</td><td>θ</td><td>\theta</td><td>P</td><td>P</td><td>ρ</td><td>\rho</td></tr><tr class="even"><td>I</td><td>I</td><td>ι</td><td>\iota</td><td>Π</td><td>\Pi</td><td>π</td><td>\pi</td></tr><tr class="odd"><td>K</td><td>K</td><td>κ</td><td>\kappa</td><td>O</td><td>O</td><td>ο</td><td>\omicron</td></tr><tr class="even"><td>Λ</td><td>\Lambda</td><td>λ</td><td>\lambda</td><td>Ξ</td><td>\Xi</td><td>ξ</td><td>\xi</td></tr><tr class="odd"><td>M</td><td>M</td><td>μ</td><td>\mu</td><td>N</td><td>N</td><td>ν</td><td>\nu</td></tr></tbody></table><h4 id="复杂表达式">复杂表达式</h4><p><strong>求和</strong> \sum_{n=1}^{100} {a_n}<br /><span class="math display">\[\sum_{n=1}^{100} {a_n}\]</span> <strong>累乘</strong> \prod_{n=1}^{199} {x_n} <spanclass="math display">\[\prod_{n=1}^{199} {x_n}\]</span> <strong>定积分</strong> \int_{1}^{2}xdx<br /><span class="math display">\[\int_{1}^{2}xdx\]</span> <strong>极限</strong> \lim_{n\rightarrow + \infty}{(a+b)}<br /><span class="math display">\[\lim_{n\rightarrow + \infty}{(a+b)}\]</span></p><p><strong>矩阵</strong></p><div class="code-wrapper"><pre><code class="hljs livescript">a = <span class="hljs-string">\left[\matrix&#123;\alpha_1</span> &amp; test1<span class="hljs-string">\\</span> <span class="hljs-string">\alpha_2</span> &amp; test2<span class="hljs-string">\\</span> <span class="hljs-string">\alpha_3</span> &amp; test3 &#125;<span class="hljs-string">\right]</span></code></pre></div><p><span class="math display">\[a = \left[\matrix{\alpha_1 &amp; test1\\ \alpha_2 &amp; test2\\ \alpha_3&amp; test3 }\right]\]</span> <strong>行列式</strong></p><div class="code-wrapper"><pre><code class="hljs livescript">X=<span class="hljs-string">\left|</span><span class="hljs-string">\begin&#123;matrix&#125;</span>x_&#123;<span class="hljs-number">11</span>&#125; &amp; x_&#123;<span class="hljs-number">12</span>&#125; &amp; <span class="hljs-string">\cdots</span> &amp; x_&#123;<span class="hljs-number">1d</span>&#125;<span class="hljs-string">\\</span>x_&#123;<span class="hljs-number">21</span>&#125; &amp; x_&#123;<span class="hljs-number">22</span>&#125; &amp; <span class="hljs-string">\cdots</span> &amp; x_&#123;<span class="hljs-number">2d</span>&#125;<span class="hljs-string">\\</span><span class="hljs-string">\vdots</span> &amp; <span class="hljs-string">\vdots</span> &amp; <span class="hljs-string">\ddots</span> &amp; <span class="hljs-string">\vdots</span> <span class="hljs-string">\\</span>x_&#123;<span class="hljs-number">11</span>&#125; &amp; x_&#123;<span class="hljs-number">12</span>&#125; &amp; <span class="hljs-string">\cdots</span> &amp; x_&#123;<span class="hljs-number">1d</span>&#125;<span class="hljs-string">\\</span><span class="hljs-string">\end&#123;matrix&#125;</span><span class="hljs-string">\right|</span> <span class="hljs-string">\tag&#123;2-3&#125;</span></code></pre></div><p><span class="math display">\[X=\left|    \begin{matrix}        x_{11} &amp; x_{12} &amp; \cdots &amp; x_{1d}\\        x_{21} &amp; x_{22} &amp; \cdots &amp; x_{2d}\\        \vdots &amp; \vdots &amp; \ddots &amp; \vdots \\        x_{11} &amp; x_{12} &amp; \cdots &amp; x_{1d}\\    \end{matrix}\right| \tag{2-3}\]</span> <strong>分段函数</strong></p><div class="code-wrapper"><pre><code class="hljs excel">f(<span class="hljs-built_in">n</span>)=\begin&#123;cases&#125;<span class="hljs-built_in">n</span>/<span class="hljs-number">2</span>, &amp; \text&#123;<span class="hljs-built_in">if</span> $<span class="hljs-built_in">n</span>$ is <span class="hljs-built_in">even</span>&#125;\\<span class="hljs-number">3</span><span class="hljs-built_in">n</span>+<span class="hljs-number">1</span>,&amp; \text&#123;<span class="hljs-built_in">if</span> $<span class="hljs-built_in">n</span>$ is <span class="hljs-built_in">odd</span>&#125;\end&#123;cases&#125;</code></pre></div><p><span class="math display">\[f(n)=    \begin{cases}        n/2, &amp; \text{if $n$ is even}\\        3n+1,&amp; \text{if $n$ is odd}    \end{cases}\]</span> <strong>方程组</strong></p><div class="code-wrapper"><pre><code class="hljs livescript"><span class="hljs-string">\left\&#123;</span><span class="hljs-string">\begin&#123;array&#125;&#123;c&#125;</span>a_1x+b_1y+c_1z=d_1<span class="hljs-string">\\</span>a_2x+b_2y+c_2z=d_2<span class="hljs-string">\\</span>a_3x+b_3y+c_3z=d_3<span class="hljs-string">\end&#123;array&#125;</span><span class="hljs-string">\right.</span> <span class="hljs-string">\tag&#123;1-1&#125;</span></code></pre></div><p><span class="math display">\[\left\{    \begin{array}{c}        a_1x+b_1y+c_1z=d_1\\        a_2x+b_2y+c_2z=d_2\\        a_3x+b_3y+c_3z=d_3    \end{array}\right. \tag{1-1}\]</span> 其它复杂的数学公式可直接在线编辑。</p><h4 id="在线编辑器">在线编辑器</h4><p><a href="https://www.latexlive.com/home">LaTeX公式编辑器</a></p><p><a href="http://www.hostmath.com/">The Equation Editor</a></p><h4 id="参考链接">参考链接</h4><p><ahref="https://blog.csdn.net/alwaysrun/article/details/115830269">Typora使用简介与插入数学公式</a></p><p><ahref="https://zhuanlan.zhihu.com/p/261750408">Typora数学公式汇总（Markdown）</a></p>]]></content>
      
      
      <categories>
          
          <category> 教程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> typora </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>PID理论及程序实现</title>
      <link href="/2023/04/24/PID%E7%90%86%E8%AE%BA%E5%8F%8A%E7%A8%8B%E5%BA%8F%E5%AE%9E%E7%8E%B0/"/>
      <url>/2023/04/24/PID%E7%90%86%E8%AE%BA%E5%8F%8A%E7%A8%8B%E5%BA%8F%E5%AE%9E%E7%8E%B0/</url>
      
        <content type="html"><![CDATA[<h3 id="pid控制的概念">PID控制的概念</h3><hr /><p>PID 控制的整体框图：</p><p><img src="https://gitee.com/kayoungzhang/picgo_res/raw/master/img/image-20230424111806125.png" alt="image-20230424111806125" style="zoom:80%;" /></p><p>PID是 <strong>P</strong>roportion <strong>I</strong>ntegration<strong>D</strong>ifferentiation 的缩写，由<strong>比例项（Proportion）</strong>，<strong>积分项（Integration）</strong>，<strong>微分项（Differentiation）</strong>三个部分组成，具体形式就是下面的公式： <span class="math display">\[U(t) = Kp \{ err(t) + \frac{1}{Ti}*\int_0^t err(t)dt +Td*\frac{derr(t)}{dt} \}\]</span> 其中： <strong>U(t)</strong>是调节器的输出信号，<strong>err(t)</strong> 是当前值和目标值的偏差，<strong>Kp</strong> 是比例增益， <strong>Ti</strong> 是积分时间，<strong>Td</strong> 是微分时间。</p><p>PID控制其实就是对偏差的控制过程；如果偏差为 0,则比例环节不起作用，只有存在偏差时，比例环节才起作用；积分环节主要是用来消除静差，所谓静差，就是系统稳定后输出值和设定值之间的差值，积分环节实际上就是偏差累计的过程，把累计的误差加到原有系统上以抵消系统造成的静差；而微分信号则反应了偏差信号的变化规律，也可以说是变化趋势，根据偏差信号的变化趋势来进行超前调节，从而增加了系统的预知性。</p><p><strong>比例项</strong>：某时刻误差值,代表着现在,表明现在预设值与实际的偏差。<strong>积分项</strong>：所有时刻误差和,代表着过去，是过去Ti时间内的偏差积累，可以减少震荡。<strong>微分项</strong>：某时刻误差变化率,代表着未来，可以超前预测并提出控制。</p><h3 id="pid的离散化公式">PID的离散化公式</h3><hr /><p>在数字系统中进行PID算法控制，需要对上述公式进行离散化，然后才好进行程序设计，从而得到：<span class="math display">\[U(k) = Kp*e(k) + \frac{Kp*T}{Ti}\sum_{n=0}^k e(n)+\frac{Kp*Td}{T}(e(k)-e(k-1))\]</span> 其中：<strong>e(k)</strong> 是当前值和目标值的偏差，<strong>Kp</strong> 是比例增益， <strong>T</strong>是控制周期，<strong>Ti</strong> 是积分时间， <strong>Td</strong>是微分时间。</p><p>为了方便起见，将这些系数进行统一: <span class="math display">\[比例系数Kp= Kp;\ 积分系数Ki = \frac{Kp*T}{Ti};\ 微分系数Kd =\frac{Kp*Td}{T}\]</span> 则得到 <strong>位置式PID</strong> 公式： <spanclass="math display">\[U(k) = Kp*e(k) + Ki\sum_{n=0}^k e(n)+ Kd*(e(k)-e(k-1))\]</span> 因为 <code>△U(k) = U(k) - U(k-1)</code>，这样得到<strong>增量式PID</strong> 公式： <span class="math display">\[△U(k) = Kp*(e(k)-e(k-1)) + Ki*e(k) + Kd*(e(k)-2*e(k-1)+e(k-2))\]</span></p><p><span class="math display">\[U(k) = △U(k)+U(k-1)\]</span></p><h3 id="pid算法的c语言实现">PID算法的C语言实现</h3><hr /><p>经过pid算法后得到的输出值，进行处理加工送到执行结构进行系统控制。在温度控制场景中，对于制冷控制，只需要将pid的输出值进行反向处理即可。</p><div class="code-wrapper"><pre><code class="hljs c"><span class="hljs-comment">/* 位置式pid和增量式pid的选择 */</span><span class="hljs-meta">#<span class="hljs-keyword">define</span> POSITION_PID</span><span class="hljs-comment">//#define INCREMENT_PID</span><span class="hljs-comment">/* pid 参数结构体定义 */</span><span class="hljs-keyword">typedef</span> <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">pid</span></span><span class="hljs-class">&#123;</span><span class="hljs-type">float</span> target;  <span class="hljs-comment">//target value 目标值</span><span class="hljs-type">float</span> curr;    <span class="hljs-comment">//current value 当前值</span><span class="hljs-type">float</span> err;     <span class="hljs-comment">//err=tag-cur 偏差值</span><span class="hljs-type">float</span> sum_err; <span class="hljs-comment">//偏差积分和</span><span class="hljs-type">float</span> last_err; <span class="hljs-comment">//上一个偏差值</span><span class="hljs-type">float</span> prev_last_err; <span class="hljs-comment">//上上个偏差值</span><span class="hljs-type">float</span> kp; <span class="hljs-comment">//proportion</span><span class="hljs-type">float</span> ki; <span class="hljs-comment">//integral</span><span class="hljs-type">float</span> kd; <span class="hljs-comment">//differential</span><span class="hljs-type">float</span> limit_integral; <span class="hljs-comment">//积分限幅</span><span class="hljs-type">float</span> limit_output; <span class="hljs-comment">//输出限幅</span><span class="hljs-type">float</span> output;<span class="hljs-comment">//控制输出值</span>&#125;<span class="hljs-type">pid_t</span>;<span class="hljs-comment">/* 限幅处理的宏定义 */</span><span class="hljs-meta">#<span class="hljs-keyword">define</span> LIMIT_MAX(value, max) \</span><span class="hljs-meta">    &#123;                        \</span><span class="hljs-meta"><span class="hljs-keyword">if</span> (value &gt; max)       \</span><span class="hljs-meta">value = max;       \</span><span class="hljs-meta"><span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (value &lt; -max) \</span><span class="hljs-meta">value = -max;      \</span><span class="hljs-meta">    &#125;</span><span class="hljs-comment">/**</span><span class="hljs-comment">  * @brief  pid初始化</span><span class="hljs-comment">  * @param  pid：pid结构体指针</span><span class="hljs-comment">  * @retval None</span><span class="hljs-comment">  */</span><span class="hljs-type">void</span> <span class="hljs-title function_">pid_init</span><span class="hljs-params">(<span class="hljs-type">pid_t</span>* pid)</span>&#123;pid-&gt;target = <span class="hljs-number">0</span>;pid-&gt;curr = <span class="hljs-number">0</span>;pid-&gt;kp = <span class="hljs-number">2.3</span>;pid-&gt;ki = <span class="hljs-number">0.5</span>;pid-&gt;kd = <span class="hljs-number">5.6</span>;pid-&gt;err = <span class="hljs-number">0</span>;pid-&gt;last_err = <span class="hljs-number">0</span>;pid-&gt;prev_last_err = <span class="hljs-number">0</span>;pid-&gt;sum_err = <span class="hljs-number">0</span>;pid-&gt;output = <span class="hljs-number">0</span>;pid-&gt;limit_integral = <span class="hljs-number">255</span>;<span class="hljs-comment">//根据pwm输出范围进行设置</span>pid-&gt;limit_output = <span class="hljs-number">255</span>; <span class="hljs-comment">//根据pwm输出范围进行设置</span>&#125;<span class="hljs-comment">/**</span><span class="hljs-comment">  * @brief  pid的运算</span><span class="hljs-comment">  * @param  pid：pid指针</span><span class="hljs-comment">  * @paramcurrent_value：当前值</span><span class="hljs-comment">  * @retval None</span><span class="hljs-comment">  */</span><span class="hljs-type">static</span> <span class="hljs-type">float</span> <span class="hljs-title function_">pid_calc</span><span class="hljs-params">(<span class="hljs-type">pid_t</span>* pid, <span class="hljs-type">float</span> current_value)</span>&#123;<span class="hljs-type">float</span> increment = <span class="hljs-number">0</span>;pid-&gt;curr = current_value;pid-&gt;err = pid-&gt;target - pid-&gt;curr;<span class="hljs-meta">#<span class="hljs-keyword">ifdef</span> POSITION_PID</span><span class="hljs-comment">/* 位置式公式：u(t)=Kp*E(t)+Ki*[E(1)+...+E(t)]+Kd*[E(t)-E(t-1)] */</span>pid-&gt;sum_err += pid-&gt;err;LIMIT_MAX(pid-&gt;sum_err, pid-&gt;limit_integral);<span class="hljs-comment">//积分限幅</span>pid-&gt;output = pid-&gt;kp * pid-&gt;err + pid-&gt;ki * pid-&gt;sum_err + \pid-&gt;kd * (pid-&gt;err - pid-&gt;last_err);<span class="hljs-meta">#<span class="hljs-keyword">endif</span></span><span class="hljs-meta">#<span class="hljs-keyword">ifdef</span> INCREMENT_PID</span><span class="hljs-comment">/* 增量式公式：△u(t)=Kp*[E(t)-E(t-1)]+Ki*E(t)+Kd*[E(t)-2*E(t-1)+E(t-2)] */</span>increment = pid-&gt;kp * (pid-&gt;err - pid-&gt;last_err) + pid-&gt;ki * pid-&gt;err + \pid-&gt;kd * (pid-&gt;err - <span class="hljs-number">2</span> * pid-&gt;last_err + pid-&gt;prev_last_err);pid-&gt;output += increment;<span class="hljs-meta">#<span class="hljs-keyword">endif</span></span>LIMIT_MAX(pid-&gt;output, pid-&gt;limit_output);<span class="hljs-comment">//输出限幅</span>pid-&gt;last_err = pid-&gt;err;pid-&gt;prev_last_err = pid-&gt;last_err;<span class="hljs-keyword">return</span> pid-&gt;output;&#125;</code></pre></div><h3 id="pid调试">PID调试</h3><hr /><p>借助<ahref="https://serialplot.ozderya.net/downloads/serialplot-0.12.0-win32.exe">SerialPlot工具</a>使用printf函数将目标值和实时值图形显示处理，调节不同的Kp，Ki和Kd，可以很方便的进行调试。</p><h4 id="位置式pid调节">位置式PID调节</h4><p>位置型PID的参数整定过程一般是，先整定KP，然后整定KI，最后整定KD；</p><p>参数整定找最佳，从小到大顺序查 先是比例后积分，最后再把微分加曲线振荡很频繁，比例度盘要放大(Kp减小)曲线漂浮绕大湾，比例度盘往小扳(Kp增大)曲线偏离回复慢，积分时间往下降(Ki增大)曲线波动周期长，积分时间再加长(Ki减小)曲线振荡频率快，先把微分降下来(Kd增大)动差大来波动慢。微分时间应加长(Kd减小) 理想曲线两个波，前高后低4比1一看二调多分析，调节质量不会低</p><h4 id="增量式pid调节">增量式pid调节</h4><p>增量型PID应该先整定Ki，然后整定Kd，最后整定Kp。这一点需要特别注意，弄错顺序的话会发现整定规律完全不适用的。<strong>网上大多数资料把增量式跟位置式混为一谈</strong></p><h3 id="参考链接">参考链接</h3><p><ahref="https://blog.csdn.net/qq_25352981/article/details/81007075?ops_request_misc=%257B%2522request%255Fid%2522%253A%2522168231970816800192213769%2522%252C%2522scm%2522%253A%252220140713.130102334..%2522%257D&amp;request_id=168231970816800192213769&amp;biz_id=0&amp;utm_medium=distribute.pc_search_result.none-task-blog-2~all~top_positive~default-2-81007075-null-null.142%5Ev86%5Ekoosearch_v1,239%5Ev2%5Einsert_chatgpt&amp;utm_term=pid&amp;spm=1018.2226.3001.4187">一文读懂PID控制算法（抛弃公式，从原理上真正理解PID控制）</a></p><p><ahref="https://blog.csdn.net/skythinker616/article/details/123019829?ops_request_misc=%257B%2522request%255Fid%2522%253A%2522168231970816800192213769%2522%252C%2522scm%2522%253A%252220140713.130102334..%2522%257D&amp;request_id=168231970816800192213769&amp;biz_id=0&amp;utm_medium=distribute.pc_search_result.none-task-blog-2~all~top_positive~default-1-123019829-null-null.142%5Ev86%5Ekoosearch_v1,239%5Ev2%5Einsert_chatgpt&amp;utm_term=pid&amp;spm=1018.2226.3001.4187">PID超详细教程——PID原理+串级PID+C代码+在线仿真调参</a></p><p><ahref="https://blog.csdn.net/qq_45396672/article/details/118057838?ops_request_misc=%257B%2522request%255Fid%2522%253A%2522168231970816800192213769%2522%252C%2522scm%2522%253A%252220140713.130102334..%2522%257D&amp;request_id=168231970816800192213769&amp;biz_id=0&amp;utm_medium=distribute.pc_search_result.none-task-blog-2~all~top_click~default-8-118057838-null-null.142%5Ev86%5Ekoosearch_v1,239%5Ev2%5Einsert_chatgpt&amp;utm_term=pid&amp;spm=1018.2226.3001.4187">图文详解PID调参</a></p><p><ahref="https://blog.csdn.net/u010312937/article/details/53363831">PID控制算法的C语言实现</a></p>]]></content>
      
      
      <categories>
          
          <category> 单片机 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> pid </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>PID参数的自整定</title>
      <link href="/2023/04/24/PID%E5%8F%82%E6%95%B0%E7%9A%84%E8%87%AA%E6%95%B4%E5%AE%9A/"/>
      <url>/2023/04/24/PID%E5%8F%82%E6%95%B0%E7%9A%84%E8%87%AA%E6%95%B4%E5%AE%9A/</url>
      
        <content type="html"><![CDATA[<p>在某些PID应用场合，不同的对象就得采用不同的参数值，所以需要进行参数自整定。实质就是在首次使用时，通过N次测量得到一套PID参数。具体的整定方法有三种：临界比例度法、衰减曲线法、经验法。三种方法共同点都是通过试验，然后按照工程经验公式对控制器参数进行整定。现在一般采用比较多的是临界比例度法。</p><h4id="临界比例度法ziegler-nichols">1、临界比例度法（Ziegler-Nichols）</h4><h5 id="操作方法">1.1 操作方法</h5><p>（1）将纯比例控制器接入到闭环控制系统中（设置控制器参数积分时间常数Ti=∞，实际微分时间常数Td=0）。</p><p>（2）由小到大改变比例增益K，直到闭环系统出现持续等幅振荡。此时的增益为临界增益（Ku），振荡周期（波峰间的时间）为临界周期（Tu）。然后根据下表得出PID控制器参数。</p><table><thead><tr class="header"><th>调节规律</th><th>K</th><th>Ti</th><th>Td</th></tr></thead><tbody><tr class="odd"><td>P</td><td>0.5Ku</td><td>-</td><td>-</td></tr><tr class="even"><td>PI</td><td>0.45Ku</td><td>0.83Tu</td><td>-</td></tr><tr class="odd"><td>PD</td><td>0.65Ku</td><td>-</td><td>0.15Tu</td></tr><tr class="even"><td>PID</td><td>0.6Ku</td><td>0.5Tu</td><td>0.15Tu</td></tr></tbody></table><h5 id="注意事项">1.2 注意事项：</h5><p>（1）应使控制系统工作在线性区，不要使控制阀出现开、关的极端状态，否则得到的持续振荡曲线可能是“极限循环”，从线性系统概念上说系统早已处于发散振荡了。</p><p>（2）由于被控对象特性的不同，应针对具体系统在实际运行过程中对上述求得的控制器参数进行在线校正。</p><p>（3）适用于临界振幅不大、振荡周期较长的过程控制系统，但有些系统用纯比例控制时始终是稳定的，是无法用临界比例度法来进行参数整定的。</p><p>（4）只适用于二阶以上的高阶对象，或一阶加纯滞后的对象，否则，在纯比例控制情况下，系统不会出现等幅振荡。</p><h4 id="衰减曲线法">2、衰减曲线法</h4><h5 id="整定步骤">2.1 整定步骤</h5><p>（1）在纯比例控制器下，置比例增益K为较小值。系统稳定后，作设定值阶跃扰动，观察系统的响应。若系统响应衰减太快，则减小比例增益K；反之，应增大比例增益K。</p><p>（2）直到系统出现如下图（a）所示的4:1衰减振荡过程，记下此时的比例增益Ks及和振荡周期Ts数值。同理，10：1衰减曲线如下图（b）所示。</p><figure><imgsrc="https://gitee.com/kayoungzhang/picgo_res/raw/master/img/v2-68670d44361ce32e7d24f695bd61c62c_720w.webp"alt="img" /><figcaption aria-hidden="true">img</figcaption></figure><p>（3）利用Ks和Ts值，Tr值，按下表给出的经验公式，计算出控制器的参数整定值。</p><table><thead><tr class="header"><th>衰减率</th><th>调节规律</th><th>K</th><th>Ti</th><th>Td</th></tr></thead><tbody><tr class="odd"><td>0.75（0.9）</td><td>P</td><td>Ks</td><td>-</td><td>-</td></tr><tr class="even"><td>0.75（0.9）</td><td>PI</td><td>0.83Ks</td><td>0.5Ts（2Tr）</td><td>-</td></tr><tr class="odd"><td>0.75（0.9）</td><td>PID</td><td>1.25Ks</td><td>0.3TS（1.2Tr）</td><td>0.1Ts（0.4Tr）</td></tr></tbody></table><h5 id="注意事项-1">2.2 注意事项</h5><p>（1）加给定干扰不能太大，要根据生产操作要求来定，一般在5%左右，也有例外的情况。</p><p>（2）必须在工艺参数稳定的情况下才能加给定干扰，否则得不到正确的整定参数。</p><p>（3）对于反应快的系统，如流量、管道压力和小容量的液位调节等，要得到严格的4：1衰减曲线较困难，一般以被调参数来回波动两次达到稳定，就近似地认为达到4：1衰减过程了。</p><p>（4）投运时，先将K放在较小的数值，把Ti减少到整定值，把Td逐步放大到整定值，然后把K拉到整定值（如果在K=整定值的条件下很快地把Td放到整定值，控制器的输出会剧烈变化）。</p><h4 id="经验整定法">3、经验整定法</h4><h5 id="方法一">3.1方法一</h5><p>（1）确定比例增益</p><p>使PID为纯比例调节,输入设定为系统允许最大值的60%~70%，由0逐渐加大比例增益至系统出现振荡；再逐渐减小比例增益至系统振荡消失，记录此时的比例增益，则设定PID的比例增益P为当前值的60%~70%。</p><p>（2）确定积分时间常数Ti</p><p>比例增益P确定后，设定一个较大的积分时间常数Ti的初值，逐渐减小Ti至系统出现振荡，之后逐渐加大Ti至振荡消失。记录此时的Ti，则设定PID的积分时间常数Ti为当前值的150%~180%。</p><p>（3）确定积分时间常数Td</p><p>积分时间常数Td一般不用设定，为0即可。若要设定，与确定P和Ti的方法相同，取不振荡时的30%。</p><p>（4）系统带载联调，再对PID参数进行微调，直至满足要求。</p><h5 id="方法二">3.2 方法二</h5><p>（1）在实际调试中，也可以先大致设定一个经验值，然后根据调节效果修改。</p><p>　　流量系统：P（%）40~100，Ti（分）0.1~1 　　压力系统：P（%）30~70，Ti（分）0.4~3 　　液位系统：P（%）20~80， Ti（分）1~5　　温度系统：P（%）20~60， Ti（分）3~10，Td（分）0.5~3</p><p>（2）以下整定的口诀：</p><p>阶跃扰动投闭环，参数整定看曲线；先投比例后积分，最后再把微分加；理想曲线两个波，振幅衰减4比1；曲线震荡动作繁，微分时间要加长；曲线震荡很频繁，比例刻度要放大；曲线漂浮波动大，比例刻度要拉小；曲线波动周期长，积分时间要加长；偏离定值回复慢，积分时间往小降。</p><h3 id="参考链接">参考链接</h3><p><ahref="https://zhuanlan.zhihu.com/p/82344845">详细讲解PID控制</a></p><p><ahref="https://www.cnblogs.com/luckytimor/p/6881569.html">PID公式参数</a></p>]]></content>
      
      
      <categories>
          
          <category> 单片机 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> pid </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>stc单片机存储器</title>
      <link href="/2023/04/23/stc%E5%8D%95%E7%89%87%E6%9C%BA%E5%AD%98%E5%82%A8%E5%99%A8/"/>
      <url>/2023/04/23/stc%E5%8D%95%E7%89%87%E6%9C%BA%E5%AD%98%E5%82%A8%E5%99%A8/</url>
      
        <content type="html"><![CDATA[<p>stc单片机存储器结构的主要特点是 <strong>程序存储器</strong> 和<strong>数据存储器</strong>是各自独立编址的。单片机内部在物理和逻辑上有三个独立的地址空间：flashROM(内部集成EEPROM)，片内基本RAM(256字节)和片内扩展RAM(1024字节)。</p><h3 id="程序存储器flash-rom">程序存储器flash ROM：</h3><p>程序存储器用于存放用户程序、数据和表格等信息。内部集成了的EEPROM是与程序空间是分开的，利用ISP/IAP技术可将内部DataFlash当EEPROM。</p><p><img src="https://gitee.com/kayoungzhang/picgo_res/raw/master/img/image-20230423212147712.png" alt="image-20230423212147712" style="zoom:67%;" /></p><h3 id="片内基本ram">片内基本RAM：</h3><p>片内基本RAM分低128字节和高128字节。</p><p>低128字节分为三个区：工作寄存器组区、可位寻址区、通用RAM区。</p><p><img src="https://gitee.com/kayoungzhang/picgo_res/raw/master/img/image-20230423212429407.png" alt="image-20230423212429407" style="zoom:80%;" /></p><p>高128字节RAM与特殊功能寄存器区貌似共用相同的地址范围，都使用80H~FFH,地址空间虽然貌似重叠，但物理上是独立的，使用时通过不同的寻址方式加以区分。高128字节RAM只能间接寻址，特殊功能寄存器区只可直接寻址。</p><p><img src="https://gitee.com/kayoungzhang/picgo_res/raw/master/img/image-20230423212649092.png" alt="image-20230423212649092" style="zoom: 80%;" /></p><h3 id="片内扩展ram">片内扩展RAM：</h3><p>在C语言中，可使用 <strong>xdata</strong> 声明扩展RAM变量存储类型，如<code>unsigned  char  xdata  i=0;</code>。默认情况下，选择的是片内扩展RAM，当需要访问片外RAM时，EXTRAM必须为1.</p><p><img src="https://gitee.com/kayoungzhang/picgo_res/raw/master/img/image-20230423213425262.png" alt="image-20230423213425262" style="zoom:67%;" /></p><p><img src="https://gitee.com/kayoungzhang/picgo_res/raw/master/img/image-20230423213920633.png" alt="image-20230423213920633" style="zoom: 80%;" /></p>]]></content>
      
      
      <categories>
          
          <category> 单片机 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> stc </tag>
            
            <tag> 存储器 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>STC12C5A60S2单片机注意事项</title>
      <link href="/2023/04/23/STC12C5A60S2%E5%8D%95%E7%89%87%E6%9C%BA%E6%B3%A8%E6%84%8F%E4%BA%8B%E9%A1%B9/"/>
      <url>/2023/04/23/STC12C5A60S2%E5%8D%95%E7%89%87%E6%9C%BA%E6%B3%A8%E6%84%8F%E4%BA%8B%E9%A1%B9/</url>
      
        <content type="html"><![CDATA[<p>STC12C5A60S2单片机是stc12系列一款比较经典的MCU，下面对照它的参考手册，摘录其使用时注意事项：</p><ol type="1"><li><img src="https://gitee.com/kayoungzhang/picgo_res/raw/master/img/image-20230423184155244.png" alt="image-20230423184155244" style="zoom:80%;" /></li><li><img src="https://gitee.com/kayoungzhang/picgo_res/raw/master/img/image-20230423184511042.png" alt="image-20230423184511042" style="zoom:80%;" /></li><li><img src="https://gitee.com/kayoungzhang/picgo_res/raw/master/img/image-20230423185326975.png" alt="image-20230423185326975" style="zoom:80%;" /></li><li><img src="https://gitee.com/kayoungzhang/picgo_res/raw/master/img/image-20230423190016475.png" alt="image-20230423190016475" style="zoom:80%;" /></li><li><img src="https://gitee.com/kayoungzhang/picgo_res/raw/master/img/image-20230423190316983.png" alt="image-20230423190316983" style="zoom:80%;" /></li><li><img src="https://gitee.com/kayoungzhang/picgo_res/raw/master/img/image-20230423222004968.png" alt="image-20230423222004968" style="zoom: 80%;" /></li><li><img src="https://gitee.com/kayoungzhang/picgo_res/raw/master/img/image-20230423193706324.png" alt="image-20230423193706324" style="zoom:80%;" /></li></ol><p><img src="https://gitee.com/kayoungzhang/picgo_res/raw/master/img/image-20230423194010351.png" alt="image-20230423194010351" style="zoom:80%;" /></p><ol start="7" type="1"><li><img src="https://gitee.com/kayoungzhang/picgo_res/raw/master/img/image-20230423194201742.png" alt="image-20230423194201742" style="zoom:80%;" /></li><li><img src="https://gitee.com/kayoungzhang/picgo_res/raw/master/img/image-20230423194225873.png" alt="image-20230423194225873" style="zoom:80%;" /></li><li><img src="https://gitee.com/kayoungzhang/picgo_res/raw/master/img/image-20230423222448627.png" alt="image-20230423222448627" style="zoom:80%;" /></li><li><img src="https://gitee.com/kayoungzhang/picgo_res/raw/master/img/image-20230423223648757.png" alt="image-20230423223648757" style="zoom:80%;" /></li></ol><p><img src="https://gitee.com/kayoungzhang/picgo_res/raw/master/img/image-20230423224016123.png" alt="image-20230423224016123" style="zoom:80%;" /></p>]]></content>
      
      
      <categories>
          
          <category> 单片机 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> stc </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Linux 常用命令汇总</title>
      <link href="/2023/04/21/Linux-%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4%E6%B1%87%E6%80%BB/"/>
      <url>/2023/04/21/Linux-%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4%E6%B1%87%E6%80%BB/</url>
      
        <content type="html"><![CDATA[<p>Linux开发过程中会经常接触到各种命令，常用的命令它们大致分为：</p><p><strong>文件管理、文档编辑、磁盘管理、系统设备管理、网络通讯、权限管理、其它</strong></p><hr /><p>在详细介绍各种常用命令之前，先了解一下Linux命令行默认显示的部分<code>[root@localhost ~]#</code>：</p><ul><li><p><strong>root</strong>是当前登录的用户</p></li><li><p><strong>localhost</strong>是主机名字</p></li><li><p><strong>~</strong> 表示当前所在的目录(家目录)，<strong>/</strong> 表示根目录</p></li><li><p><strong>#</strong> 是用户标识，表示管理员， <strong>$</strong>表示普通用户</p></li></ul><hr /><h3 id="文件管理命令">文件管理命令：</h3><div class="code-wrapper"><pre><code class="hljs shell">ls       #查看目录ls -a　　 #列出全部的文件,包括以.开头的隐藏文件ls -l 　 #显示文件和目录的详细资料cd     #切换工作目录cd ~   #切换到家目录cd /   #切换到根目录cd ..  #切换到上一级mkdir abc                 # 在当前目录下新建一个名为abc的文件夹mkdir /usr/abc            #在指定目录下创建一个名为abc的文件夹mkdir -p /usr/file/abc    #在指定目录下创建文件夹abc，并创建父文件夹filetouch abc.txt              #在当前目录创建一个文件abc.txttouch /usr/abc.txt         #在指定目录下创建一个文件abc.txtmv 文件  文件夹          # 移动文件到目标文件夹中mv 文件A 文件B          # 修改文件A的名字为文件B，同样适用于目录名修改mv /usr/tmp /opt       #将/usr目录下的tmp目录剪切到 /opt目录下面cp file1 file2         #在当前目录下把file1复制粘贴为file2 cp /usr/tmp /opt       #将/usr目录下的tmp目录复制到 /opt目录下面cp -r /usr/tmp /opt    #递归剪复制目录中所有文件和文件夹rm rm -f file1　　 #强制删除file1文件rm -rf dir　　     #强制删除dir目录及其子目录下所有文件 rmdir dir　     　 #删除dir空目录（只能删除空目录）find / -name file1          #从根目录下查找file1文件find /bin -name &#x27;a*&#x27;        #查找/bin目录下的所有以a开头的文件或者目录find / -user user1          #搜索属于用户 &#x27;user1&#x27; 的文件和目录 ln log2013.log ln2013       #为log2013.log创建硬链接ln2013，log2013.log与ln2013的各项属性相同ln -s log2013.log link2013  #为log2013.log文件创建软链接link2013</code></pre></div><h3 id="文档编辑命令">文档编辑命令</h3><div class="code-wrapper"><pre><code class="hljs shell">vi 文件名        #打开需要编辑的文件，大多数Linux默认安装了vim编辑工具命令模式（command mode）：-按&quot;i&quot;在光标所在字符前开始插入-按&quot;a&quot;在光标所在字符后开始插入-按&quot;o&quot;在光标所在行的下面另起一新行插入-控制光标移动：↑，↓，j-跳到指定行 &quot;:n&quot; -跳到行首 &quot;gg&quot;-使用命令&quot;dd&quot;删除当前整行-使用命令&quot;/字段&quot;进行查找-按&quot;：&quot;进入底行模式插入模式（Insert mode）：-按&quot;ESC&quot;进入底行模式底行模式（last line mode）：-退出编辑：             :q-强制退出并取消本次修改：  :q!-保存并退出：            :wq或:xcat a.txt          #查看文件最后一屏内容less a.txt         #从第一页开始查看文件内容，PgUp向上翻页，PgDn向下翻页，&quot;q&quot;退出查看more a.txt         #显示百分比，回车查看下一行，空格查看下一页，&quot;q&quot;退出查看tail -10 a.txt    #查看文件的后10行，&quot;Ctrl+C&quot;退出查看head -10 a.txt     #查看文件的前10行，&quot;Ctrl+C&quot;退出查看grep abc test.txt #在test.txt文件中搜索abc字符串，大小写敏感且显示行；grep -n abc test.txt #在test.txt文件中搜索abc字符串，大小写敏感且显示行及行号；grep ^abc /var/test.txt  #在文件中查找以&quot;abc&quot;开始的词汇 grep [0-9] /var/test.txt # 在文件中选择所有包含数字的行 grep abc -R /var/log/*   #在目录 &#x27;/var/log&#x27; 及随后的目录中搜索字符串&quot;abc&quot;</code></pre></div><h3 id="磁盘管理命令">磁盘管理命令</h3><div class="code-wrapper"><pre><code class="hljs shell">du   #显示目录或者文件所占空间du -h test   #以K，M，G为单位显示test目录所占空间情况df -h         #显示文件系统的磁盘使用情况pwd   #查看当前所在目录tree dir           #树形显示dir目录下的所有文件mount /dev/hda1 /mnt  #将 /dev/hda1 挂在 /mnt 之下mount -o ro /dev/hda1 /mnt   #将 /dev/hda1 用唯读模式挂在 /mnt 之下 ， -o rw：用可读写模式挂上umount -v /dev/sda1    #通过设备名卸载sda1umount -v /mnt/mymount/  #通过挂载点卸载dd #命令用于读取、转换并输出数据，uboot应用中会使用到，详情查看手册man ddfdisk -l  #显示当前分区情况fdisk -lu #显示SCSI硬盘的每个分区情况</code></pre></div><h3 id="系统设备管理命令">系统设备管理命令</h3><div class="code-wrapper"><pre><code class="hljs shell">clear         #清屏export -p //列出当前的环境变量值date  #显示当前时间history       #查看历史的输入命令hostname               # 查看主机名uname -a      #显示一些重要的系统信息，例如内核名称、主机名、内核版本号、处理器类型之类的信息 kill id      #杀死该id的进程su 用户名            #切换用户sudo 命令      #以系统管理者的身份执行指令ps -ef        #查看所有正在运行的进程shutdown -h now        #立刻关机shutdown -h 15:30      #到15:30关机shutdown -h 5          #5分钟后关机shutdown -r now        #立刻重启shutdown -r 5          #5分钟后重启reboot                 #立刻重启sleep 5m               #休眠5分钟，时间长度，后面可接 s、m、h 或 dlogout                 #退出系统login                  #使用新的身份登录系统halt   #关闭系统exit                   #退出终端groupadd 组名    #创建组groupdel 组名    #删除组useradd -g 组名 用户名    #创建用户passwd runoob   #设置runoob用户的密码passwd -d lx138   #删除用户密码userdel -r 用户名    #删除用户</code></pre></div><h3 id="权限管理命令">权限管理命令</h3><div class="code-wrapper"><pre><code class="hljs shell">chmod u+x 文件名    # 给文件的所有者添加执行权限chmod o-rwx 文件名  # 给文件的其他人删除所有权限chmod g=wx 文件名   # 给文件的所属组设置读写权限chmod 764 file     #对file的所有者设置读写及可执行权限，对用户组设置读写权限, 为其他用户设置读权限<span class="hljs-meta prompt_">#</span><span class="language-bash">参数说明：u：文件所有者；g:文件所有者所在组；o:其他用户；</span><span class="hljs-meta prompt_">#</span><span class="language-bash">参数说明：+：增加权限；-:去除权限； =:设置权限；</span><span class="hljs-meta prompt_">#</span><span class="language-bash">参数说明：r(4):读权限；w(2):写权限；x(1)：可执行权限；</span></code></pre></div><h3 id="网络通讯">网络通讯</h3><div class="code-wrapper"><pre><code class="hljs shell">systemctl status 服务名       # 服务器管理命令systemctl start 服务名        # 启动服务systemctl restart 服务名      # 重启服务systemctl stop 服务名         # 停止服务systemctl disable 服务名      # 禁止服务随linux启动。systemctl enable 服务名       # 设置服务随linux启动。ifconfig    #显示网络设备信息ifconfig eth0 down   #关闭指定网卡ifconfig eth0 up     #启动指定网卡ifconfig eth0 192.168.1.56   #给eth0网卡配置IP地址netstat -a     #显示详细的网络状况netstat -i     #显示网卡列表netstat -l     #显示监听的套接口ping www.runoob.com    #检测是否与主机连通tty    #显示当前终端ftp 主机名称或IP地址   #匿名登录tftp 218.28.188.288 #连接远程服务器 telnet 192.168.0.5  #登录IP为 192.168.0.5 的远程主机</code></pre></div><h3 id="其它命令">其它命令</h3><div class="code-wrapper"><pre><code class="hljs shell">tar -zcvf a.tar file1 file2,...     #将多个文件压缩打包成a.tartar -zxvf a.tar                      #解包至当前目录tar -zxvf a.tar -C /usr              #指定解压的位置<span class="hljs-meta prompt_"># </span><span class="language-bash">参数说明：z：调用gzip压缩命令进行压缩; x:解压文件; c：打包文件; v：显示运行过程; f：指定文件名</span>whereis ls    #将和ls文件相关的文件都查找出来which bash    #在环境变量$PATH设置的目录里查找指令&quot;bash&quot;的绝对路径ifconfig  --help：     #命令帮助文档，查看网卡信息man shutdown           #man手册，打开命令说明书之后，使用按键q退出</code></pre></div><p><strong>参考链接：</strong></p><p><ahref="https://www.runoob.com/linux/linux-command-manual.html">Linux命令大全</a></p>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
            <tag> 命令 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>stm32 SRAM调试设置</title>
      <link href="/2023/04/20/stm32-SRAM%E8%B0%83%E8%AF%95%E8%AE%BE%E7%BD%AE/"/>
      <url>/2023/04/20/stm32-SRAM%E8%B0%83%E8%AF%95%E8%AE%BE%E7%BD%AE/</url>
      
        <content type="html"><![CDATA[<p>我们知道，当程序下载到芯片中，是直接下载到内部的flash区域，在我们写程序的初期阶段，会频繁的进行程序的下载烧录，而flash的擦除和写入是有寿命限制的，当然，我们平时这些几千上万次是无关紧要的，但为了进一步提高它的寿命，其实在调试阶段可以将程序写入SRAM中，这和写入flash中是一样的效果。</p><p>下面简单介绍一下：</p><p>在keil软件中，按下图步骤建立一个调试工程，其下会自动复制工程的所有文件：</p><figure><imgsrc="https://gitee.com/kayoungzhang/picgo_res/raw/master/img/image-20230420192151263.png"alt="image-20230420192151263" /><figcaption aria-hidden="true">image-20230420192151263</figcaption></figure><p>此时，我们会看到当前的工程名字变成我们刚才设置的名字了。下面进行参数设置：</p><figure><imgsrc="https://gitee.com/kayoungzhang/picgo_res/raw/master/img/image-20230420192729247.png"alt="image-20230420192729247" /><figcaption aria-hidden="true">image-20230420192729247</figcaption></figure><figure><imgsrc="https://gitee.com/kayoungzhang/picgo_res/raw/master/img/image-20230420193056604.png"alt="image-20230420193056604" /><figcaption aria-hidden="true">image-20230420193056604</figcaption></figure><p>然后创建一个SRAM.ini文件，放到工程中，并进行加载设置，文件内容如下：</p><div class="code-wrapper"><pre><code class="hljs bash">/*---------------------------------------------------------------------------- * Name:    Debug_RAM.ini * Purpose: RAM Debug Initialization File * Note(s): *---------------------------------------------------------------------------- * This file is part of the uVision/ARM development tools. * This software may only be used under the terms of a valid, current, * end user licence from KEIL <span class="hljs-keyword">for</span> a compatible version of KEIL software * development tools. Nothing <span class="hljs-keyword">else</span> gives you the right to use this software. * * This software is supplied <span class="hljs-string">&quot;AS IS&quot;</span> without warranties of any kind. * * Copyright (c) 2008-2011 Keil - An ARM Company. All rights reserved. *----------------------------------------------------------------------------*//*----------------------------------------------------------------------------  Setup()  configure PC &amp; SP <span class="hljs-keyword">for</span> RAM Debug *----------------------------------------------------------------------------*/FUNC void Setup (void) &#123;  SP = _RDWORD(0x20000000);          // Setup Stack Pointer  PC = _RDWORD(0x20000004);          // Setup Program Counter  _WDWORD(0xE000ED08, 0x20000000);   // Setup Vector Table Offset Register&#125;FUNC void OnResetExec (void)  &#123;      // executes upon software RESET  Setup();                           // Setup <span class="hljs-keyword">for</span> Running&#125;load %L incrementalSetup();                             // Setup <span class="hljs-keyword">for</span> Runningg, main</code></pre></div><figure><imgsrc="https://gitee.com/kayoungzhang/picgo_res/raw/master/img/image-20230420193627116.png"alt="image-20230420193627116" /><figcaption aria-hidden="true">image-20230420193627116</figcaption></figure><p>最后，手动设置一下板子上的<strong>BOOT0</strong>和<strong>BOOT1</strong>引脚到高电平，从<strong>SRAM</strong>启动即可。</p><p>参考链接</p><hr /><p><ahref="https://www.cnblogs.com/TrueElement/archive/2012/09/11/2680863.html">STM32的SRAM调试</a></p>]]></content>
      
      
      <categories>
          
          <category> stm32 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> SRAM </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>stm32 memory的转换计算</title>
      <link href="/2023/04/20/stm32-memory%E7%9A%84%E8%BD%AC%E6%8D%A2%E8%AE%A1%E7%AE%97/"/>
      <url>/2023/04/20/stm32-memory%E7%9A%84%E8%BD%AC%E6%8D%A2%E8%AE%A1%E7%AE%97/</url>
      
        <content type="html"><![CDATA[<p>在stm32开发过程中，会经常考虑到各个外设部分在内存中分配情况，其中就牵扯到内存的计算问题，下面简单了解一下，以下是stm32f1系列的memory分配情况。</p><figure><imgsrc="https://gitee.com/kayoungzhang/picgo_res/raw/master/img/memory%20map.png"alt="memory map" /><figcaption aria-hidden="true">memory map</figcaption></figure><figure><imgsrc="https://gitee.com/kayoungzhang/picgo_res/raw/master/img/memory%20address%E8%AE%A1%E7%AE%97.jpg"alt="memory address计算" /><figcaption aria-hidden="true">memory address计算</figcaption></figure><p>可以看出，芯片厂商在分配外设内存区域时，起止地址都是有规律可循的，图上已经标识，所以，通过它的内存起止地址，就可以很方便快速知道某个外设部分的内存分配大小。</p>]]></content>
      
      
      <categories>
          
          <category> stm32 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 内存计算 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>git的使用教程</title>
      <link href="/2023/04/19/git%E7%9A%84%E4%BD%BF%E7%94%A8%E6%95%99%E7%A8%8B/"/>
      <url>/2023/04/19/git%E7%9A%84%E4%BD%BF%E7%94%A8%E6%95%99%E7%A8%8B/</url>
      
        <content type="html"><![CDATA[<p>git是世界上最先进的开源分布式版本管理工具，相比于svn集中式版本管理工具，git可以让开发人员更加方便的查看和操作项目。</p><h3 id="git安装">1. git安装</h3><p>软件下载：<a href="https://git-scm.com/">git官网</a> 或 <ahref="https://npm.taobao.org/mirrors/git-for-windows/">国内镜像</a></p><h3 id="配置本地git标识用户名和邮箱">2.配置本地git标识(用户名和邮箱)</h3><p>打开 <code>git bash</code>,输入：</p><div class="code-wrapper"><pre><code class="hljs bash">git config --global user.name <span class="hljs-string">&quot;John Doe&quot;</span>git config --global user.email johndoe@example.com</code></pre></div><p><code>John Doe</code>替换成你的用户名，<code>johndoe@example.com</code>替换成你的邮箱。设置这两个信息的原因是在于远程库进行关联时需要一个key，配置这两个信息以确保你的唯一性。</p><p>使用--global参数表明你这台机器上所有的仓库都进行相同的配置。</p><h3 id="git的基本操作">3. git的基本操作</h3><div class="code-wrapper"><pre><code class="hljs bash">git init  <span class="hljs-comment"># 初始化git仓库，会在当前目录生成一个.git隐藏文件夹，不要去修改这个文件夹下的任意东西。</span>git add [file] <span class="hljs-comment">#添加文件到暂存区</span>git commit -m <span class="hljs-string">&quot;填写提交说明信息&quot;</span>   <span class="hljs-comment">#提交暂存区中的内容到本地仓库</span>git <span class="hljs-built_in">log</span>   <span class="hljs-comment"># 查看提交日志，可查看到版本commit ID</span>git status <span class="hljs-comment"># 查看所有文件的状态</span>git reset --hard HEAD^   <span class="hljs-comment">#上一个版本就是HEAD^，上上一个版本就是HEAD^^，当然往上100个版本写成HEAD~100</span>git reset --hard commit <span class="hljs-built_in">id</span> <span class="hljs-comment">#通过commit ID回退到那个版本，ID只需要前几位即可</span></code></pre></div><h3 id="git忽视文件">4. git忽视文件</h3><p>有些文件是不想被git管理可以通过配置从而达到忽视掉一些文件，这样这些文件就可以不用提交了。在仓库的根目录创建一个<code>.gitignore</code>的文件,然后将不需要被管理的文件添加到此文件中即可。如：</p><div class="code-wrapper"><pre><code class="hljs bash">log.txt  <span class="hljs-comment"># 忽视log.txt文件</span>.gitignore  <span class="hljs-comment"># 忽视.gitignore文件</span>css/*.js  <span class="hljs-comment"># 忽视css下的所有的js文件</span>css/*.*  <span class="hljs-comment"># 忽视css下的所有文件</span></code></pre></div><h3 id="git分支与合并">5. Git分支与合并</h3><div class="code-wrapper"><pre><code class="hljs bash">git branch                      <span class="hljs-comment">#查看本地分支</span>git branch [branch-name]        <span class="hljs-comment">#新建一个分支，但依然停留在当前分支</span>git checkout -b [branch]        <span class="hljs-comment">#新建一个分支，并切换到该branch分支</span>git checkout [branch-name]      <span class="hljs-comment">#切换到指定分支，并更新工作区</span>git branch -d [branch-name]     <span class="hljs-comment">#删除本地分支</span>git merge [branch]              <span class="hljs-comment">#合并指定branch分支到当前分支</span></code></pre></div><h3 id="关联远程仓库">6. 关联远程仓库</h3><p>远程仓库主要有：<a href="https://github.com/">github</a>和<ahref="https://gitee.com/">gitee</a>。</p><p><strong>gitee</strong>服务器在国内，网速比较快，<strong>github</strong>服务器在国外，访问速度比较慢，但用户数比较多。</p><ul><li><p>进入他们的官网，按照要求自行注册一个账户。</p></li><li><p>远程仓库绑定本地仓库，就可以SSH免密登陆，在<code>git bash</code>命令行窗口输入<strong>ssh-keygen-trsa</strong>,一直默认按回车即可，在本地目录：<code>C:\Users\Administrator\.ssh</code>文件中会生产两个秘钥文件，用记事本打开公钥文件<strong>id_rsa.pub</strong>，复制里面的内容。</p></li><li><p>在 <strong>github</strong> 网页上，依次打开<strong>settings</strong> -&gt; <strong>SSH and GPGkeys</strong>页面，新创建SSHkey，填上任意Title，在Key文本框里粘贴刚才复制的内容，添加即可。（gitee类似操作）</p></li><li><p>在 <strong>github</strong>网页上新建一个远程仓库，然后实现云端仓库和本地仓库同步。（gitee类似操作）</p></li></ul><div class="code-wrapper"><pre><code class="hljs bash">git remote add origin [远端仓库地址]   <span class="hljs-comment">#把本地仓库与远程仓库进行关联</span>git push -u origin [本地分支名字]  <span class="hljs-comment">#推送分支的所有内容到远程仓库</span></code></pre></div><h3 id="将远程仓库内容复制到本地">7. 将远程仓库内容复制到本地</h3><div class="code-wrapper"><pre><code class="hljs bash">git <span class="hljs-built_in">clone</span> [url]  　<span class="hljs-comment">#获取github上的远程仓库</span>git pull [url]     <span class="hljs-comment">#拉取github上远程仓库变化的内容</span></code></pre></div><h3 id="git的一些常用命令">8. git的一些常用命令</h3><ul><li>新建代码库</li></ul><div class="code-wrapper"><pre><code class="hljs bash">git init         <span class="hljs-comment"># 在当前目录新建一个Git代码库</span>git <span class="hljs-built_in">clone</span> [url]  <span class="hljs-comment">#clone 远程仓库到本地</span></code></pre></div><ul><li>本地仓库更改</li></ul><div class="code-wrapper"><pre><code class="hljs bash">git add [file1] [file2] ...    <span class="hljs-comment"># 添加指定文件到暂存区</span>git add .     <span class="hljs-comment"># 添加当前目录的所有文件到暂存区</span>git diff       <span class="hljs-comment"># 显示暂存区和工作区的差异</span>git <span class="hljs-built_in">rm</span> [file1] [file2] ...     <span class="hljs-comment"># 删除工作区文件，并且将这次删除放入暂存区</span>git commit -m [message]        <span class="hljs-comment"># 提交暂存区到仓库区</span>git status                  <span class="hljs-comment"># 显示有变更的文件</span>git <span class="hljs-built_in">log</span>                      <span class="hljs-comment"># 显示当前分支的版本历史</span></code></pre></div><ul><li><p>分支与标签 <div class="code-wrapper"><pre><code class="hljs bash">git branch       <span class="hljs-comment"># 列出所有本地分支</span>git branch -r    <span class="hljs-comment"># 列出所有远程分支</span>git branch [branch-name]    <span class="hljs-comment"># 新建一个分支，但依然停留在当前分支</span>git checkout -b [branch]   <span class="hljs-comment"># 新建一个分支，并切换到该分支</span>git checkout [branch-name]  <span class="hljs-comment"># 切换到指定分支，并更新工作区</span>git branch -d [branch-name]  <span class="hljs-comment"># 删除分支</span>git merge [branch]  <span class="hljs-comment"># 合并指定分支到当前分支</span>git tag [tag-name] <span class="hljs-comment"># Mark the current commit with a tag</span>git tag -d [tag]   <span class="hljs-comment"># 删除本地tag</span>git show [tag]  <span class="hljs-comment"># 查看tag信息</span></code></pre></div></p></li><li><p>更新与发行</p></li></ul><div class="code-wrapper"><pre><code class="hljs bash">git fetch [remote]  <span class="hljs-comment"># 下载远程仓库的所有变动</span>git remote -v   <span class="hljs-comment"># 显示所有远程仓库</span>git remote show [remote]   <span class="hljs-comment"># 显示某个远程仓库的信息</span>git remote add [shortname] [url]  <span class="hljs-comment"># 增加一个新的远程仓库，并命名</span>git pull [remote] [branch]   <span class="hljs-comment"># 取回远程仓库的变化，并与本地分支合并</span>git push [remote] [branch]   <span class="hljs-comment"># 上传本地指定分支到远程仓库</span>git push [remote] --force  <span class="hljs-comment"># 强行推送当前分支到远程仓库，即使有冲突</span>git merge &lt;branch&gt;   <span class="hljs-comment">#Merge &lt;branch&gt; into your current HEAD</span>git rebase &lt;branch&gt;  <span class="hljs-comment">#Rebase your current HEAD onto &lt;branch&gt; </span></code></pre></div><ul><li>撤销</li></ul><div class="code-wrapper"><pre><code class="hljs bash">git checkout [file]  <span class="hljs-comment"># 恢复暂存区的指定文件到工作区</span>git reset [file]   <span class="hljs-comment"># 重置暂存区的指定文件，与上一次commit保持一致，但工作区不变</span>git reset --hard   <span class="hljs-comment"># 重置暂存区与工作区，与上一次commit保持一致</span>git reset [commit]   <span class="hljs-comment"># 重置当前分支的指针为指定commit，同时重置暂存区，但工作区不变</span>git reset --hard [commit]   <span class="hljs-comment"># 重置当前分支的HEAD为指定commit</span>git reset --keep [commit]  <span class="hljs-comment"># 重置当前HEAD为指定commit，但保持暂存区和工作区不变</span>$ git revert [commit]  <span class="hljs-comment"># 新建一个commit，用来撤销指定commit</span></code></pre></div><h3 id="参考链接">参考链接</h3><p><ahref="https://mp.weixin.qq.com/s/fU5lAC9_zjx6t5-ABfHRaQ">快速掌握Git分布式系统操作</a></p>]]></content>
      
      
      <categories>
          
          <category> 教程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> git </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>关于删除keil或Altium Designer工程下无用文件</title>
      <link href="/2023/04/18/%E5%85%B3%E4%BA%8E%E5%88%A0%E9%99%A4keil%E6%88%96Altium-Designer%E5%B7%A5%E7%A8%8B%E4%B8%8B%E6%97%A0%E7%94%A8%E6%96%87%E4%BB%B6/"/>
      <url>/2023/04/18/%E5%85%B3%E4%BA%8E%E5%88%A0%E9%99%A4keil%E6%88%96Altium-Designer%E5%B7%A5%E7%A8%8B%E4%B8%8B%E6%97%A0%E7%94%A8%E6%96%87%E4%BB%B6/</url>
      
        <content type="html"><![CDATA[<p>当使用keil软件或AltiumDesigner创建工程，完成工程后，需要进行打包传输，这时候会发现工程体积很大，其实里面有些文件是在编译时生成的，可以进行删除，只需保留必要的工程文件即可。如果手动删除，一个工程还好，如果是上百个工程，那就会很麻烦，其实，得益于<strong>bash</strong>指令，通过几句命令就可以自动批量删除这些工程中的无用文件。命令如下：</p><div class="code-wrapper"><pre><code class="hljs bash">@<span class="hljs-built_in">echo</span> on:: keil trash<span class="hljs-keyword">for</span> /r %%f <span class="hljs-keyword">in</span> (<span class="hljs-string">&quot;*.ddk&quot;</span>) <span class="hljs-keyword">do</span> del <span class="hljs-string">&quot;%%f&quot;</span> /f<span class="hljs-keyword">for</span> /r %%f <span class="hljs-keyword">in</span> (<span class="hljs-string">&quot;*.edk&quot;</span>) <span class="hljs-keyword">do</span> del <span class="hljs-string">&quot;%%f&quot;</span> /f<span class="hljs-keyword">for</span> /r %%f <span class="hljs-keyword">in</span> (<span class="hljs-string">&quot;*.lst&quot;</span>) <span class="hljs-keyword">do</span> del <span class="hljs-string">&quot;%%f&quot;</span> /f<span class="hljs-keyword">for</span> /r %%f <span class="hljs-keyword">in</span> (<span class="hljs-string">&quot;*.lnp&quot;</span>) <span class="hljs-keyword">do</span> del <span class="hljs-string">&quot;%%f&quot;</span> /f<span class="hljs-keyword">for</span> /r %%f <span class="hljs-keyword">in</span> (<span class="hljs-string">&quot;*.mpf&quot;</span>) <span class="hljs-keyword">do</span> del <span class="hljs-string">&quot;%%f&quot;</span> /f<span class="hljs-keyword">for</span> /r %%f <span class="hljs-keyword">in</span> (<span class="hljs-string">&quot;*.mpj&quot;</span>) <span class="hljs-keyword">do</span> del <span class="hljs-string">&quot;%%f&quot;</span> /f<span class="hljs-keyword">for</span> /r %%f <span class="hljs-keyword">in</span> (<span class="hljs-string">&quot;*.bak&quot;</span>) <span class="hljs-keyword">do</span> del <span class="hljs-string">&quot;%%f&quot;</span> /f<span class="hljs-keyword">for</span> /r %%f <span class="hljs-keyword">in</span> (<span class="hljs-string">&quot;*.obj&quot;</span>) <span class="hljs-keyword">do</span> del <span class="hljs-string">&quot;%%f&quot;</span> /f<span class="hljs-keyword">for</span> /r %%f <span class="hljs-keyword">in</span> (<span class="hljs-string">&quot;*.omf&quot;</span>) <span class="hljs-keyword">do</span> del <span class="hljs-string">&quot;%%f&quot;</span> /f<span class="hljs-keyword">for</span> /r %%f <span class="hljs-keyword">in</span> (<span class="hljs-string">&quot;*.rpt&quot;</span>) <span class="hljs-keyword">do</span> del <span class="hljs-string">&quot;%%f&quot;</span> /f<span class="hljs-keyword">for</span> /r %%f <span class="hljs-keyword">in</span> (<span class="hljs-string">&quot;*.tmp&quot;</span>) <span class="hljs-keyword">do</span> del <span class="hljs-string">&quot;%%f&quot;</span> /f<span class="hljs-keyword">for</span> /r %%f <span class="hljs-keyword">in</span> (<span class="hljs-string">&quot;*.__i&quot;</span>) <span class="hljs-keyword">do</span> del <span class="hljs-string">&quot;%%f&quot;</span> /f<span class="hljs-keyword">for</span> /r %%f <span class="hljs-keyword">in</span> (<span class="hljs-string">&quot;*.crf&quot;</span>) <span class="hljs-keyword">do</span> del <span class="hljs-string">&quot;%%f&quot;</span> /f<span class="hljs-keyword">for</span> /r %%f <span class="hljs-keyword">in</span> (<span class="hljs-string">&quot;*.o&quot;</span>) <span class="hljs-keyword">do</span> del <span class="hljs-string">&quot;%%f&quot;</span> /f<span class="hljs-keyword">for</span> /r %%f <span class="hljs-keyword">in</span> (<span class="hljs-string">&quot;*.d&quot;</span>) <span class="hljs-keyword">do</span> del <span class="hljs-string">&quot;%%f&quot;</span> /f<span class="hljs-keyword">for</span> /r %%f <span class="hljs-keyword">in</span> (<span class="hljs-string">&quot;*.axf&quot;</span>) <span class="hljs-keyword">do</span> del <span class="hljs-string">&quot;%%f&quot;</span> /f<span class="hljs-keyword">for</span> /r %%f <span class="hljs-keyword">in</span> (<span class="hljs-string">&quot;*.tra&quot;</span>) <span class="hljs-keyword">do</span> del <span class="hljs-string">&quot;%%f&quot;</span> /f<span class="hljs-keyword">for</span> /r %%f <span class="hljs-keyword">in</span> (<span class="hljs-string">&quot;*.iex&quot;</span>) <span class="hljs-keyword">do</span> del <span class="hljs-string">&quot;%%f&quot;</span> /f<span class="hljs-keyword">for</span> /r %%f <span class="hljs-keyword">in</span> (<span class="hljs-string">&quot;*.htm&quot;</span>) <span class="hljs-keyword">do</span> del <span class="hljs-string">&quot;%%f&quot;</span> /f<span class="hljs-keyword">for</span> /r %%f <span class="hljs-keyword">in</span> (<span class="hljs-string">&quot;*.sct&quot;</span>) <span class="hljs-keyword">do</span> del <span class="hljs-string">&quot;%%f&quot;</span> /f<span class="hljs-keyword">for</span> /r %%f <span class="hljs-keyword">in</span> (<span class="hljs-string">&quot;*.map&quot;</span>) <span class="hljs-keyword">do</span> del <span class="hljs-string">&quot;%%f&quot;</span> /f<span class="hljs-keyword">for</span> /r %%f <span class="hljs-keyword">in</span> (<span class="hljs-string">&quot;*.Administrator&quot;</span>) <span class="hljs-keyword">do</span> del <span class="hljs-string">&quot;%%f&quot;</span> /f<span class="hljs-keyword">for</span> /r %%f <span class="hljs-keyword">in</span> (<span class="hljs-string">&quot;*.dep&quot;</span>) <span class="hljs-keyword">do</span> del <span class="hljs-string">&quot;%%f&quot;</span> /f<span class="hljs-keyword">for</span> /r %%f <span class="hljs-keyword">in</span> (<span class="hljs-string">&quot;Jlink*&quot;</span>) <span class="hljs-keyword">do</span> del <span class="hljs-string">&quot;%%f&quot;</span> /f<span class="hljs-keyword">for</span> /r %%f <span class="hljs-keyword">in</span> (<span class="hljs-string">&quot;uvgui.*&quot;</span>) <span class="hljs-keyword">do</span> del <span class="hljs-string">&quot;%%f&quot;</span> /f:: Altium Designer trash<span class="hljs-keyword">for</span> /r %%f <span class="hljs-keyword">in</span> (<span class="hljs-string">&quot;*.LOG&quot;</span>) <span class="hljs-keyword">do</span> del <span class="hljs-string">&quot;%%f&quot;</span> /f<span class="hljs-keyword">for</span> /r %%f <span class="hljs-keyword">in</span> (<span class="hljs-string">&quot;*.Dat&quot;</span>) <span class="hljs-keyword">do</span> del <span class="hljs-string">&quot;%%f&quot;</span> /f<span class="hljs-keyword">for</span> /r %%f <span class="hljs-keyword">in</span> (<span class="hljs-string">&quot;*.html&quot;</span>) <span class="hljs-keyword">do</span> del <span class="hljs-string">&quot;%%f&quot;</span> /f<span class="hljs-keyword">for</span> /r %%f <span class="hljs-keyword">in</span> (<span class="hljs-string">&quot;*.txtPreview&quot;</span>) <span class="hljs-keyword">do</span> del <span class="hljs-string">&quot;%%f&quot;</span> /f<span class="hljs-keyword">for</span> /r %%f <span class="hljs-keyword">in</span> (<span class="hljs-string">&quot;*.PcbDocPreview&quot;</span>) <span class="hljs-keyword">do</span> del <span class="hljs-string">&quot;%%f&quot;</span> /f<span class="hljs-keyword">for</span> /r %%f <span class="hljs-keyword">in</span> (<span class="hljs-string">&quot;*.PrjPcbStructure&quot;</span>) <span class="hljs-keyword">do</span> del <span class="hljs-string">&quot;%%f&quot;</span> /f<span class="hljs-keyword">for</span> /r %%f <span class="hljs-keyword">in</span> (<span class="hljs-string">&quot;*.SchDocPreview&quot;</span>) <span class="hljs-keyword">do</span> del <span class="hljs-string">&quot;%%f&quot;</span> /f<span class="hljs-keyword">for</span> /r %%f <span class="hljs-keyword">in</span> (<span class="hljs-string">&quot;*.PcbPreview&quot;</span>) <span class="hljs-keyword">do</span> del <span class="hljs-string">&quot;%%f&quot;</span> /f<span class="hljs-keyword">for</span> /r %%f <span class="hljs-keyword">in</span> (<span class="hljs-string">&quot;*.SchPreview&quot;</span>) <span class="hljs-keyword">do</span> del <span class="hljs-string">&quot;%%f&quot;</span> /f<span class="hljs-keyword">for</span> /r %%f <span class="hljs-keyword">in</span> (<span class="hljs-string">&quot;*.pcbdoc_viewstate&quot;</span>) <span class="hljs-keyword">do</span> del <span class="hljs-string">&quot;%%f&quot;</span> /f<span class="hljs-keyword">for</span> /r %%f <span class="hljs-keyword">in</span> (<span class="hljs-string">&quot;*.$$<span class="hljs-variable">$Preview</span>&quot;</span>) <span class="hljs-keyword">do</span> del <span class="hljs-string">&quot;%%f&quot;</span> /f<span class="hljs-keyword">for</span> /r %%f <span class="hljs-keyword">in</span> (<span class="hljs-string">&quot;*.AnnotationPreview&quot;</span>) <span class="hljs-keyword">do</span> del <span class="hljs-string">&quot;%%f&quot;</span> /f<span class="hljs-keyword">for</span> /r %%f <span class="hljs-keyword">in</span> (<span class="hljs-string">&quot;*.OutJob&quot;</span>) <span class="hljs-keyword">do</span> del <span class="hljs-string">&quot;%%f&quot;</span> /f<span class="hljs-keyword">for</span> /r %%f <span class="hljs-keyword">in</span> (<span class="hljs-string">&quot;*.ERC&quot;</span>) <span class="hljs-keyword">do</span> del <span class="hljs-string">&quot;%%f&quot;</span> /f<span class="hljs-keyword">for</span> /r %%f <span class="hljs-keyword">in</span> (<span class="hljs-string">&quot;*.drc&quot;</span>) <span class="hljs-keyword">do</span> del <span class="hljs-string">&quot;%%f&quot;</span> /f<span class="hljs-keyword">for</span> /r %%f <span class="hljs-keyword">in</span> (<span class="hljs-string">&quot;Status Report.Txt&quot;</span>) <span class="hljs-keyword">do</span> del <span class="hljs-string">&quot;%%f&quot;</span> /f<span class="hljs-keyword">for</span> /r %%f <span class="hljs-keyword">in</span> (<span class="hljs-string">&quot;History&quot;</span>) <span class="hljs-keyword">do</span> rd <span class="hljs-string">&quot;%%f&quot;</span> /s /q<span class="hljs-keyword">for</span> /D %%a <span class="hljs-keyword">in</span> (<span class="hljs-string">&quot;Project Logs for*&quot;</span>) <span class="hljs-keyword">do</span> rd <span class="hljs-string">&quot;%%a&quot;</span> /s /q<span class="hljs-keyword">for</span> /D %%a <span class="hljs-keyword">in</span> (<span class="hljs-string">&quot;Project Outputs for*&quot;</span>) <span class="hljs-keyword">do</span> rd <span class="hljs-string">&quot;%%a&quot;</span> /s /qpause</code></pre></div><p>新建一个文本文档，将以上命令复制粘贴到文档中，命名为<code>trash clear.bat</code>,然后将此文件放到工程目录下，运行即可。它会删除你所有工程下需要删除的文件。</p><p>如果需要删除的某一个工程，只需将此文件放到当前工程目录中运行。如果你需要删除的文件不在以上内容中，可以自行按照其格式添加进去即可。</p><p><strong><u>注意：这些命令是在当前目录中依次打开各个文件夹查找需要删除的内容。切记不要将不需要清除的文件夹放到当前目录中。</u></strong></p>]]></content>
      
      
      <categories>
          
          <category> 其它 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> bash </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>添加U盘图标的方法</title>
      <link href="/2023/04/18/%E6%B7%BB%E5%8A%A0U%E7%9B%98%E5%9B%BE%E6%A0%87%E7%9A%84%E6%96%B9%E6%B3%95/"/>
      <url>/2023/04/18/%E6%B7%BB%E5%8A%A0U%E7%9B%98%E5%9B%BE%E6%A0%87%E7%9A%84%E6%96%B9%E6%B3%95/</url>
      
        <content type="html"><![CDATA[<p>有时候我们想让U盘插到电脑上显示一个漂亮的图标，这样看起来就比较美观，其实，它的实现方式很简单，只需要进行几步设置，就可以打造出一个个性化的U盘出场方式，以下简单说明一下：</p><ol type="1"><li>准备一个漂亮的U盘 <strong>ico</strong>格式的图标，借助图片处理工具将像素大小设置为<strong>256像素x256像素</strong>，同时将图标命名为<code>u_disk.ico</code></li><li>使用记事本创建一个文件，重命名为<strong>autorun.inf</strong>,进入文件，写入以下内容：</li></ol><div class="code-wrapper"><pre><code class="hljs bash">[autorun]  icon=u_disk.ico,0label=Kayoung</code></pre></div><p><code>label</code> 显示的是U盘的名字。</p><ol start="3" type="1"><li>将这两个文件同时拷贝到U盘中，并各自右键打开文件的属性，设置为隐藏模式。</li><li>依次打开 <strong>工具</strong> -&gt; <strong>文件夹选项</strong>-&gt; <strong>查看</strong> -&gt; <strong>隐藏文件和文件夹</strong>-&gt; <code>勾选</code><strong>不显示隐藏的文件、文件夹或驱动器</strong>, 然后点击<strong>确定</strong>，这样，U盘中的两个文件就被隐藏了。</li></ol><p>效果图：</p><figure><imgsrc="https://gitee.com/kayoungzhang/picgo_res/raw/master/img/image-20230418080723296.png"alt="image-20230418080723296" /><figcaption aria-hidden="true">image-20230418080723296</figcaption></figure>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>BAM-1020 连续颗粒物监测仪器手册</title>
      <link href="/2023/04/17/BAM-1020-%E8%BF%9E%E7%BB%AD%E9%A2%97%E7%B2%92%E7%89%A9%E7%9B%91%E6%B5%8B%E4%BB%AA%E5%99%A8%E6%89%8B%E5%86%8C/"/>
      <url>/2023/04/17/BAM-1020-%E8%BF%9E%E7%BB%AD%E9%A2%97%E7%B2%92%E7%89%A9%E7%9B%91%E6%B5%8B%E4%BB%AA%E5%99%A8%E6%89%8B%E5%86%8C/</url>
      
        <content type="html"><![CDATA[<p>前两年部门采购了几套美国 <strong>MetOne</strong> 公司的颗粒物采样设备<code>BAM-1020</code>，查看了它的使用说明手册，都是英文的，且没有电子版，后来为了好好研究一下它的操作规程，便于后期翻阅查看，我就把纸质版说明书拍照下来，借助<strong>OCR工具</strong> （<ahref="http://ocr.tianruo.net/">天若OCR文字识别</a>），整理成电子版，然后借助翻译软件（<ahref="https://copytranslator.github.io/">CopyTranslator</a>）将其翻译下来。当然这两款软件并不是很智能，也会存在识别不出来，翻译不正确的地方，这就需要自己细心认真的进行处理，但借助它可以缩短我整理和翻译的速度，提高了效率，现在记录一下。</p><p>英文目录：</p><div class="code-wrapper"><pre><code class="hljs tex">Table of Contents1  INTRODUCTION11.1  About This Manual11.2  Technical Service11.3  BAM: Beta Attenuation Monitor21.4  Beta Radiation Safety Statement31.5  BAM 1020 US-EPA Configurations31.6  BAM 1020 Other Configurations31.7  BAM 1020 Specifications32  SITE SELECTION AND INSTALLATION42.1  Unpacking, Inspection, and Evaluation Testing42.2  Enclosure Selection and Temperature Control52.3  Site Selection and Inlet Positioning Criteria62.4  Mounting Options in a Walk-In Shelter62.5  BAM 1020 Installation Instructions72.6  BAM 1020 Power and Electrical Service133  INITIAL SETUP OF THE BAM 1020143.1  Power up153.2  Warm-up Period153.3  The Main Menu and Using the Keypad and Display153.4  Filter Tape Loading163.5  Self-Test173.6  Initial SETUP Settings Considerations183.7  Initial Leak Check and Flow Check193.8  Starting a Measurement Cycle193.9  Accessing the Flow Statistics Screen193.10  The OPERATE Menus193.11  The NORMAL Operation Screen203.12  The INSTANTANEOUS and AVERAGE Operation Screens204  THE MEASUREMENT CYCLE214.1  The One-Hour Cycle Timeline214.2  Automatic Span Checks During The Cycle224.3  Filter Tape Use235  FLOW SYSTEM and FLOW CALIBRATIONS235.1  Flow System Diagram235.2  Flow Control and Flow Reporting Types - Standard or Actual Flow245.2.1  ACTUAL Flow Control:245.2.2  STANDARD Flow Control:245.3  Total Flow(QTOT) and Flow Rate(LPM) Conversions255.4  About Leak Checks, Nozzle Cleaning, and Flow Checks255.5  Leak Check Procedure255.5.1  Basic Leak Check265.5.2  Advanced Leak Checks275.6  Nozzle and Vane Cleaning Procedure295.7  Field Calibration of the Flow System - Actual Flow Mode315.8  Field Calibration of the Flow System - Standard Flow Mode326  SETUP MENU DESCRIPTIONS336.1  CLOCK Setup Screen346.2  SAMPLE Setup Screen -Range, Sample, and Timing Settings346.3  CALIBRATE Setup Screen-Flow and Calibration Settings366.4  EXTRA1 Setup Screen386.5  ERRORS Setup Screen for the Analog Output386.6  PASSWORD Setup Screen396.7  INTERFACE Setup Screen406.8  SENSOR Setup Screen for External Met Sensors406.9  HEATER Setup Screen - RH Control Settings416.10  QUERY Setup Screen -Custom Data Array Setup436.11  REPORTS Setup Screen - Daily Data and Dynamic Ranges446.11.1  Daily Data Range446.11.2  Dynamic Range446.11.3  Log BP456.11.4  Log Membrane456.12  HJ 653 Setup Screen -Chinese Data Formatting457 MAINTENANCE, DIAGNOSTICS and TROUBLESHOOTING457.1  Met One Recommended Periodic Maintenance Table467.2  BAM 1020 Error and Alarm Descriptions467.3  Comparison of BAM 1020 Data to Integrated Filter Sampler Data507.4  Power Up Problems and Electrical Safety Considerations517.5  Basic Problem and Cause/Solution Table537.6  Nozzle Component Service and O-ring Replacement567.7  Performing the 72-Hour Zero Filter Background Test587.8  The TEST Menu System - Overview597.9  COUNT Test Menu -Beta Detector Count Tests607.10  PUMP Test Menu - Manual Pump and Nozzle Tests607.11  TAPE Test Menu -Manual Filter Forward/Backward Tests617.12  DAC Test Menu - Analog Output Test617.13  CALIBRATE Test Menu - Span Membrane Mass Tests617.14  INTERFACE Test Menu -Relay IO Channel Tests627.15  FLOW Test Menu627.16  ALIGN Test Menu -Tape Transport Motor and Photosensor Tests627.17  HEATER Test Menu637.18  FILTER-T Test Menu -Filter Temperature Sensor Tests647.19  FILTER-RH Test Menu - Filter Humidity Sensor Test and Calibration648  EXTERNAL DATA LOGGER INTERFACE SYSTEM658.1  Analog Concentration Output Signal658.2  Early Cycle Mode Option For Analog Data Collection668.3  Telemetry and Error Relays678.4  Interfacing a Digital Data logger with the BAM 1020699  DIGITAL COMMUNICATIONS AND DATA RETRIEVAL709.1  Direct Serial Port Connections and Settings719.2  Using Met One Comet Communications Software719.3  Downloading Data Using Simple Terminal Programs729.4  System Menu and File Descriptions Using a Terminal Program739.5  Printer Output Port Functions809.6  Modem Option819.7  BAM 1020 Firmware Upgrades819.8  Resetting the Data Pointer for New Data Collection849.9  Data Collection Using the Query Output or Bayern-Hessen Protocol8410  ACCESSORIES and PARTS8610.1  Consumables, Replacement Parts, and Accessories8610.2  BX-500 Series Meteorological Sensor Configurations9111  THEORY OF OPERATION9311.1  Converting Data Between EPA Standard and Actual Conditions95</code></pre></div><p>中文目录：</p><div class="code-wrapper"><pre><code class="hljs tex">目录1  概况11.1 关于本手册11.2 技术服务11.3 BAM: β衰减监测仪21.4 β辐射安全声明21.5 BAM 1020 US-EPA 配置21.6 BAM 1020 其他配置31.7 BAM 1020 规格32  采样点选择与安装42.1  拆箱，检视和评估测试42.2  外罩选择和温度控制42.3  选址和入口定位标准52.4  移动式方舱中的安装选项52.5  BAM 1020 安装指南52.6  BAM 1020 电力和电气服务113   BAM 1020的初始设置123.1  开机123.2  预热阶段133.3  主菜单和使用键盘和显示器133.4  过滤带加载143.5  自测143.6  初始设置注意事项153.7  初始泄漏检查和流量检查153.8  开始一个测量周期163.9  访问流量统计信息界面163.10  操作菜单163.11  NORMAL操作界面173.12  瞬时和平均操作界面174  测量周期174.1  一小时周期时间线184.2  循环期间自动量程（Span）检查194.3  滤带使用195  流量系统和流量校准195.1 流程系统图195.2  流量控制和流量报告类型-标况或工况流量205.2.1  工况流量控制:205.2.2  标况流量控制:205.3  总体积流量(QTOT) 和流量(LPM) 转换215.4  关于泄漏检查、喷嘴清洁和流量检查215.5  泄漏检查过程215.5.1 基本泄漏检查215.5.2  高级泄漏检查225.6  喷嘴和卡环清洁程序245.7  流量系统的现场校准-工况流量模式255.8  流量系统的现场校准-标况流量模式276  设置菜单说明276.1  时钟设置界面286.2  采样设置界面-范围、采样和时间设置286.3  校准设置界面-流量和校准设置306.4  EXTRA1设置界面316.5 模拟输出错误设置界面316.6  密码设置界面336.7  接口设置界面336.8  外部气象传感器的传感器设置界面336.9  加热器设置界面-相对湿度控制设置346.10  查询设置界面-自定义数据项设置356.11 报告设置界面-每日数据和动态范围366.11.1  每日数据范围376.11.2  动态范围376.11.3  BP日志376.11.4  膜日志376.12  HJ 653设置界面-中文数据格式377 维护、诊断和故障排除387.1 Met One建议的定期维护表387.2 BAM 1020错误和报警描述397.3 BAM 1020数据与集成过滤采样器数据的比较417.4 开机问题和电气安全注意事项427.5 基本问题及原因/解决方案表437.6 喷嘴部件维修和O形圈更换467.7 执行72小时零过滤器背景测试477.8 测试菜单系统-概述487.9 计数测试菜单-β探测器计数测试487.10 泵测试菜单-手动泵和喷嘴测试497.11 滤带测试菜单-过滤器向前/向后手动测试497.12 DAC测试菜单-模拟输出测试497.13 校准测试菜单-量程膜质量测试507.14 接口测试菜单-继电器IO通道测试507.15 流量测试菜单507.16 校准测试菜单-滤带传输电机和光电传感器测试507.17 加热器测试菜单517.18 FILTER-T 测试菜单-滤带温度传感器测试517.19 FILTER-RH 测试菜单 - 滤带湿度传感器测试和校准528  外部数据记录器接口系统528.1  模拟浓度输出信号538.2  模拟数据采集的早期循环模式选项538.3  遥测和错误继电器548.4 数字数据记录器与BAM 1020的接口569  数字通信与数据检索579.1  直接串行端口连接和设置579.2  使用Met One Comet通信软件589.3  使用简单的终端程序下载数据599.4  使用终端程序的系统菜单和文件说明609.5  打印机输出端口功能669.6  调制解调器选项669.7  BAM 1020固件升级669.8  重置新数据收集的数据指针699.9  使用查询输出或拜仁-黑森协议进行数据收集6910  附件和零件7010.1  消耗品、可替换的零件和附件7010.2  BX-500系列气象传感器配置7511  操作理论7811.1  在EPA标况（Standard）和工况（Actual）条件之间转换数据79</code></pre></div><p>因为能力有限，好多专业词汇翻译不够详尽，肯定还有很多翻译不正确的地方，但相比于长篇英语文章，后期翻阅就比较容易上手了，手册详细内容已上传：</p><p><ahref="https://gitee.com/kayoungzhang/my_codehubm.git">码云Gitee</a></p>]]></content>
      
      
      <categories>
          
          <category> 其它 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 英语 </tag>
            
            <tag> 环境 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>stc单片机免断电自动下载程序方法</title>
      <link href="/2023/04/16/stc%E5%8D%95%E7%89%87%E6%9C%BA%E5%85%8D%E6%96%AD%E7%94%B5%E8%87%AA%E5%8A%A8%E4%B8%8B%E8%BD%BD%E7%A8%8B%E5%BA%8F%E6%96%B9%E6%B3%95/"/>
      <url>/2023/04/16/stc%E5%8D%95%E7%89%87%E6%9C%BA%E5%85%8D%E6%96%AD%E7%94%B5%E8%87%AA%E5%8A%A8%E4%B8%8B%E8%BD%BD%E7%A8%8B%E5%BA%8F%E6%96%B9%E6%B3%95/</url>
      
        <content type="html"><![CDATA[<p>学过stc单片机的人，应该都知道，下载程序时，需要先加载程序，然后断电再上电，方可将程序下载到单片机中运行。有的开发板做了硬件电路处理，结合下载软件的设置，就不用断电也可以进行程序下载，下面介绍一下另外一种方式，硬件电路不需要如何修改，只通过软件设置就可以进行免断电下载程序。</p><p>在 <strong>STC</strong>官方下载软件（<strong>STC-ISP</strong>）中，点击下载按钮后，其实从电脑端串口是一直在发送数据的，一般是<strong>0x7F</strong>，也可以是用户自定义，根据STC12C5A60S2芯片手册软件复位一章中，设置<strong>IAP_CONTR寄存器</strong>（STC89是<strong>ISP_CONTR寄存器</strong>）就可以实现不断电复位，从而进入ISP下载区进行程序的下载。</p><figure><imgsrc="https://gitee.com/kayoungzhang/picgo_res/raw/master/img/014.png"alt="014" /><figcaption aria-hidden="true">014</figcaption></figure><p>第一种方式：利用串口下载程序瞬间一直发送 <strong>0x7f</strong></p><div class="code-wrapper"><pre><code class="hljs c"><span class="hljs-comment">/* 方案一：串行口中断,用于stc单片机不断电自动下载程序 */</span><span class="hljs-type">uint8_t</span> uCount = <span class="hljs-number">0</span>; <span class="hljs-comment">//计数</span><span class="hljs-type">void</span> <span class="hljs-title function_">UART1_Handler</span><span class="hljs-params">(<span class="hljs-type">void</span>)</span> interrupt 4&#123;ES = <span class="hljs-number">0</span>; <span class="hljs-comment">//关闭串口中断</span><span class="hljs-keyword">if</span>(RI)&#123;RI = <span class="hljs-number">0</span>; <span class="hljs-comment">//Clear receive interrupt flag</span><span class="hljs-keyword">if</span>(SBUF == <span class="hljs-number">0x7F</span>)&#123;            uCount++;            <span class="hljs-keyword">if</span>(uCount &gt; <span class="hljs-number">9</span>)   <span class="hljs-comment">//isp软件用户自定义命令连续发送10个0x7F，即可实现自动热复位下载</span>            &#123;                uCount = <span class="hljs-number">0</span>;                IAP_CONTR |= <span class="hljs-number">0x60</span>;    <span class="hljs-comment">//软复位到系统ISP监控区</span>            &#125;&#125;<span class="hljs-keyword">else</span>&#123;uCount = <span class="hljs-number">0</span>; <span class="hljs-comment">//计数清零</span>&#125;&#125;ES = <span class="hljs-number">1</span>; <span class="hljs-comment">//重新打开串口中断。</span>&#125;</code></pre></div><p><img src="https://gitee.com/kayoungzhang/picgo_res/raw/master/img/image-20230416190006307-16816443491601.png" alt="image-20230416190006307" style="zoom:80%;" /></p><p>第二种方式：利用<strong>stc-isp</strong>下载工具默认内部自定义命令”<strong><spanclass="citation" data-cites="STCISP">@STCISP</span>#</strong>“</p><div class="code-wrapper"><pre><code class="hljs c"><span class="hljs-type">void</span> <span class="hljs-title function_">UART1_Handler</span><span class="hljs-params">(<span class="hljs-type">void</span>)</span> interrupt 4&#123;<span class="hljs-type">char</span>* str = <span class="hljs-string">&quot;@STCISP#&quot;</span>;<span class="hljs-comment">//stc internal definition command</span>ES = <span class="hljs-number">0</span>; <span class="hljs-comment">//关闭串口中断</span><span class="hljs-keyword">if</span>(RI)&#123;RI = <span class="hljs-number">0</span>; <span class="hljs-comment">//Clear receive interrupt flag</span><span class="hljs-keyword">while</span>(*str != <span class="hljs-string">&#x27;\0&#x27;</span>)&#123;<span class="hljs-keyword">if</span>(*str++ == SBUF)<span class="hljs-keyword">continue</span>;IAP_CONTR |= <span class="hljs-number">0x60</span>;&#125;&#125;<span class="hljs-keyword">else</span>TI = <span class="hljs-number">0</span>;ES = <span class="hljs-number">1</span>; <span class="hljs-comment">//重新打开串口中断。</span>&#125;</code></pre></div><p><img src="https://gitee.com/kayoungzhang/picgo_res/raw/master/img/image-20230416190418784.png" alt="image-20230416190418784" style="zoom:80%;" /></p><p>选择以上任何一种方式，保证 <strong>USB-CDC/串口模式</strong>中波特率跟自己程序中串口1的波特率一致，在main函数的开头初始化一下串口1，就可以实现不断电下载程序了。</p>]]></content>
      
      
      <categories>
          
          <category> 单片机 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>一个简单的多任务管理程序架构</title>
      <link href="/2023/04/16/%E4%B8%80%E4%B8%AA%E7%AE%80%E5%8D%95%E7%9A%84%E5%A4%9A%E4%BB%BB%E5%8A%A1%E7%AE%A1%E7%90%86%E7%A8%8B%E5%BA%8F%E6%9E%B6%E6%9E%84/"/>
      <url>/2023/04/16/%E4%B8%80%E4%B8%AA%E7%AE%80%E5%8D%95%E7%9A%84%E5%A4%9A%E4%BB%BB%E5%8A%A1%E7%AE%A1%E7%90%86%E7%A8%8B%E5%BA%8F%E6%9E%B6%E6%9E%84/</url>
      
        <content type="html"><![CDATA[<p>对于裸机开发过程中，任务多了就会出现一堆全局变量，管理上就会出现很混乱的状况，这在开发中是不允许的。看了B站上<strong>无极单片机</strong>up主讲的程序架构设计的教程中，发觉有些功能还可以删减，所以，自己再结合其他一些教程，写了一个的轮询任务管理架构，简单实用，下面详细介绍一下这套多任务管理架构。</p><p>多任务实现方式，我直接封装成 <code>scheduler.h</code> 和<code>scheduler.c</code> ,首先看头文件：</p><div class="code-wrapper"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">ifndef</span> SCHEDULER_H</span><span class="hljs-meta">#<span class="hljs-keyword">define</span> SCHEDULER_H</span><span class="hljs-meta">#<span class="hljs-keyword">undef</span> NULL</span><span class="hljs-meta">#<span class="hljs-keyword">if</span> defined (_cplusplus)</span><span class="hljs-meta">#<span class="hljs-keyword">define</span> NULL 0</span><span class="hljs-meta">#<span class="hljs-keyword">else</span></span><span class="hljs-meta">#<span class="hljs-keyword">define</span> NULL ((void*)0)</span><span class="hljs-meta">#<span class="hljs-keyword">endif</span></span><span class="hljs-comment">/* exact-width signed integer types */</span><span class="hljs-keyword">typedef</span> <span class="hljs-type">signed</span> <span class="hljs-type">char</span> <span class="hljs-type">int8_t</span>;<span class="hljs-keyword">typedef</span> <span class="hljs-type">signed</span> <span class="hljs-type">short</span> <span class="hljs-type">int</span> <span class="hljs-type">int16_t</span>;<span class="hljs-keyword">typedef</span> <span class="hljs-type">signed</span> <span class="hljs-type">int</span> <span class="hljs-type">int32_t</span>;<span class="hljs-comment">/* exact-width unsigned integer types */</span><span class="hljs-keyword">typedef</span> <span class="hljs-type">unsigned</span> <span class="hljs-type">char</span> <span class="hljs-type">uint8_t</span>;<span class="hljs-keyword">typedef</span> <span class="hljs-type">unsigned</span> <span class="hljs-type">short</span> <span class="hljs-type">int</span> <span class="hljs-type">uint16_t</span>;<span class="hljs-keyword">typedef</span> <span class="hljs-type">unsigned</span> <span class="hljs-type">int</span> <span class="hljs-type">uint32_t</span>;<span class="hljs-keyword">typedef</span> <span class="hljs-title function_">void</span> <span class="hljs-params">(*p_task_func)</span><span class="hljs-params">(<span class="hljs-type">void</span>)</span>;<span class="hljs-comment">//任务函数指针，方便传参</span><span class="hljs-comment">/* 任务ID枚举,将需要在main函数中执行的任务放到此处 */</span><span class="hljs-keyword">typedef</span> <span class="hljs-class"><span class="hljs-keyword">enum</span></span><span class="hljs-class">&#123;</span>LED0_TASK,LED1_TASK,LED2_TASK,OS_TASK_SUM <span class="hljs-comment">//任务总数,不需要修改</span>&#125;task_id_e;<span class="hljs-comment">/* 任务运行状态 */</span><span class="hljs-keyword">typedef</span> <span class="hljs-class"><span class="hljs-keyword">enum</span></span><span class="hljs-class">&#123;</span>TASK_IDLE,TASK_RUN = !TASK_IDLE&#125;task_status_e;<span class="hljs-comment">/* 任务的结构体 */</span> <span class="hljs-keyword">typedef</span> <span class="hljs-class"><span class="hljs-keyword">struct</span></span><span class="hljs-class">&#123;</span><span class="hljs-type">void</span> (*p_task)(<span class="hljs-type">void</span>);   <span class="hljs-comment">// Pointer to the task</span>task_status_e run_flag; <span class="hljs-comment">//task status</span>  <span class="hljs-type">uint32_t</span> time_slice;   <span class="hljs-comment">// Delay (ticks) until the task will (next) be run(period/10ms)</span>  <span class="hljs-type">uint32_t</span> period;   <span class="hljs-comment">// Interval (ticks) between subsequent runs.(time_slice * 10ms)</span>&#125;<span class="hljs-type">os_task_t</span>; <span class="hljs-comment">/* task declarition */</span><span class="hljs-keyword">extern</span> <span class="hljs-type">void</span> <span class="hljs-title function_">os_task_init</span><span class="hljs-params">(<span class="hljs-type">void</span>)</span>;<span class="hljs-keyword">extern</span> <span class="hljs-type">void</span> <span class="hljs-title function_">os_task_create</span><span class="hljs-params">(task_id_e task_id, p_task_func proc, <span class="hljs-type">uint32_t</span> period)</span>;<span class="hljs-keyword">extern</span> <span class="hljs-type">void</span> <span class="hljs-title function_">os_task_start</span><span class="hljs-params">(<span class="hljs-type">void</span>)</span>;<span class="hljs-keyword">extern</span> <span class="hljs-type">void</span> <span class="hljs-title function_">os_task_dispatch</span><span class="hljs-params">(<span class="hljs-type">void</span>)</span>; <span class="hljs-comment">//放到定时器10ms中断处理函数中</span><span class="hljs-meta">#<span class="hljs-keyword">endif</span></span></code></pre></div><p>头文件中，主要定义了任务的结构体和两个枚举类型的变量，都写有注释，简单明了。下面介绍几个函数的定义：</p><div class="code-wrapper"><pre><code class="hljs c"><span class="hljs-comment">/**</span><span class="hljs-comment">  ***************************************************************</span><span class="hljs-comment">  * @file       scheduler.c</span><span class="hljs-comment">  * @author     Kayoung</span><span class="hljs-comment">  * @version    V1.0.0</span><span class="hljs-comment">  * @date       2023.04.01</span><span class="hljs-comment">  * @brief      一种轻量级的多任务实现方法</span><span class="hljs-comment">  * @attention  必须将任务调度函数放到定时器10ms中断处理函数中</span><span class="hljs-comment">  ***************************************************************</span><span class="hljs-comment">  */</span> <span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;scheduler.h&quot;</span></span><span class="hljs-comment">/* 定义任务数组 */</span><span class="hljs-keyword">volatile</span> <span class="hljs-type">os_task_t</span> os_task[OS_TASK_SUM];<span class="hljs-comment">/**</span><span class="hljs-comment">  * @brief  系统任务初始化</span><span class="hljs-comment">  * @param  None</span><span class="hljs-comment">  * @retval None</span><span class="hljs-comment">  */</span><span class="hljs-type">void</span> <span class="hljs-title function_">os_task_init</span><span class="hljs-params">(<span class="hljs-type">void</span>)</span>&#123;<span class="hljs-type">uint8_t</span> i;<span class="hljs-keyword">for</span>(i = <span class="hljs-number">0</span>; i &lt; OS_TASK_SUM; i++)&#123;os_task[i].p_task = <span class="hljs-literal">NULL</span>;os_task[i].run_flag = TASK_IDLE;os_task[i].time_slice = <span class="hljs-number">0</span>;os_task[i].period = <span class="hljs-number">0</span>;&#125;&#125;<span class="hljs-comment">/**</span><span class="hljs-comment">  * @brief  创建任务</span><span class="hljs-comment">  * @param  task_id:任务的id</span><span class="hljs-comment">  * @param  proc:具体任务处理函数指针</span><span class="hljs-comment">  * @param  period:任务周期(ms)</span><span class="hljs-comment">  * @retval None</span><span class="hljs-comment">  */</span><span class="hljs-type">void</span> <span class="hljs-title function_">os_task_create</span><span class="hljs-params">(task_id_e task_id, p_task_func proc, <span class="hljs-type">uint32_t</span> period)</span>&#123;<span class="hljs-keyword">if</span>(!os_task[task_id].p_task)<span class="hljs-comment">//不存在任务</span>&#123;os_task[task_id].p_task = proc;os_task[task_id].run_flag = TASK_IDLE;os_task[task_id].period = period;&#125;&#125;<span class="hljs-comment">/**</span><span class="hljs-comment">  * @brief  任务调度器,必须放到10ms的定时器或系统时钟中断函数中</span><span class="hljs-comment">  * @param  None</span><span class="hljs-comment">  * @retval None</span><span class="hljs-comment">  */</span><span class="hljs-type">void</span> <span class="hljs-title function_">os_task_dispatch</span><span class="hljs-params">(<span class="hljs-type">void</span>)</span>&#123;<span class="hljs-type">uint8_t</span> i;<span class="hljs-keyword">for</span>(i = <span class="hljs-number">0</span>; i &lt; OS_TASK_SUM; i++)&#123;<span class="hljs-keyword">if</span>(os_task[i].p_task) <span class="hljs-comment">//存在任务功能函数</span>&#123;os_task[i].time_slice++;<span class="hljs-keyword">if</span>(os_task[i].time_slice == os_task[i].period / <span class="hljs-number">10</span>)<span class="hljs-comment">//判断计时器值是否达到任务运行周期</span>&#123;os_task[i].time_slice = <span class="hljs-number">0</span>;os_task[i].run_flag = TASK_RUN;&#125;&#125;&#125;&#125;<span class="hljs-comment">/**</span><span class="hljs-comment">  * @brief  任务开始运行</span><span class="hljs-comment">  * @param  None</span><span class="hljs-comment">  * @retval None</span><span class="hljs-comment">  */</span><span class="hljs-type">void</span> <span class="hljs-title function_">os_task_start</span><span class="hljs-params">(<span class="hljs-type">void</span>)</span>&#123;<span class="hljs-type">uint8_t</span> i;<span class="hljs-keyword">for</span>(i = <span class="hljs-number">0</span>; i &lt; OS_TASK_SUM; i++)&#123;<span class="hljs-keyword">if</span>(os_task[i].run_flag == TASK_RUN)&#123;os_task[i].run_flag = TASK_IDLE;os_task[i].p_task();<span class="hljs-comment">//执行任务</span>&#125;&#125;&#125;</code></pre></div><p>具体应用过程中，首先定义一个 <strong>10ms</strong>的定时器，然后将任务调度器函数直接放到这个定时器中断中，接着定义不同的任务，<strong>这个任务函数形式必须跟任务函数指针定义的形式一致</strong>，同时将相应的任务放到任务ID枚举中，最后，在<strong>main</strong> 函数中进行初始化调用，<strong>while</strong>循环中启动任务即可。下面结合 <strong>main.c</strong> 函数：</p><div class="code-wrapper"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;STC90C5xAD.H&gt;</span></span><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;scheduler.h&quot;</span></span>sbit led0 = P0^<span class="hljs-number">0</span>;sbit led1 = P0^<span class="hljs-number">1</span>;sbit led2 = P0^<span class="hljs-number">2</span>;<span class="hljs-comment">/* 10ms定时器初始化 */</span><span class="hljs-type">void</span> <span class="hljs-title function_">Timer0_Init</span><span class="hljs-params">(<span class="hljs-type">void</span>)</span><span class="hljs-comment">//10毫秒@11.0592MHz</span>&#123;AUXR &amp;= <span class="hljs-number">0x7F</span>;<span class="hljs-comment">//定时器时钟12T模式</span>TMOD &amp;= <span class="hljs-number">0xF0</span>;<span class="hljs-comment">//设置定时器模式</span>TMOD |= <span class="hljs-number">0x01</span>;<span class="hljs-comment">//设置定时器模式</span>TL0 = <span class="hljs-number">0x00</span>;<span class="hljs-comment">//设置定时初始值</span>TH0 = <span class="hljs-number">0xDC</span>;<span class="hljs-comment">//设置定时初始值</span>TF0 = <span class="hljs-number">0</span>;<span class="hljs-comment">//清除TF0标志</span>TR0 = <span class="hljs-number">1</span>;<span class="hljs-comment">//定时器0开始计时</span>ET0 = <span class="hljs-number">1</span>;EA = <span class="hljs-number">1</span>;&#125;<span class="hljs-comment">/* 定义三个led 翻转任务 */</span><span class="hljs-comment">/**</span><span class="hljs-comment">  * @brief  led翻转</span><span class="hljs-comment">  * @param  None</span><span class="hljs-comment">  * @retval None</span><span class="hljs-comment">  */</span><span class="hljs-type">void</span> <span class="hljs-title function_">led0_tongle</span><span class="hljs-params">(<span class="hljs-type">void</span>)</span>&#123;led0 = ~led0;&#125;<span class="hljs-type">void</span> <span class="hljs-title function_">led1_tongle</span><span class="hljs-params">(<span class="hljs-type">void</span>)</span>&#123;led1 = ~led1;&#125;<span class="hljs-type">void</span> <span class="hljs-title function_">led2_tongle</span><span class="hljs-params">(<span class="hljs-type">void</span>)</span>&#123;led2 = ~led2;&#125;<span class="hljs-type">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(<span class="hljs-type">void</span>)</span>&#123;Timer0_Init();os_task_init();<span class="hljs-comment">/* 创建三个不同周期闪烁的任务 */</span>os_task_create(LED0_TASK, led0_tongle, <span class="hljs-number">500</span>);<span class="hljs-comment">//500ms</span>os_task_create(LED1_TASK, led1_tongle, <span class="hljs-number">1000</span>);<span class="hljs-comment">//1000ms</span>os_task_create(LED2_TASK, led2_tongle, <span class="hljs-number">2000</span>);<span class="hljs-comment">//2000ms</span><span class="hljs-keyword">while</span>(<span class="hljs-number">1</span>)&#123;os_task_start();<span class="hljs-comment">//执行启动任务</span>&#125;&#125;<span class="hljs-comment">/* 定时器0中断函数 */</span><span class="hljs-type">void</span> <span class="hljs-title function_">timer0_isr</span><span class="hljs-params">()</span> interrupt 1&#123;<span class="hljs-comment">/* reload counter */</span>TL0 = <span class="hljs-number">0x00</span>;TH0 = <span class="hljs-number">0xDC</span>;os_task_dispatch();&#125;</code></pre></div><p>烧录程序，会看到三个led不同频率的闪烁。</p><p>以上代码，已放到码云：<ahref="https://gitee.com/kayoungzhang/my_codehubm.git">multitaskos</a></p>]]></content>
      
      
      <categories>
          
          <category> 单片机 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 程序架构 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>hexo博客更换主题详细方法</title>
      <link href="/2023/04/16/hexo%E5%8D%9A%E5%AE%A2%E6%9B%B4%E6%8D%A2%E4%B8%BB%E9%A2%98%E8%AF%A6%E7%BB%86%E6%96%B9%E6%B3%95/"/>
      <url>/2023/04/16/hexo%E5%8D%9A%E5%AE%A2%E6%9B%B4%E6%8D%A2%E4%B8%BB%E9%A2%98%E8%AF%A6%E7%BB%86%E6%96%B9%E6%B3%95/</url>
      
        <content type="html"><![CDATA[<p>在创建hexo个人博客时，已经简单介绍了更换主题的方法，下面主要是介绍我在更换<strong>fluid</strong>主题后，进行的一些自定义设置及碰到的问题和解决方法。</p><h3 id="下载-fluid-主题及修改配置文件">1. 下载 fluid主题及修改配置文件</h3><p>在本地 <strong>Hexo</strong> 博客目录中打开 <strong>gitbash</strong>，然后下载 <strong>fluid</strong> 主题。</p><div class="code-wrapper"><pre><code class="hljs awk">git clone https:<span class="hljs-regexp">//gi</span>thub.com<span class="hljs-regexp">/fluid-dev/</span>hexo-theme-fluid.git themes/fluid</code></pre></div><p>修改 <strong>Hexo</strong> 博客目录中的配置文件 **_config.yml** :</p><div class="code-wrapper"><pre><code class="hljs yaml"><span class="hljs-attr">theme:</span> <span class="hljs-string">fluid</span><span class="hljs-attr">language:</span> <span class="hljs-string">zh-CN</span> <span class="hljs-comment">#根据主题目录下language文件夹选择相应语言</span></code></pre></div><h3 id="创建关于页">2. 创建「关于页」</h3><p><strong>fluid</strong>主题默认已经创建了首页，分类，归档，标签等项，但主题的「关于页」需要手动创建:</p><div class="code-wrapper"><pre><code class="hljs yaml"><span class="hljs-string">hexo</span> <span class="hljs-string">new</span> <span class="hljs-string">page</span> <span class="hljs-string">about</span></code></pre></div><p>创建成功后，编辑博客目录下 <code>/source/about/index.md</code>，添加<code>layout</code> 属性。修改后的文件示例如下：</p><div class="code-wrapper"><pre><code class="hljs yaml"><span class="hljs-meta">---</span><span class="hljs-attr">title:</span> <span class="hljs-string">about</span><span class="hljs-attr">date:</span> <span class="hljs-number">2023-04-16 10:16:49</span><span class="hljs-attr">layout:</span> <span class="hljs-string">about</span><span class="hljs-meta">---</span><span class="hljs-meta"></span><span class="hljs-comment">#这里写关于页的正文，添加你需要在关于页展示的内容，支持 Markdown, HTML</span></code></pre></div><p>此时，运行以下命令，打开<code>http://localhost:4000/</code>,即可查看到你的本地网页博客。</p><div class="code-wrapper"><pre><code class="hljs yaml"><span class="hljs-string">hexo</span> <span class="hljs-string">clean</span><span class="hljs-string">hexo</span> <span class="hljs-string">g</span><span class="hljs-string">hexo</span> <span class="hljs-string">s</span></code></pre></div><h3 id="自定义设置">3. 自定义设置</h3><p>打开 <strong>fluid</strong> 主题目录下配置文件 **_config.yml**，里面详细介绍了各种设置的方法，并进行了中文翻译。</p><h4 id="更换-页面光标闪烁">3.1 更换 页面光标闪烁</h4><div class="code-wrapper"><pre><code class="hljs javascript"># <span class="hljs-title class_">Cursor</span> character<span class="hljs-attr">cursorChar</span>: <span class="hljs-string">&quot;✍&quot;</span></code></pre></div><h4 id="修改导航栏博客名">3.2 修改导航栏博客名</h4><div class="code-wrapper"><pre><code class="hljs javascript"><span class="hljs-attr">blog_title</span>: <span class="hljs-string">&quot;My Tech Blog&quot;</span></code></pre></div><h4 id="添加页脚-个人版权信息">3.3 添加页脚 个人版权信息</h4><div class="code-wrapper"><pre><code class="hljs javascript"><span class="hljs-attr">content</span>: <span class="hljs-string">&#x27;</span><span class="hljs-string">    &lt;p &lt;i class=&quot;iconfont icon-copyright&quot;&gt;&lt;/i&gt; &lt;span&gt;2023 | KayougZhang&lt;/span&gt; &lt;/p&gt;</span><span class="hljs-string">    &lt;a href=&quot;https://hexo.io&quot; target=&quot;_blank&quot; rel=&quot;nofollow noopener&quot;&gt;&lt;span&gt;Hexo&lt;/span&gt;&lt;/a&gt;</span><span class="hljs-string">    &lt;i class=&quot;iconfont icon-love&quot;&gt;&lt;/i&gt;</span><span class="hljs-string">    &lt;a href=&quot;https://github.com/fluid-dev/hexo-theme-fluid&quot; target=&quot;_blank&quot; rel=&quot;nofollow noopener&quot;&gt;&lt;span&gt;Fluid&lt;/span&gt;&lt;/a&gt;</span><span class="hljs-string">  &#x27;</span></code></pre></div><h4 id="修改首页显示的图像">3.4 修改首页显示的图像</h4><p>找到自己喜欢的 <strong>png</strong> 格式图片，命名为<strong>default.png</strong> ，然后复制到主题目录<code>source/img</code> 下，进行替换原图片。</p><h4 id="修改post页面显示的图像">3.5 修改post页面显示的图像</h4><p>找到自己喜欢的 <strong>png</strong> 格式图片，命名为<strong>article.png</strong> ，然后复制到主题目录<code>source/img</code> 下。</p><div class="code-wrapper"><pre><code class="hljs javascript"><span class="hljs-attr">post</span>:  <span class="hljs-attr">banner_img</span>: <span class="hljs-regexp">/img/</span>article.<span class="hljs-property">png</span>  <span class="hljs-attr">banner_img_height</span>: <span class="hljs-number">70</span>  <span class="hljs-attr">banner_mask_alpha</span>: <span class="hljs-number">0.3</span></code></pre></div><h4 id="修改首页宣传语">3.6 修改首页宣传语</h4><div class="code-wrapper"><pre><code class="hljs javascript"><span class="hljs-attr">slogan</span>:  <span class="hljs-attr">enable</span>: <span class="hljs-literal">true</span>  # 为空则按 hexo config.<span class="hljs-property">subtitle</span> 显示  # <span class="hljs-title class_">If</span> empty, text based on <span class="hljs-string">`subtitle`</span> <span class="hljs-keyword">in</span> hexo config  <span class="hljs-attr">text</span>: <span class="hljs-string">&quot;不积跬步无以至千里，不积小流无以成江海&quot;</span></code></pre></div><h4 id="文章开头显示更新时间">3.7 文章开头显示更新时间</h4><div class="code-wrapper"><pre><code class="hljs javascript"><span class="hljs-attr">updated</span>:  <span class="hljs-attr">enable</span>: <span class="hljs-literal">true</span></code></pre></div><h4 id="关闭文章目录显示和版权声明">3.8 关闭文章目录显示和版权声明</h4><div class="code-wrapper"><pre><code class="hljs javascript"><span class="hljs-attr">toc</span>:  <span class="hljs-attr">enable</span>: <span class="hljs-literal">false</span><span class="hljs-attr">copyright</span>:  <span class="hljs-attr">enable</span>: <span class="hljs-literal">false</span></code></pre></div><h4 id="设置评论插件">3.9 设置评论插件</h4><p>打开评论插件需要第三方服务，所以需要进行第三方设置，根据<ahref="https://hexo.fluid-dev.com/docs/guide/#%E8%AF%84%E8%AE%BA">fluid评论配置指南</a>，选择<a href="https://twikoo.js.org/">Twikoo</a>，进行 <ahref="https://twikoo.js.org/quick-start.html#zeabur-部署">Zeabur部署</a>，进行它的提示进行设置，最后会得到一个 <strong>envId</strong>,此处我设置的是 https://ENV, 在配置文件进行如下设置：</p><div class="code-wrapper"><pre><code class="hljs javascript"><span class="hljs-attr">comments</span>:  <span class="hljs-attr">enable</span>: <span class="hljs-literal">true</span>    # 指定的插件，需要同时设置对应插件的必要参数    # <span class="hljs-title class_">The</span> specified plugin needs to set the necessary parameters at the same time    # <span class="hljs-title class_">Options</span>: utterances | disqus | gitalk | valine | waline | changyan | livere | remark42 | twikoo | cusdis | giscus    <span class="hljs-attr">type</span>: twikoo     # <span class="hljs-title class_">Twikoo</span># 基于腾讯云开发 , <span class="hljs-title class_">Zeabur</span> 部署# <span class="hljs-title class_">Based</span> on <span class="hljs-title class_">Tencent</span> <span class="hljs-title class_">CloudBase</span># <span class="hljs-title class_">See</span>: <span class="hljs-attr">https</span>:<span class="hljs-comment">//twikoo.js.org</span><span class="hljs-attr">twikoo</span>:  <span class="hljs-attr">envId</span>: <span class="hljs-attr">https</span>:<span class="hljs-comment">//ENV</span>  <span class="hljs-attr">region</span>: ap-shanghai  <span class="hljs-attr">path</span>: <span class="hljs-variable language_">window</span>.<span class="hljs-property">location</span>.<span class="hljs-property">pathname</span></code></pre></div><h4 id="更改about页图标">3.10 更改「about」页图标</h4><p>在 <strong>about</strong> 配置栏中，删除名字和介绍的部分，在 <ahref="https://hexo.fluid-dev.com/docs/icon/">图标用法</a>中，选择需要添加的图标，然后进行设置，我添加了<strong>github，mail</strong> 和<strong>微信</strong>，所以，需要准备我的微信图片，命名为<strong>wechat.png</strong> ,复制到主题目录 <code>source/img</code>下。</p><div class="code-wrapper"><pre><code class="hljs javascript"><span class="hljs-attr">about</span>:  <span class="hljs-attr">enable</span>: <span class="hljs-literal">true</span>  <span class="hljs-attr">banner_img</span>: <span class="hljs-regexp">/img/</span><span class="hljs-keyword">default</span>.<span class="hljs-property">png</span>  <span class="hljs-attr">banner_img_height</span>: <span class="hljs-number">60</span>  <span class="hljs-attr">banner_mask_alpha</span>: <span class="hljs-number">0.3</span>  <span class="hljs-attr">avatar</span>: <span class="hljs-regexp">/img/</span>avatar.<span class="hljs-property">png</span>  <span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;&#x27;</span>  <span class="hljs-attr">intro</span>: <span class="hljs-string">&#x27;&#x27;</span> <span class="hljs-attr">icons</span>:  - &#123; <span class="hljs-attr">class</span>: <span class="hljs-string">&quot;iconfont icon-github-fill&quot;</span>, <span class="hljs-attr">link</span>: <span class="hljs-string">&quot;https://kayoungzhang.github.io&quot;</span>, <span class="hljs-attr">tip</span>: <span class="hljs-string">&quot;GitHub&quot;</span> &#125;  - &#123; <span class="hljs-attr">class</span>: <span class="hljs-string">&quot;iconfont icon-mail&quot;</span>, <span class="hljs-attr">link</span>: <span class="hljs-string">&quot;mailto:zky0830@163.com&quot;</span>, <span class="hljs-attr">tip</span>: <span class="hljs-string">&quot;Email me&quot;</span> &#125;  - &#123; <span class="hljs-attr">class</span>: <span class="hljs-string">&quot;iconfont icon-wechat-fill&quot;</span>, <span class="hljs-attr">qrcode</span>: <span class="hljs-string">&quot;/img/wechat.png&quot;</span> &#125;</code></pre></div><h4 id="更改about页avatar图像">3.11 更改「about」页avatar图像</h4><p>avatar图像可进行修改，也可以进行删除，修改方式是，找到自己喜欢的图片，命名为<strong>avatar.png</strong> , 粘贴到 <strong>img</strong>文件夹中进行替换，此处我直接删除，操作方式如下：</p><p>打开主题目录下 <code>layout/layout.ejs</code> 文件,删除以下代码：</p><div class="code-wrapper"><pre><code class="hljs javascript">&lt;% <span class="hljs-keyword">if</span>(page.<span class="hljs-property">layout</span> === <span class="hljs-string">&#x27;about&#x27;</span>) &#123; %&gt;  <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;about-avatar&quot;</span>&gt;</span></span><span class="language-xml">    <span class="hljs-tag">&lt;<span class="hljs-name">img</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;&lt;%= url_for(theme.about.avatar) %&gt;&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;img-fluid&quot;</span> <span class="hljs-attr">alt</span>=<span class="hljs-string">&quot;avatar&quot;</span>&gt;</span></span><span class="language-xml">  <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><span class="language-xml">&lt;% &#125; %&gt;</span></code></pre></div><h4 id="调整-post-页面的大小">3.12 调整 post 页面的大小</h4><p>在post页中，文章内容部分页面很窄，有的文章排版成挤缩状，看起不舒服，进行如下设置：</p><p>打开主题目录下 <code>layout/post.ejs</code> 文件, 将<strong>col-lg-8</strong> 修改为 <strong>12</strong>：</p><div class="code-wrapper"><pre><code class="hljs javascript">&lt;div <span class="hljs-keyword">class</span>=<span class="hljs-string">&quot;col-lg-12 nopadding-x-md&quot;</span>&gt;</code></pre></div><p>以上是我采用 <strong>fluid</strong> 主题的一些详细设置，因为不会<strong>javascript</strong>，所以，后面几项设置折腾了两天，现在记录一下。</p><h4 id="更改代码显示的样式">3.13 更改代码显示的样式</h4><p>打开 <strong>fluid</strong> 主题目录下配置文件 **_config.yml**，修改：</p><div class="code-wrapper"><pre><code class="hljs yaml"><span class="hljs-attr">highlightjs:</span>    <span class="hljs-comment"># 在链接中挑选 style 填入</span>    <span class="hljs-comment"># Select a style in the link</span>    <span class="hljs-comment"># See: https://highlightjs.org/static/demo/</span>    <span class="hljs-comment"># style: &quot;github gist&quot;</span>    <span class="hljs-attr">style:</span> <span class="hljs-string">&quot;Vs&quot;</span>    <span class="hljs-attr">style_dark:</span> <span class="hljs-string">&quot;dark&quot;</span></code></pre></div><h3 id="添加数学公式支持">4. 添加数学公式支持</h3><p>打开主题目录下的配置文件<code>_config.yml</code>,将markdown公式支持打开。</p><div class="code-wrapper"><pre><code class="hljs yml"><span class="hljs-attr">math:</span>  <span class="hljs-comment"># 开启后文章默认可用，自定义页面如需使用，需在 Front-matter 中指定 `math: true`</span>  <span class="hljs-comment"># If you want to use math on the custom page, you need to set `math: true` in Front-matter</span>  <span class="hljs-attr">enable:</span> <span class="hljs-literal">true</span>  <span class="hljs-comment"># 开启后，只有在文章 Front-matter 里指定 `math: true` 才会在文章页启动公式转换，以便在页面不包含公式时提高加载速度</span>  <span class="hljs-comment"># If true, only set `math: true` in Front-matter will enable math, to load faster when the page does not contain math</span>  <span class="hljs-attr">specific:</span> <span class="hljs-literal">true</span>  <span class="hljs-comment"># Options: mathjax | katex</span>  <span class="hljs-attr">engine:</span> <span class="hljs-string">mathjax</span></code></pre></div><p>下载安装： <ahref="https://github.com/jgm/pandoc/releases">pandoc</a>，进入本地博客目录下，右键打开<code>git bash</code>,安装<strong>hexo-renderer-pandoc</strong></p><div class="code-wrapper"><pre><code class="hljs ada">npm uninstall hexo-renderer-marked <span class="hljs-comment">--save  </span>npm install hexo-renderer-pandoc <span class="hljs-comment">--save</span></code></pre></div><p>根据 <code>\node_modules\hexo-renderer-pandoc</code>目录下的<strong>README.md</strong> 文档，打开本地博客主目录下的配置文件：<code>_config.yml</code>，添加pandoc软件的路径。</p><div class="code-wrapper"><pre><code class="hljs arcade">pandoc:  pandoc_path: C:<span class="hljs-regexp">/Program Files/</span>Pandoc/pandoc.exe</code></pre></div><p>在需要显示数学公式的文档前面添加<code>math: true</code>,之后页面就会显示公式。为了方便，可以打开<code>\scaffolds\post.md</code>文件，添加<code>math:</code>,这样，在以后需要显示公式的文档中将math后面添加true即可。</p><h3 id="参考链接">参考链接</h3><hr /><p><a href="https://hexo.fluid-dev.com/docs/">Hexo Fluid用户手册</a></p><p><ahref="https://zhuanlan.zhihu.com/p/35988761">Hexo构建blog时渲染LaTeX数学公式的问题</a></p>]]></content>
      
      
      <categories>
          
          <category> 教程 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>log输出函数总结</title>
      <link href="/2023/04/15/log%E8%BE%93%E5%87%BA%E5%87%BD%E6%95%B0%E6%80%BB%E7%BB%93/"/>
      <url>/2023/04/15/log%E8%BE%93%E5%87%BA%E5%87%BD%E6%95%B0%E6%80%BB%E7%BB%93/</url>
      
        <content type="html"><![CDATA[<p>在调试程序时，会经常需要将某些信息输出到电脑，便于查找问题原因，快速解决问题。printf函数作为已经封装好的信息输出函数，会被经常使用到，下面介绍一些它的使用方式：</p><ul><li><h4 id="头文件-stdio.h-函数原型">头文件<strong>&lt;stdio.h&gt;</strong> 函数原型：</h4></li></ul><p><code>int printf ( const char * format, … );</code>返回值：正确返回输出的字符总数，错误返回负值。</p><ul><li><h4 id="调用格式">调用格式：</h4></li></ul><p><code>printf(“格式化字符串”, 输出表列);</code>格式化字符串包含：（1）字符串常量；（2）格式控制字符串；（3）转义字符。</p><ul><li>格式控制字符串形式:</li></ul><p><code>%[flags][width][.prec][length]type  //%[标志][最小宽度][.精度][类型长度]类型</code></p><div class="code-wrapper"><pre><code class="hljs c">标志:-左对齐, 默认右对齐<span class="hljs-number">0</span>右对齐时, 用<span class="hljs-number">0</span>填充宽度.(默认用空格填充)空格   输出值为正数时,在输出值前面加上空格, 为负数时加上负号#对x类型,在输出时加前缀<span class="hljs-number">0</span>x如：<span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%5d\n&quot;</span>,<span class="hljs-number">1000</span>);     <span class="hljs-comment">//输出:( 1000)默认右对齐,左边补空格</span><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%-5d\n&quot;</span>,<span class="hljs-number">1000</span>);     <span class="hljs-comment">//输出:(1000 )左对齐,右边补空格</span><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%05d\n&quot;</span>,<span class="hljs-number">1000</span>);    <span class="hljs-comment">//输出:(01000)前面补0</span><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%#x\n&quot;</span>,<span class="hljs-number">1000</span>);  <span class="hljs-comment">//输出:0x3e8</span><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%.0f %#.0f\n&quot;</span>,<span class="hljs-number">1000.0</span>,<span class="hljs-number">1000.0</span>);<span class="hljs-comment">//输出:(1000 1000.)当小数点后不输出值时依然输出小数点</span></code></pre></div><div class="code-wrapper"><pre><code class="hljs c">类型长度:长度         修饰类型 含义hhd、i、o、u、x输出 <span class="hljs-type">char</span>hd、i、o、u、x输出 <span class="hljs-type">short</span> <span class="hljs-type">int</span>ld、i、o、u、x输出 <span class="hljs-type">long</span> <span class="hljs-type">int</span>lld、i、o、u、x输出 <span class="hljs-type">long</span> <span class="hljs-type">long</span> <span class="hljs-type">int</span>如：<span class="hljs-type">char</span> a = <span class="hljs-string">&#x27;a&#x27;</span>;<span class="hljs-type">short</span> <span class="hljs-type">int</span> b = <span class="hljs-number">123</span>;<span class="hljs-type">int</span>  c = <span class="hljs-number">123</span>;<span class="hljs-type">long</span> <span class="hljs-type">int</span> d = <span class="hljs-number">123</span>;<span class="hljs-type">long</span> <span class="hljs-type">long</span> <span class="hljs-type">int</span> e = <span class="hljs-number">123</span>;<span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%hhd\n&quot;</span>, a); <span class="hljs-comment">// 97</span><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%hd\n&quot;</span>, b); <span class="hljs-comment">// 123</span><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d\n&quot;</span>, c); <span class="hljs-comment">// 123</span><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%ld\n&quot;</span>, d); <span class="hljs-comment">// 123</span><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%lld\n&quot;</span>, e); <span class="hljs-comment">// 123</span></code></pre></div><div class="code-wrapper"><pre><code class="hljs c">类型:d有符号<span class="hljs-number">10</span>进制整型i有符号<span class="hljs-number">10</span>进制整型u无符号<span class="hljs-number">10</span>进制整型o无符号<span class="hljs-number">8</span>进制整型x无符号<span class="hljs-number">16</span>进制整型X无符号<span class="hljs-number">16</span>进制整型f单、双精度浮点数(默认保留<span class="hljs-number">6</span>位小数)e / E以指数形式输出单、双精度浮点数g / G以最短输出宽度,输出单、双精度浮点数c字符s字符串p地址如：有符号十进制:  <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d&quot;</span>,<span class="hljs-number">123</span>);<span class="hljs-comment">//输出123</span>无符号十进制:   <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%u&quot;</span>,<span class="hljs-number">-10</span>);<span class="hljs-comment">//不可以输出负数,输出429496786</span>无符号八进制:    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%o&quot;</span>,<span class="hljs-number">123</span>);<span class="hljs-comment">//输出123</span>无符号十六进制： <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;0x%x 0x%X&quot;</span>,<span class="hljs-number">123</span>,<span class="hljs-number">123</span>);  <span class="hljs-comment">//输出0x7b 0x7B</span>无符号十六进制： <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%#x %#X&quot;</span>,<span class="hljs-number">123</span>,<span class="hljs-number">123</span>);  <span class="hljs-comment">//输出0x7b 0X7B</span>字符型数据：  <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%c&quot;</span>,<span class="hljs-number">64</span>);<span class="hljs-comment">//输出A</span>字符串型数据： <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%s&quot;</span>,<span class="hljs-string">&quot;测试test&quot;</span>);<span class="hljs-comment">//输出：测试test</span>单精度浮点数： <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%.9f&quot;</span>,<span class="hljs-number">0.000000123</span>);<span class="hljs-comment">//输出0.000000123</span>科学计数法：  <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%e %E&quot;</span>,<span class="hljs-number">0.000000123</span>,<span class="hljs-number">0.000000123</span>);<span class="hljs-comment">//输出1.230000e-07 1.230000E-07</span></code></pre></div><ul><li><h4 id="ansi-c标准中有几个标准预定义宏也是常用的">ANSIC标准中有几个标准预定义宏（也是常用的）:</h4></li></ul><div class="code-wrapper"><pre><code class="hljs c">__LINE__：当前的函数行 (<span class="hljs-type">int</span>)__FILE__：当前程序源文件 (<span class="hljs-type">char</span>*)__DATE__：在源文件中插入当前的编译日期__TIME__：在源文件中插入当前编译时间__STDC__：当要求程序严格遵循ANSI C标准时该标识被赋值为<span class="hljs-number">1</span>__FUNCTION__:  当前运行的函数 (<span class="hljs-type">char</span>*)__cplusplus：当编写C++程序时该标识符被定义。如：<span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;file: %s\n&quot;</span>, __FILE__);<span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;function: %s\n&quot;</span>, __FUNCTION__);<span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;line: %d\n&quot;</span>, __LINE__);</code></pre></div><ul><li><h4 id="字符串化操作符"><strong>#</strong> 字符串化操作符</h4></li></ul><p>可以使用 <strong>#</strong> 将当前的内容转换成字符串。</p><div class="code-wrapper"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><span class="hljs-meta">#<span class="hljs-keyword">define</span> DPRINT(expr) printf(<span class="hljs-string">&quot;%s = %d\n&quot;</span>, #expr, expr);</span><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">(<span class="hljs-type">void</span>)</span>&#123;    <span class="hljs-type">int</span> x = <span class="hljs-number">3</span>;    <span class="hljs-type">int</span> y = <span class="hljs-number">5</span>;    DPRINT(x / y);    DPRINT(x + y);    DPRINT(x * y);    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;&#125;</code></pre></div><p>执行结果：</p><div class="code-wrapper"><pre><code class="hljs c">x / y = <span class="hljs-number">0</span>x + y = <span class="hljs-number">8</span>x * y = <span class="hljs-number">15</span></code></pre></div><ul><li><h4 id="连接操作符"><strong>##</strong> 连接操作符</h4></li></ul><p><strong>##</strong>是C语言中的连接操作符，可以在编译的预处理阶段实现字符串连接的操作。在程序的调试语句中，<strong>##</strong> 常用的方式如下</p><p><code>#define DEBUG(fmt, args…) printf(fmt, ##args)</code></p><p>调试宏第一种形式:</p><div class="code-wrapper"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">define</span> debug(fmt, args...)\</span><span class="hljs-meta">do&#123;  \</span><span class="hljs-meta">    printf(<span class="hljs-string">&quot;file:%s function: %s line: %d &quot;</span>, __FILE__, __FUNCTION__, __LINE__);</span>    <span class="hljs-built_in">printf</span>(fmt, #<span class="hljs-meta">#args); \</span><span class="hljs-meta">&#125;while(0)</span></code></pre></div><p>调试宏的第二种定义方式:</p><div class="code-wrapper"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">define</span> debug(fmt, args...)    printf(<span class="hljs-string">&quot;file:%s function: %s line: %d &quot;</span> \</span><span class="hljs-meta">fmt, __FILE__, __FUNCTION__, __LINE__, ##args)</span></code></pre></div><p>实例：</p><div class="code-wrapper"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><span class="hljs-meta">#<span class="hljs-keyword">define</span> USE_DEBUG  <span class="hljs-comment">//开启DEBUG宏 #undef DEBUG （不开启宏）</span></span><span class="hljs-meta">#<span class="hljs-keyword">if</span> USE_DEBUG</span><span class="hljs-meta">#<span class="hljs-keyword">define</span> debug(fmt, args...) printf(<span class="hljs-string">&quot;file:%s function: %s line: %d &quot;</span> \</span><span class="hljs-meta">    fmt, __FILE__, __FUNCTION__, __LINE__, ##args)</span><span class="hljs-meta">#<span class="hljs-keyword">else</span></span><span class="hljs-meta">#<span class="hljs-keyword">define</span> debug(fmt, args...)</span><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">(<span class="hljs-type">int</span> argc, <span class="hljs-type">char</span> **argv)</span> &#123;        <span class="hljs-type">char</span> str[]=<span class="hljs-string">&quot;Hello World&quot;</span>;        debug(<span class="hljs-string">&quot;%s&quot;</span>,str);        <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;&#125;</code></pre></div><ul><li><h4 id="printf-函数重定向方法"><strong>printf()</strong>函数重定向方法</h4></li></ul><p>在C语言中 <strong>printf</strong>函数已经定义为默认输出到显示器的，在单片机中若要想在串口上显示，那就需要重定向<strong>printf</strong>。例如将 <strong>printf</strong> 函数重定向到<strong>USART1</strong>，这样就可以利用printf函数将单片机的数据通过串口调试助手打印到PC上。</p><p>printf函数底层实际是调用 <strong>fputc</strong> 函数，所以重定向<strong>printf</strong> 函数，就是重新写 <strong>fputc</strong>函数。</p><p>在 <strong>51单片机</strong> 中:</p><div class="code-wrapper"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><span class="hljs-type">void</span> <span class="hljs-title function_">uart1_send_byte</span><span class="hljs-params">(<span class="hljs-type">uint8_t</span> value)</span>&#123;SBUF = value;<span class="hljs-keyword">while</span> (!TI); <span class="hljs-comment">//等待发送完成</span>TI = <span class="hljs-number">0</span>;&#125;<span class="hljs-comment">/* 重定向printf函数 */</span><span class="hljs-type">char</span> <span class="hljs-title function_">putchar</span><span class="hljs-params">(<span class="hljs-type">char</span> ch)</span>&#123;uart1_send_byte(ch);<span class="hljs-keyword">return</span> ch;&#125;</code></pre></div><p>在 <strong>STM32</strong> 中, 注意要勾选keil软件中<strong>TARGET</strong> 中的 <strong>USE Micro LIB</strong> 选项,然后进行重定义：</p><div class="code-wrapper"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><span class="hljs-type">int</span> <span class="hljs-title function_">fputc</span><span class="hljs-params">(<span class="hljs-type">int</span> ch, FILE *f)</span> &#123;    <span class="hljs-keyword">while</span> ((USART1 -&gt; SR &amp; <span class="hljs-number">0X40</span>)== <span class="hljs-number">0</span> );    USART1 -&gt; DR  = (<span class="hljs-type">uint8_t</span>)ch;    <span class="hljs-keyword">return</span>  ch;&#125;或者<span class="hljs-type">int</span> <span class="hljs-title function_">fputc</span><span class="hljs-params">(<span class="hljs-type">int</span> ch, FILE *f)</span> &#123;  USART_SendData(USARTx, (<span class="hljs-type">uint8_t</span>)ch); <span class="hljs-comment">/* 发送一个字节数据到串口 */</span>  <span class="hljs-keyword">while</span> (USART_GetFlagStatus(USARTx, USART_FLAG_TXE) == RESET);<span class="hljs-comment">/* 等待发送完毕 */</span>  <span class="hljs-keyword">return</span> (ch);&#125;或者<span class="hljs-type">int</span> <span class="hljs-title function_">fputc</span><span class="hljs-params">(<span class="hljs-type">int</span> ch, FILE *f)</span> &#123;  HAL_UART_Transmit(&amp;huartx, (<span class="hljs-type">uint8_t</span> *)&amp;ch, <span class="hljs-number">1</span>, <span class="hljs-number">0xffff</span>);  <span class="hljs-keyword">return</span> ch;&#125;</code></pre></div><p>此外，<strong>正点原子</strong>有另外一种半主机模式，也可以实现printf输出，只做了解：</p><div class="code-wrapper"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">pragma</span>   import (__use_no_semihosting)</span><span class="hljs-class"><span class="hljs-keyword">struct</span>  __<span class="hljs-title">FILE</span></span><span class="hljs-class">&#123;</span>   <span class="hljs-type">int</span>  handle ;&#125;;FILE  __stdout ;_sys_exit (<span class="hljs-type">int</span>  x)&#123;   x  =  x ;&#125;<span class="hljs-type">int</span>  <span class="hljs-title function_">fputc</span> <span class="hljs-params">(<span class="hljs-type">int</span>  ch , FILE   * f)</span>&#123;   <span class="hljs-keyword">while</span> ((USART1 -&gt; SR &amp; <span class="hljs-number">0X40</span> )== <span class="hljs-number">0</span>);    USART1 -&gt; DR  = (<span class="hljs-type">uint8_t</span>) ch ;    <span class="hljs-keyword">return</span>  ch ;&#125;</code></pre></div>]]></content>
      
      
      <categories>
          
          <category> C语言 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> printf </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>编程常用英文单词及缩写汇总</title>
      <link href="/2023/04/15/%E7%BC%96%E7%A8%8B%E5%B8%B8%E7%94%A8%E8%8B%B1%E6%96%87%E5%8D%95%E8%AF%8D%E5%8F%8A%E7%BC%A9%E5%86%99%E6%B1%87%E6%80%BB/"/>
      <url>/2023/04/15/%E7%BC%96%E7%A8%8B%E5%B8%B8%E7%94%A8%E8%8B%B1%E6%96%87%E5%8D%95%E8%AF%8D%E5%8F%8A%E7%BC%A9%E5%86%99%E6%B1%87%E6%80%BB/</url>
      
        <content type="html"><![CDATA[<p>在写程序过程中，会经常定义变量、函数等，比较规范的做法是采用英文定义，这样，别人读到你的代码时，就会立刻了解它的意思，同时，在应用过程中，有些单词较复杂，为了代码的简洁，一般会采用它的缩写，下面介绍一些编程中常用的英文单词：</p><h3 id="正反属性词">正反属性词</h3><hr /><table style="width:100%;"><thead><tr class="header"><th style="text-align: left;">正义词</th><th>意思</th><th>反义词</th><th>意思</th><th>正义词</th><th>意思</th><th>反义词</th><th>意思</th></tr></thead><tbody><tr class="odd"><td style="text-align: left;">add</td><td>添加</td><td>remove</td><td>删除</td><td>begin</td><td>开启</td><td>end</td><td>结束</td></tr><tr class="even"><td style="text-align: left;">create</td><td>创建</td><td>destroy</td><td>销毁</td><td>insert</td><td>插入</td><td>delete</td><td>删除</td></tr><tr class="odd"><td style="text-align: left;">first</td><td>首先</td><td>last</td><td>最后</td><td>get</td><td>获取</td><td>release</td><td>发行</td></tr><tr class="even"><td style="text-align: left;">increment</td><td>增长</td><td>decrement</td><td>减少</td><td>put</td><td>放</td><td>get</td><td>获得</td></tr><tr class="odd"><td style="text-align: left;">add</td><td>添加</td><td>delete</td><td>删除</td><td>lock</td><td>锁住</td><td>unlock</td><td>解锁</td></tr><tr class="even"><td style="text-align: left;">open</td><td>打开</td><td>close</td><td>关闭</td><td>min</td><td>最小</td><td>max</td><td>最大</td></tr><tr class="odd"><td style="text-align: left;">old</td><td>旧的</td><td>new</td><td>新的</td><td>start</td><td>开始</td><td>stop</td><td>停止</td></tr><tr class="even"><td style="text-align: left;">next</td><td>下一个</td><td>previous</td><td>前一个</td><td>source</td><td>源头</td><td>target</td><td>目标</td></tr><tr class="odd"><td style="text-align: left;">show</td><td>展示</td><td>hide</td><td>隐藏</td><td>send</td><td>发送</td><td>receive</td><td>接收</td></tr><tr class="even"><td style="text-align: left;">source</td><td>来源</td><td>destination</td><td>目的地</td><td>copy</td><td>复制</td><td>paste</td><td>粘贴</td></tr><tr class="odd"><td style="text-align: left;">up</td><td>上</td><td>down</td><td>下</td><td>big</td><td>大</td><td>small</td><td>小</td></tr></tbody></table><h3 id="常用词及缩写">常用词及缩写</h3><hr /><table style="width:100%;"><thead><tr class="header"><th style="text-align: left;">英文单词(缩写)</th><th>意思</th><th>英文单词(缩写)</th><th>意思</th><th style="text-align: center;">英文单词(缩写)</th><th>意思</th></tr></thead><tbody><tr class="odd"><td style="text-align: left;">compare(cmp)</td><td>比较</td><td>utility (util)</td><td>实用程序</td><td style="text-align: center;">configuration(cfg)</td><td>配置</td></tr><tr class="even"><td style="text-align: left;">device(dev)</td><td>设备</td><td>information(info)</td><td>信息</td><td style="text-align: center;">error(err)</td><td>错误</td></tr><tr class="odd"><td style="text-align: left;">hexadecimal(hex)</td><td>十六进制</td><td>image (img)</td><td>图像</td><td style="text-align: center;">increment(inc)</td><td>增加</td></tr><tr class="even"><td style="text-align: left;">initialize(init)</td><td>初始化</td><td>function (func)</td><td>函数</td><td style="text-align: center;">maximum(max)</td><td>最大</td></tr><tr class="odd"><td style="text-align: left;">message(msg)</td><td>信息</td><td>array (arr)</td><td>数组</td><td style="text-align: center;">minimum(min)</td><td>最小</td></tr><tr class="even"><td style="text-align: left;">parameter(param)</td><td>参数</td><td>read(rd)</td><td>读</td><td style="text-align: center;">previous(prev)</td><td>前一个</td></tr><tr class="odd"><td style="text-align: left;">register(reg)</td><td>注册</td><td>hour (hr)</td><td>小时</td><td style="text-align: center;">semaphore(sem)</td><td>信号量</td></tr><tr class="even"><td style="text-align: left;">statistic(stat)</td><td>统计</td><td>value(val)</td><td>值</td><td style="text-align: center;">synchronize(syn)</td><td>同步</td></tr><tr class="odd"><td style="text-align: left;">temp(tmp)</td><td>临时变量</td><td>version(ver)</td><td>版本</td><td style="text-align: center;">buffer(buf)</td><td>缓存</td></tr><tr class="even"><td style="text-align: left;">argument(arg)</td><td>参数</td><td>user (usr)</td><td>用户</td><td style="text-align: center;">command(cmd)</td><td>命令</td></tr><tr class="odd"><td style="text-align: left;">clock(clk)</td><td>时钟</td><td>time (tm)</td><td>时间</td><td style="text-align: center;">reference (ref)</td><td>参考</td></tr><tr class="even"><td style="text-align: left;">power (pwr)</td><td>电源</td><td>system (sys)</td><td>系统</td><td style="text-align: center;">password (pw)</td><td>密码</td></tr><tr class="odd"><td style="text-align: left;">control (ctrl)</td><td>控制</td><td>standard (std)</td><td>标准</td><td style="text-align: center;">package (pkg)</td><td>安装包</td></tr><tr class="even"><td style="text-align: left;">number (num)</td><td>数目</td><td>signal (sig)</td><td>信号</td><td style="text-align: center;">negative(neg)</td><td>负极</td></tr><tr class="odd"><td style="text-align: left;">copy (cpy)</td><td>复制</td><td>return (ret)</td><td>返回</td><td style="text-align: center;">constant (const)</td><td>常量</td></tr><tr class="even"><td style="text-align: left;">check (chk)</td><td>检查</td><td>request (req)</td><td>请求</td><td style="text-align: center;">calculate (calc)</td><td>计算</td></tr><tr class="odd"><td style="text-align: left;">asynchronous(asyn)</td><td>异步</td><td>receive (recv)</td><td>接收</td><td style="text-align: center;">assembly (asm)</td><td>装配</td></tr><tr class="even"><td style="text-align: left;">application(app)</td><td>应用</td><td>alternate (alt)</td><td>交替</td><td style="text-align: center;">administrator(admin)</td><td>管理员</td></tr><tr class="odd"><td style="text-align: left;">technology(tech)</td><td>技术</td><td>pointer (ptr)</td><td>指针</td><td style="text-align: center;">adjust (adj)</td><td>调整</td></tr><tr class="even"><td style="text-align: left;">address (addr)</td><td>地址</td><td>picture (pic)</td><td>图片</td><td style="text-align: center;">position (pos)</td><td>位置</td></tr><tr class="odd"><td style="text-align: left;">acknowledge(ack)</td><td>承认</td><td>multiplication(mul)</td><td>乘</td><td style="text-align: center;">positive(pos)</td><td>正极</td></tr><tr class="even"><td style="text-align: left;">write(wr)</td><td>写</td><td>middle (mid)</td><td>中间</td><td style="text-align: center;">memory (mem)</td><td>内存</td></tr><tr class="odd"><td style="text-align: left;">variable (var)</td><td>变量</td><td>link (lnk)</td><td>链接</td><td style="text-align: center;">library (lib)</td><td>库</td></tr><tr class="even"><td style="text-align: left;">button (btn)</td><td>按钮</td><td>average (avg)</td><td>平均</td><td style="text-align: center;">attribute (attr)</td><td>属性</td></tr><tr class="odd"><td style="text-align: left;">column (col)</td><td>列</td><td>count (cnt)</td><td>计数</td><td style="text-align: center;">clear (clr)</td><td>清除</td></tr><tr class="even"><td style="text-align: left;">make (mk)</td><td>做</td><td>database(db)</td><td>数据库</td><td style="text-align: center;">current (cur)</td><td>当前</td></tr><tr class="odd"><td style="text-align: left;">object (obj)</td><td>对象</td><td>decrease (dec)</td><td>减少</td><td style="text-align: center;">debug (dbg)</td><td>调试</td></tr><tr class="even"><td style="text-align: left;">process (proc)</td><td>处理</td><td>delete (del)</td><td>删除</td><td style="text-align: center;">definition(def)</td><td>定义</td></tr><tr class="odd"><td style="text-align: left;">record (rec)</td><td>记录</td><td>difference (diff)</td><td>不同</td><td style="text-align: center;">destination(dest)</td><td>目的地</td></tr><tr class="even"><td style="text-align: left;">volume (vol)</td><td>音量，体积</td><td>length (leng)</td><td>长度</td><td style="text-align: center;">language(lang)</td><td>语言</td></tr><tr class="odd"><td style="text-align: left;">rename (ren)</td><td>重命名</td><td>display(disp)</td><td>显示</td><td style="text-align: center;">directory (dir)</td><td>目录</td></tr><tr class="even"><td style="text-align: left;">result (res)</td><td>结果</td><td>division(div)</td><td>除</td><td style="text-align: center;">distance (dist)</td><td>距离</td></tr><tr class="odd"><td style="text-align: left;">connection (conn)</td><td>连接</td><td>icon (ico)</td><td>图标</td><td style="text-align: center;">background (bg)</td><td>背景</td></tr><tr class="even"><td style="text-align: left;">structure(struct)</td><td>结构体</td><td>extension(ext)</td><td>拓展</td><td style="text-align: center;">experience(exp)</td><td>经验</td></tr><tr class="odd"><td style="text-align: left;">remove (rm)</td><td>移除</td><td>document (doc)</td><td>文档</td><td style="text-align: center;">dialog(dlg)</td><td>对话框</td></tr><tr class="even"><td style="text-align: left;">source (src)</td><td>源头</td><td>environment(env)</td><td>环境</td><td style="text-align: center;">driver (drv)</td><td>驱动</td></tr></tbody></table>]]></content>
      
      
      <categories>
          
          <category> C语言 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>C语言中位操作</title>
      <link href="/2023/04/14/C%E8%AF%AD%E8%A8%80%E4%B8%AD%E4%BD%8D%E6%93%8D%E4%BD%9C/"/>
      <url>/2023/04/14/C%E8%AF%AD%E8%A8%80%E4%B8%AD%E4%BD%8D%E6%93%8D%E4%BD%9C/</url>
      
        <content type="html"><![CDATA[<p>嵌入式开发过程中，C语言的位操作在寄存器的设置中会经常用到，需要熟练掌握，从而在实际应用中灵活应用位操作，其中主要会用到它的三种基本操作方式，具体如下：</p><p><strong>清零操作</strong></p><p>如将 char型变量a的第七位(bit6)清零，其它位不变：</p><div class="code-wrapper"><pre><code class="hljs c">a &amp;= ~(<span class="hljs-number">1</span>&lt;&lt;<span class="hljs-number">6</span>);   <span class="hljs-comment">/* 1&lt;&lt;6 -&gt; 0100 0000 取反 -&gt; 1011 1111  位与 -&gt; bit6为0，其它位不变 */</span></code></pre></div><p><strong>置位操作</strong></p><p>如将 char型变量a的第七位(bit6)置1，其它位不变：</p><div class="code-wrapper"><pre><code class="hljs c">a |= (<span class="hljs-number">1</span>&lt;&lt;<span class="hljs-number">6</span>);<span class="hljs-comment">/* 1&lt;&lt;6 -&gt; 0100 0000 位或 -&gt; bit6为1，其它位不变 */</span></code></pre></div><p><strong>取反操作</strong></p><p>如将 char型变量a的第七位(bit6)取反，其它位不变：</p><div class="code-wrapper"><pre><code class="hljs c">a ^= (<span class="hljs-number">1</span>&lt;&lt;<span class="hljs-number">6</span>);<span class="hljs-comment">/* 1&lt;&lt;6 -&gt; 0100 0000 异或 -&gt; bit6取反了，其它位不变 */</span></code></pre></div><p>下面介绍通过位操作，在实际应用中的使用。</p><p><strong>1. 获取32bit数据单字节:</strong></p><div class="code-wrapper"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">define</span> GET_BYTE0(x)    ((x &gt;&gt; 0) &amp; 0x000000FF)</span><span class="hljs-meta">#<span class="hljs-keyword">define</span> GET_BYTE1(x)    ((x &gt;&gt; 8) &amp; 0x000000FF)</span><span class="hljs-meta">#<span class="hljs-keyword">define</span> GET_BYTE2(x)    ((x &gt;&gt; 16) &amp; 0x000000FF)</span><span class="hljs-meta">#<span class="hljs-keyword">define</span> GET_BYTE3(x)    ((x &gt;&gt; 24) &amp; 0x000000FF)</span><span class="hljs-type">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(<span class="hljs-type">void</span>)</span>&#123;<span class="hljs-type">unsigned</span> <span class="hljs-type">int</span> n = <span class="hljs-number">0x12345678</span>;<span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;0x%x\r\n&quot;</span>, GET_BYTE0(n)); <span class="hljs-comment">//0x78</span><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;0x%x\r\n&quot;</span>, GET_BYTE1(n)); <span class="hljs-comment">//0x56</span><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;0x%x\r\n&quot;</span>, GET_BYTE2(n)); <span class="hljs-comment">//0x34</span><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;0x%x\r\n&quot;</span>, GET_BYTE3(n)); <span class="hljs-comment">//0x12        </span>&#125;</code></pre></div><p><strong>2. 获取32bit数据某一位:</strong></p><div class="code-wrapper"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">define</span> GET_BIT(x, n) ((x &amp; (1<span class="hljs-string">&lt;&lt;n)) &gt;</span>&gt; n)</span><span class="hljs-type">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(<span class="hljs-type">void</span>)</span>&#123;<span class="hljs-type">unsigned</span> <span class="hljs-type">int</span> a = <span class="hljs-number">0x12345678</span>;<span class="hljs-comment">//0001_0010_0011_0100_0101_0110_0111_1000</span><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;bit0 is %d\r\n&quot;</span>, GET_BIT(a, <span class="hljs-number">0</span>));<span class="hljs-comment">//0</span><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;bit3 is %d\r\n&quot;</span>, GET_BIT(a, <span class="hljs-number">3</span>));<span class="hljs-comment">//1</span><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;bit28 is %d\r\n&quot;</span>, GET_BIT(a, <span class="hljs-number">28</span>));<span class="hljs-comment">//1</span><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;bit31 is %d\r\n&quot;</span>, GET_BIT(a, <span class="hljs-number">31</span>));<span class="hljs-comment">//0</span>&#125;</code></pre></div><p><strong>3. 获取32bit数据某连续几位的值:</strong></p><div class="code-wrapper"><pre><code class="hljs c"><span class="hljs-comment">/* 获取第[n:m]位的值(m&gt;n) */</span><span class="hljs-meta">#<span class="hljs-keyword">define</span> GET_BITS(x, n, m)  ((x <span class="hljs-string">&lt;&lt; (31-m)) &gt;</span>&gt; (31-(m-n)))</span><span class="hljs-comment">/* 获取第[n:m]位的值(m&lt;n) */</span><span class="hljs-meta">#<span class="hljs-keyword">define</span> GET_BITS(x, n, m)  ((x <span class="hljs-string">&lt;&lt; (31-n)) &gt;</span>&gt; (31-(n-m)))</span><span class="hljs-type">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(<span class="hljs-type">void</span>)</span>&#123;<span class="hljs-type">unsigned</span> <span class="hljs-type">int</span> a = <span class="hljs-number">0x12345678</span>;<span class="hljs-comment">//0001_0010_0011_0100_0101_0110_0111_1000</span><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;bit[3, 1] is %x\r\n&quot;</span>, GET_BITS(a, <span class="hljs-number">3</span>, <span class="hljs-number">1</span>));<span class="hljs-comment">//0100b</span>&#125;</code></pre></div><p><strong>4. 32bit数据清零某一字节:</strong></p><div class="code-wrapper"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">define</span> CLEAR_BYTE0(x)  (x &amp; 0xFFFFFF00)</span><span class="hljs-meta">#<span class="hljs-keyword">define</span> CLEAR_BYTE1(x)  (x &amp; 0xFFFF00FF)</span><span class="hljs-meta">#<span class="hljs-keyword">define</span> CLEAR_BYTE2(x)  (x &amp; 0xFF00FFFF)</span><span class="hljs-meta">#<span class="hljs-keyword">define</span> CLEAR_BYTE3(x)  (x &amp; 0x00FFFFFF)</span><span class="hljs-type">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(<span class="hljs-type">void</span>)</span>&#123;<span class="hljs-type">unsigned</span> <span class="hljs-type">int</span> a = <span class="hljs-number">0x12345678</span>;<span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;0x%x\r\n&quot;</span>, CLEAR_BYTE0(a));<span class="hljs-comment">//0x12345600</span><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;0x%x\r\n&quot;</span>, CLEAR_BYTE1(a));<span class="hljs-comment">//0x12340078</span><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;0x%x\r\n&quot;</span>, CLEAR_BYTE2(a));<span class="hljs-comment">//0x12005678</span><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%#.8x\r\n&quot;</span>, CLEAR_BYTE3(a));<span class="hljs-comment">//0x00345678</span>&#125;</code></pre></div><p><strong>5. 32bit数据清零某一位:</strong></p><div class="code-wrapper"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">define</span> CLEAR_BIT(x, n)    (x &amp; ~(1&lt;&lt;n))</span><span class="hljs-type">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(<span class="hljs-type">void</span>)</span>&#123;<span class="hljs-type">unsigned</span> <span class="hljs-type">int</span> a = <span class="hljs-number">0x12345678</span>;<span class="hljs-comment">//0001_0010_0011_0100_0101_0110_0111_1000</span><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;bit3 change to 0. 0x%x\r\n&quot;</span>, CLEAR_BIT(a, <span class="hljs-number">3</span>));<span class="hljs-comment">//0x12345670</span><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;bit6 change to 0. 0x%x\r\n&quot;</span>, CLEAR_BIT(a, <span class="hljs-number">6</span>));<span class="hljs-comment">//0x12345638</span><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;bit28 change to 0. 0x%x\r\n&quot;</span>, CLEAR_BIT(a, <span class="hljs-number">28</span>));<span class="hljs-comment">//0x2345678</span><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;bit31 change to 0. 0x%x\r\n&quot;</span>, CLEAR_BIT(a, <span class="hljs-number">31</span>));<span class="hljs-comment">//0x12345678</span>&#125;</code></pre></div><p><strong>6. 32bit数据某一字节置位:</strong></p><div class="code-wrapper"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">define</span> SET_BYTE0(x)    x | 0x000000FF</span><span class="hljs-meta">#<span class="hljs-keyword">define</span> SET_BYTE1(x)    x | 0x0000FF00</span><span class="hljs-meta">#<span class="hljs-keyword">define</span> SET_BYTE2(x)    x | 0x00FF0000</span><span class="hljs-meta">#<span class="hljs-keyword">define</span> SET_BYTE3(x)    x | 0xFF000000</span><span class="hljs-type">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(<span class="hljs-type">void</span>)</span>&#123;<span class="hljs-type">unsigned</span> <span class="hljs-type">int</span> a = <span class="hljs-number">0x12345678</span>;<span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;set byte0: 0x%x\r\n&quot;</span>, SET_BYTE0(a));<span class="hljs-comment">//0x123456ff</span><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;set byte1: 0x%x\r\n&quot;</span>, SET_BYTE1(a));<span class="hljs-comment">//0x1234ff78</span><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;set byte2: 0x%x\r\n&quot;</span>, SET_BYTE2(a));<span class="hljs-comment">//0x12ff5678</span><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;set byte3: 0x%x\r\n&quot;</span>, SET_BYTE3(a));<span class="hljs-comment">//0xff345678</span>&#125;</code></pre></div><p><strong>7. 32bit数据某一位置位:</strong></p><div class="code-wrapper"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">define</span> SET_BIT(x, n)     x | (1&lt;&lt;n)</span><span class="hljs-type">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(<span class="hljs-type">void</span>)</span>&#123;<span class="hljs-type">unsigned</span> <span class="hljs-type">int</span> a = <span class="hljs-number">0x12345678</span>;<span class="hljs-comment">//0001_0010_0011_0100_0101_0110_0111_1000</span><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;set bit0 to 1: 0x%x\r\n&quot;</span>, SET_BIT(a, <span class="hljs-number">0</span>));<span class="hljs-comment">//0x12345679</span><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;set bit3 to 1: 0x%x\r\n&quot;</span>, SET_BIT(a, <span class="hljs-number">3</span>));<span class="hljs-comment">//0x12345678</span><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;set bit7 to 1: 0x%x\r\n&quot;</span>, SET_BIT(a, <span class="hljs-number">7</span>));<span class="hljs-comment">//0x123456f8</span><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;set bit31 to 1: 0x%x\r\n&quot;</span>, SET_BIT(a, <span class="hljs-number">31</span>));<span class="hljs-comment">//0x92345678</span>&#125;</code></pre></div>]]></content>
      
      
      <categories>
          
          <category> C语言 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C语言 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ASCII编码对照表</title>
      <link href="/2023/04/14/ASCII%E7%BC%96%E7%A0%81%E5%AF%B9%E7%85%A7%E8%A1%A8/"/>
      <url>/2023/04/14/ASCII%E7%BC%96%E7%A0%81%E5%AF%B9%E7%85%A7%E8%A1%A8/</url>
      
        <content type="html"><![CDATA[<figure><imgsrc="https://gitee.com/kayoungzhang/picgo_res/raw/master/img/ascii.png"alt="ascii" /><figcaption aria-hidden="true">ascii</figcaption></figure><figure><imgsrc="https://gitee.com/kayoungzhang/picgo_res/raw/master/img/02.jpg"alt="../_images/02.jpg" /><figcaption aria-hidden="true">../_images/02.jpg</figcaption></figure>]]></content>
      
      
      <categories>
          
          <category> C语言 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ASCII </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Windows局域网共享文件</title>
      <link href="/2023/04/14/Windows%E5%B1%80%E5%9F%9F%E7%BD%91%E5%85%B1%E4%BA%AB%E6%96%87%E4%BB%B6/"/>
      <url>/2023/04/14/Windows%E5%B1%80%E5%9F%9F%E7%BD%91%E5%85%B1%E4%BA%AB%E6%96%87%E4%BB%B6/</url>
      
        <content type="html"><![CDATA[<p>有的时候，我们需要在两台电脑上进行局域网连接，通过一根网线，进行相应的简单设置，就可以实现这个目的，具体有以下4个步骤：</p><ul><li><strong>1.配置IP地址</strong></li><li><strong>2.关闭防火墙</strong></li><li><strong>3.更改“本地策略”</strong></li><li><strong>4.共享需要访问的文件夹</strong></li></ul><p>具体步骤如下：</p><p><strong>1.</strong> 将两台电脑中的其中一台的IPV4地址配置为：</p><div class="code-wrapper"><pre><code class="hljs dns">IP地址：<span class="hljs-number">192.168.1.101</span>子网掩码：<span class="hljs-number">255.255.255.0</span>默认网关：<span class="hljs-number">192.168.1.1</span></code></pre></div><p>另一台设置：</p><div class="code-wrapper"><pre><code class="hljs dns">IP地址：<span class="hljs-number">192.168.1.102</span> （此地址只要设置在同一网段即可）子网掩码：<span class="hljs-number">255.255.255.0</span>默认网关：<span class="hljs-number">192.168.1.1</span></code></pre></div><p><strong>2.</strong> 打开控制面板中的防火墙，关闭防火墙</p><p><strong>3.</strong><strong>Win+R</strong>，输入<strong>gpedit.msc</strong>打开本地策略，依次展开 <strong>计算机配置</strong> -&gt;<strong>Windows设置</strong> -&gt; <strong>本地策略</strong> -&gt;<strong>安全选项</strong>，双击其中的一个账户：<strong>账户：使用空白密码的本地账户只允许进行控制台登陆</strong>，改为 <strong>已禁用</strong> 点击确定。</p><p><strong>4.</strong> 右键需要共享的文件夹，选择共享即可。</p><p><strong>5.</strong> 访问操作，在一台电脑上<strong>Win+R</strong>，输入对方IP地址，如：\192.168.102即可看到共享的文件，同理在另一台电脑上<strong>Win+R</strong>输入\192.168.101即可看到另一台电脑上共享的文件夹或者进入电脑桌面的网络，选择相应的共享电脑，就可看到共享的文件夹（或者网络邻居进行访问）。</p>]]></content>
      
      
      <categories>
          
          <category> 教程 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Windows变量路径与通配符</title>
      <link href="/2023/04/14/Windows%E5%8F%98%E9%87%8F%E8%B7%AF%E5%BE%84%E4%B8%8E%E9%80%9A%E9%85%8D%E7%AC%A6/"/>
      <url>/2023/04/14/Windows%E5%8F%98%E9%87%8F%E8%B7%AF%E5%BE%84%E4%B8%8E%E9%80%9A%E9%85%8D%E7%AC%A6/</url>
      
        <content type="html"><![CDATA[<p><code>%SystemDrive%</code> 操作系统所在的分区号。如 C:</p><p><code>%SystemRoot%</code> 操作系统根目录。如 C:</p><p><code>%windir%</code> 操作系统根目录。如 C:</p><p><code>%ALLUSERSPROFILE%</code> 相当于 C:and SettingsUsers</p><p><code>%APPDATA%</code> 相当于 C:and SettingsData</p><p><code>%ProgramFiles%</code> 相当于 C:Files</p><p><code>%CommonProgramFiles%</code> 相当于 C:FilesFiles</p><p><code>%HOMEDRIVE%</code>操作系统所在的分区号。如：C:</p><p><code>%HOMEPATH%</code> 相当于 and Settings</p><p><code>%USERPROFILE%</code> 相当于 C:and Settings</p><p><code>%ALLUSERSPROFILE%</code> 列出所有用户Profile文件位置。</p><p><code>%system%</code> 即C:</p><p><code>%APPDATA%</code> 列出应用程序数据的默认存放位置。</p><p><code>%CD%</code>列出当前目录。</p><p><code>%CLIENTNAME%</code>列出联接到终端服务会话时客户端的NETBIOS名。</p><p><code>%CMDCMDLINE%</code> 列出启动当前cmd.exe所使用的命令行。</p><p><code>%CMDEXTVERSION%</code> 命令出当前命令处理程序扩展版本号。</p><p><code>%CommonProgramFiles%</code> 列出了常用文件的文件夹路径。</p><p><code>%COMPUTERNAME%</code> 列出了计算机名。</p><p><code>%COMSPEC%</code>列出了可执行命令外壳（命令处理程序）的路径。</p><p><code>%DATE%</code> 列出当前日期。</p><p><code>%ERRORLEVEL%</code> 列出了最近使用的命令的错误代码。</p><p><code>%HOMEDRIVE%</code> 列出与用户主目录所在的驱动器盘符。</p><p><code>%HOMEPATH%</code> 列出用户主目录的完整路径。</p><p><code>%HOMESHARE%</code> 列出用户共享主目录的网络路径。</p><p><code>%LOGONSEVER%</code> 列出有效的当前登录会话的域名控制器名。</p><p><code>%NUMBER_OF_PROCESSORS%</code> 列出了计算机安装的处理器数。</p><p><code>%OS%</code> 列出操作系统的名字。(Windows XP 和 Windows 2000列为 Windows_NT.)</p><p><code>%Path%</code> 列出了可执行文件的搜索路径。</p><p><code>%PATHEXT%</code> 列出操作系统认为可被执行的文件扩展名。</p><p><code>%PROCESSOR_ARCHITECTURE%</code> 列出了处理器的芯片架构。</p><p><code>%PROCESSOR_IDENTFIER%</code> 列出了处理器的描述。</p><p><code>%PROCESSOR_LEVEL%</code> 列出了计算机的处理器的型号。</p><p><code>%PROCESSOR_REVISION%</code> 列出了处理器的修订号。</p><p><code>%ProgramFiles%</code> 列出了Program Files文件夹的路径。</p><p><code>%PROMPT%</code> 列出了当前命令解释器的命令提示设置。</p><p><code>%RANDOM%</code> 列出界于0 和 32767之间的随机十进制数。</p><p><code>%SESSIONNAME%</code>列出连接到终端服务会话时的连接和会话名。</p><p><code>%SYSTEMDRIVE%</code> 列出了Windows启动目录所在驱动器。</p><p><code>%SYSTEMROOT%</code> 列出了Windows启动目录的位置。</p><p><code>%TEMP%</code> 和 <code>%TMP%</code>列出了当前登录的用户可用应用程序的默认临时目录。</p><p><code>%TIME%</code> 列出当前时间。</p><p><code>%USERDOMAIN%</code> 列出了包含用户帐号的域的名字。</p><p><code>%USERNAME%</code> 列出当前登录的用户的名字。</p><p><code>%USERPROFILE%</code> 列出当前用户Profile文件位置。</p><p><code>%WINDIR%</code> 列出操作系统目录的位置。</p>]]></content>
      
      
      <categories>
          
          <category> 其它 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> bat </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>产品文档体系</title>
      <link href="/2023/04/14/%E4%BA%A7%E5%93%81%E6%96%87%E6%A1%A3%E4%BD%93%E7%B3%BB/"/>
      <url>/2023/04/14/%E4%BA%A7%E5%93%81%E6%96%87%E6%A1%A3%E4%BD%93%E7%B3%BB/</url>
      
        <content type="html"><![CDATA[<p>产品在整个开发过程及售后都会涉及到文档的编写，具体文档如下：</p><figure><imgsrc="https://gitee.com/kayoungzhang/picgo_res/raw/master/img/07.png"alt="../_images/07.png" /><figcaption aria-hidden="true">../_images/07.png</figcaption></figure>]]></content>
      
      
      <categories>
          
          <category> 其它 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>调试九法：软硬件错误的排除之道</title>
      <link href="/2023/04/14/%E8%B0%83%E8%AF%95%E4%B9%9D%E6%B3%95%EF%BC%9A%E8%BD%AF%E7%A1%AC%E4%BB%B6%E9%94%99%E8%AF%AF%E7%9A%84%E6%8E%92%E9%99%A4%E4%B9%8B%E9%81%93/"/>
      <url>/2023/04/14/%E8%B0%83%E8%AF%95%E4%B9%9D%E6%B3%95%EF%BC%9A%E8%BD%AF%E7%A1%AC%E4%BB%B6%E9%94%99%E8%AF%AF%E7%9A%84%E6%8E%92%E9%99%A4%E4%B9%8B%E9%81%93/</url>
      
        <content type="html"><![CDATA[<p>在嵌入式技术过程中，会经常进行debug调试，最近看了<strong>《调试九法：软硬件错误的排除之道》</strong>一书，里面详细介绍了九种不同的调试方式，针对不同的问题不同的状态进行不同的思考方式来进行解决，觉得很是受用。现记录如下：</p><h4 id="理解系统">1. 理解系统</h4><p>仔细查阅手册每个细节。</p><h4 id="制造失败">2. 制造失败</h4><p>从头开始复制现象，查找不受控制的条件，记录每件事情，不要过于相信统计数据。</p><h4 id="不要想而要看">3. 不要想，而要看</h4><p>查看细节，并使用外部调试工具</p><h4 id="分而治之">4. 分而治之</h4><p>主次逼近缩小搜索范围，使用易于查看的测试模式。</p><h4 id="一次只改一个地方">5. 一次只改一个地方</h4><p>隔离关键因素，一次只改动一个测试，与正常情况进行对比，确定自从上一次正常工作以来改动的地方。</p><h4 id="保持审计跟踪">6. 保持审计跟踪</h4><p>记下你的每步操作、顺序和结果，记录任何细节，最好用计算机记录下来附加到bug报告中，可以之道修订版本信息。</p><h4 id="检查插头">7. 检查插头</h4><p>质疑你的假设，尤其是一些显而易见的假设，从头开始检查，对工具进行测试。</p><h4 id="获得全新观点">8. 获得全新观点</h4><p>征求别人的意见，获取专业知识，听取别人的经验，报告症状而不要讲你的理论。</p><h4 id="如果你不修复bug它将依然存在">9.如果你不修复bug，它将依然存在</h4><p>bug从来不会自己消失，从根本上解决问题。</p>]]></content>
      
      
      <categories>
          
          <category> 其它 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 调试 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Typora基本用法</title>
      <link href="/2023/04/14/Typora%E5%9F%BA%E6%9C%AC%E7%94%A8%E6%B3%95/"/>
      <url>/2023/04/14/Typora%E5%9F%BA%E6%9C%AC%E7%94%A8%E6%B3%95/</url>
      
        <content type="html"><![CDATA[<p>Typora是一款轻便简洁的Markdown编辑器，支持即时渲染技术，这也是与其他Markdown编辑器最显著的区别。typora软件大部分语法都可以通过快捷键和鼠标右键来完成，具体如下：</p><h4 id="标题级别">标题级别</h4><p>使用简单的 <code>ctrl+数字键</code> 就可以快速完成各种级别的标题</p><h4 id="高亮显示">高亮显示</h4><p><code>==文字==</code> 文字两字就会高亮</p><h4 id="下划线">下划线</h4><p>ctrl + u</p><p><u>下划线</u></p><h4 id="斜体">斜体</h4><p>使用 <code>*单个星号*</code> 或者 <code>_单下划线_</code>可以字体倾斜。快捷键 <code>Ctrl + I</code></p><p><em>斜体</em></p><h4 id="加粗">加粗</h4><p>使用 <code>**两个星号**</code> 或者 <code>__两个下划线__</code>可以字体加粗。快捷键 <code>Ctrl + B</code></p><p><strong>加粗</strong></p><h4 id="删除线">删除线</h4><p>使用<code>~~删除线~~</code></p><p><del>删除线</del></p><h4 id="引用文字">引用文字</h4><p>&gt; + 空格 + 引用文字</p><blockquote><p>这是一段引用文字</p><blockquote><p>换行</p></blockquote></blockquote><h4 id="无序列表">无序列表</h4><p>-或+或* + space + enter</p><ul><li><p>AAA</p></li><li><p>BBB</p></li><li><p>CCC</p></li></ul><h4 id="嵌套无序列表">嵌套无序列表</h4><p>在删除第一级后，自动跳到下一级，返回上一级，连续按次enter</p><h4 id="有序列表">有序列表</h4><p>数字键 + space + enter</p><ol type="1"><li><p>AAA</p></li><li><p>BBB</p></li><li><p>CCC</p></li></ol><h4 id="任务列表">任务列表</h4><p>鼠标右键选择对勾即可。</p><h4 id="代码块">代码块</h4><ul><li><p>插入单句或单词，使用反引号（`） 把其包围</p><p><code>prinf();</code></p></li><li><p>插入代码段，输入3个反引号（`） +enter，并在后面选择一个语言名称即可实现语法高亮。</p><div class="code-wrapper"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">helloworld</span>():    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;hello,world!&quot;</span>)</code></pre></div></li></ul><h4 id="表格">表格</h4><p>使用鼠标右键插入表格或快捷键Ctrl + T。</p><h4 id="分割线">分割线</h4><p>输入 <code>***</code> 或者 <code>---</code>再按回车即可绘制一条水平线，如下：</p><hr /><h4 id="脚注">脚注</h4><p><code>文字[^脚注]</code></p><p>这是一个脚注[^1]</p><p><img src="https://gitee.com/kayoungzhang/picgo_res/raw/master/img/image-20230414224318716.png"/></p><h4 id="目录toc">目录（TOC）</h4><p>输入 <code>[toc]</code>然后回车，即可创建一个“目录”。TOC从文档中提取所有标题，其内容将自动更新。</p><h4 id="插入图片">插入图片</h4><p>直接拖进来或鼠标右键插入图像</p><h4 id="链接">链接</h4><p><code>[链接名](http://example.com/)</code></p><p><a href="http://example.com/">链接</a></p>]]></content>
      
      
      <categories>
          
          <category> 教程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Typora </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>reST基础语法</title>
      <link href="/2023/04/14/reST%E5%9F%BA%E7%A1%80%E8%AF%AD%E6%B3%95/"/>
      <url>/2023/04/14/reST%E5%9F%BA%E7%A1%80%E8%AF%AD%E6%B3%95/</url>
      
        <content type="html"><![CDATA[<p>RestructureText(ReST)是Docutils和Sphinx都使用的默认明文标记语言。Docutils提供了基本的重构文本语法，而Sphinx对此进行了扩展，以支持额外的功能。可以使用在线的rst编辑器了解相关语法：<ahref="http://rst.ninjs.org/">rst在线编辑器</a>，下面介绍它的一些常用语法：</p><h2 id="章节标题">1. 章节标题</h2><p>在文本下一行（或上一行）添加至少与文本长度同宽的符号，即可以使文本成为标题,<code>= - ` : ' " ~ ^ _ * + # &lt; &gt;</code> 这些符号都可以</p><div class="code-wrapper"><pre><code class="hljs reStructuredText">===============    一级标题~~~~~~~~~~~~~~~    二级标题---------------    三级标题^^^^^^^^^^^^^^^    四级标题&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;    五级标题***************    六级标题</code></pre></div><p>效果如下： <imgsrc="https://gitee.com/kayoungzhang/picgo_res/raw/master/img/section.png"alt="章节级数" /></p><h2 id="字体样式">2. 字体样式</h2><p>符号外侧必须留有空格, 英文标点符号::</p><div class="code-wrapper"><pre><code class="hljs reStructuredText">**强调***斜体*``红色字体块``:guilabel:`背景块`.. centered:: 黑体中心字体</code></pre></div><p>效果如下： <imgsrc="https://gitee.com/kayoungzhang/picgo_res/raw/master/img/image-20230414210438330.png"alt="image-20230414210438330" /></p><div class="code-wrapper"><pre><code class="hljs reStructuredText">无序列表:- hhhhhhhh- hhhhhhhh- hhhhhhhh* 列表第一级   + 第二级       - 第三级   + 第二级的另一个项目有序列表:支持数字、大小写字母和罗马数字1. hhhhhhhh#. hhhhhhhh#. hhhhhhhha. hhhhhhhh#. hhhhhhhh#. hhhhhhhh</code></pre></div><p>效果如下： <imgsrc="https://gitee.com/kayoungzhang/picgo_res/raw/master/img/image-20230414210520680.png"alt="image-20230414210520680" /></p><h2 id="提示框">3. 提示框</h2><p>特殊提示支持警告、重要、提示、注意等标签，适合做显眼的用途。</p><div class="code-wrapper"><pre><code class="hljs reStructuredText">.. note:: This is note.(注解).. attention:: Directives at large.(注意).. warning:: This is warning.(警告).. caution:: Don&#x27;t take any wooden nickels.(警告).. seealso:: This is seealso.(参见).. danger:: Mad scientist at work!(危险).. error:: Does not compute.(错误).. hint:: It&#x27;s bigger than a bread box.(提示).. important::   - Wash behind your ears.  - Clean up your room.  - Call your mother.  - Back up your data.(重要).. tip:: 15% if the service is good.(小技巧).. admonition:: by the way  You can make up your own admonition too.</code></pre></div><p>效果如下：<img src="https://gitee.com/kayoungzhang/picgo_res/raw/master/img/image-20230414210957097.png" alt="image-20230414210957097" style="zoom: 50%;" /></p><h2 id="超链接">4. 超链接</h2><div class="code-wrapper"><pre><code class="hljs reStructuredText">1.直接嵌入： `野火公司官网 &lt;http://www.embedfire.com&gt;`_2.使用引用的方式把具体网址定义在其它地方： - 单个词汇：External hyperlinks, like Python_.- 多个词汇时，使用``, `fire website`_.. _Python: http://www.python.org/     .. _fire website: http://www.embedfire.com</code></pre></div><p>效果：<img src="https://gitee.com/kayoungzhang/picgo_res/raw/master/img/image-20230414211213549.png" alt="image-20230414211213549" style="zoom:80%;" /></p><h2 id="图片">5. 图片</h2><p>显示图片直接使用image或figure指令，还需要添加“alt”选项指定图片的描述（类似doc中的题注），以便图片加载失败时显示文字,<strong>不要使用bmp图片</strong>，bmp图片在生成pdf的时候会丢失，所以不要使用bmp格式的图片。</p><p>figure命令</p><div class="code-wrapper"><pre><code class="hljs reStructuredText">.. figure: pic/fire.png    :alt: 野火logo    :align: center    :caption: 野火logo   align-&gt;&quot;top&quot;, &quot;middle&quot;, &quot;bottom&quot;, &quot;left&quot;, &quot;center&quot;, or &quot;right&quot;</code></pre></div><p>image命令</p><div class="code-wrapper"><pre><code class="hljs reStructuredText">.. image:: pic/fire.png    :align: center    :alt: 野火logo</code></pre></div><p>效果一样： <imgsrc="https://gitee.com/kayoungzhang/picgo_res/raw/master/img/fire.png"alt="野火logo" /></p><p>图片还可以使用 width、heigh、scale等参数，但不推荐使用。</p><h2 id="代码高亮">6. 代码高亮</h2><p>在reST文档中列出代码有三种方式：</p><ul><li><ol type="1"><li>单行代码 用 `code`，如：</li></ol><p>`#define LED P23`</p><p>效果： <code>#define LED P23</code></p></li><li><ol start="2" type="1"><li>简单代码块在代码块的上一个段落后面加2个冒号，空一行后开始代码块，代码块要缩进,如：</li></ol><div class="code-wrapper"><pre><code class="hljs reStructuredText">::     #此命令在主机执行     sudo apt install python     echo &quot;helloworld,this is a script test!&quot;</code></pre></div><p>效果：</p><div class="code-wrapper"><pre><code class="hljs reStructuredText">#此命令在主机执行sudo apt install pythonecho &quot;helloworld,this is a script test!&quot;</code></pre></div></li><li><ol start="3" type="1"><li>复杂代码块使用code-block指导语句，还可以选择列出行号和高亮重点行等，如：</li></ol><div class="code-wrapper"><pre><code class="hljs reStructuredText">.. code-block:: c:caption: test:name: test333:emphasize-lines: 2,4-9:linenos:int main()&#123;    printf(&quot;hello, world! This is a C program.\n&quot;);    for(int i=0;i&lt;10;i++ )&#123;    printf(&quot;output i=%d\n&quot;,i);&#125;return 0;&#125;注意：code-block 后面可以是不同的编程语言，sh、c、v(verilog)、python、makefile等caption -&gt; 代码前面显示的名字name -&gt; 自定义名字，方便其他地方使用此名字加下划线来引用emphasize-lines -&gt; 高亮的行linenos -&gt; 显示行数</code></pre></div></li></ul><h2 id="表格">7. 表格</h2><p>表格语法说明：http://docutils.sourceforge.net/docs/ref/rst/directives.html#csv-table,推荐使用列表式表格，修改比较方便,</p><h4 id="列表式表格">7.1 列表式表格</h4><div class="code-wrapper"><pre><code class="hljs reStructuredText">.. list-table:: Frozen Delights!    :widths: 15 10 30    :header-rows: 1    * - Treat    - Quantity    - Description    * - Albatross    - 2.99    - On a stick!    * - Crunchy Frog    - 1.49    - If we took the bones out, it wouldn&#x27;t be    crunchy, now would it?    * - Gannet Ripple    - 1.99    - On a stick!</code></pre></div><p>效果：<imgsrc="https://gitee.com/kayoungzhang/picgo_res/raw/master/img/image-20230414214027390.png"alt="image-20230414214027390" /></p><h4 id="普通表格">7.2 普通表格</h4><div class="code-wrapper"><pre><code class="hljs reStructuredText">=====  =====  =======A      B      A and B=====  =====  =======False  False  FalseTrue   False  FalseFalse  True   FalseTrue   True   True=====  =====  =======</code></pre></div><p>效果：</p><figure><imgsrc="https://gitee.com/kayoungzhang/picgo_res/raw/master/img/image-20230414214149304.png"alt="image-20230414214149304" /><figcaption aria-hidden="true">image-20230414214149304</figcaption></figure><h4 id="csv表格">7.3 CSV表格</h4><div class="code-wrapper"><pre><code class="hljs reStructuredText">.. csv-table:: Frozen Delights!    :header: &quot;Treat&quot;, &quot;Quantity&quot;, &quot;Description&quot;    :widths: 15, 10, 30    &quot;Albatross&quot;, 2.99, &quot;On a stick!&quot;    &quot;Crunchy Frog&quot;, 1.49, &quot;If we took the bones out, it wouldn&#x27;t be    crunchy, now would it?&quot;    &quot;Gannet Ripple&quot;, 1.99, &quot;On a stick!&quot;</code></pre></div><p>效果： <imgsrc="https://gitee.com/kayoungzhang/picgo_res/raw/master/img/image-20230414214306558.png"alt="image-20230414214306558" /></p><h2 id="引用">8. 引用</h2><h4 id="引用图片表格">8.1 引用图片、表格</h4><p>在图片、表格上面加一个下划线的引用标签，然后在下面通过 ref指令引用。示例1：</p><div class="code-wrapper"><pre><code class="hljs reStructuredText">.. _my-reference-label:.. figure: pic/fire.png   :alt: 野火logo   :align: center   name   :ref:`my-reference-label`</code></pre></div><p>效果：</p><p><img src="https://gitee.com/kayoungzhang/picgo_res/raw/master/img/image-20230414214640426.png" alt="image-20230414214640426" style="zoom:67%;" /></p><p>示例2：</p><div class="code-wrapper"><pre><code class="hljs reStructuredText">.. _Table1:.. table:: 拨码开关启动配置表    ==== ====== ========== ==== == ===    编号 名称   NAND FLASH eMMC SD USB    ==== ====== ========== ==== == ===    1    MODE0  0          0    0  1    2    MODE1  1          1    1  0    3    CFG1-4 1          0    0  X    4    CFG1-5 0          1    0  X    5    CFG1-6 0          1    1  X    6    CFG1-7 1          0    0  X    7    CFG2-3 0          1    0  X    8    CFG2-5 0          0    1  X    ==== ====== ========== ==== == ===:ref:`Table1` :ref:`自定义引用名称 &lt;Table1&gt;`</code></pre></div><p>效果：</p><p><img src="https://gitee.com/kayoungzhang/picgo_res/raw/master/img/image-20230414214843366.png" alt="image-20230414214843366" style="zoom: 67%;" /></p><h4 id="引用文档">8.2 引用文档</h4><div class="code-wrapper"><pre><code class="hljs reStructuredText">:doc:`base-syntax`链接到当前目录的base-syntax.rst文档，且显示为其标题:doc:`our two different sites &lt;base-syntax&gt;`链接到当前目录的base-syntax.rst文档</code></pre></div><p>效果：</p><figure><imgsrc="https://gitee.com/kayoungzhang/picgo_res/raw/master/img/image-20230414215033089.png"alt="image-20230414215033089" /><figcaption aria-hidden="true">image-20230414215033089</figcaption></figure><h4 id="引用非rst文档">8.3 引用非rst文档</h4><p>会呈现出点击后下载文件的效果。注意这种引用方式在生成pdf文件时链接会无效。</p><div class="code-wrapper"><pre><code class="hljs reStructuredText">:download:`引用非rst的本地文档 &lt;base-syntax.rst&gt;`.</code></pre></div><p>效果：</p><p><img src="https://gitee.com/kayoungzhang/picgo_res/raw/master/img/image-20230414215143223.png" alt="image-20230414215143223" style="zoom:80%;" /></p><h2 id="脚注">9. 脚注</h2><p>与引用语法类似，只是它在正文中显示的不是文本，而是编号。</p><div class="code-wrapper"><pre><code class="hljs reStructuredText">Footnote references, like [5]_.using [#]_ and [#]_.instant[#fourth]_ and [#third]_.reference[DOC]_.                                                                             Footnotes                                                       .. [5] A numerical footnote... [#] This is the first one. .. [#] This is the second one. .. [#third] a.k.a. third.. [#fourth] a.k.a. fourth .. [DOC] A citation</code></pre></div><p>效果：</p><p><img src="https://gitee.com/kayoungzhang/picgo_res/raw/master/img/image-20230414215340170.png" alt="image-20230414215340170" style="zoom:67%;" /></p><h2 id="rst格式">10. rst格式</h2><div class="code-wrapper"><pre><code class="hljs reStructuredText">.. include:: ../README.rst在index.rst中添加其他rst文件.. contents:: 目录        生成目录.. section-numbering::生成的目录自动编号.. contents::    :local:  当前主题之下生成目录   :depth: 3  目录深度为3级</code></pre></div><h2 id="参考链接">参考链接</h2><ul><li><ahref="https://docutils.sourceforge.io/docs/user/rst/">restruct语法官网</a></li><li><ahref="https://www.sphinx-doc.org/en/master/usage/restructuredtext/index.html">reST参考网站</a></li><li><ahref="https://www.jianshu.com/p/1885d5570b37">其他参考网站</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> 教程 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Sphinx + reST + github + ReadtheDocs编写在线文档</title>
      <link href="/2023/04/14/Sphinx-reST-github-ReadtheDocs%E7%BC%96%E5%86%99%E5%9C%A8%E7%BA%BF%E6%96%87%E6%A1%A3/"/>
      <url>/2023/04/14/Sphinx-reST-github-ReadtheDocs%E7%BC%96%E5%86%99%E5%9C%A8%E7%BA%BF%E6%96%87%E6%A1%A3/</url>
      
        <content type="html"><![CDATA[<p>使用标记语言(MarkupLanguage)写文档是当前比较流行的文档编写方式，目前标记语言主要有两种，Markdown和reStructuredText（简称reST)。很多开源项目的文档就是用Sphinx+reST做的，上传到github和ReadtheDocs，通过浏览器就可以直接查看带有格式的文档了。结合网上多个教程，总结了以下创建教程。</p><h3 id="安装软件包">1. 安装软件包</h3><hr /><ul><li>安装 <ahref="https://www.python.org/">python3</a>,并添加bin目录到环境变量中。</li><li>安装 <a href="https://git-scm.com/download">git软件</a>，并添加bin目录到环境变量中。</li><li>通过pip工具安装 <ahref="https://www.sphinx-doc.org/en/master/index.html">sphinx工具</a>,<code>pip install -U Sphinx</code> 或<code>pip install -i https://pypi.tuna.tsinghua.edu.cn/simple sphinx</code></li><li>安装 <ahref="https://www.sphinx-doc.org/en/master/usage/theming.html#builtin-themes">SphinxThemes</a>, 这里选择 <a href="https://sphinx-themes.org/">第三方主题</a>“Read the Docs”,<code>pip install sphinx sphinx-autobuild sphinx_rtd_theme</code> 或<code>pip install -i https://pypi.tuna.tsinghua.edu.cn/simple sphinx sphinx-autobuild sphinx_rtd_theme</code></li></ul><h3 id="建立项目">2. 建立项目</h3><hr /><p>新建文件夹，这里命名为 <strong>doc_demo</strong> ,进入文件夹，按住<strong>shift键</strong> ，点击鼠标右键，选择<strong>在此处打开命令窗口</strong> ，弹出cmd命令行，运行sphinx-quickstart，根据需要命令行中的提示输入创建信息。这里我建立了一个<strong>doc</strong>的Project，版本是 <strong>1.0</strong>， 作者名为<strong>kayoungzhang</strong>，语言为 <strong>zh_CN</strong>,将source与build目录分开。</p><div class="code-wrapper"><pre><code class="hljs livecodeserver">Microsoft Windows [版本 <span class="hljs-number">6.1</span><span class="hljs-number">.7601</span>]版权所有 (c) <span class="hljs-number">2009</span> Microsoft Corporation。保留所有权利。C:\Users\Administrator&gt;cd doc_demoC:\Users\Administrator\doc_demo&gt;sphinx-quickstartWelcome <span class="hljs-built_in">to</span> <span class="hljs-keyword">the</span> Sphinx <span class="hljs-number">3.5</span><span class="hljs-number">.4</span> quickstart utility.Please enter values <span class="hljs-keyword">for</span> <span class="hljs-keyword">the</span> following settings (just press Enter <span class="hljs-built_in">to</span>accept <span class="hljs-keyword">a</span> default <span class="hljs-built_in">value</span>, <span class="hljs-keyword">if</span> <span class="hljs-literal">one</span> is given <span class="hljs-keyword">in</span> brackets).Selected root path: .You have <span class="hljs-literal">two</span> options <span class="hljs-keyword">for</span> placing <span class="hljs-keyword">the</span> build <span class="hljs-built_in">directory</span> <span class="hljs-keyword">for</span> Sphinx output.Either, you use <span class="hljs-keyword">a</span> <span class="hljs-built_in">directory</span> <span class="hljs-string">&quot;_build&quot;</span> <span class="hljs-keyword">within</span> <span class="hljs-keyword">the</span> root path, <span class="hljs-keyword">or</span> you separate<span class="hljs-string">&quot;source&quot;</span> <span class="hljs-keyword">and</span> <span class="hljs-string">&quot;build&quot;</span> <span class="hljs-built_in">directories</span> <span class="hljs-keyword">within</span> <span class="hljs-keyword">the</span> root path.&gt; Separate source <span class="hljs-keyword">and</span> build <span class="hljs-built_in">directories</span> (y/n) [n]: yThe project name will occur <span class="hljs-keyword">in</span> several places <span class="hljs-keyword">in</span> <span class="hljs-keyword">the</span> built documentation.&gt; Project name: doc&gt; Author name(s): kayoungzhang&gt; Project release []: <span class="hljs-number">1.0</span>If <span class="hljs-keyword">the</span> documents are <span class="hljs-built_in">to</span> be written <span class="hljs-keyword">in</span> <span class="hljs-keyword">a</span> language other than English,you can select <span class="hljs-keyword">a</span> language here <span class="hljs-keyword">by</span> its language code. Sphinx will <span class="hljs-keyword">then</span>translate <span class="hljs-keyword">text</span> that <span class="hljs-keyword">it</span> generates <span class="hljs-keyword">into</span> that language.For <span class="hljs-keyword">a</span> list <span class="hljs-keyword">of</span> supported codes, see<span class="hljs-keyword">https</span>://www.sphinx-doc.org/en/master/usage/configuration.html<span class="hljs-comment">#confval-language.</span>&gt; Project language [en]: zh_CNCreating <span class="hljs-built_in">file</span> C:\Users\Administrator\doc_demo\source\conf.py.Creating <span class="hljs-built_in">file</span> C:\Users\Administrator\doc_demo\source\index.rst.Creating <span class="hljs-built_in">file</span> C:\Users\Administrator\doc_demo\Makefile.Creating <span class="hljs-built_in">file</span> C:\Users\Administrator\doc_demo\make.bat.Finished: An initial <span class="hljs-built_in">directory</span> structure has been created.You should now populate your master <span class="hljs-built_in">file</span> C:\Users\Administrator\doc_demo\source\index.rst <span class="hljs-keyword">and</span> <span class="hljs-built_in">create</span> other documentationsource <span class="hljs-built_in">files</span>. Use <span class="hljs-keyword">the</span> Makefile <span class="hljs-built_in">to</span> build <span class="hljs-keyword">the</span> docs, like so:make builderwhere <span class="hljs-string">&quot;builder&quot;</span> is <span class="hljs-literal">one</span> <span class="hljs-keyword">of</span> <span class="hljs-keyword">the</span> supported builders, e.g. html, latex <span class="hljs-keyword">or</span> linkcheck.C:\Users\Administrator\doc_demo&gt;</code></pre></div><p><strong>doc_demo</strong> 文件夹中出现一些文件：</p><ul><li>source和build分别是源文件目录和编译生成文件的存放目录</li><li>Makefile和make.bat分别是Linux和Windows下的makefile</li><li>conf.py是配置文件，index.rst是配置文档显示结构，_static是静态文件存放目录_templates是模板存放目录</li></ul><h3 id="conf.py配置">3. conf.py配置</h3><hr /><h4 id="更换主题">3.1 更换主题</h4><p>使用记事本打开文件 <strong>conf.py</strong>，找到<strong>theme</strong> 主题，屏蔽旧主题，更换新的主题。</p><div class="code-wrapper"><pre><code class="hljs clean"># html_theme = <span class="hljs-string">&#x27;alabaster&#x27;</span><span class="hljs-keyword">import</span> sphinx_rtd_themehtml_theme = <span class="hljs-string">&quot;sphinx_rtd_theme&quot;</span></code></pre></div><h4 id="添加主页logo">3.2 添加主页logo</h4><p>准备好logo文件</p><div class="code-wrapper"><pre><code class="hljs ini"><span class="hljs-attr">html_logo</span> = <span class="hljs-string">&#x27;./logo.png&#x27;</span></code></pre></div><h4 id="不显示源文件链接">3.3 不显示源文件链接</h4><div class="code-wrapper"><pre><code class="hljs ini"><span class="hljs-attr">html_show_sourcelink</span> = <span class="hljs-literal">False</span></code></pre></div><h4 id="支持markdown编辑及表格">3.4 支持markdown编辑及表格</h4><p>首先需要安装插件<strong>myst-parser，recommonmark，sphinx-markdown_tables</strong>:</p><div class="code-wrapper"><pre><code class="hljs cmake">pip <span class="hljs-keyword">install</span> myst-parserpip <span class="hljs-keyword">install</span> recommonmarkpip <span class="hljs-keyword">install</span> sphinx-markdown_tables</code></pre></div><p>然后在 <strong>conf.py</strong> 添加：</p><div class="code-wrapper"><pre><code class="hljs pgsql">extensions = [‘myst_parser’, ‘sphinx_markdown_tables’]<span class="hljs-keyword">from</span> recommonmark.<span class="hljs-keyword">parser</span> <span class="hljs-keyword">import</span> CommonMarkParsersource_parsers = &#123;                <span class="hljs-string">&#x27;.md&#x27;</span>: CommonMarkParser,&#125;source_suffix = [<span class="hljs-string">&#x27;.rst&#x27;</span>, <span class="hljs-string">&#x27;.md&#x27;</span>]</code></pre></div><h3 id="创建rst文件">4. 创建rst文件</h3><hr /><p>当需要创建自己的文档时，就在 <strong>source</strong>文件夹中创建，这里创建 <strong>sphinx.rst</strong> 和<strong>vscode.rst</strong> 文档，同时新建文件夹<strong>docxtorst</strong> ，并在其中创建 <strong>docxtorst.rst</strong>文档。在这三个文档中添加标题和内容。</p><h3 id="设置toctree">5. 设置toctree</h3><hr /><p>使用记事本打开 <strong>source</strong> 目录下的<strong>index.rst</strong>文件，根据刚才创建的文档和位置，填写以下内容：</p><div class="code-wrapper"><pre><code class="hljs elixir">.. toctree::   <span class="hljs-symbol">:maxdepth</span>: <span class="hljs-number">2</span>   <span class="hljs-symbol">:caption</span>: <span class="hljs-title class_">Table</span> of <span class="hljs-title class_">Contents</span>   <span class="hljs-symbol">:titlesonly</span>:   <span class="hljs-symbol">:numbered</span>:   sphinx   vscode   docxtorst/docxtorst</code></pre></div><p>说明：</p><div class="code-wrapper"><pre><code class="hljs xl"><span class="hljs-function"><span class="hljs-title">maxdepth</span> -&gt;</span> 目录中可显示标题的最多级数，不添加则会显示文档中所有标题<span class="hljs-function"><span class="hljs-title">caption</span> -&gt;</span> toctree显示标题<span class="hljs-function"><span class="hljs-title">titleonly</span> -&gt;</span>只想显示toctree文档标题，而不显示同一级别的其他标题<span class="hljs-function"><span class="hljs-title">numbered</span> -&gt;</span> 给罗列的文档标题进行显示标号，子目录也会自动编号<span class="hljs-function"><span class="hljs-title">sphinx</span>、vscode -&gt;</span>当前index.rst文档所在目录下的sphinx.rst和vscode.rst文档<span class="hljs-function"><span class="hljs-title">docxtorst</span>/docxtorst -&gt;</span> docxtorst文件夹下的docxtorst.rst文档</code></pre></div><h3 id="编译输出">6. 编译输出</h3><hr /><p>在命令行中，运行 <code>make html</code> 编译生成html文件：</p><div class="code-wrapper"><pre><code class="hljs gams">C:\Users\Administrator\doc_demo&gt;make htmlRunning Sphinx v3<span class="hljs-number">.5</span><span class="hljs-number">.4</span>loading translations [zh_CN]... done<span class="hljs-function"><span class="hljs-title">loading</span></span> pickled environment... donemyst v0<span class="hljs-number">.14</span><span class="hljs-number">.0</span>: MdParserConfig(renderer=<span class="hljs-string">&#x27;sphinx&#x27;</span>, commonmark_only=False, dmath_allow_labels=True, dmath_allow_space=True, dmath_allow_digits=True, dmath_double_inline=False, update_mathjax=True, enable_extensions=[<span class="hljs-string">&#x27;dollarmath&#x27;</span>], disable_syntax=[], url_schemes=None, heading_anchors=None, html_meta=[], footnote_transition=True, substitutions=[], sub_delimiters=[<span class="hljs-string">&#x27;&#123;&#x27;</span>, <span class="hljs-string">&#x27;&#125;&#x27;</span>], words_per_minute=<span class="hljs-number">200</span>)building [mo]: targets <span class="hljs-keyword">for</span> <span class="hljs-number">0</span> po <span class="hljs-keyword">files</span> that are out of datebuilding [html]: targets <span class="hljs-keyword">for</span> <span class="hljs-number">1</span> source <span class="hljs-keyword">files</span> that are out of dateupdating environment: [config changed (<span class="hljs-string">&#x27;source_parsers&#x27;</span>)] <span class="hljs-number">4</span> added, <span class="hljs-number">0</span> changed, <span class="hljs-number">0</span>removed<span class="hljs-function"><span class="hljs-title">reading</span></span> sources... [<span class="hljs-number">100</span>%] vscode<span class="hljs-function"><span class="hljs-title">looking</span></span> <span class="hljs-keyword">for</span> now-outdated <span class="hljs-keyword">files</span>... none found<span class="hljs-function"><span class="hljs-title">pickling</span></span> environment... done<span class="hljs-function"><span class="hljs-title">checking</span></span> consistency... done<span class="hljs-function"><span class="hljs-title">preparing</span></span> documents... done<span class="hljs-function"><span class="hljs-title">Building</span></span> prefix dict from the default dictionary ...Loading <span class="hljs-keyword">model</span> from cache C:\Users\ADMINI~<span class="hljs-number">1</span>\AppData\Local\Temp\jieba.cacheLoading <span class="hljs-keyword">model</span> cost <span class="hljs-number">1.264</span> seconds.Prefix dict has been built succesfully.<span class="hljs-function"><span class="hljs-title">writing</span></span> output... [<span class="hljs-number">100</span>%] vscode<span class="hljs-function"><span class="hljs-title">generating</span></span> indices... genindex done<span class="hljs-function"><span class="hljs-title">writing</span></span> additional pages... search done<span class="hljs-function"><span class="hljs-title">copying</span></span> images... [<span class="hljs-number">100</span>%] docxtorst/media/docxto015.png<span class="hljs-function"><span class="hljs-title">copying</span></span> static <span class="hljs-keyword">files</span>... done<span class="hljs-function"><span class="hljs-title">copying</span></span> extra <span class="hljs-keyword">files</span>... donedumping search index in Chinese (code: zh)... done<span class="hljs-function"><span class="hljs-title">dumping</span></span> object inventory... donebuild succeeded.The HTML pages are in build\html.</code></pre></div><p>在build文件夹的html文件夹下, 打开html文件即可看到具体的网页实现：</p><figure><imgsrc="https://gitee.com/kayoungzhang/picgo_res/raw/master/img/image-20230414133802554.png"alt="image-20230414133802554" /><figcaption aria-hidden="true">image-20230414133802554</figcaption></figure><h3 id="github或gitee托管">7. github或gitee托管</h3><hr /><p>以上的操作，只能在本地的浏览器查看文档，若想让所有人都能看到，需要部署到<strong>ReadtheDocs</strong>，在部署之前，要把代码托管到代码托管平台，这里选用github，也可以选gitee，国内访问使用速度快。</p><p>先到 <strong>github</strong> 上建立一个公开的仓库，如我建立一个名为<strong>doc</strong> 的仓库,然后在本地仓库中创建一个<strong>.gitignore</strong>文件，它的作用是将本地一些文件不上传到远程仓库，这里将<code>build/</code>填入此其中，最后打开 <strong>gitbash</strong>，将本地仓库上传到远端：</p><div class="code-wrapper"><pre><code class="hljs mipsasm">git initgit <span class="hljs-keyword">add </span>-Agit commit -m <span class="hljs-string">&quot;first commit&quot;</span>git remote <span class="hljs-keyword">add </span><span class="hljs-keyword">origin </span>github上远程库地址git push -u <span class="hljs-keyword">origin </span>master</code></pre></div><h3 id="readthedocs托管">8. ReadtheDocs托管</h3><hr /><p>在 <a href="https://readthedocs.org/">ReadtheDocs</a> 上注册一个账号,登陆后点击“<strong>Import</strong>”，给该文档项目填写一个名字比如：<strong>doc</strong>,添加你在GitHub上面的工程 <strong>HTTPS链接</strong>, 选择仓库类型为<strong>Git</strong>, 其他项目根据自己的需要填写,点击<strong>Create</strong>，创建完后会自动激活Webhooks，不用再去GitHub设置，从此只要你往这个仓库push内容，readthedoc上面的文档就会自动更新。可参考<ahref="https://github.com/rtfd/readthedocs.org">ReadtheDocs官方文档</a>。</p>]]></content>
      
      
      <categories>
          
          <category> 教程 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Bat(批处理)指令与应用</title>
      <link href="/2023/04/13/Bat-%E6%89%B9%E5%A4%84%E7%90%86-%E6%8C%87%E4%BB%A4%E4%B8%8E%E5%BA%94%E7%94%A8/"/>
      <url>/2023/04/13/Bat-%E6%89%B9%E5%A4%84%E7%90%86-%E6%8C%87%E4%BB%A4%E4%B8%8E%E5%BA%94%E7%94%A8/</url>
      
        <content type="html"><![CDATA[<p>Windows下批处理指令在工作生活中有很大的应用，可实现自动化处理某些任务。打开window中的命令行窗口，输入相应命令加上/?可以查看各命令的详细使用方法（如 <strong>dir /?</strong>），下面介绍一些常用的指令：</p><hr /><h4 id="基本指令">基本指令</h4><p><code>rem 这是一条注释语句</code> ---&gt;命令行注释，可以回显</p><p><code>:: 这是一条注释语句</code> ---&gt;命令行注释，不可回显</p><p><code>pause</code> ---&gt;暂停批处理文件的执行，命令行提示<strong>请按任意键继续</strong></p><p><code>@echo off</code>---&gt;关闭回显，一般批处理文件第一行都是这句</p><p><code>echo off</code> ---&gt;从下一行开始关闭回显</p><p><code>echo on</code> ---&gt;从下一行开始打开回显</p><p><code>ehco.</code> ---&gt;换行</p><p><code>echo Y | rd /s E:\mybat</code> ---&gt;删除文件提示<strong>Y</strong></p><p><code>echo hello word &gt; E:\newfile.txt</code>---&gt;创建文件并向文件写内容</p><p><code>echo hello word &gt;&gt; E:\newfile.txt</code>---&gt;向文件追加内容</p><p><code>cls</code> ---&gt;清屏</p><p><code>title 这是一个标题</code> ---&gt;设置窗口标题</p><p><code>color 0A</code> ---&gt;设置窗口颜色，颜色的设置具体用法查看<strong>color /?</strong></p><p><code>dir</code> ---&gt;显示当前目录下文件</p><p><code>cd 路径</code> ---&gt;切换路径</p><p><code>call test1.bat</code>---&gt;在同一个命令窗口调用另一个批处理文件</p><p><code>start e:\test.txt</code>---&gt;打开命令行并执行一个新的程序</p><p><code>del /q/a/f d:\temp\*.*</code>---&gt;删除指定文件，参数的具体用法查看 <strong>del /?</strong></p><p><code>rd /s/q d:\temp</code> ---&gt;删除文件夹及子文件夹</p><p><code>md mybat</code> ---&gt;创建文件夹</p><p><code>copy C:\mybat.txt D:\</code>---&gt;复制文件，不能复制文件夹</p><p><code>ren d:\temp tmp</code> ---&gt;重命名文件</p><p><code>move mybat\1.txt myfile\</code> ---&gt;移动文件</p><p><code>find "abc" mybat\4.txt</code>---&gt;在文件中查找字符，参数的具体用法查看 <strong>find /?</strong></p><p><code>type c:\boot.ini</code> ---&gt;显示文件内容</p><p><code>date</code> ---&gt;显示系统日期</p><p><code>time</code> ---&gt;显示系统时间</p><p><code>:label</code> ---&gt;行标签</p><p><code>goto label</code> ---&gt;跳转到指定标签</p><p><code>tree d:\</code> ---&gt;显示目录结构</p><p><code>ping www.baidu.com</code> ---&gt;测试网络连接量</p><p><code>del a.txt &amp;&amp; echo OK</code>---&gt;顺序执行多条命令，当碰到执行出错的命令后将不执行后面的命令</p><p><code>del a.txt || echo error</code>---&gt;顺序执行多条命令，当碰到执行正确的命令后将不执行后面的命令</p><p><code>dir *.* /s/a | find /c ".exe"</code> --&gt;管道命令表示先执行dir 命令，对其输出的结果执行后面的 find 命令</p><hr /><h4 id="高级指令">高级指令</h4><p><strong><code>if</code> 判断命令</strong>,具体查看 <strong>if/?</strong></p><div class="code-wrapper"><pre><code class="hljs bash"><span class="hljs-keyword">if</span> not exist d:\test.bat (    <span class="hljs-built_in">echo</span> @<span class="hljs-built_in">echo</span> off&gt;d:\test.bat) <span class="hljs-keyword">else</span> (    del d:\test.bat) ::如果d盘不存在test.bat文件，则在d盘创建test.bat文件，并写入 @<span class="hljs-built_in">echo</span> off，如果存在则删除此文件</code></pre></div><p><strong><code>for</code> 循环命令</strong>，具体查看 <strong>for/?</strong></p><div class="code-wrapper"><pre><code class="hljs bash"><span class="hljs-keyword">for</span> %%i <span class="hljs-keyword">in</span> (d:\*.*) <span class="hljs-keyword">do</span> <span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;%%i&quot;</span>  ::找出D盘下所有文件<span class="hljs-keyword">for</span> %%i <span class="hljs-keyword">in</span> (*.txt) <span class="hljs-keyword">do</span> find <span class="hljs-string">&quot;abc&quot;</span> %%i   ::对当前目录里所有的txt文件执行 find 命令<span class="hljs-keyword">for</span> /r d:\mp3 %%i <span class="hljs-keyword">in</span> (*.mp3) <span class="hljs-keyword">do</span> <span class="hljs-built_in">echo</span> %%i&gt;&gt;d:\mp3.txt   ::把 d:\mp3 及其子目录里的mp3文件的文件名都存到 d:\mp3.txt 里去<span class="hljs-keyword">for</span> /l %%i <span class="hljs-keyword">in</span> (2,1,8) <span class="hljs-keyword">do</span> <span class="hljs-built_in">echo</span> %%i   ::生成2345678序列，2是数字序列的开头，8是结尾，1表示每次加1<span class="hljs-keyword">for</span> /f <span class="hljs-string">&quot;skip=5 tokens=4&quot;</span> %%a <span class="hljs-keyword">in</span> (<span class="hljs-string">&#x27;dir&#x27;</span>) <span class="hljs-keyword">do</span> <span class="hljs-built_in">echo</span> %%a   ::对<span class="hljs-built_in">dir</span>命令的结果，跳过前5行，余下每行取第4列</code></pre></div><p><strong><code>start</code></strong></p><div class="code-wrapper"><pre><code class="hljs bash">start <span class="hljs-string">&quot;&quot;</span> <span class="hljs-string">&quot;D:\Program Files\Git\git-bash.exe&quot;</span> -c <span class="hljs-string">&quot;hexo clean &amp;&amp; hexo g &amp;&amp; hexo d;bash&quot;</span> ::通过命令窗口打开git-bash，并在git-bash中运行hexo命令，完成后bash窗口不关闭::参数说明： <span class="hljs-string">&quot;&quot;</span> ---&gt;用于执行计算机空白符::参数说明： -c ---&gt;设置启动命令参数，各个参数间用&amp;&amp;分隔::参数说明： ;bash结尾符 ---&gt;防止git-bash窗口关闭</code></pre></div><p><strong><code>set</code> 设置变量</strong>，具体查看 <strong>set/?</strong></p><ol type="1"><li>set接收用户输入数据</li></ol><div class="code-wrapper"><pre><code class="hljs bash"><span class="hljs-built_in">set</span> /p param=请输入密码：<span class="hljs-built_in">echo</span> %param%</code></pre></div><ol start="2" type="1"><li>set定义变量</li></ol><div class="code-wrapper"><pre><code class="hljs bash"><span class="hljs-built_in">set</span> p=aa1bb1aa2bb2           ::设置变量p并赋值，即aa1bb1aa2bb2, <span class="hljs-string">&quot;变量名=值&quot;</span> 中间不要有空格<span class="hljs-built_in">echo</span> %p%                     ::显示变量p代表的字符串，即aa1bb1aa2bb2<span class="hljs-built_in">echo</span> %p:~6%                  ::显示变量p中第6个字符以后的所有字符，即aa2bb2<span class="hljs-built_in">echo</span> %p:~6,3%                ::显示第6个字符以后的3个字符，即aa2<span class="hljs-built_in">echo</span> %p:~0,3%                ::显示前3个字符，即aa1<span class="hljs-built_in">echo</span> %p:~-2%                 ::显示最后面的2个字符，即b2<span class="hljs-built_in">echo</span> %p:~0,-2%               ::显示除了最后2个字符以外的其它字符，即aa1bb1aa2b<span class="hljs-built_in">echo</span> %p:aa=c%                ::用c替换变量p中所有的aa，即显示c1bb1c2bb2<span class="hljs-built_in">echo</span> %p:aa=%                 ::将变量p中的所有aa字符串置换为空，即显示1bb12bb2<span class="hljs-built_in">echo</span> %p:*bb=c%               ::第一个bb及其之前的所有字符被替换为c，即显示c1aa2bb2<span class="hljs-built_in">set</span> p=%p:*bb=c%              ::设置变量p，赋值为 %p:*bb=c% ，即c1aa2bb2<span class="hljs-built_in">set</span> /a p=39                  ::设置p为数值型变量，值为39<span class="hljs-built_in">set</span> /a p=39/10               ::支持运算符，有小数时用去尾法，39/10=3.9，去尾得3，p=3<span class="hljs-built_in">set</span> /a p=p/10                ::用 /a 参数时，在 = 后面的变量可以不加%直接引用<span class="hljs-built_in">set</span> /a p=”1&amp;0″               ::”与”运算，要加引号。<span class="hljs-built_in">set</span> p=                       ::取消p变量</code></pre></div><ol start="3" type="1"><li>set用于数字表达式</li></ol><div class="code-wrapper"><pre><code class="hljs bash">@<span class="hljs-built_in">echo</span> off<span class="hljs-built_in">set</span> a=1&amp;<span class="hljs-built_in">set</span> b=6<span class="hljs-built_in">set</span> c=%a%+%b% <span class="hljs-built_in">echo</span> %c% ::输出1+6<span class="hljs-built_in">set</span> d=a+b<span class="hljs-built_in">echo</span> %d% ::输出a+b<span class="hljs-built_in">set</span> /a e=a+b<span class="hljs-built_in">echo</span> %e% ::输出7pause</code></pre></div><p><strong><code>变量%0--%9</code></strong> 命令行传递给批处理的参数</p><div class="code-wrapper"><pre><code class="hljs bash">%0 ::批处理文件本身%1 ::第一个参数%9 ::第九个参数%* ::从第一个参数开始的所有参数%~1     :: 删除引号(<span class="hljs-string">&quot;)，扩充 %1</span><span class="hljs-string">%~f1    :: 将 %1 扩充到一个完全合格的路径名</span><span class="hljs-string">%~d1    :: 仅将 %1 扩充到一个驱动器号</span><span class="hljs-string">%~p1    :: 仅将 %1 扩充到一个路径</span><span class="hljs-string">%~n1    :: 仅将 %1 扩充到一个文件名</span><span class="hljs-string">%~x1    :: 仅将 %1 扩充到一个文件扩展名</span><span class="hljs-string">%~s1    :: 扩充的路径指含有短名</span><span class="hljs-string">%~a1    :: 将 %1 扩充到文件属性</span><span class="hljs-string">%~t1    :: 将 %1 扩充到文件的日期/时间</span><span class="hljs-string">%~z1    :: 将 %1 扩充到文件的大小</span><span class="hljs-string">%~dp1   ::只将 %1 扩展到驱动器号和路径</span><span class="hljs-string">%~nx1   ::只将 %1 扩展到文件名和扩展名</span></code></pre></div><p><strong><code>net</code> 网络命令</strong></p><div class="code-wrapper"><pre><code class="hljs bash">::关闭/启动MySQL服务,等待停止/启动的过程,完成后执行之后的代码net start MySQLnet stop MySQLnet start   ::查看所有运行的服务</code></pre></div><p><strong><code>mshta</code></strong></p><div class="code-wrapper"><pre><code class="hljs bash">::可以调用vb脚本和js脚本mshta vbscript:window.execScript(<span class="hljs-string">&quot;alert(&#x27;hello world!&#x27;);&quot;</span>,<span class="hljs-string">&quot;javascript&quot;</span>)(window.close)mshta javascript:window.execScript(<span class="hljs-string">&quot;msgBox(&#x27;hello world!&#x27;)(window.close)&quot;</span>,<span class="hljs-string">&quot;vbs&quot;</span>)mshta vbscript:msgbox(<span class="hljs-string">&quot;弹窗单行显示内容&quot;</span>,65,<span class="hljs-string">&quot;弹窗的标题&quot;</span>)(window.close)mshta vbscript:CreateObject(<span class="hljs-string">&quot;Wscript.Shell&quot;</span>).popup(<span class="hljs-string">&quot;弹窗内容&quot;</span>,7,<span class="hljs-string">&quot;标题&quot;</span>,64)(window.close)::连续弹二个信息框mshta vbscript:execute(<span class="hljs-string">&quot;msgbox &quot;</span><span class="hljs-string">&quot;one BOX&quot;</span><span class="hljs-string">&quot;:msgbox &quot;</span><span class="hljs-string">&quot;two BOX&quot;</span><span class="hljs-string">&quot;:window.close&quot;</span>)</code></pre></div><p><strong><code>延时</code></strong></p><div class="code-wrapper"><pre><code class="hljs bash">ping 127.0.0.1 -n 3 &gt;nul ---&gt;延时3s<span class="hljs-built_in">timeout</span> /t 10   ---&gt;延迟10s，具体查看 <span class="hljs-built_in">timeout</span> /?</code></pre></div><p><strong><code>弹框</code></strong></p><ol type="1"><li>MSG命令方式</li></ol><div class="code-wrapper"><pre><code class="hljs bash">@<span class="hljs-built_in">echo</span> off::/time:5设置时间弹框的显示时间为5S,5S后自动关闭msg * /time:5 这里是弹窗显示的文本pause::设置弹窗的多行文本(<span class="hljs-built_in">echo</span> 这是弹窗的第一行文本<span class="hljs-built_in">echo</span> 这是第二行文本)|msg * /time:5pause</code></pre></div><ol start="2" type="1"><li>调用VBScript的MsgBox实现弹窗</li></ol><div class="code-wrapper"><pre><code class="hljs bash">@<span class="hljs-built_in">echo</span> offmshta vbscript:msgbox(<span class="hljs-string">&quot;弹窗单行显示内容&quot;</span>,65,<span class="hljs-string">&quot;弹窗的标题&quot;</span>)(window.close)::多行显示文本可在文本中使用vbCrLf或vbNewLine<span class="hljs-built_in">set</span> msg=<span class="hljs-string">&quot;多行显示vbCrLf这是第二行vbNewLine这是第三行&quot;</span>mshta vbscript:msgbox(Replace(Replace(%msg%,<span class="hljs-string">&quot;vbCrLf&quot;</span>,vbCrLf),<span class="hljs-string">&quot;vbNewLine&quot;</span>,vbNewLine),6,<span class="hljs-string">&quot;自定义标题&quot;</span>)(window.close)MsgBox的button参数取值如下：0 = vbOKOnly - 只显示确定按钮。1 = vbOKCancel - 显示确定和取消按钮。2 = vbAbortRetryIgnore - 显示放弃、重试和忽略按钮。3 = vbYesNoCancel - 显示是、否和取消按钮。4 = vbYesNo - 显示是和否按钮。5 = vbRetryCancel - 显示重试和取消按钮。16 = vbCritical - 显示临界信息图标。32 = vbQuestion - 显示警告查询图标。48 = vbExclamation - 显示警告消息图标。64 = vbInformation - 显示信息消息图标。0 = vbDefaultButton1 - 第一个按钮为默认按钮。256 = vbDefaultButton2 - 第二个按钮为默认按钮。512 = vbDefaultButton3 - 第三个按钮为默认按钮。768 = vbDefaultButton4 - 第四个按钮为默认按钮。0 = vbApplicationModal - 应用程序模式：用户必须响应消息框才能继续在当前应用程序中工作。4096 = vbSystemModal - 系统模式：在用户响应消息框前，所有应用程序都被挂起。注意：第一组值 (0 - 5) 用于描述对话框中显示的按钮类型与数目；第二组值 (16, 32, 48, 64) 用于描述图标的样式；第三组值 (0, 256, 512) 用于确定默认按钮；第四组值 (0, 4096) 则决定消息框的样式。在将这些数字相加以生成 buttons 参数值时，只能从每组值中取用一个数字。</code></pre></div><h4 id="参考链接">参考链接</h4><p><ahref="https://www.jb51.net/article/245233.htm">bat脚本常用命令及亲测示例代码超详细讲解</a><ahref="https://blog.csdn.net/qq_43331089/article/details/124222342">Bat文件的创建及其命令大全</a></p>]]></content>
      
      
      <categories>
          
          <category> 其它 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> bat </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hexo和Github Pages搭建个人博客</title>
      <link href="/2023/04/12/Hexo%E5%92%8CGithub-Pages%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/"/>
      <url>/2023/04/12/Hexo%E5%92%8CGithub-Pages%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/</url>
      
        <content type="html"><![CDATA[<h3 id="前言">1. 前言</h3><hr /><p>目前网上有很多第三方博客类型，像博客园，CSDN，简书，知乎等。也可以自己搭建个人技术博客，这里以Hexo+GithubPages为例搭建个人博客。Hexo是一个简单、快速、强大的基于Node.js的静态博客发布工具，支持Markdown格式，有众多优秀插件和主题。GithubPages 是 Github提供的一种免费的静态网页托管服务，可以用来托管博客、项目官网等静态网页。搭建步骤如下：</p><h3 id="开发环境">2. 开发环境</h3><hr /><p>需要安装开发环境<a href="https://nodejs.org/zh-cn">Node.js</a>和<ahref="https://git-scm.com/downloads">git</a></p><h4id="section"><img src="https://gitee.com/kayoungzhang/picgo_res/raw/master/img/image-20230412203324937.png" alt="image-20230412203324937" style="zoom: 67%;" /></h4><h4id="section-1"><img src="https://gitee.com/kayoungzhang/picgo_res/raw/master/img/image-20230412203447726.png" alt="image-20230412203447726" style="zoom: 67%;" /></h4><p>安装完成后，在桌面右键选择 <code>Git Bash Here</code>，命令窗口打开后，分别输入<code>git --version</code>,<code>node -v</code>, <code>npm -v</code>,如果弹出对应的版本号，则说明安装正确，否则，需要查找原因。<img src="https://gitee.com/kayoungzhang/picgo_res/raw/master/img/image-20230412203622210.png" alt="image-20230412203622210" style="zoom:67%;" /></p><h3 id="安装-hexo">3. 安装 Hexo</h3><hr /><p>在你的电脑上创建一个博客文件夹，如：<code>F:\Blog</code>,进入此文件夹，右键打开<code>Git Bash Here</code>,依次输入</p><div class="code-wrapper"><pre><code class="hljs yaml"><span class="hljs-string">npm</span> <span class="hljs-string">install</span> <span class="hljs-string">hexo-cli</span> <span class="hljs-string">-g</span>  <span class="hljs-comment"># 安装hexo</span><span class="hljs-string">hexo</span> <span class="hljs-string">init</span>                <span class="hljs-comment"># 初始化，安装所需包</span><span class="hljs-string">npm</span> <span class="hljs-string">install</span>              <span class="hljs-comment"># 新版本的Hexo在初始化时就安装好了依赖包</span><span class="hljs-string">hexo</span> <span class="hljs-string">g</span>                   <span class="hljs-comment"># 生成</span><span class="hljs-string">hexo</span> <span class="hljs-string">s</span>                   <span class="hljs-comment"># 启动本地服务</span></code></pre></div><p>打开浏览器访问 <code>http://localhost:4000</code>即可看到博客网页内容。第一次初始化的时候hexo已经帮我们写了一篇名为 HelloWorld 的文章。</p><h3 id="配置ssh-key">4. 配置SSH key</h3><hr /><p>ssh key用来解决本地和服务器的连接访问github权限问题。</p><h4 id="本地生成密钥对">4.1 本地生成密钥对</h4><p>在git bash命令行中执行 <code>cd ~/.ssh</code>, 如果弹出<code>No such file or directory</code>,说明你是第一次使用git。需要生成sshkey,否则说明你已经配置了SSH key，不需要再次操作。 在命令行中执行 ：</p><div class="code-wrapper"><pre><code class="hljs c">git config --global user.name <span class="hljs-string">&quot;填入你的github用户名&quot;</span>git config --global user.email <span class="hljs-string">&quot;填入你的email地址&quot;</span>ssh-keygen -t rsa -C <span class="hljs-string">&quot;填入你的email地址&quot;</span></code></pre></div><p>连续三次回车，最终会在用户目录下生成文件，在用户目录下（C:）找到<code>.ssh\id_rsa.pub</code>文件，用记事本打开并复制里面的所有内容。</p><h4 id="添加公钥到github">4.2 添加公钥到Github</h4><p>打开你的github主页，进入Settings -&gt; SSH and GPG keys -&gt; New SSHkey：<img src="https://gitee.com/kayoungzhang/picgo_res/raw/master/img/image-20230412203930192.png" alt="image-20230412203930192" style="zoom:67%;" /></p><p>添加完成后，还需要确认并添加主机到本机SSH可信列表，在 git bash中输入<code>ssh -T git@github.com</code> ,若返回<code>Hi xxx! You've successfully authenticated, but GitHub does not provide shell access.</code>则证明添加成功。</p><h3 id="创建github远程仓库并与本地blog仓库关联">5.创建github远程仓库，并与本地blog仓库关联</h3><hr /><p>进入你的github主页，创建一个新的仓库，因为Github仅能使用一个同名仓库的代码托管一个静态站点，所以Repository名字必须是<strong>你的Github名.github.io</strong>，比如我的是<code>KayoungZhang.github.io</code></p><p><img src="https://gitee.com/kayoungzhang/picgo_res/raw/master/img/image-20230412204212914.png" alt="image-20230412204212914" style="zoom: 67%;" /></p><p>打开本地blog仓库中配置文件 **_config.yml**，在末尾添加：</p><div class="code-wrapper"><pre><code class="hljs yaml"><span class="hljs-attr">deploy:</span><span class="hljs-attr">type:</span> <span class="hljs-string">git</span><span class="hljs-attr">repository:</span> <span class="hljs-string">git@github.com:你的用户名/你的用户名.github.io.git</span><span class="hljs-comment">#上一步的Github仓库地址，项目主页点SSH再复制url，不要采用http形式的url</span><span class="hljs-attr">branch:</span> <span class="hljs-string">main</span><span class="hljs-comment">#填写远程仓库的分支名，新版本默认是main分支，老版本是master分支</span></code></pre></div><p>在blog文件夹中打开git bash命令行，安装hexo部署插件，然后进行部署。</p><div class="code-wrapper"><pre><code class="hljs yaml"><span class="hljs-string">npm</span> <span class="hljs-string">install</span> <span class="hljs-string">hexo-deployer-git</span> <span class="hljs-string">--save</span><span class="hljs-string">hexo</span> <span class="hljs-string">d</span></code></pre></div><p>在浏览器中输入网址： <strong>你的用户名.github.io</strong>，即可查看到网页。一般来说如果出现莫名的问题，按照以下步骤来解决。</p><div class="code-wrapper"><pre><code class="hljs yaml"><span class="hljs-string">删除本地blog仓库中.deploy_git文件夹</span><span class="hljs-string">git</span> <span class="hljs-string">bash中执行命令</span> <span class="hljs-string">hexo</span> <span class="hljs-string">clean</span><span class="hljs-string">hexo</span> <span class="hljs-string">g</span><span class="hljs-string">hexo</span> <span class="hljs-string">d</span></code></pre></div><p><img src="https://gitee.com/kayoungzhang/picgo_res/raw/master/img/image-20230412204326064.png" alt="image-20230412204326064" style="zoom: 50%;" /></p><h3 id="写博客">6. 写博客</h3><hr /><p>在本地blog仓库中，打开<code>git bash</code>，执行命令<code>hexo new 'my-first-blog'</code>(my-first-blog是文件名)，hexo会帮我们在<code>source/_posts</code>下生成<strong>my-first-blog.md</strong>文件，打开文件，hexo自动添加了一些说明的文件头，后面只需要自己添加文章内容即可。写完后，执行以下命令完成网页上传部署，一般情况下编辑文章中的图片在网页上会无法正常显示，需要图床，将图片上传到网上，同时在主题目录下<strong>head.jade</strong>文件中添加<code>&lt;meta name="referrer" content="no-referrer" /&gt;</code>，具体操作和原因，参看博客<a href="https://zhuanlan.zhihu.com/p/102594554">PicGo +Gitee(码云)实现markdown图床</a>，<ahref="https://www.cnblogs.com/selier/archive/2018/09/01/9570650.html">Hexo使用细节及各种问题</a></p><div class="code-wrapper"><pre><code class="hljs yaml"><span class="hljs-string">hexo</span> <span class="hljs-string">clean</span><span class="hljs-string">hexo</span> <span class="hljs-string">g</span> <span class="hljs-string">-d</span></code></pre></div><h3 id="个性化你的博客">7. 个性化你的博客</h3><hr /><h4 id="更换主题">7.1 更换主题</h4><p>默认主题不好看，可以进入 <ahref="https://hexo.io/themes/">hexo主题官网</a>选择自己喜欢的主题，进行更改。这里以 <strong>beautiful-hexo</strong>主题为例。进入本地blog文件夹中，右键打开 <code>Git Bash Here</code>,根据选择主题的 <strong>README.md</strong>文件执行相应命令:</p><div class="code-wrapper"><pre><code class="hljs yaml"><span class="hljs-string">npm</span> <span class="hljs-string">install</span> <span class="hljs-string">--save</span> <span class="hljs-string">hexo-generator-archive</span> <span class="hljs-string">hexo-renderer-jade</span> <span class="hljs-string">hexo-generator-tag</span> <span class="hljs-string">hexo-generator-feed</span> <span class="hljs-string">hexo-generator-sitemap</span> <span class="hljs-string">hexo-browsersync</span> <span class="hljs-string">git</span> <span class="hljs-string">clone</span> <span class="hljs-string">--depth</span> <span class="hljs-number">1</span> <span class="hljs-string">https://github.com/twoyao/beautiful-hexo.git</span> <span class="hljs-string">themes/beautiful-hexo</span></code></pre></div><p>在blog文件夹中找到配置文件 **_config.yml** ,使用记事本打开，找到<strong>theme: landscape</strong> , 将 <strong>landscape</strong>改为<strong>beautiful-hexo</strong>,保存后，执行命令<code>hexo clean</code>, 清理一下public的内容，然后执行<code>hexo g</code>来重新生成, 最后打开本地服务器，执行<code>hexo s</code> ,打开浏览器就会看到新的主题界面。</p><figure><imgsrc="https://gitee.com/kayoungzhang/picgo_res/raw/master/img/image-20230413074402552.png"alt="image-20230413074402552" /><figcaption aria-hidden="true">image-20230413074402552</figcaption></figure><h4 id="主题配置">7.2 主题配置</h4><p>打开<strong>主题目录</strong>下的配置文件**_config.yml**，可以进行自修改，不使用的功能进行注释（语句前添加#）</p><div class="code-wrapper"><pre><code class="hljs yaml"><span class="hljs-attr">header:</span>   <span class="hljs-attr">title:</span> <span class="hljs-string">&quot;Beautiful Hexo&quot;</span>   <span class="hljs-attr">motto:</span> <span class="hljs-string">不积跬步无以至千里，不积小流无以成江海</span>   <span class="hljs-attr">bigimgs:</span>       <span class="hljs-bullet">-</span> <span class="hljs-attr">src:</span> <span class="hljs-string">/bigimgs/01.jpg</span>         <span class="hljs-attr">desc:</span> <span class="hljs-string">beautiful</span> <span class="hljs-string">island</span>       <span class="hljs-bullet">-</span> <span class="hljs-attr">src:</span> <span class="hljs-string">/bigimgs/02.jpg</span>         <span class="hljs-attr">desc:</span> <span class="hljs-string">Tropical</span> <span class="hljs-string">Fish</span>       <span class="hljs-bullet">-</span> <span class="hljs-attr">src:</span> <span class="hljs-string">/bigimgs/03.jpg</span>         <span class="hljs-attr">desc:</span> <span class="hljs-string">ocean</span><span class="hljs-attr">mail:</span>  <span class="hljs-attr">link:</span> <span class="hljs-string">&#x27;mailto:zky0830@163.com&#x27;</span>  <span class="hljs-attr">title:</span> <span class="hljs-string">Email</span> <span class="hljs-string">me</span>  <span class="hljs-attr">icon:</span> <span class="hljs-string">fa-envelope</span>  <span class="hljs-attr">enable:</span> <span class="hljs-literal">true</span><span class="hljs-attr">wechat:</span>  <span class="hljs-attr">link:</span> <span class="hljs-string">&#x27;/wechat.png&#x27;</span> <span class="hljs-comment">#将图片放到source目录下</span>  <span class="hljs-attr">title:</span> <span class="hljs-string">Wechat</span>  <span class="hljs-attr">icon:</span> <span class="hljs-string">fa-wechat</span>  <span class="hljs-attr">enable:</span> <span class="hljs-literal">true</span></code></pre></div><h4 id="全局配置">7.3 全局配置</h4><p>打开配置文件 <code>_config.yml</code>，修改相应内容：</p><div class="code-wrapper"><pre><code class="hljs yaml"><span class="hljs-comment"># Site</span><span class="hljs-attr">title:</span> <span class="hljs-string">My</span> <span class="hljs-string">Tech</span> <span class="hljs-string">Blog</span> <span class="hljs-comment">#主页标题</span><span class="hljs-attr">subtitle:</span> <span class="hljs-string">&#x27;&#x27;</span> <span class="hljs-comment">#副标题</span><span class="hljs-attr">description:</span> <span class="hljs-string">&#x27;&#x27;</span> <span class="hljs-comment">#网站描述</span><span class="hljs-attr">keywords:</span><span class="hljs-attr">author:</span> <span class="hljs-string">KayoungZhang</span> <span class="hljs-comment">#作者</span><span class="hljs-attr">language:</span> <span class="hljs-string">zh-cn</span> <span class="hljs-comment">#可根据themes主题中language选择相应语言</span><span class="hljs-attr">timezone:</span> <span class="hljs-string">&#x27;&#x27;</span><span class="hljs-comment"># URL</span><span class="hljs-comment">## Set your site url here. For example, if you use GitHub Page, set url as &#x27;https://username.github.io/project&#x27;</span><span class="hljs-attr">url:</span> <span class="hljs-string">https://KayoungZhang.github.io</span> <span class="hljs-comment">#项目的 GitHub Pages网址</span><span class="hljs-attr">permalink:</span> <span class="hljs-string">:year/:month/:day/:title/</span><span class="hljs-attr">permalink_defaults:</span><span class="hljs-attr">pretty_urls:</span>  <span class="hljs-attr">trailing_index:</span> <span class="hljs-literal">true</span> <span class="hljs-comment"># Set to false to remove trailing &#x27;index.html&#x27; from permalinks</span>  <span class="hljs-attr">trailing_html:</span> <span class="hljs-literal">true</span> <span class="hljs-comment"># Set to false to remove trailing &#x27;.html&#x27; from permalinks</span><span class="hljs-comment">#自定义站点内容搜索，需要安装插件：</span><span class="hljs-comment"># npm install hexo-generator-search --save</span><span class="hljs-attr">search:</span>  <span class="hljs-attr">path:</span> <span class="hljs-string">search.xml</span>  <span class="hljs-attr">field:</span> <span class="hljs-string">all</span> <span class="hljs-comment"># 如果只索引文章，可设置为post</span></code></pre></div><h4 id="创建文档标签和分类">7.4 创建文档、标签和分类</h4><p>创建标签和分类是为了便于管理和查找，为了给文章自动添加标识，比较方便的做法是，打开<strong>scaffolds</strong>目录下的<strong>post.md</strong>文档，添加<code>tags: 和 categories:</code></p><div class="code-wrapper"><pre><code class="hljs yaml"><span class="hljs-meta">---</span><span class="hljs-attr">title:</span> &#123;&#123; <span class="hljs-string">title</span> &#125;&#125;<span class="hljs-attr">date:</span> &#123;&#123; <span class="hljs-string">date</span> &#125;&#125;<span class="hljs-attr">tags:</span><span class="hljs-attr">categories:</span><span class="hljs-meta">---</span></code></pre></div><p>这样以后创建文档，它就会自动在文档开头添加标识，你只需要在相应标识下添加分类和标签（以<code>-</code>+空格开头）即可，注意：hexo一篇文章只能属于一个分类，不会产生两个分类，而是把分类嵌套。如下：</p><div class="code-wrapper"><pre><code class="hljs yaml"><span class="hljs-attr">title:</span> <span class="hljs-string">Hexo和Github</span> <span class="hljs-string">Pages搭建个人博客</span><span class="hljs-attr">date:</span> <span class="hljs-number">2023-04-12 18:57:46</span><span class="hljs-attr">tags:</span> <span class="hljs-bullet">-</span> <span class="hljs-string">hexo</span> <span class="hljs-bullet">-</span> <span class="hljs-string">入门</span><span class="hljs-attr">categories:</span>  <span class="hljs-bullet">-</span> <span class="hljs-string">Blog</span></code></pre></div><p>进入本地blog仓库，打开<code>git bash</code>，通过不同的命令，创建相应的内容。</p><h5 id="创建文章">7.4.1 创建文章</h5><div class="code-wrapper"><pre><code class="hljs yaml"><span class="hljs-string">hexo</span> <span class="hljs-string">new</span> <span class="hljs-string">&quot;填入你的文章名&quot;</span></code></pre></div><p>在<code>source/_posts</code>目录下就会生成创建的文档，打开进行写作即可。</p><h5 id="创建标签">7.4.2 创建标签</h5><div class="code-wrapper"><pre><code class="hljs yaml"><span class="hljs-string">hexo</span> <span class="hljs-string">new</span> <span class="hljs-string">page</span> <span class="hljs-string">tags</span></code></pre></div><p>在<strong>source/tags/</strong>目录下会生成<strong>index.md</strong>文档，打开此文档，添加<code>layout: "tags"</code>到文档中保存退出，如：</p><div class="code-wrapper"><pre><code class="hljs yaml"><span class="hljs-meta">---</span><span class="hljs-attr">title:</span> <span class="hljs-string">tags</span><span class="hljs-attr">date:</span> <span class="hljs-number">2023-04-12 11:12:33</span><span class="hljs-attr">layout:</span> <span class="hljs-string">&quot;tags&quot;</span><span class="hljs-meta">---</span></code></pre></div><p>要想在主页显示标签栏，需要进入主题配置文件<code>_config.yml</code>，添加标签栏</p><div class="code-wrapper"><pre><code class="hljs yaml"><span class="hljs-attr">navbar-links:</span><span class="hljs-string">...</span><span class="hljs-attr">Tags:</span> <span class="hljs-string">/tags</span></code></pre></div><p>点击首页的 “tags”可以看到该标签页下的所有文章。当然，只有文章中添加了tag属性的才会被收录到首页的“标签” 中。</p><h5 id="创建分类">7.4.3 创建分类</h5><div class="code-wrapper"><pre><code class="hljs yaml"><span class="hljs-string">hexo</span> <span class="hljs-string">new</span> <span class="hljs-string">page</span> <span class="hljs-string">categories</span></code></pre></div><p>在<strong>source/categories</strong>目录下生成的<strong>index.md</strong>文档，打开文档，添加<code>layout: "categories"</code>到内容中,保存退出，如：</p><div class="code-wrapper"><pre><code class="hljs yaml"><span class="hljs-meta">---</span><span class="hljs-attr">title:</span> <span class="hljs-string">categories</span><span class="hljs-attr">date:</span> <span class="hljs-number">2023-04-12 19:05:47</span><span class="hljs-attr">layout:</span> <span class="hljs-string">&quot;categories&quot;</span><span class="hljs-meta">---</span></code></pre></div><p>同理，要想在主页显示分类栏，需要进入主题配置文件<code>_config.yml</code>，添加分类栏：</p><div class="code-wrapper"><pre><code class="hljs yaml"><span class="hljs-attr">navbar-links:</span>  <span class="hljs-string">...</span>  <span class="hljs-attr">Categories:</span> <span class="hljs-string">/categories</span></code></pre></div><p>对于<strong>beautiful-hexo</strong>主题，还需要在主题的<strong>layout</strong>目录下创建<strong>categories.jade</strong>文件，内容如下（<em>因为不会前端知识，所以根据tags.jade编写</em>）：</p><div class="code-wrapper"><pre><code class="hljs yaml"><span class="hljs-string">extends</span> <span class="hljs-string">partial/base</span><span class="hljs-string">block</span> <span class="hljs-string">header</span>    <span class="hljs-string">header.header-section</span>        <span class="hljs-string">.intro-header.no-img</span><span class="hljs-string">block</span> <span class="hljs-string">content</span>    <span class="hljs-string">.container</span>        <span class="hljs-string">.row</span>            <span class="hljs-string">.col-lg-6.col-lg-offset-3.col-md-10.col-md-offset-1</span>                <span class="hljs-bullet">-</span> <span class="hljs-string">site.categories.map(function(category)</span> &#123;                      <span class="hljs-string">if</span> <span class="hljs-string">category.posts.length</span> <span class="hljs-string">&gt;</span> <span class="hljs-number">0</span>                        <span class="hljs-string">ul.archive-list</span>                            <span class="hljs-string">span.fa.fa-category.listing-seperator(id=category.name</span>, <span class="hljs-string">style=&quot;font-size:</span> <span class="hljs-number">1.</span><span class="hljs-string">17em;&quot;)</span>                            <span class="hljs-string">span(style=&quot;font-size:</span> <span class="hljs-number">1.</span><span class="hljs-string">5em;</span> <span class="hljs-attr">font-weight:</span> <span class="hljs-string">bold;</span> <span class="hljs-attr">margin-left:</span> <span class="hljs-string">5px;&quot;)=</span> <span class="hljs-string">category.name</span>                            <span class="hljs-bullet">-</span> <span class="hljs-string">category.posts.map(function(post)</span> &#123;                                <span class="hljs-string">li.col-lg-offset-1.col-md-offset-1</span>                                    <span class="hljs-string">span.post-meta=</span> <span class="hljs-string">full_date(post.date</span>, <span class="hljs-string">&#x27;MMM D&#x27;</span><span class="hljs-string">)</span>                                    <span class="hljs-string">a.post-title(href=url_for(post.path))=</span> <span class="hljs-string">post.title</span>                            <span class="hljs-bullet">-</span> &#125;<span class="hljs-string">)</span>                <span class="hljs-bullet">-</span> &#125;<span class="hljs-string">)</span></code></pre></div><p>点击首页的 “categories” 可以看到该分类下的所有文章。 参考博客：<ahref="https://www.baidu.com/link?url=jNXzClJm8Ve2gFpOPz9vyfQiMfkrP7icKAOSfJyszHlh2vGqYoCZ9YDXU5T1aZj86pjyFXrf4lrjp6Mwj80qSa&amp;wd=&amp;eqid=f4337b38000dc2e90000000664376496">使用Hexo创建文章、标签和分类</a></p><h3 id="hexo博客同时发布到github和gitee">8.Hexo博客同时发布到github和gitee</h3><hr /><p>因为github服务器在国外，所以打开网页比较慢，国内的giteepages具有同样的部署功能，打开网页就会更快一些，所以可以将hexo博客同步到gitee上，它的部署发布与github差不多，不再过多赘述，具体参照这篇博客：<ahref="https://blog.csdn.net/qq_23858785/article/details/123104823">hexo博客同时发布到github和gitee</a></p><p>本地博客文件同时上传到github和gitee：<ahref="https://blog.csdn.net/yilovexing/article/details/107226141">如何将一个项目同时提交到GitHub和Gitee(码云)两个仓库</a></p><h3 id="多台设备同步更新hexo博客">9. 多台设备同步更新Hexo博客</h3><hr /><p>真正的原始Hexo博客内容在我们的电脑本地，上传到网页上的内容是public文件夹里面的静态内容，有的时候写文章需要在不同的电脑上操作，这样就需要博客项目在不同设备间的迁移与同步，具体操作参照博客：<ahref="https://blog.csdn.net/K1052176873/article/details/122879462">Hexo在多台电脑上提交和更新</a><ahref="https://blog.csdn.net/qq_30105599/article/details/118302086">多台电脑同步更新Hexo博客</a></p><h3 id="参考链接">参考链接</h3><hr /><p><a href="https://hexo.io/zh-cn/docs/">Hexo官方文档</a> <ahref="https://segmentfault.com/a/1190000017986794">超详细Hexo+GithubPage搭建技术博客教程</a> <ahref="https://lovenight.github.io/2015/11/10/Hexo-3-1-1-静态博客搭建指南/?">Hexo3.1.1静态博客搭建指南</a></p>]]></content>
      
      
      <categories>
          
          <category> 教程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> hexo </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
